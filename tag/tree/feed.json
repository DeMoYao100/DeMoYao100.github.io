{
    "version": "https://jsonfeed.org/version/1",
    "title": "Moyao の小屋 • All posts by \"tree\" tag",
    "description": "Write down something interesting I met<br />\nFeel free to mail me if you have something wanted to talk about, plz\nmail: &lt;moyaoxue@outlook.com&gt;\n",
    "home_page_url": "https://demoyao100.github.io",
    "items": [
        {
            "id": "https://demoyao100.github.io/%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD2024%E5%86%B3%E8%B5%9B/",
            "url": "https://demoyao100.github.io/%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD2024%E5%86%B3%E8%B5%9B/",
            "title": "数字中国2024决赛",
            "date_published": "2024-05-27T01:19:18.000Z",
            "content_html": "<span id=\"more\"></span>\n<h4 id=\"hardtree\"><a class=\"markdownIt-Anchor\" href=\"#hardtree\">#</a> Hardtree</h4>\n<p>其实就是每个节点有左右两子树，一个值，通过 lr 选择左右子树达到终点，搜索即可</p>\n<p><img src=\"/%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD2024%E5%86%B3%E8%B5%9B/image-20240527154106318.png\" alt=\"image-20240527154106318\"></p>\n<p>这里做后面解法，目前给出三种方法：</p>\n<ol>\n<li>\n<p>跑起来直接 dump 堆，这种是最简单的获取数据的方法</p>\n</li>\n<li>\n<p>ida python 打印函数参数和返回值获取（这个不太行其实，数量太大速率提不上来）</p>\n</li>\n<li>\n<p>unicorn 模拟，短时间也同样跑不出来，还是数据太长，而且栈爆了，不过思路是提供这么个思路</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> unicorn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> unicorn<span class=\"token punctuation\">.</span>x86_const <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> capstone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>REAL_BASE_OFFSET <span class=\"token operator\">=</span> <span class=\"token number\">0x400</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>md <span class=\"token operator\">=</span> Cs<span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lld <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>left_son <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>right_son <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hookDbgPrint</span><span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">,</span>address<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>user_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">global</span> lld<span class=\"token punctuation\">,</span> left_son<span class=\"token punctuation\">,</span> right_son<span class=\"token punctuation\">,</span> value</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    code <span class=\"token operator\">=</span> mu<span class=\"token punctuation\">.</span>mem_read<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># for instruction in md.disasm(code, address):</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">#     print(\"0x%x: %s %s\" % (instruction.address, instruction.mnemonic, instruction.op_str))</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address <span class=\"token operator\">==</span> <span class=\"token number\">0x130A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        left_son <span class=\"token operator\">=</span> mu<span class=\"token punctuation\">.</span>mem_read<span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_X86_REG_RDI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        right_son <span class=\"token operator\">=</span> mu<span class=\"token punctuation\">.</span>mem_read<span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_X86_REG_RSI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        value <span class=\"token operator\">=</span> mu<span class=\"token punctuation\">.</span>mem_read<span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_X86_REG_EDX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address <span class=\"token operator\">==</span> <span class=\"token number\">0x132B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        mu<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_X86_REG_RAX<span class=\"token punctuation\">,</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0xeeeeee</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self <span class=\"token operator\">=</span> mu<span class=\"token punctuation\">.</span>mem_read<span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">.</span>reg_read<span class=\"token punctuation\">(</span>UC_X86_REG_RAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\"># print(self,left_son)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        lld<span class=\"token punctuation\">[</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>left_son<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>right_son<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hookSYS</span><span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">,</span>address<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>user_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    code <span class=\"token operator\">=</span> mu<span class=\"token punctuation\">.</span>mem_read<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\"># print(code)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span> instruction <span class=\"token keyword\">in</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\"># print(type(instruction.mnemonic))</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'call'</span> <span class=\"token keyword\">in</span> instruction<span class=\"token punctuation\">.</span>mnemonic <span class=\"token keyword\">and</span> <span class=\"token string\">'0x1110'</span> <span class=\"token keyword\">in</span> instruction<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\"># print('malloc hooked')</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            mu<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_X86_REG_RIP<span class=\"token punctuation\">,</span> address <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hookEND</span><span class=\"token punctuation\">(</span>mu <span class=\"token punctuation\">:</span> Uc<span class=\"token punctuation\">,</span>address<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>user_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">global</span> lld</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address <span class=\"token operator\">==</span> <span class=\"token number\">0x7522E8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lld'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>lld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        mu<span class=\"token punctuation\">.</span>emu_stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>mu <span class=\"token operator\">=</span> Uc <span class=\"token punctuation\">(</span>UC_ARCH_X86<span class=\"token punctuation\">,</span> UC_MODE_64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>BASE <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>STACK_ADDR <span class=\"token operator\">=</span> <span class=\"token number\">0x1000000</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>STACK_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">0x1000</span><span class=\"token operator\">*</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>mu<span class=\"token punctuation\">.</span>mem_map<span class=\"token punctuation\">(</span>BASE<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token operator\">*</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>mu<span class=\"token punctuation\">.</span>mem_map<span class=\"token punctuation\">(</span>STACK_ADDR<span class=\"token punctuation\">,</span> STACK_SIZE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>mu<span class=\"token punctuation\">.</span>mem_write<span class=\"token punctuation\">(</span>BASE<span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">(</span><span class=\"token string\">\"./HardTree\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>mu<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_X86_REG_RBP<span class=\"token punctuation\">,</span> STACK_ADDR <span class=\"token operator\">+</span> STACK_SIZE <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>mu<span class=\"token punctuation\">.</span>reg_write<span class=\"token punctuation\">(</span>UC_X86_REG_RSP<span class=\"token punctuation\">,</span> STACK_ADDR <span class=\"token operator\">+</span> STACK_SIZE <span class=\"token operator\">//</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>mu<span class=\"token punctuation\">.</span>hook_add<span class=\"token punctuation\">(</span>UC_HOOK_CODE<span class=\"token punctuation\">,</span>hookDbgPrint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>mu<span class=\"token punctuation\">.</span>hook_add<span class=\"token punctuation\">(</span>UC_HOOK_CODE<span class=\"token punctuation\">,</span>hookEND<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>mu<span class=\"token punctuation\">.</span>hook_add<span class=\"token punctuation\">(</span>UC_HOOK_CODE<span class=\"token punctuation\">,</span>hookSYS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>mu<span class=\"token punctuation\">.</span>emu_start<span class=\"token punctuation\">(</span><span class=\"token number\">0x752427</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x75243A</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "tree"
            ]
        }
    ]
}