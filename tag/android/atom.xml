<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://demoyao100.github.io</id>
    <title>Moyao の小屋 • Posts by &#34;android&#34; tag</title>
    <link href="https://demoyao100.github.io" />
    <updated>2024-03-28T12:57:57.000Z</updated>
    <category term="re" />
    <category term="Android" />
    <category term="开发" />
    <category term="codeforces" />
    <category term="cv" />
    <category term="docker" />
    <category term="驱动" />
    <category term="electron" />
    <category term="杂文" />
    <category term="web" />
    <category term="IOT" />
    <category term="web shiro" />
    <category term="jail" />
    <category term="re Android linux" />
    <category term="hexo" />
    <category term="re Android" />
    <category term="python" />
    <category term="car" />
    <entry>
        <id>https://demoyao100.github.io/2024/03/28/ACTF-flutter%E5%A4%8D%E7%8E%B0/</id>
        <title>ACTF flutter复现</title>
        <link rel="alternate" href="https://demoyao100.github.io/2024/03/28/ACTF-flutter%E5%A4%8D%E7%8E%B0/"/>
        <content type="html">&lt;h6 id=&#34;rpeface写一个flutter程序以后自己逆逆呗一看刚好有个高版本flutter的题没复现~&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rpeface写一个flutter程序以后自己逆逆呗一看刚好有个高版本flutter的题没复现~&#34;&gt;#&lt;/a&gt; RPEFACE：写一个 flutter 程序以后自己逆逆呗，一看刚好有个高版本 flutter 的题没复现～&lt;/h6&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="re" />
        <category term="Android" />
        <updated>2024-03-28T12:57:57.000Z</updated>
    </entry>
    <entry>
        <id>https://demoyao100.github.io/2023/11/29/arm%E5%88%9D%E6%8E%A2/</id>
        <title>arm初探</title>
        <link rel="alternate" href="https://demoyao100.github.io/2023/11/29/arm%E5%88%9D%E6%8E%A2/"/>
        <content type="html">&lt;h6 id=&#34;preface之前猜猜查查的感觉不彳亍了这下不得不和arm爆了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#preface之前猜猜查查的感觉不彳亍了这下不得不和arm爆了&#34;&gt;#&lt;/a&gt; PREFACE：之前猜猜查查的，感觉不彳亍了，这下不得不和 arm 爆了！&lt;/h6&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;架构介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构介绍&#34;&gt;#&lt;/a&gt; 架构介绍&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/29/arm%E5%88%9D%E6%8E%A2/V5_to_V8_Architecture.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/29/arm%E5%88%9D%E6%8E%A2/evolution_arm_arch.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;架构层级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构层级&#34;&gt;#&lt;/a&gt; 架构层级&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;EL0: 无特权模式 (unprivileged)&lt;/li&gt;
&lt;li&gt;EL1: 作业系統核心模式 (OS kernel mode)&lt;/li&gt;
&lt;li&gt;EL2: 虚拟机器监视器模式 (Hypervisor mode)&lt;/li&gt;
&lt;li&gt;EL3: TrustZone(monitor mode)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要提升到较高层级需要透过 exceptions (如：中断、page faults 等)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EL0 =&amp;gt; EL1: SVC (system call)&lt;/li&gt;
&lt;li&gt;EL1 =&amp;gt; EL2: HVC (hypervisor call)&lt;/li&gt;
&lt;li&gt;EL2 =&amp;gt; EL3: SMC (secure monitor call)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在转换时会将返回地址 (return address) 记录在例外连结寄存器 ELR (Exception-Link-Register)。&lt;/p&gt;
&lt;p&gt;每个 EL 会有个别的 SP (stack pointer)&lt;/p&gt;
&lt;p&gt;根据目前架构，由下层系統的 Execution State 決定上层系统所在模式&lt;/p&gt;
&lt;p&gt;若下层系統为 32bits 則上层只能为 32bits，反之若为 64bits 則上层可为 32bits or 64bits&lt;/p&gt;
&lt;h5 id=&#34;安全性状态-security-state&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全性状态-security-state&#34;&gt;#&lt;/a&gt; 安全性状态 (Security state)&lt;/h5&gt;
&lt;p&gt;ARMv8-A 架构提供两种安全性状态，他们有个别的实体记忆体定址空间 (Secure physical address space)。&lt;/p&gt;
&lt;p&gt;安全状态 (Secure state): PE 可以存取安全及不安全的实体定址空间，有 EL0.EL1.EL3&lt;/p&gt;
&lt;p&gt;不安全状态 (Non-Secure state): 只能存取不安全的实体定址空间，有 EL0.EL1.EL2&lt;/p&gt;
&lt;h5 id=&#34;虚拟化-virtualization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟化-virtualization&#34;&gt;#&lt;/a&gt; 虚拟化 (Virtualization)&lt;/h5&gt;
&lt;p&gt;这边提到的虚拟化为有实现 EL2 架构的系统。以下为其基础模型: (manual D1.5 Virtualization)&lt;/p&gt;
&lt;p&gt;一个跑在 EL2 的 Hypervisor 负责切换跑在 EL1、EL0 的 virtual machines 一些跑在 virtual machines 上 (在 EL1 中) 的 Guest OS 每个 Guest OS 上跑在 EL0 的应用程序 每个 VM 会被 Hypervisor 指定一个 VMID。&lt;/p&gt;
&lt;p&gt;EL2 只会实现在 Non-secure state，并负责:&lt;/p&gt;
&lt;p&gt;提供虚拟值给少数特定的暂存器 (1)。Guest OS 或其上的应用程序读取这些暂存器时会得到虚拟的值。 Trapping: 当在做记忆体管理及存取其他大多数的暂存器 ((1) 之外的) 时会产生 exception 并由 EL2 处理。 Routing interrupt: 将中断分配给 现在的 Guest OS 现在没在执行的 Guest OS hypervisor (以上会在各别的章节特别探讨) 实现 EL2 包含以下实作:&lt;/p&gt;
&lt;p&gt;Hypervisor Call (HVC) exception Traps to EL2 虚拟中断：包括: Virtual SError Virtual IRQ Virtual FIQ 所有虚拟中断会由 EL1 处理 每个虚拟中断可由 EL2 各别启用 每个虚拟中断都会有其对应的实体中断 当一个虚拟中断被启用时，其对应的实体中断会由 EL2 处理 (除非 EL3 指定他要处理)&lt;/p&gt;
&lt;p&gt;偷了个，基本上简单入门够了&lt;/p&gt;
&lt;h6 id=&#34;arm内核寄存器以及常用汇编指令分析-知乎-zhihucom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arm内核寄存器以及常用汇编指令分析-知乎-zhihucom&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://zhuanlan.zhihu.com/p/102395838&#34;&gt;【ARM】内核寄存器以及常用汇编指令分析 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;https://azeria-labs.com/arm-data-types-and-registers-part-2/&#34;&gt;ARM Data Types and Registers (Part 2) | Azeria Labs (azeria-labs.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://wiki.csie.ncku.edu.tw/embedded/ARMv8&#34;&gt;Wiki - ARMv8 (ncku.edu.tw)&lt;/a&gt; ： 这个讲的挺底层的&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hackmd.io/@owlfox/Bkcen7LeL/https%3A%2F%2Fhackmd.io%2Fs%2FBkGRdKmsg&#34;&gt;ARM 指令 - HackMD&lt;/a&gt;：这个主要偏移动设备&lt;/p&gt;
&lt;h3 id=&#34;常见寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见寄存器&#34;&gt;#&lt;/a&gt; 常见寄存器&lt;/h3&gt;
&lt;h5 id=&#34;基本寄存器结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本寄存器结构&#34;&gt;#&lt;/a&gt; 基本寄存器结构&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/29/arm%E5%88%9D%E6%8E%A2/v2-eea3bf670b65918c3ff16d0d8c9fa552_1440w.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;r13堆栈指针stack-pointer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#r13堆栈指针stack-pointer&#34;&gt;#&lt;/a&gt; R13，堆栈指针 (Stack Pointer)&lt;/h5&gt;
&lt;p&gt;R13 寄存器中存放的是堆栈的栈顶指针，CM3 中有两个堆栈指针，也就支持两个堆栈。分别是：主堆栈指针 (Main Stack Pointer)，进程堆栈指针 (Process Stack Pointer)。&lt;/p&gt;
&lt;p&gt;堆栈主要是通过 POP，PUSH 指令来进行操作。在执行 PUSH 和 POP 操作时，那个通常被称为 SP 的地址寄存器，会自动被调整，以避免后续的操作破坏先前的数据。&lt;/p&gt;
&lt;h5 id=&#34;r14-连接寄存器link-register&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#r14-连接寄存器link-register&#34;&gt;#&lt;/a&gt; R14 ，连接寄存器 (Link Register)&lt;/h5&gt;
&lt;p&gt;在一个汇编程序中， LR 用于在调用子程序时存储返回地址。例如，在使用 BL (分支并连接， Branch and Link) 指令时，就自动填充 LR 的值 (执行函数调用的下一指令)，进而在函数退出时，正确返回并执行下一指令。&lt;/p&gt;
&lt;p&gt;如果函数中又调用了其他函数，那么 LR 将会被覆盖，所以需要先将 LR 寄存器入栈 PUSH，保护起来。&lt;/p&gt;
&lt;h5 id=&#34;r15程序计数器program-count&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#r15程序计数器program-count&#34;&gt;#&lt;/a&gt; R15，程序计数器 (Program Count)&lt;/h5&gt;
&lt;p&gt;因为 CM3 内部使用了指令流水线，读 PC 时返回的值是当前指令的地址 + 4&lt;/p&gt;
&lt;h5 id=&#34;特殊功能寄存器组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊功能寄存器组&#34;&gt;#&lt;/a&gt; 特殊功能寄存器组&lt;/h5&gt;
&lt;p&gt;Cortex‐M3 中的特殊功能寄存器包括：&lt;/p&gt;
&lt;p&gt;程序状态寄存器组（ xPSR），存放当前 CPU 的状态&lt;/p&gt;
&lt;p&gt;中断屏蔽寄存器组（ PRIMASK, FAULTMASK, 以及 BASEPRI），用于控制异常的使能和除能&lt;/p&gt;
&lt;p&gt;控制寄存器（ CONTROL），用于定义特权级别，以及选择当前使用堆栈指针 (PSP/MSP?)。&lt;/p&gt;
&lt;h5 id=&#34;cm3的操作模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cm3的操作模式&#34;&gt;#&lt;/a&gt; CM3 的操作模式&lt;/h5&gt;
&lt;p&gt;为了架构的安全性和健壮性，CM3 支持 2 个模式 (线程模式，handler 模式)，以及 2 个特权等级 (特权级，用户级)。&lt;strong&gt;handler 模式下只能是特权级。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/29/arm%E5%88%9D%E6%8E%A2/v2-a2b2ab0c1ca1dd2ccdd63d31086c51bd_1440w.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;复位序列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复位序列&#34;&gt;#&lt;/a&gt; 复位序列&lt;/h5&gt;
&lt;p&gt;在进入复位状态后， CM3 做的第一件事就是读取下列两个 32 位整数的值：&lt;/p&gt;
&lt;p&gt;从地址 0x0000,0000 处取出 MSP 的初始值。(&lt;strong&gt;初始化 MSP，为后续的代码执行创造环境&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;从地址 0x0000,0004 处取出 PC 的初始值 --- 这个值是复位向量。(&lt;strong&gt;启动引导代码&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-75518ed58d8fc3d6b0689f0dc0f30e59_1440w.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/11/29/arm%E5%88%9D%E6%8E%A2/v2-b05eeba8cc7c4cbded074a0aee4ebcdb_1440w.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;arm汇编指令集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arm汇编指令集&#34;&gt;#&lt;/a&gt; ARM 汇编指令集&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ARM 指令集可以分为跳转指令、数据处理指令、程序状态寄存器 (PSR) 处理指令、加载 / 存储指令、协处理器指令和异常产生指令六大类&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;跳转指令：B,BL,BX,BXL (&lt;em&gt;用于函数调用时的跳转，分为带 / 不带 返回地址 / 状态 的跳转&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;数据处理指令：MOV,ADD,SUB,DIV,MUL,AND,ORR,CMP...(&lt;em&gt;赋值，加减乘除，与或逻辑，比较&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;程序状态寄存器 (PSR) 处理指令：MSR,MRS (&lt;em&gt;用于查询或设置状态寄存器 / 特殊寄存器的数据&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;加载 / 存储指令: LDR,STR...(* 用于寄存器与内存之间的数据交换，&lt;strong&gt;一般为间接寻址&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;异常产生指令：SWI (&lt;em&gt;用于产生软件中断&lt;/em&gt;)&lt;/p&gt;
</content>
        <category term="re" />
        <category term="Android" />
        <updated>2023-11-29T06:24:57.000Z</updated>
    </entry>
    <entry>
        <id>https://demoyao100.github.io/2023/08/28/%E5%AE%89%E5%8D%93hook%E5%88%9D%E6%8E%A2/</id>
        <title>安卓hook初探</title>
        <link rel="alternate" href="https://demoyao100.github.io/2023/08/28/%E5%AE%89%E5%8D%93hook%E5%88%9D%E6%8E%A2/"/>
        <content type="html">&lt;h6 id=&#34;preface-隐约记得之前弄过一次但是这次换了个环境折腾了一整天吧还挺麻烦的总之记录一下后面搞起来方便&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#preface-隐约记得之前弄过一次但是这次换了个环境折腾了一整天吧还挺麻烦的总之记录一下后面搞起来方便&#34;&gt;#&lt;/a&gt; preface: 隐约记得之前弄过一次，但是这次换了个环境折腾了一整天吧还挺麻烦的，总之记录一下后面搞起来方便.&lt;/h6&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&#34;环境mumu12模拟器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境mumu12模拟器&#34;&gt;#&lt;/a&gt; 环境：mumu12 模拟器&lt;/h5&gt;
&lt;h6 id=&#34;adb连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adb连接&#34;&gt;#&lt;/a&gt; adb 连接：&lt;/h6&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/28/%E5%AE%89%E5%8D%93hook%E5%88%9D%E6%8E%A2/image-20230828105143258.png&#34; alt=&#34;image-20230828105143258&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;连接adbexe-connect-127001-断开adbexe-disconnect-127001&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接adbexe-connect-127001-断开adbexe-disconnect-127001&#34;&gt;#&lt;/a&gt; 连接： &lt;code&gt;adb.exe connect 127.0.0.1:*****&lt;/code&gt;   断开： &lt;code&gt;adb.exe disconnect 127.0.0.1:*****&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;检查设备adbexe-devices&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查设备adbexe-devices&#34;&gt;#&lt;/a&gt; 检查设备： &lt;code&gt;adb.exe devices&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;shell-adb-s-127001-shell-或-adb-shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shell-adb-s-127001-shell-或-adb-shell&#34;&gt;#&lt;/a&gt; shell:  &lt;code&gt;adb -s 127.0.0.1:***** shell&lt;/code&gt;  或  &lt;code&gt;adb shell&lt;/code&gt;&lt;/h5&gt;
&lt;hr&gt;
&lt;h5 id=&#34;查看手机cpu架构-getprop-roproductcpuabi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看手机cpu架构-getprop-roproductcpuabi&#34;&gt;#&lt;/a&gt; 查看手机 CPU 架构 ：  &lt;code&gt;getprop ro.product.cpu.abi&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;找到对应frida-server-frida-version检查本机frida版本releases-fridafrida-githubcom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找到对应frida-server-frida-version检查本机frida版本releases-fridafrida-githubcom&#34;&gt;#&lt;/a&gt; 找到对应 frida server：  &lt;code&gt;frida version&lt;/code&gt;  检查本机 frida 版本&lt;a href=&#34;https://github.com/frida/frida/releases&#34;&gt; Releases・frida/frida (github.com)&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;运行frida-server-adb-push-frida-server-datalocaltmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行frida-server-adb-push-frida-server-datalocaltmp&#34;&gt;#&lt;/a&gt; 运行 frida server:  &lt;code&gt;adb push frida-server /data/local/tmp/&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;cd-datalocaltmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cd-datalocaltmp&#34;&gt;#&lt;/a&gt;  &lt;code&gt;cd /data/local/tmp&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;frida-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#frida-server&#34;&gt;#&lt;/a&gt;  &lt;code&gt;./frida-server&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;电脑查看手机正在运行的进程firda-ps-u&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#电脑查看手机正在运行的进程firda-ps-u&#34;&gt;#&lt;/a&gt; 电脑查看手机正在运行的进程： &lt;code&gt;firda-ps -U&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;端口转发-adb-forward-tcp27042-tcp27042&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口转发-adb-forward-tcp27042-tcp27042&#34;&gt;#&lt;/a&gt; 端口转发:  &lt;code&gt;adb forward tcp:27042 tcp:27042&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;查看包名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看包名&#34;&gt;#&lt;/a&gt; 查看包名：&lt;/h5&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#查看进程中的信息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#process = frida.get_usb_device().enumerate_processes()&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#print(process)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;1.新开一个shell输入命令：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;adb shell am monitor&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;2.启动需要获取包名的应用&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr&gt;
&lt;h5 id=&#34;运行frida脚本frida-u-l-your-scriptjs-f-comyourapppackage&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行frida脚本frida-u-l-your-scriptjs-f-comyourapppackage&#34;&gt;#&lt;/a&gt; 运行 frida 脚本: &lt;code&gt;frida -U -l your-script.js -f com.yourapp.package&lt;/code&gt;&lt;/h5&gt;
&lt;h5 id=&#34;frida检查包名adb-shell-pm-list-packages-grep&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#frida检查包名adb-shell-pm-list-packages-grep&#34;&gt;#&lt;/a&gt; frida 检查包名： &lt;code&gt;adb shell pm list packages | grep ***&lt;/code&gt;&lt;/h5&gt;
&lt;hr&gt;
&lt;h5 id=&#34;gg修改器-httpsgameguardiannetforumfilesfile2-gameguardian&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gg修改器-httpsgameguardiannetforumfilesfile2-gameguardian&#34;&gt;#&lt;/a&gt; gg 修改器:    &lt;a href=&#34;https://gameguardian.net/forum/files/file/2-gameguardian/&#34;&gt;https://gameguardian.net/forum/files/file/2-gameguardian/&lt;/a&gt;&lt;/h5&gt;
</content>
        <category term="re" />
        <category term="Android" />
        <updated>2023-08-28T02:49:54.000Z</updated>
    </entry>
    <entry>
        <id>https://demoyao100.github.io/2023/08/23/%E5%88%9D%E6%8E%A2flutter/</id>
        <title>初探flutter</title>
        <link rel="alternate" href="https://demoyao100.github.io/2023/08/23/%E5%88%9D%E6%8E%A2flutter/"/>
        <content type="html">&lt;h6 id=&#34;preface-起因是wmctf2023有个anticheat2是基于flutter开发的中间也得用到相关知识-题目是一下子被队里师傅秒了555队里师傅秒题太快哩毫无存在感属于是但是总归还是得来补补功课啥也不学还是啥也不会-虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#preface-起因是wmctf2023有个anticheat2是基于flutter开发的中间也得用到相关知识-题目是一下子被队里师傅秒了555队里师傅秒题太快哩毫无存在感属于是但是总归还是得来补补功课啥也不学还是啥也不会-虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题&#34;&gt;#&lt;/a&gt; preface: 起因是 WMCTF2023 有个 anticheat2 是基于 flutter 开发的，中间也得用到相关知识。题目是一下子被队里师傅秒了（&lt;s&gt;555 队里师傅秒题太快哩毫无存在感属于是&lt;/s&gt;）但是总归还是得来补补功课，啥也不学还是啥也不会。（&lt;s&gt;虽然这会我的安卓环境还是不太彳亍容错很低当时比赛的时候就没有环境跑这个题&lt;/s&gt;）&lt;/h6&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;文档flutter-架构概览-flutter-中文文档-flutter-中文开发者网站-flutter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文档flutter-架构概览-flutter-中文文档-flutter-中文开发者网站-flutter&#34;&gt;#&lt;/a&gt; 文档：&lt;a href=&#34;https://flutter.cn/docs/resources/architectural-overview&#34;&gt;Flutter 架构概览 - Flutter 中文文档 - Flutter 中文开发者网站 - Flutter&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;参考文章reverse-engineering-flutter-apps-part-1-tstsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考文章reverse-engineering-flutter-apps-part-1-tstsh&#34;&gt;#&lt;/a&gt; 参考文章：&lt;a href=&#34;https://blog.tst.sh/reverse-engineering-flutter-apps-part-1/&#34;&gt;Reverse engineering Flutter apps (Part 1) (tst.sh)&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;reverse-engineering-flutter-apps-part-2-tstsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reverse-engineering-flutter-apps-part-2-tstsh&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://blog.tst.sh/reverse-engineering-flutter-apps-part-2/&#34;&gt;Reverse engineering Flutter apps (Part 2) (tst.sh)&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;todo工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#todo工具&#34;&gt;#&lt;/a&gt; TODO：&lt;a href=&#34;https://bbs.kanxue.com/thread-275287.htm&#34;&gt;工具&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;flutter逆向初探-2023国赛ctf的flutterror_1mmorta1的博客-csdn博客&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flutter逆向初探-2023国赛ctf的flutterror_1mmorta1的博客-csdn博客&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://blog.csdn.net/qq_41866334/article/details/131032273&#34;&gt;flutter 逆向初探 -- 2023 国赛 ctf 的 flutterror_1mmorta1 的博客 - CSDN 博客&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;reverse-engineering-flutter-apps-guardsquare&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reverse-engineering-flutter-apps-guardsquare&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://www.guardsquare.com/blog/current-state-and-future-of-reversing-flutter-apps&#34;&gt;Reverse Engineering Flutter Apps | Guardsquare&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;flutter架构分层系统上层组件依赖下层组件组件层间不可越权且各个部分可选可替代类似层与层间透明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flutter架构分层系统上层组件依赖下层组件组件层间不可越权且各个部分可选可替代类似层与层间透明&#34;&gt;#&lt;/a&gt; Flutter 架构：分层系统，上层组件依赖下层组件，组件层间不可越权且各个部分可选可替代（类似层与层间透明）&lt;/h5&gt;
&lt;h5 id=&#34;archdiagram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#archdiagram&#34;&gt;#&lt;/a&gt; &lt;img src=&#34;/2023/08/23/%E5%88%9D%E6%8E%A2flutter/archdiagram.webp&#34; alt=&#34;archdiagram&#34;&gt;&lt;/h5&gt;
&lt;h6 id=&#34;对于底层操作系统而言flutter-应用程序的包装方式与其他原生应用相同-在每一个平台上会包含一个特定的嵌入层从而提供一个程序入口程序由此可以与底层操作系统进行协调访问诸如-surface-渲染-辅助功能和输入等服务并且管理事件循环队列-该嵌入层采用了适合当前平台的语言编写例如-android-使用的是-java-和-c-ios-和-macos-使用的是-objective-c-和-objective-cwindows-和-linux-使用的是-c-flutter-代码可以通过嵌入层以模块方式集成到现有的应用中也可以作为应用的主体-flutter-本身包含了各个常见平台的嵌入层同时也-存在一些其他的嵌入层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对于底层操作系统而言flutter-应用程序的包装方式与其他原生应用相同-在每一个平台上会包含一个特定的嵌入层从而提供一个程序入口程序由此可以与底层操作系统进行协调访问诸如-surface-渲染-辅助功能和输入等服务并且管理事件循环队列-该嵌入层采用了适合当前平台的语言编写例如-android-使用的是-java-和-c-ios-和-macos-使用的是-objective-c-和-objective-cwindows-和-linux-使用的是-c-flutter-代码可以通过嵌入层以模块方式集成到现有的应用中也可以作为应用的主体-flutter-本身包含了各个常见平台的嵌入层同时也-存在一些其他的嵌入层&#34;&gt;#&lt;/a&gt; 对于底层操作系统而言，Flutter 应用程序的包装方式与其他原生应用相同。在每一个平台上，会包含一个特定的嵌入层，从而提供一个程序入口，程序由此可以与底层操作系统进行协调，访问诸如 surface 渲染、辅助功能和输入等服务，并且管理事件循环队列。该嵌入层采用了适合当前平台的语言编写，例如 Android 使用的是 Java 和 C++， iOS 和 macOS 使用的是 Objective-C 和 Objective-C++，Windows 和 Linux 使用的是 C++。 Flutter 代码可以通过嵌入层，以模块方式集成到现有的应用中，也可以作为应用的主体。 Flutter 本身包含了各个常见平台的嵌入层，同时也 &lt;a href=&#34;https://hover.build/blog/one-year-in/&#34;&gt;存在一些其他的嵌入层&lt;/a&gt;。&lt;/h6&gt;
&lt;h6 id=&#34;flutter-引擎-毫无疑问是-flutter-的核心它主要使用-c-编写并提供了-flutter-应用所需的原语-当需要绘制新一帧的内容时引擎将负责对需要合成的场景进行栅格化-它提供了-flutter-核心-api-的底层实现包括图形在-ios-和-android-上通过-impeller在其他平台上通过-skia-文本布局-文件及网络-io-辅助功能支持-插件架构和-dart-运行环境及编译环境的工具链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flutter-引擎-毫无疑问是-flutter-的核心它主要使用-c-编写并提供了-flutter-应用所需的原语-当需要绘制新一帧的内容时引擎将负责对需要合成的场景进行栅格化-它提供了-flutter-核心-api-的底层实现包括图形在-ios-和-android-上通过-impeller在其他平台上通过-skia-文本布局-文件及网络-io-辅助功能支持-插件架构和-dart-运行环境及编译环境的工具链&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Flutter 引擎&lt;/strong&gt; 毫无疑问是 Flutter 的核心，它主要使用 C++ 编写，并提供了 Flutter 应用所需的原语。当需要绘制新一帧的内容时，引擎将负责对需要合成的场景进行栅格化。它提供了 Flutter 核心 API 的底层实现，包括图形（在 iOS 和 Android 上通过 &lt;a href=&#34;https://flutter.cn/docs/perf/impeller&#34;&gt;Impeller&lt;/a&gt;，在其他平台上通过 &lt;a href=&#34;https://skia.org/&#34;&gt;Skia&lt;/a&gt;）、文本布局、文件及网络 IO、辅助功能支持、插件架构和 Dart 运行环境及编译环境的工具链。&lt;/h6&gt;
&lt;h6 id=&#34;引擎将底层-c-代码包装成-dart-代码通过-dartui-暴露给-flutter-框架层-该库暴露了最底层的原语包括用于驱动输入-图形-和文本渲染的子系统的类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引擎将底层-c-代码包装成-dart-代码通过-dartui-暴露给-flutter-框架层-该库暴露了最底层的原语包括用于驱动输入-图形-和文本渲染的子系统的类&#34;&gt;#&lt;/a&gt; &lt;strong&gt;引擎将底层 C++ 代码包装成 Dart 代码，通过 &lt;a href=&#34;https://github.com/flutter/engine/tree/master/lib/ui&#34;&gt; &lt;code&gt;dart:ui&lt;/code&gt; &lt;/a&gt; 暴露给 Flutter 框架层。该库暴露了最底层的原语，包括用于驱动输入、图形、和文本渲染的子系统的类。&lt;/strong&gt;&lt;/h6&gt;
&lt;h5 id=&#34;应用结构app-anatomy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用结构app-anatomy&#34;&gt;#&lt;/a&gt; 应用结构：&lt;img src=&#34;/2023/08/23/%E5%88%9D%E6%8E%A2flutter/app-anatomy.svg&#34; alt=&#34;app-anatomy&#34;&gt;&lt;/h5&gt;
&lt;h5 id=&#34;flutter构建的文件结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flutter构建的文件结构&#34;&gt;#&lt;/a&gt; flutter 构建的文件结构：&lt;/h5&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tree .&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── arm64-v8a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   ├── libapp.so&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;│   └── libflutter.so&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;└── armeabi-v7a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ├── libapp.so&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    └── libflutter.so&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Android apk 包中两个 libapp.so 文件，它们分别是作为 ELF 二进制文件的 a64 和 a32 快照。gen_snapshots 在此处输出 ELF / 共享对象可能会引起误解，它不会将 dart 方法公开为可以在外部调用的符号。相反，这些文件是 “cluster 化快照” 格式的容器，但在单独的可执行部分中包含编译的代码，以下是它们的结构：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ aarch64-linux-gnu-objdump -T libapp.so&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;libapp.so:     file format elf64-littleaarch64&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DYNAMIC SYMBOL TABLE:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;0000000000001000 g    DF .text  0000000000004ba0 _kDartVmSnapshotInstructions&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;0000000000006000 g    DF .text  00000000002d0de0 _kDartIsolateSnapshotInstructions&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;00000000002d7000 g    DO .rodata        0000000000007f10 _kDartVmSnapshotData&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;00000000002df000 g    DO .rodata        000000000021ad10 _kDartIsolateSnapshotData&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;dart-构建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dart-构建&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://github.com/dart-lang/sdk/wiki/Building&#34;&gt;Dart 构建&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;dart混淆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dart混淆&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://github.com/flutter/flutter/wiki/Obfuscating-Dart-Code&#34;&gt;Dart 混淆&lt;/a&gt;&lt;/h5&gt;
&lt;h5 id=&#34;dart-64的寄存器和函数调用约定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dart-64的寄存器和函数调用约定&#34;&gt;#&lt;/a&gt; dart 64 的寄存器和函数调用约定：&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;       r0 |     | Returns
r0  -  r7 |     | Arguments
r0  - r14 |     | General purpose
      r15 | sp  | Dart stack pointer
      r16 | ip0 | Scratch register
      r17 | ip1 | Scratch register
      r18 |     | Platform register
r19 - r25 |     | General purpose
r19 - r28 |     | Callee saved registers
      r26 | thr | Current thread
      r27 | pp  | Object pool
      r28 | brm | Barrier mask
      r29 | fp  | Frame pointer
      r30 | lr  | Link register
      r31 | zr  | Zero / CSP
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;dart-32的寄存器和函数调用约定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dart-32的寄存器和函数调用约定&#34;&gt;#&lt;/a&gt; dart 32 的寄存器和函数调用约定：&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;r0 -  r1 |     | Returns
r0 -  r9 |     | General purpose
r4 - r10 |     | Callee saved registers
      r5 | pp  | Object pool
     r10 | thr | Current thread
     r11 | fp  | Frame pointer
     r12 | ip  | Scratch register
     r13 | sp  | Stack pointer
     r14 | lr  | Link register
     r15 | pc  | Program counter
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;example&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt; example：&lt;/h5&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;figcaption data-lang=&#34;dart&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello, World!&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;Code for optimized function &#39;package:dectest/hello_world.dart_::_hello&#39; &amp;#123;
        ;; B0
        ;; B1
        ;; Enter frame（保存当前函数帧指针和返回地址）
0xf69ace60    e92d4800               stmdb sp!, &amp;#123;fp, lr&amp;#125;;stmdb sp!存储数据前递减寄存器(Store Multiple Decrement Before)
0xf69ace64    e28db000               add fp, sp, #0
        ;; CheckStackOverflow:8(stack=0, loop=0)将字段偏移表（限制个数为36）加载到ip中并检测栈溢出
0xf69ace68    e59ac024               ldr ip, [thr, #+36]
0xf69ace6c    e15d000c               cmp sp, ip
0xf69ace70    9bfffffe               blls +0 ; 0xf69ace70
        ;; PushArgument(v3)
0xf69ace74    e285ca01               add ip, pp, #4096
0xf69ace78    e59ccfa7               ldr ip, [ip, #+4007]
0xf69ace7c    e52dc004               str ip, [sp, #-4]!
        ;; StaticCall:12( print&amp;lt;0&amp;gt; v3)
0xf69ace80    ebfffffe               bl +0 ; 0xf69ace80
0xf69ace84    e28dd004               add sp, sp, #4
        ;; ParallelMove r0 &amp;lt;- C
0xf69ace88    e59a0060               ldr r0, [thr, #+96]
        ;; Return:16(v0)
0xf69ace8c    e24bd000               sub sp, fp, #0
0xf69ace90    e8bd8800               ldmia sp!, &amp;#123;fp, pc&amp;#125;
0xf69ace94    e1200070               bkpt #0x0
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;another-example&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#another-example&#34;&gt;#&lt;/a&gt; another example:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;// prologue, polymorphic entry
000 | stmdb sp!, &amp;#123;fp, lr&amp;#125;
004 | add fp, sp, #0
008 | sub sp, sp, #4
// optional parameter handling
00c | ldr r0, [r4, #0x13] // arr[2] (positional arg count)
010 | ldr r1, [r4, #0xf]  // arr[1] (argument count)
014 | cmp r0, #0          // check if we have positional args
018 | bgt 0x74            // jump to 08c
// check named args
01c | ldr r0, [r4, #0x17]  // arr[3] (first arg name)
020 | add ip, pp, #0x2000  // 
024 | ldr ip, [ip, #0x4a7] // string &amp;quot;x&amp;quot;
028 | cmp r0, ip           // check if arg present
02c | bne 0x20             // jump to 04c
030 | ldr r0, [r4, #0x1b]    // arr[4] (first arg position)
034 | sub r2, r1, r0         // r2 = arg_count - position
038 | add r0, fp, r2, lsl #1 // r0 = fp + r2 * 2
    |                        // this is really r2 * 4 because it&#39;s an smi
03c | ldr r0, [r0, #4]       // read arg
040 | mov r2, r0             // 
044 | mov r0, #2             // 
048 | b 12                   // jump to 054
04c | ldr r2, [thr, #0x68] // thr-&amp;gt;objectNull
050 | mov r0, #0           // 
054 | str r2, [fp, #-4] // store arg in local
// done loading args
058 | cmp r1, r0 // check if we have read all args
05c | bne 0x30   // jump to 08c
// continue prologe
060 | ldr ip, [thr, #0x24] // thr-&amp;gt;stackLimit
064 | cmp sp, ip           //
068 | blls -0x5af00        // stackOverflowStubWithoutFpuRegsStub
// rest of function
06c | ...
// incompatible args path
08c | ldr r6, [pp, #0x33] // Code* callClosureNoSuchMethod
090 | sub sp, fp, #0      // 
094 | ldmia sp!, &amp;#123;fp, lr&amp;#125; // exit frame
098 | ldr pc, [r6, #3]    // invoke stub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一些普遍做题思路：先 reflutter 然后对着 dump 出来的 offset 进行 hook / 恢复符号表&lt;/p&gt;
&lt;p&gt;&lt;s&gt;大概流程懂了，等个环境先&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;ARM 交叉编译工具链 (32 位)： &lt;code&gt;sudo apt-get install gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi&lt;/code&gt;  (64 位)： &lt;code&gt;sudo apt-get install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;寻找 &lt;code&gt;SVC&lt;/code&gt;  指令出现的地址： &lt;code&gt;aarch64-linux-gnu-objdump -D libapp.so | grep -B2 -A2 --color=always &amp;quot;svc&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h6 id=&#34;leaves大哥带着在看这个babyanti2比赛的时候被他高速非预期了但是现在复盘感觉预期解难度有点离谱的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leaves大哥带着在看这个babyanti2比赛的时候被他高速非预期了但是现在复盘感觉预期解难度有点离谱的&#34;&gt;#&lt;/a&gt; leaves 大哥带着在看这个 babyanti2，比赛的时候被他高速非预期了，但是现在复盘感觉预期解难度有点离谱的&lt;/h6&gt;
&lt;h5 id=&#34;目前还没有完整复现但是大概记录一下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目前还没有完整复现但是大概记录一下&#34;&gt;#&lt;/a&gt; 目前还没有完整复现，但是大概记录一下：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最简单的先把 anti 里面的环境检测 hook 掉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后合理就去 gg 修改分数，但是发现有疑似内存检查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flutter 的 libapp.so 恢复符号表（基本上就是我上面说的方法）发现有对内存进行的操作，进行 hook&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后不够，libapp.so 里面有一个 &lt;code&gt;generateShellcodes&lt;/code&gt; ，非常复杂；可以 hook  &lt;code&gt;mprotect&lt;/code&gt; ，发现有一个传入 0x7（可读、写、执行）的调用，比较异常，对其操作的 0x1000 长度的地址 dump 下来分析，发现好几十个 SVC 调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后续： 结论是两层 shellcode 调用 mincore，检查是否有内存缺页更改的操作，确实难&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h6 id=&#34;914-babyanti2完整复现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#914-babyanti2完整复现&#34;&gt;#&lt;/a&gt; 9.14: BabyAnti2 完整复现：&lt;/h6&gt;
&lt;p&gt;AntiCheatPlugin 的 Java 层几乎看不到东西，只能判断使用 flutter，那么必须继续看下去，找 dart 层和 native 层的逻辑&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/23/%E5%88%9D%E6%8E%A2flutter/image-20230914083329468.png&#34; alt=&#34;image-20230914083329468&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接看 native：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/23/%E5%88%9D%E6%8E%A2flutter/image-20230914083721077.png&#34; alt=&#34;image-20230914083721077&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;libflutter.so&lt;/code&gt; ：flutter 预编译的组件库（不会因为开发者的 Dart 而改变），flutter 引擎的主要组成部分，包含了 flutter 运行所需要的核心代码，负责渲染 Flutter widgets、处理事件、与 Dart VM 进行交互以及其他核心功能&lt;/p&gt;
&lt;p&gt;&lt;code&gt;libapp.so&lt;/code&gt; ：Dart 代码编译后的产物，包含所有 Dart 层的 native 逻辑、UI、Flutter plugins，当应用启动时， &lt;code&gt;libflutter.so&lt;/code&gt;  会加载 &lt;code&gt;libapp.so&lt;/code&gt;  并开始执行 Dart 代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;libanticheat.so（其他）&lt;/code&gt; ：通过 Android NDK 编写的 native 代码编译产物&lt;/p&gt;
&lt;p&gt;尝试通过&lt;a href=&#34;https://github.com/rscloura/Doldrums&#34;&gt; rscloura/Doldrums: A Flutter/Dart reverse engineering tool (github.com)&lt;/a&gt;&lt;a href=&#34;http://xn--libapp-op2ju0ndo1a5qn.so&#34;&gt; 工具提取 libapp.so&lt;/a&gt;，失败，DartSDK 版本对不上&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/23/%E5%88%9D%E6%8E%A2flutter/image-20230914094329393.png&#34; alt=&#34;image-20230914094329393&#34;&gt;&lt;/p&gt;
&lt;p&gt;寻找版本相关信息，可以得到这段，获取版本号 3.1.0（这里可以猜测这个是 dart 的版本）对应到&lt;a href=&#34;https://docs.flutter.dev/release/archive?tab=windows&#34;&gt; Flutter SDK archive | Flutter&lt;/a&gt; 可以查找 flutter 的版本号 beta 版本的 3.13.0-0.4.pre（根据发布时间和 Dart version，不过 hash 号没有找到，还得看看）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/23/%E5%88%9D%E6%8E%A2flutter/image-20230914103350070.png&#34; alt=&#34;image-20230914103350070&#34;&gt;&lt;/p&gt;
&lt;p&gt;题目出的时候 &lt;code&gt;reflutter&lt;/code&gt;  还没有更新到这个版本，可以认为，在比赛环境下这让做这道题的预期解难度陡然升高&lt;/p&gt;
&lt;p&gt;那也只能开始漫长学习，先看看这篇的原理：&lt;a href=&#34;https://swarm.ptsecurity.com/fork-bomb-for-flutter/&#34;&gt;Fork Bomb for Flutter – PT SWARM (ptsecurity.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装应用： &lt;code&gt;adb push .apk /data/local/tmp &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pm install -r .apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;签名工具：&lt;a href=&#34;https://github.com/patrickfav/uber-apk-signer/releases/tag/v1.2.1&#34;&gt;Release v1.2.1 · patrickfav/uber-apk-signer (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java -jar uber-apk-signer.jar --allowResign -**a** release.RE.apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt; adb logcat -e reflutter | ForEach-Object &amp;#123; $_ -replace &#39;.*DartVM&#39;, &#39;&#39; &amp;#125; &amp;gt;&amp;gt; reflutter.txt&lt;/code&gt;&lt;/p&gt;
</content>
        <category term="re" />
        <category term="Android" />
        <updated>2023-08-23T00:59:47.000Z</updated>
    </entry>
    <entry>
        <id>https://demoyao100.github.io/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/</id>
        <title>hook某聊天软件lab</title>
        <link rel="alternate" href="https://demoyao100.github.io/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/"/>
        <content type="html">&lt;h6 id=&#34;起因是在学安卓逆向而且自己水平太低打算练练手-恰巧某友的校内lab做了类似的东西羡慕遂打算动手尝试复现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#起因是在学安卓逆向而且自己水平太低打算练练手-恰巧某友的校内lab做了类似的东西羡慕遂打算动手尝试复现&#34;&gt;#&lt;/a&gt; 起因是在学安卓逆向，而且自己水平太低，打算练练手。恰巧某友的校内 lab 做了类似的东西，羡慕，遂打算动手尝试复现&lt;/h6&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;一-某绿色软件防撤回&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-某绿色软件防撤回&#34;&gt;#&lt;/a&gt; 一、某绿色软件防撤回&lt;/h4&gt;
&lt;p&gt;首先搜索相关字串 &lt;code&gt;revoke&lt;/code&gt; ，找到一个 &lt;code&gt;RevokeMsgEvent&lt;/code&gt; ，看起来很像，然后翻找代码，发现了这个 listener 用于接收一个撤回消息事件&lt;/p&gt;
&lt;h5 id=&#34;image-20230809174202432&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#image-20230809174202432&#34;&gt;#&lt;/a&gt; &lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809174202432.png&#34; alt=&#34;image-20230809174202432&#34;&gt;&lt;/h5&gt;
&lt;p&gt;观察这里的 callback 函数，先赋值到一个叫做 &lt;code&gt;revokeMsgEvent2&lt;/code&gt;  的 class 上（什么鬼命名... 但是看起来可能挺重要的，marked 一下）&lt;/p&gt;
&lt;p&gt;接着合法性检测，不需要管&lt;/p&gt;
&lt;p&gt;p0.D 的声明如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175148467.png&#34; alt=&#34;image-20230809175148467&#34;&gt;&lt;/p&gt;
&lt;p&gt;猜测这里是通知一栏，将原通知的属性修改为已撤回的属性，两者参数 string 声明如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175818647.png&#34; alt=&#34;image-20230809175818647&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809175830933.png&#34; alt=&#34;image-20230809175830933&#34;&gt;&lt;/p&gt;
&lt;p&gt;不好懂，接着往下看&lt;/p&gt;
&lt;p&gt;可以明确的是这里的 class h 是和撤回相关操作的类，结合下面的调用，猜测这里就是集中处理撤回用的函数（对本地数据库进行了一些操作与删除），查看一下其声明，均是 revoke 的相关操作，那合理来说不会影响正常的流程，直接 hook 就行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230809185208738.png&#34; alt=&#34;image-20230809185208738&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里试一下 &lt;code&gt;frida&lt;/code&gt;  脚本 hook 的操作。&lt;/p&gt;
&lt;p&gt;首先是这里只有 arm 的包，暂时没有物理机做测试，可以用的方案有三个：AS、qemu、商业模拟器&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AS&lt;/th&gt;
&lt;th&gt;qemu&lt;/th&gt;
&lt;th&gt;商业模拟器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;开发必备&lt;/td&gt;
&lt;td&gt;比较折腾，但是稍微比 AS 效率好一点&lt;/td&gt;
&lt;td&gt;运行比较流畅，但是版本选择有限，而且还有很多版本和 hyperV 犯冲，选择更加有限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里选择先用 AS 尝试了一下，配置如下（一点点尝试可以运行起来的 arm 架构）：&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810132624458.png&#34; alt=&#34;image-20230810132624458&#34;&gt;&lt;/p&gt;
&lt;p&gt;巨慢无比，还不支持 android studio 的一些便携操作，结果和绿色软件的 so 还不兼容... 麻了...&lt;/p&gt;
&lt;p&gt;尝试使用 mumuX（亲测只有 mumux 在本机可以和 WSL2 共存，其他声称支持 hyperV 的都会出问题，待修复），会被检测环境，来尝试配一下 qemu&lt;/p&gt;
&lt;p&gt;疑似不太行，毕竟 AS 也是基于 qemu 的，该卡照样卡（据说 mac 上用 as 模拟 android 非常流畅......）&lt;/p&gt;
&lt;p&gt;然后发现微软自家的 vs 有安卓模拟器，那来尝试一下下&lt;/p&gt;
&lt;h6 id=&#34;-to-be-continue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-to-be-continue&#34;&gt;#&lt;/a&gt; - to be continue&lt;/h6&gt;
&lt;h4 id=&#34;二-某运动软件广告消除以及强制更新破解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-某运动软件广告消除以及强制更新破解&#34;&gt;#&lt;/a&gt; 二、某运动软件广告消除以及强制更新破解&lt;/h4&gt;
&lt;h6 id=&#34;之前队里一直有跌说加了壳搞不了但是感觉好像么有点机会遂来看看这里是用的一个旧版本好像对root的检测没那么严格但是也能用后面有空再调一个新版本的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#之前队里一直有跌说加了壳搞不了但是感觉好像么有点机会遂来看看这里是用的一个旧版本好像对root的检测没那么严格但是也能用后面有空再调一个新版本的&#34;&gt;#&lt;/a&gt; &lt;s&gt;之前队里一直有跌说加了壳搞不了，但是感觉好像么有点机会，遂来看看，这里是用的一个旧版本，好像对 root 的检测没那么严格，但是也能用，后面有空再调一个新版本的&lt;/s&gt;&lt;/h6&gt;
&lt;p&gt;通过搜索引擎可以找到一个文档，&lt;a href=&#34;https://www.csjplatform.com/supportcenter/5398&#34;&gt;开屏广告 - Android 集成文档 - 开发测试 - 穿山甲广告平台 (csjplatform.com)&lt;/a&gt;，这个 app 的部分广告大概就是基于这个开发的&lt;/p&gt;
&lt;p&gt;大概定位到这个类上，是广告加载用的类&lt;/p&gt;
&lt;h5 id=&#34;image-20230810164814274&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#image-20230810164814274&#34;&gt;#&lt;/a&gt; &lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810164814274.png&#34; alt=&#34;image-20230810164814274&#34;&gt;&lt;/h5&gt;
&lt;p&gt;合理来说把这里 hook 一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810165617746.png&#34; alt=&#34;image-20230810165617746&#34;&gt;&lt;/p&gt;
&lt;p&gt;就能消掉大部分和 ad 相关的事件了&lt;/p&gt;
&lt;p&gt;但是接着看下去就感觉事情不对头了，这里的 &lt;code&gt;com.fighter.wrapper&lt;/code&gt;  疑似只是一个 ad 的处理方法，仔细看左边的包还有一万个不同公司的 ad...... 破软件没啥功能，集成的广告不少&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810171514620.png&#34; alt=&#34;image-20230810171514620&#34;&gt;&lt;/p&gt;
&lt;p&gt;而且后面很多广告用的不是这个方法，那就是不能在这层 hook 了，会累死自己，最好的解决方法还是在调用这 n 个广告类前就掐掉源头&lt;/p&gt;
&lt;p&gt;可以搜索发现 &lt;code&gt;com.zjwh&lt;/code&gt;  应该是这软件自己的包，命名做的手动混淆，全都是 oO0 啥的...&lt;/p&gt;
&lt;p&gt;这里发现了反虚拟环境和反 hook 的操作，那看来后面有点点不好整的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810173613500.png&#34; alt=&#34;image-20230810173613500&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外，可以手动调试发现，apk 启动的时候会与 server 交互获取应用更新信息，然后触发强制更新，交互方法疑似使用的 &lt;code&gt;okhttp&lt;/code&gt; , 但是 zjwh 包进行了混淆，与服务器也都用的 okhttp 交互，需要一定工作量找到&lt;/p&gt;
&lt;p&gt;进度记录：这里仔细找引用和具体的实现方式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810212148480.png&#34; alt=&#34;image-20230810212148480&#34;&gt;&lt;/p&gt;
&lt;p&gt;检测 xposed 框架是否存在的方法，也需要 hook 掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810213654727.png&#34; alt=&#34;image-20230810213654727&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个包看起来是比较重要的，下面还有检测攻击等等函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810214035445.png&#34; alt=&#34;image-20230810214035445&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个包的源码可以找到一个很类似的（虽然只有部分）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mogua.co/view_file/?file=com/ijm/detect/drisk/DRiskNativeTool.java&amp;amp;md5=746753952f66bd8794683d37ccdd2642&amp;amp;type=apk&amp;amp;appname=%E5%BE%97%E7%89%A9&amp;amp;lines=84&#34;&gt;DRiskNativeTool.java - 得物.apk 源代码分析 - 摸瓜 (mogua.co)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后顺着搜，可以找到&lt;a href=&#34;https://www.ijiami.cn/enindex&#34;&gt; iJiami - Guarding the Smart World | mobile information security service provider&lt;/a&gt; 这家公司，专门做安全的，这些安全相关的包就是它家做的了&lt;/p&gt;
&lt;h5 id=&#34;image-20230810221152187&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#image-20230810221152187&#34;&gt;#&lt;/a&gt; &lt;img src=&#34;/2023/08/09/hook%E6%9F%90%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6lab/image-20230810221152187.png&#34; alt=&#34;image-20230810221152187&#34;&gt;&lt;/h5&gt;
&lt;p&gt;到这里就要考虑放弃了，毕竟是商业级的加固，就算级别不高，破解再怎么说也要不小的工程量...&lt;/p&gt;
</content>
        <category term="re" />
        <category term="Android" />
        <updated>2023-08-09T09:35:45.000Z</updated>
    </entry>
    <entry>
        <id>https://demoyao100.github.io/2023/07/11/%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/</id>
        <title>安卓调试初探</title>
        <link rel="alternate" href="https://demoyao100.github.io/2023/07/11/%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/"/>
        <content type="html">&lt;h6 id=&#34;preface说是初探也不是很初探吧其实前面多多少少弄过完整的流程了但是由于hyperv这玄学东西后面搞的环境一团糟打算还是重新弄一个完整的调试方案出来顺便记录一些基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#preface说是初探也不是很初探吧其实前面多多少少弄过完整的流程了但是由于hyperv这玄学东西后面搞的环境一团糟打算还是重新弄一个完整的调试方案出来顺便记录一些基础知识&#34;&gt;#&lt;/a&gt; preface：说是初探，也不是很初探吧其实，前面多多少少弄过完整的流程了，但是由于 hyperV 这玄学东西后面搞的环境一团糟，打算还是重新弄一个完整的调试方案出来，顺便记录一些基础知识&lt;/h6&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h6 id=&#34;初学配安卓环境挺痛苦的有几大原因还没准备可以root的真机在x86架构下跑arm的方案很少流畅的更少能比较流畅运行的大多是商业模拟器但是我的本地linux环境大多放在wsl2上商业模拟器很多与wsl2的hyperv冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初学配安卓环境挺痛苦的有几大原因还没准备可以root的真机在x86架构下跑arm的方案很少流畅的更少能比较流畅运行的大多是商业模拟器但是我的本地linux环境大多放在wsl2上商业模拟器很多与wsl2的hyperv冲突&#34;&gt;#&lt;/a&gt; 初学配安卓环境挺痛苦的，有几大原因：还没准备可以 root 的真机；在 x86 架构下跑 arm 的方案很少，流畅的更少；能比较流畅运行的大多是商业模拟器，但是我的本地 linux 环境大多放在 wsl2 上，商业模拟器很多与 wsl2 的 hyperV 冲突&lt;/h6&gt;
&lt;h5 id=&#34;几个尝试过或可以考虑的方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几个尝试过或可以考虑的方案&#34;&gt;#&lt;/a&gt; 几个尝试过&lt;s&gt;或可以考虑&lt;/s&gt;的方案：&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Android Studio&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;mumu12&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;qemu&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;真机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;选择多，但是 arm 调不动&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;使用方便&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;~~ 配置麻烦，~~ 多数时候没法用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;s&gt;准备尝试&lt;/s&gt; &lt;s&gt;已配置，需要 root，略麻烦&lt;/s&gt; 启动！&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;1-android-studio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-android-studio&#34;&gt;#&lt;/a&gt; 1、Android Studio&lt;/h5&gt;
&lt;p&gt;在 so 有 x86 支持时为比较优解，可以随意选择安卓版本来使用。仅支持 arm 时本机能成功运行的镜像仅有：&lt;img src=&#34;/2023/07/11/%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/image-20230811134825647.png&#34; alt=&#34;image-20230811134825647&#34;&gt;armeabi-v7a 的 Nougat，但很多新的 apk 都是 arm64-v8a，这里本机跑会报很多错，而且很慢很慢&lt;/p&gt;
&lt;p&gt;2、正常情况下可以用 nox 或者雷电模拟器，稳定性还行，但是有 wsl2 的情况下会出奇怪问题（雷电号称是有兼容的，但是实测用起来会卡死，懒得修了直接换个）之前一直用的 mumux，但是这两天连 adb 会触发强制更新，换成 mumu12 居然还可以用，属于比较惊喜的，在真机拿到前可以先用这个方案&lt;/p&gt;
&lt;p&gt;mumu12 用的 x86 的架构，但是实测是可以跑 arm64-v8a 的，具体原理不太懂，但是确实挺好用的，可以按照这篇操作，调试 so 层&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ddms/p/8820044.html&#34;&gt;IDA 远程调试 Android 中 so 文件 - jKing777 - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;3-qemu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-qemu&#34;&gt;#&lt;/a&gt; 3、qemu&lt;/h5&gt;
&lt;p&gt;搭建很麻烦，需要配置可视化，非常麻烦。&lt;/p&gt;
&lt;h5 id=&#34;4-真机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-真机&#34;&gt;#&lt;/a&gt; 4、真机&lt;/h5&gt;
&lt;p&gt;理论上的最优解，但是不知道比起商业模拟器优多少呢&lt;/p&gt;
&lt;hr&gt;
&lt;h6 id=&#34;群开发高手那里收了个二手红米还得是小米&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#群开发高手那里收了个二手红米还得是小米&#34;&gt;#&lt;/a&gt; &lt;s&gt;群开发高手那里收了个二手红米，还得是小米&lt;/s&gt;&lt;/h6&gt;
&lt;p&gt;简单记录一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;收的手机是已经解了 bl 锁的，可以暂时跳过这一步（&lt;a href=&#34;http://www.romleyuan.com/lec/read?id=83&#34;&gt;小米手机官方解锁 BootLoader 图文教程 - 适用于全部机型 20210925 更新 - ROM 乐园官网 (romleyuan.com)&lt;/a&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;” 我的设备 “-&amp;gt; “全部参数” -&amp;gt; 连续点击 “MIUI 版本” 进入开发者模式 -&amp;gt; 在开发者模式中打开 adb 调试等选项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;adb devices&lt;/code&gt;  检查设备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;adb shell&lt;/code&gt;  进入&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刷入 TWRP 进行 root（刷失败了就下音量 + 电源键重新进入 FASTBOOT，每次需要重新刷入）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;adb reboot bootloader&lt;/code&gt;  转为 FASTBOOT 模式（&lt;a href=&#34;https://www.hardreset.info/zh/devices/xiaomi/xiaomi-redmi-note-8-pro/faq/drivers/drivers-xiaomi/&#34;&gt;windows 缺少驱动在这里下载&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fastboot devices&lt;/code&gt;  看到设备&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fastboot flash recovery D:\android\BRP3.5.2v3.1-Red-twrp\recovery.img&lt;/code&gt;  刷入 TWRP（[&lt;a href=&#34;https://forum.xda-developers.com/t/recovery-unofficial-begonia-recovery-project-themed-twrp-3-5-0-v2-unified-begonia-begoniain.4242717/&#34;&gt;RECOVERY][UNOFFICIAL] Begonia Recovery Project Themed TWRP 3.5.0 V2 UNIFIED [begonia/begoniain] | XDA Forums (xda-developers.com)&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fastboot flash recover&lt;/code&gt;  启动 TWRP（选择系统重启可以回到系统）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刷入 Magisk（ &lt;code&gt;adb push D:\android\Magisk\Magisk.v26.3.zip /sdcard/&lt;/code&gt; ）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在手机上根据提示操作，adb 上 &lt;code&gt;su&lt;/code&gt;  即可获得 root&lt;/p&gt;
&lt;h5 id=&#34;大功告成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大功告成&#34;&gt;#&lt;/a&gt; 大功告成！&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;/2023/07/11/%E5%AE%89%E5%8D%93%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/image-20230913202333767.png&#34; alt=&#34;image-20230913202333767&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="re" />
        <category term="Android" />
        <updated>2023-07-11T10:14:26.000Z</updated>
    </entry>
</feed>
