{
    "version": "https://jsonfeed.org/version/1",
    "title": "Moyao の小屋 • All posts by \"codeforces\" tag",
    "description": "Write down something interesting I met<br />\nFeel free to mail me if you have something wanted to talk about, plz\nmail: &lt;moyaoxue@outlook.com&gt;\n",
    "home_page_url": "https://demoyao100.github.io",
    "items": [
        {
            "id": "https://demoyao100.github.io/codeforce-817E/",
            "url": "https://demoyao100.github.io/codeforce-817E/",
            "title": "codeforce-817E",
            "date_published": "2022-09-02T15:11:43.000Z",
            "content_html": "<h1 id=\"codeforces-817e\"><a class=\"markdownIt-Anchor\" href=\"#codeforces-817e\">#</a> codeforces 817E</h1>\n<span id=\"more\"></span>\n<h3 id=\"the-problem\"><a class=\"markdownIt-Anchor\" href=\"#the-problem\">#</a> The problem</h3>\n<blockquote>\n<p>E. Counting Rectangles<br>\ntime limit per test6 seconds<br>\nmemory limit per test256 megabytes<br>\ninputstandard input<br>\noutputstandard output<br>\nYou have n rectangles, the i-th rectangle has height hi and width wi.<br>\nYou are asked q queries of the form hs ws hb wb.<br>\nFor each query output, the total area of rectangles you own that can fit a rectangle of height hs and width ws while also fitting in a rectangle of height hb and width wb. In other words, print ∑hi⋅wi for i such that hs&lt;hi&lt;hb and ws&lt;wi&lt;wb.<br>\nPlease note, that if two rectangles have the same height or the same width, then they cannot fit inside each other. Also note that you cannot rotate rectangles.<br>\nPlease note that the answer for some test cases won’t fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like long long for C++).</p>\n<blockquote>\n<p>Input<br>\nThe first line of the input contains an integer t (1≤t≤100) — the number of test cases.<br>\nThe first line of each test case two integers n,q (1≤n≤105; 1≤q≤105) — the number of rectangles you own and the number of queries.<br>\nThen n lines follow, each containing two integers hi,wi (1≤hi,wi≤1000) — the height and width of the i-th rectangle.<br>\nThen q lines follow, each containing four integers hs,ws,hb,wb (1≤hs&lt;hb, ws&lt;wb≤1000) — the description of each query.<br>\nThe sum of q over all test cases does not exceed 105, and the sum of n over all test cases does not exceed 105.<br>\nOutput<br>\nFor each test case, output q lines, the i-th line containing the answer to the i-th query.</p>\n<blockquote>\n<p>Example<br>\ninputCopy<br>\n3<br>\n2 1<br>\n2 3<br>\n3 2<br>\n1 1 3 4<br>\n5 5<br>\n1 1<br>\n2 2<br>\n3 3<br>\n4 4<br>\n5 5<br>\n3 3 6 6<br>\n2 1 4 5<br>\n1 1 2 10<br>\n1 1 100 100<br>\n1 1 3 3<br>\n3 1<br>\n999 999<br>\n999 999<br>\n999 998<br>\n1 1 1000 1000<br>\noutputCopy<br>\n6<br>\n41<br>\n9<br>\n0<br>\n54<br>\n4<br>\n2993004</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h5 id=\"note\"><a class=\"markdownIt-Anchor\" href=\"#note\">#</a> Note</h5>\n<h5 id=\"in-the-first-test-case-there-is-only-one-query-we-need-to-find-the-sum-of-areas-of-all-rectangles-that-can-fit-a-11-rectangle-inside-of-it-and-fit-into-a-34-rectangle\"><a class=\"markdownIt-Anchor\" href=\"#in-the-first-test-case-there-is-only-one-query-we-need-to-find-the-sum-of-areas-of-all-rectangles-that-can-fit-a-11-rectangle-inside-of-it-and-fit-into-a-34-rectangle\">#</a> In the first test case, there is only one query. We need to find the sum of areas of all rectangles that can fit a 1×1 rectangle inside of it and fit into a 3×4 rectangle.</h5>\n<h5 id=\"only-the-23-rectangle-works-because-12-comparing-heights-and-13-comparing-widths-so-the-11-rectangle-fits-inside-and-23-comparing-heights-and-34-comparing-widths-so-it-fits-inside-the-34-rectangle-color\"><a class=\"markdownIt-Anchor\" href=\"#only-the-23-rectangle-works-because-12-comparing-heights-and-13-comparing-widths-so-the-11-rectangle-fits-inside-and-23-comparing-heights-and-34-comparing-widths-so-it-fits-inside-the-34-rectangle-color\">#</a> Only the 2×3 rectangle works, because 1&lt;2 (comparing heights) and 1&lt;3 (comparing widths), so the 1×1 rectangle fits inside, and 2&lt;3 (comparing heights) and 3&lt;4 (comparing widths), so it fits inside the 3×4 rectangle. $\\color</h5>\n",
            "tags": [
                "codeforces"
            ]
        },
        {
            "id": "https://demoyao100.github.io/codeforce-1719C/",
            "url": "https://demoyao100.github.io/codeforce-1719C/",
            "title": "codeforce-1719C",
            "date_published": "2022-08-29T03:24:57.000Z",
            "content_html": "<h1 id=\"codeforces-1719c\"><a class=\"markdownIt-Anchor\" href=\"#codeforces-1719c\">#</a> codeforces 1719C</h1>\n<span id=\"more\"></span>\n<h3 id=\"the-problem\"><a class=\"markdownIt-Anchor\" href=\"#the-problem\">#</a> The problem</h3>\n<blockquote>\n<p>C. Fighting Tournament<br>\ntime limit per test2 seconds<br>\nmemory limit per test256 megabytes<br>\ninputstandard input<br>\noutputstandard output<br>\nBurenka is about to watch the most interesting sporting event of the year — a fighting tournament organized by her friend Tonya.<br>\nn athletes participate in the tournament, numbered from 1 to n. Burenka determined the strength of the i-th athlete as an integer ai, where 1≤ai≤n. All the strength values are different, that is, the array a is a permutation of length n. We know that in a fight, if ai&gt;aj, then the i-th participant always wins the j-th.<br>\nThe tournament goes like this: initially, all n athletes line up in ascending order of their ids, and then there are infinitely many fighting rounds. In each round there is exactly one fight: the first two people in line come out and fight. The winner goes back to the front of the line, and the loser goes to the back.<br>\nBurenka decided to ask Tonya q questions. In each question, Burenka asks how many victories the i-th participant gets in the first k rounds of the competition for some given numbers i and k. Tonya is not very good at analytics, so he asks you to help him answer all the questions.</p>\n<blockquote>\n<p>Input<br>\nThe first line contains one integer t (1≤t≤104) — the number of test cases. Description of the test cases follows.<br>\nThe first line of each test case contains two integers n and q (2≤n≤105, 1≤q≤105) — the number of tournament participants and the number of questions.<br>\nThe second line of each test case contains n integers a1,a2,…,an (1≤ai≤n) — the array a, which is a permutation.<br>\nThe next q lines of a test case contain questions. Each line contains two integers i and k (1≤i≤n, 1≤k≤109) — the number of the participant and the number of rounds.<br>\nIt is guaranteed that the sum of n and the sum of q over all test cases do not exceed 105.<br>\nOutput<br>\nFor each Burenka’s question, print a single line containing one integer — the answer to the question.</p>\n</blockquote>\n</blockquote>\n<!--more-->\n<h4 id=\"preface\"><a class=\"markdownIt-Anchor\" href=\"#preface\">#</a> Preface</h4>\n<h5 id=\"its-not-a-very-hard-problem-but-contains-many-details-this-is-the-record-when-i-tried\"><a class=\"markdownIt-Anchor\" href=\"#its-not-a-very-hard-problem-but-contains-many-details-this-is-the-record-when-i-tried\">#</a> It’s not a very hard problem, but contains many details. This is the record when I tried:</h5>\n<p><img src=\"/codeforce-1719C/1719C.png\" alt></p>\n<hr>\n<h5 id=\"the-basic-solution-for-this-problem-is-to-find-out-if-there-are-numbers-bigger-then-ai-if-so-the-guy-with-the-number-i-can-not-win-anybody-else-tried-to-find-the-number-of-the-guys-after-him-with-smaller-a-this-number-is-the-biggest-number-of-his-victories-you-might-notices-if-the-guy-is-the-best-in-the-whole-queue-then-he-can-win-any-guys-he-metdepend-how-big-the-k-is-others-can-not-because-they-may-met-this-guy-and-his-game-can-be-called-over\"><a class=\"markdownIt-Anchor\" href=\"#the-basic-solution-for-this-problem-is-to-find-out-if-there-are-numbers-bigger-then-ai-if-so-the-guy-with-the-number-i-can-not-win-anybody-else-tried-to-find-the-number-of-the-guys-after-him-with-smaller-a-this-number-is-the-biggest-number-of-his-victories-you-might-notices-if-the-guy-is-the-best-in-the-whole-queue-then-he-can-win-any-guys-he-metdepend-how-big-the-k-is-others-can-not-because-they-may-met-this-guy-and-his-game-can-be-called-over\">#</a> The basic solution for this problem is to find out if there are numbers bigger then a[i], if so, the guy with the number i CAN NOT WIN ANYBODY, else, tried to find the number of the guys AFTER HIM with smaller a[]. This number is the BIGGEST number of his victories. You might notices, if the guy is the best in the whole queue, then he can win any guys he met(depend how big the k is), others can not because they may met this guy and his game can be called “over”.</h5>\n<h4 id=\"details\"><a class=\"markdownIt-Anchor\" href=\"#details\">#</a> DETAILS</h4>\n<ul>\n<li>\n<h5 id=\"the-first-and-second-guy-is-special-they-fight-each-other-you-can-see-that-i2-can-use-the-same-formula-so-you-shall-judge-i1-specially-the-biggest-a-shall-also-be-judge-specially-with-those-you-answer-shall-be-right\"><a class=\"markdownIt-Anchor\" href=\"#the-first-and-second-guy-is-special-they-fight-each-other-you-can-see-that-i2-can-use-the-same-formula-so-you-shall-judge-i1-specially-the-biggest-a-shall-also-be-judge-specially-with-those-you-answer-shall-be-right\">#</a> The first and second guy is special. They fight each other. You can see that (i&gt;=2) can use the same formula. So you shall judge (i==1) specially. The biggest a[] shall also be judge specially. With those, you answer shall be right.</h5>\n</li>\n<li>\n<h5 id=\"however-you-might-get-a-tlewelli-did-this-is-how-i-wrote-previously\"><a class=\"markdownIt-Anchor\" href=\"#however-you-might-get-a-tlewelli-did-this-is-how-i-wrote-previously\">#</a> However, you might get a “TLE”(Well,I did). This is how I wrote previously:</h5>\n</li>\n</ul>\n<p><code>//\t\tfor (i=1;i&lt;=n;i++)&#123;</code> \t<br>\n <code>//\t\t\tif (a[i]==maxn) continue;</code> <br>\n <code>//\t\t\tfor (j=i+1;j&lt;=n;j++)&#123;</code> <br>\n <code>//\t\t\t\tif (a[j]&gt;=a[i]) break;</code> <br>\n <code>//\t\t\t\tb[i]++;</code> <br>\n <code>//&#125;</code> <br>\n <code>//\t\t\tb[i]++;</code> <br>\n <code>//\t\t\tif (i==1) b[i]--;</code> <br>\n <code>//\t\t\tfor (j=1;j&lt;i;j++)&#123;</code> <br>\n <code>//\t\t\t\tif (a[j]&gt;a[i])&#123;</code> <br>\n <code>//\t\t\t\t\tb[i]=0;</code> <br>\n <code>//\t\t\t\t\tbreak;</code> <br>\n <code>//\t\t\t\t&#125;</code> <br>\n <code>//\t\t\t&#125;</code> <br>\n <code>//\t\t&#125;</code></p>\n<h5 id=\"clearly-on2-is-too-slow-so-i-tried-to-find-another-way\"><a class=\"markdownIt-Anchor\" href=\"#clearly-on2-is-too-slow-so-i-tried-to-find-another-way\">#</a> Clearly, O(n^2) is too slow. So I tried to find another way.</h5>\n<h5 id=\"we-can-find-that-the-whole-work-can-be-done-in-linear-time-like-this\"><a class=\"markdownIt-Anchor\" href=\"#we-can-find-that-the-whole-work-can-be-done-in-linear-time-like-this\">#</a> We can find that the whole work can be done in LINEAR TIME. Like this:</h5>\n<p><code>\t\tint lld=1;</code> <br>\n <code>\t\tfor (i=1;i&lt;n;i++)&#123;</code> <br>\n <code>\t\t\tif (a[i]&gt;a[i+1])&#123;</code> <br>\n <code>\t\t\t\tb[lld]++;</code> <br>\n <code>\t\t\t\ta[i+1]=a[i];</code> <br>\n <code>\t\t\t&#125;</code> <br>\n <code>\t\t\telse&#123;</code> <br>\n <code>\t\t\t\tlld=i+1;</code> <br>\n <code>\t\t\t\tb[lld]++;</code> <br>\n <code>\t\t\t&#125;</code> <br>\n <code>\t\t&#125;</code></p>\n<h5 id=\"its-not-hard-to-understand-but-effective-just-read-it-oncein-on-the-work-is-done\"><a class=\"markdownIt-Anchor\" href=\"#its-not-hard-to-understand-but-effective-just-read-it-oncein-on-the-work-is-done\">#</a> It’s not hard to understand, but effective. Just read it once(in O(n)), the work is done.</h5>\n",
            "tags": [
                "codeforces"
            ]
        },
        {
            "id": "https://demoyao100.github.io/codeforce-1720C/",
            "url": "https://demoyao100.github.io/codeforce-1720C/",
            "title": "codeforce:1720C",
            "date_published": "2022-08-28T01:37:21.000Z",
            "content_html": "<h1 id=\"codeforces-1720c\"><a class=\"markdownIt-Anchor\" href=\"#codeforces-1720c\">#</a> codeforces 1720C</h1>\n<span id=\"more\"></span>\n<h3 id=\"the-problem\"><a class=\"markdownIt-Anchor\" href=\"#the-problem\">#</a> The problem</h3>\n<blockquote>\n<p>C. Corners<br>\ntime limit per test1 second<br>\nmemory limit per test256 megabytes<br>\ninputstandard input<br>\noutputstandard output<br>\nYou are given a matrix consisting of n rows and m columns. Each cell of this matrix contains 0 or 1.<br>\nLet’s call a square of size 2×2 without one corner cell an L-shape figure. In one operation you can take one L-shape figure, with at least one cell containing 1 and replace all numbers in it with zeroes.<br>\nFind the maximum number of operations that you can do with the given matrix.</p>\n<blockquote>\n<p>Input<br>\nThe first line contains one integer t (1≤t≤500) — the number of test cases. Then follow the descriptions of each test case.<br>\nThe first line of each test case contains two integers n and m (2≤n,m≤500) — the size of the matrix.<br>\nEach of the following n lines contains a binary string of length m — the description of the matrix.<br>\nIt is guaranteed that the sum of n and the sum of m over all test cases does not exceed 1000.<br>\nOutput<br>\nFor each test case output the maximum number of operations you can do with the given matrix.</p>\n</blockquote>\n</blockquote>\n<!--more-->\n<h5 id=\"at-first-i-didnt-have-a-clue-so-i-tried-to-do-a-brute-force-didnt-work-out-of-coursethe-data-volume-is-too-large-so-i-was-wondering-whether-it-could-be-solved-by-dynamic-programing-i-tried-this\"><a class=\"markdownIt-Anchor\" href=\"#at-first-i-didnt-have-a-clue-so-i-tried-to-do-a-brute-force-didnt-work-out-of-coursethe-data-volume-is-too-large-so-i-was-wondering-whether-it-could-be-solved-by-dynamic-programing-i-tried-this\">#</a> At first, I didn’t have a clue. So I tried to do a brute force. Didn’t work out of course.The data volume is too large. So I was wondering whether it could be solved by dynamic programing. I tried this:</h5>\n<blockquote></blockquote>\n<p><code>sum[x][y]=max(sum[x-1][y-1]+b[x][y]-b[x-1][y-1],sum[x-2][y-2]+b[x][y]-b[x-2][y-2])</code></p>\n<h6 id=\"sum-stands-for-the-maximum-number-we-need-to-solve-and-bxy-stands-for-the-sum-of-a1~x1~y\"><a class=\"markdownIt-Anchor\" href=\"#sum-stands-for-the-maximum-number-we-need-to-solve-and-bxy-stands-for-the-sum-of-a1~x1~y\">#</a> sum[][] stands for the maximum number we need to solve, and b[x][y] stands for the sum of a[1~x][1~y].</h6>\n<h5 id=\"it-seemed-closed-but-got-a-wa-well-the-initial-square-was-harder-to-define-then-i-thought-after-a-few-tried-i-decided-to-abandon-this-dp-method\"><a class=\"markdownIt-Anchor\" href=\"#it-seemed-closed-but-got-a-wa-well-the-initial-square-was-harder-to-define-then-i-thought-after-a-few-tried-i-decided-to-abandon-this-dp-method\">#</a> It seemed closed, but got a WA. Well, the initial square was harder to define then I thought. After a few tried, I decided to abandon this dp method.</h5>\n<h5 id=\"it-was-some-time-before-the-right-answer-occur-to-me-its-actually-pretty-easy\"><a class=\"markdownIt-Anchor\" href=\"#it-was-some-time-before-the-right-answer-occur-to-me-its-actually-pretty-easy\">#</a> It was some time before the right answer occur to me. It’s actually pretty easy.</h5>\n<h5 id=\"search-every-square-of-size-22-if-exists-one-square-contains-at-least-two-0then-the-maximum-number-is-the-number-of-1-else-the-maximun-number-is-the-number-of-1-1if-there-contains-0-or-the-maximun-number-is-the-number-of-1-2if-the-whole-square-is-1\"><a class=\"markdownIt-Anchor\" href=\"#search-every-square-of-size-22-if-exists-one-square-contains-at-least-two-0then-the-maximum-number-is-the-number-of-1-else-the-maximun-number-is-the-number-of-1-1if-there-contains-0-or-the-maximun-number-is-the-number-of-1-2if-the-whole-square-is-1\">#</a> Search every square of size 2*2, if exists one square contains at least two ‘0’,then the maximum number is the number of ‘1’, else the maximun number is the number of ‘1’- 1(if there contains ‘0’) or the maximun number is the number of ‘1’- 2(if the whole square is ‘1’)</h5>\n",
            "tags": [
                "codeforces"
            ]
        }
    ]
}