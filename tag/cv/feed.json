{
    "version": "https://jsonfeed.org/version/1",
    "title": "Moyao の小屋 • All posts by \"cv\" tag",
    "description": "Write down something interesting I met\nfeel free to mail me if you have something wanted to talk about\nmail: &lt;moyaoxue@outlook.com&gt;\n",
    "home_page_url": "https://demoyao100.github.io",
    "items": [
        {
            "id": "https://demoyao100.github.io/2023/07/17/cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/",
            "url": "https://demoyao100.github.io/2023/07/17/cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/",
            "title": "cv与一些classify事项记录",
            "date_published": "2023-07-17T08:33:20.000Z",
            "content_html": "<h6 id=\"preface一些project记录慢慢学吧调参炼丹\"><a class=\"anchor\" href=\"#preface一些project记录慢慢学吧调参炼丹\">#</a> preface: 一些 project 记录，慢慢学吧调参炼丹</h6>\n<p><span id=\"more\"></span></p>\n<h5 id=\"需要实现的功能是接收树莓派传过来的植物图像对其是否病害进行分类预测用的训练集是这个病虫害分类数据集-飞桨ai-studio-baiducom训练集的话需要写一个加载json数据的方法\"><a class=\"anchor\" href=\"#需要实现的功能是接收树莓派传过来的植物图像对其是否病害进行分类预测用的训练集是这个病虫害分类数据集-飞桨ai-studio-baiducom训练集的话需要写一个加载json数据的方法\">#</a> 需要实现的功能是接收树莓派传过来的植物图像，对其是否病害进行分类预测，用的训练集是 [这个](<a href=\"https://aistudio.baidu.com/aistudio/datasetdetail/76075\">病虫害分类数据集 - 飞桨 AI Studio (baidu.com)</a>)，训练集的话需要写一个加载 json 数据的方法</h5>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_image_folders_by_class</span>(<span class=\"params\">json_file_path, image_folder_path, output_folder_path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(json_file_path, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        labels_data = json.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 分割训练集和验证集</span></span><br><span class=\"line\">    train_data, val_data = train_test_split(labels_data, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> name, data <span class=\"keyword\">in</span> [(<span class=\"string\">&#x27;train&#x27;</span>, train_data), (<span class=\"string\">&#x27;val&#x27;</span>, val_data)]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            class_folder = os.path.join(output_folder_path, name, <span class=\"built_in\">str</span>(item[<span class=\"string\">&#x27;disease_class&#x27;</span>]))</span><br><span class=\"line\">            os.makedirs(class_folder, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            shutil.copy(os.path.join(image_folder_path, item[<span class=\"string\">&#x27;image_id&#x27;</span>]), os.path.join(class_folder, item[<span class=\"string\">&#x27;image_id&#x27;</span>]))</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"最开始使用的是resnet50后面感觉正确率太低了会不会跟模型有关改成densenet169效果是差不太多\"><a class=\"anchor\" href=\"#最开始使用的是resnet50后面感觉正确率太低了会不会跟模型有关改成densenet169效果是差不太多\">#</a> 最开始使用的是 ResNet50，后面感觉正确率太低了会不会跟模型有关，改成 densenet169，效果是差不太多...</h5>\n<h5 id=\"还发现一个小问题数据集里面都是带病的植物class好像没有健康的\"><a class=\"anchor\" href=\"#还发现一个小问题数据集里面都是带病的植物class好像没有健康的\">#</a> 还发现一个小问题，数据集里面都是带病的植物 class，好像没有健康的...</h5>\n<h5 id=\"于是乎感觉反正准确率偏低了干脆根据置信度分一类专门来判别没病的植物么得重写一些训模型的部分log一下平均置信度和方差然后假装正则大概放一个置信度来判别\"><a class=\"anchor\" href=\"#于是乎感觉反正准确率偏低了干脆根据置信度分一类专门来判别没病的植物么得重写一些训模型的部分log一下平均置信度和方差然后假装正则大概放一个置信度来判别\">#</a> 于是乎感觉反正准确率偏低了，干脆根据置信度分一类专门来判别没病的植物么得，重写一些训模型的部分，log 一下平均置信度和方差，然后假装正则大概放一个置信度来判别</h5>\n<p><img loading=\"lazy\" data-src=\"cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/image-20230717164424184.png\" alt=\"image-20230717164424184\"></p>\n<h5 id=\"大概大概这样子吧\"><a class=\"anchor\" href=\"#大概大概这样子吧\">#</a> 大概大概这样子吧</h5>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">predict_image</span>(<span class=\"params\">image_path</span>):</span><br><span class=\"line\">    img = Image.<span class=\"built_in\">open</span>(image_path)</span><br><span class=\"line\">    img = data_transform(img).unsqueeze(<span class=\"number\">0</span>)</span><br><span class=\"line\">    img = img.to(device)</span><br><span class=\"line\">    output = model(img)</span><br><span class=\"line\">    probs = torch.nn.functional.softmax(output, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">    max_prob, preds = torch.<span class=\"built_in\">max</span>(probs, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(max_prob)</span></span><br><span class=\"line\">    threshold = <span class=\"number\">0.7</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> max_prob &lt; threshold:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Low confidence&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> preds</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"最后正确率还是很一眼难尽目前是没做数据增强的应该是不能变太多主要是病害植物和普通植物确实分类不明显暂且原谅这程序的低准确率\"><a class=\"anchor\" href=\"#最后正确率还是很一眼难尽目前是没做数据增强的应该是不能变太多主要是病害植物和普通植物确实分类不明显暂且原谅这程序的低准确率\">#</a> 最后正确率还是很一眼难尽，目前是没做数据增强的，应该是不能变太多，主要是病害植物和普通植物确实分类不明显，暂且原谅这程序的低准确率...</h5>\n<h5 id=\"mark一个奇怪的事情训练模型过程中每个epoch正确率都还不错有50左右存好model以后再测试正确率就掉到个位数\"><a class=\"anchor\" href=\"#mark一个奇怪的事情训练模型过程中每个epoch正确率都还不错有50左右存好model以后再测试正确率就掉到个位数\">#</a> mark 一个奇怪的事情：训练模型过程中每个 epoch 正确率都还不错有 50 左右，存好 model 以后再测试正确率就掉到个位数。</h5>\n<h6 id=\"7-18更新\"><a class=\"anchor\" href=\"#7-18更新\">#</a> *7-18 更新</h6>\n<h5 id=\"本来dl部分给的数据做的极端处理是mean值-三倍标准差结果在测温湿度之类的1h内数据根本不变化导致classifier基本上不工作这边选择改成手动给调极端数据来训分类器了\"><a class=\"anchor\" href=\"#本来dl部分给的数据做的极端处理是mean值-三倍标准差结果在测温湿度之类的1h内数据根本不变化导致classifier基本上不工作这边选择改成手动给调极端数据来训分类器了\">#</a> 本来 dl 部分给的数据做的极端处理是 mean 值 +- 三倍标准差，结果在测温湿度之类的 1h 内数据根本不变化，导致 classifier 基本上不工作...... 这边选择改成手动给调极端数据来训分类器了...</h5>\n<h6 id=\"7-27更新补\"><a class=\"anchor\" href=\"#7-27更新补\">#</a> *7-27 更新（补）</h6>\n<h5 id=\"最后更新了label的方法加入了adam优化最终准确率94\"><a class=\"anchor\" href=\"#最后更新了label的方法加入了adam优化最终准确率94\">#</a> 最后更新了 label 的方法，加入了 adam 优化，最终准确率 94%</h5>\n<p><img loading=\"lazy\" data-src=\"cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/image-20230727115911697.png\" alt=\"image-20230727115911697\"></p>\n<h6 id=\"实测效果也是不错来的有点点过于灵敏置信度给的不准实际使用稍微要求有点严苛\"><a class=\"anchor\" href=\"#实测效果也是不错来的有点点过于灵敏置信度给的不准实际使用稍微要求有点严苛\">#</a> （实测效果也是不错来的，有点点过于灵敏，置信度给的不准，实际使用稍微要求有点严苛）</h6>\n<h6 id=\"不过背景处理啥的还学不太明白也没啥时间就先这样子了\"><a class=\"anchor\" href=\"#不过背景处理啥的还学不太明白也没啥时间就先这样子了\">#</a> 不过背景处理啥的还学不太明白，也没啥时间，就先这样子了</h6>\n",
            "tags": [
                "cv"
            ]
        }
    ]
}