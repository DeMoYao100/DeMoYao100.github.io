<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://demoyao100.github.io</id>
    <title>Moyao の小屋 • Posts by &#34;cv&#34; tag</title>
    <link href="https://demoyao100.github.io" />
    <updated>2023-07-17T08:33:20.000Z</updated>
    <category term="re" />
    <category term="ctf" />
    <category term="reverse" />
    <category term="tools" />
    <category term="php" />
    <category term="codeforces" />
    <category term="c++" />
    <category term="cv" />
    <category term="android" />
    <category term="jail" />
    <category term="re python" />
    <category term="hexo" />
    <category term="node.js" />
    <entry>
        <id>https://demoyao100.github.io/2023/07/17/cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/</id>
        <title>cv与一些classify事项记录</title>
        <link rel="alternate" href="https://demoyao100.github.io/2023/07/17/cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;h6 id=&#34;preface一些project记录慢慢学吧调参炼丹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#preface一些project记录慢慢学吧调参炼丹&#34;&gt;#&lt;/a&gt; preface: 一些 project 记录，慢慢学吧调参炼丹&lt;/h6&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;需要实现的功能是接收树莓派传过来的植物图像对其是否病害进行分类预测用的训练集是这个病虫害分类数据集-飞桨ai-studio-baiducom训练集的话需要写一个加载json数据的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需要实现的功能是接收树莓派传过来的植物图像对其是否病害进行分类预测用的训练集是这个病虫害分类数据集-飞桨ai-studio-baiducom训练集的话需要写一个加载json数据的方法&#34;&gt;#&lt;/a&gt; 需要实现的功能是接收树莓派传过来的植物图像，对其是否病害进行分类预测，用的训练集是 [这个](&lt;a href=&#34;https://aistudio.baidu.com/aistudio/datasetdetail/76075&#34;&gt;病虫害分类数据集 - 飞桨 AI Studio (baidu.com)&lt;/a&gt;)，训练集的话需要写一个加载 json 数据的方法&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;create_image_folders_by_class&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;json_file_path, image_folder_path, output_folder_path&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(json_file_path, &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        labels_data = json.load(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 分割训练集和验证集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    train_data, val_data = train_test_split(labels_data, test_size=&lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;, random_state=&lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name, data &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [(&lt;span class=&#34;string&#34;&gt;&amp;#x27;train&amp;#x27;&lt;/span&gt;, train_data), (&lt;span class=&#34;string&#34;&gt;&amp;#x27;val&amp;#x27;&lt;/span&gt;, val_data)]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; item &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            class_folder = os.path.join(output_folder_path, name, &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(item[&lt;span class=&#34;string&#34;&gt;&amp;#x27;disease_class&amp;#x27;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            os.makedirs(class_folder, exist_ok=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            shutil.copy(os.path.join(image_folder_path, item[&lt;span class=&#34;string&#34;&gt;&amp;#x27;image_id&amp;#x27;&lt;/span&gt;]), os.path.join(class_folder, item[&lt;span class=&#34;string&#34;&gt;&amp;#x27;image_id&amp;#x27;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;最开始使用的是resnet50后面感觉正确率太低了会不会跟模型有关改成densenet169效果是差不太多&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最开始使用的是resnet50后面感觉正确率太低了会不会跟模型有关改成densenet169效果是差不太多&#34;&gt;#&lt;/a&gt; 最开始使用的是 ResNet50，后面感觉正确率太低了会不会跟模型有关，改成 densenet169，效果是差不太多...&lt;/h5&gt;
&lt;h5 id=&#34;还发现一个小问题数据集里面都是带病的植物class好像没有健康的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#还发现一个小问题数据集里面都是带病的植物class好像没有健康的&#34;&gt;#&lt;/a&gt; 还发现一个小问题，数据集里面都是带病的植物 class，好像没有健康的...&lt;/h5&gt;
&lt;h5 id=&#34;于是乎感觉反正准确率偏低了干脆根据置信度分一类专门来判别没病的植物么得重写一些训模型的部分log一下平均置信度和方差然后假装正则大概放一个置信度来判别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#于是乎感觉反正准确率偏低了干脆根据置信度分一类专门来判别没病的植物么得重写一些训模型的部分log一下平均置信度和方差然后假装正则大概放一个置信度来判别&#34;&gt;#&lt;/a&gt; 于是乎感觉反正准确率偏低了，干脆根据置信度分一类专门来判别没病的植物么得，重写一些训模型的部分，log 一下平均置信度和方差，然后假装正则大概放一个置信度来判别&lt;/h5&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/image-20230717164424184.png&#34; alt=&#34;image-20230717164424184&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;大概大概这样子吧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大概大概这样子吧&#34;&gt;#&lt;/a&gt; 大概大概这样子吧&lt;/h5&gt;
&lt;p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;predict_image&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;image_path&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    img = Image.&lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(image_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    img = data_transform(img).unsqueeze(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    img = img.to(device)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    output = model(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    probs = torch.nn.functional.softmax(output, dim=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    max_prob, preds = torch.&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(probs, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# print(max_prob)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    threshold = &lt;span class=&#34;number&#34;&gt;0.7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; max_prob &amp;lt; threshold:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Low confidence&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; preds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;最后正确率还是很一眼难尽目前是没做数据增强的应该是不能变太多主要是病害植物和普通植物确实分类不明显暂且原谅这程序的低准确率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最后正确率还是很一眼难尽目前是没做数据增强的应该是不能变太多主要是病害植物和普通植物确实分类不明显暂且原谅这程序的低准确率&#34;&gt;#&lt;/a&gt; 最后正确率还是很一眼难尽，目前是没做数据增强的，应该是不能变太多，主要是病害植物和普通植物确实分类不明显，暂且原谅这程序的低准确率...&lt;/h5&gt;
&lt;h5 id=&#34;mark一个奇怪的事情训练模型过程中每个epoch正确率都还不错有50左右存好model以后再测试正确率就掉到个位数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mark一个奇怪的事情训练模型过程中每个epoch正确率都还不错有50左右存好model以后再测试正确率就掉到个位数&#34;&gt;#&lt;/a&gt; mark 一个奇怪的事情：训练模型过程中每个 epoch 正确率都还不错有 50 左右，存好 model 以后再测试正确率就掉到个位数。&lt;/h5&gt;
&lt;h6 id=&#34;7-18更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-18更新&#34;&gt;#&lt;/a&gt; *7-18 更新&lt;/h6&gt;
&lt;h5 id=&#34;本来dl部分给的数据做的极端处理是mean值-三倍标准差结果在测温湿度之类的1h内数据根本不变化导致classifier基本上不工作这边选择改成手动给调极端数据来训分类器了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本来dl部分给的数据做的极端处理是mean值-三倍标准差结果在测温湿度之类的1h内数据根本不变化导致classifier基本上不工作这边选择改成手动给调极端数据来训分类器了&#34;&gt;#&lt;/a&gt; 本来 dl 部分给的数据做的极端处理是 mean 值 +- 三倍标准差，结果在测温湿度之类的 1h 内数据根本不变化，导致 classifier 基本上不工作...... 这边选择改成手动给调极端数据来训分类器了...&lt;/h5&gt;
&lt;h6 id=&#34;7-27更新补&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-27更新补&#34;&gt;#&lt;/a&gt; *7-27 更新（补）&lt;/h6&gt;
&lt;h5 id=&#34;最后更新了label的方法加入了adam优化最终准确率94&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最后更新了label的方法加入了adam优化最终准确率94&#34;&gt;#&lt;/a&gt; 最后更新了 label 的方法，加入了 adam 优化，最终准确率 94%&lt;/h5&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;cv%E4%B8%8E%E4%B8%80%E4%BA%9Bclassify%E4%BA%8B%E9%A1%B9%E8%AE%B0%E5%BD%95/image-20230727115911697.png&#34; alt=&#34;image-20230727115911697&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;实测效果也是不错来的有点点过于灵敏置信度给的不准实际使用稍微要求有点严苛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实测效果也是不错来的有点点过于灵敏置信度给的不准实际使用稍微要求有点严苛&#34;&gt;#&lt;/a&gt; （实测效果也是不错来的，有点点过于灵敏，置信度给的不准，实际使用稍微要求有点严苛）&lt;/h6&gt;
&lt;h6 id=&#34;不过背景处理啥的还学不太明白也没啥时间就先这样子了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不过背景处理啥的还学不太明白也没啥时间就先这样子了&#34;&gt;#&lt;/a&gt; 不过背景处理啥的还学不太明白，也没啥时间，就先这样子了&lt;/h6&gt;
</content>
        <category term="cv" />
        <updated>2023-07-17T08:33:20.000Z</updated>
    </entry>
</feed>
