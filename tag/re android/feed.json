{
    "version": "https://jsonfeed.org/version/1",
    "title": "Moyao の小屋 • All posts by \"re android\" tag",
    "description": "Write down something interesting I met<br />\nFeel free to mail me if you have something wanted to talk about, plz\nmail: &lt;moyaoxue@outlook.com&gt;\n",
    "home_page_url": "https://demoyao100.github.io",
    "items": [
        {
            "id": "https://demoyao100.github.io/2024/05/03/%E4%B8%8D%E5%90%8C%E7%9A%84android-hook%E5%A7%BF%E5%8A%BF/",
            "url": "https://demoyao100.github.io/2024/05/03/%E4%B8%8D%E5%90%8C%E7%9A%84android-hook%E5%A7%BF%E5%8A%BF/",
            "title": "不同的android hook姿势",
            "date_published": "2024-05-03T10:55:01.000Z",
            "content_html": "<p>PREFACE：被拷打一排甚至没听过，之前确实一点不懂这个，爬来快速过一下</p>\n<p><span id=\"more\"></span></p>\n<h3 id=\"一-got表hook\"><a class=\"anchor\" href=\"#一-got表hook\">#</a> 一、GOT 表 HOOK</h3>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/269441842\">PLT HOOK - 知乎 (zhihu.com)</a></p>\n<p>仅能 hook got 表中引用的函数，替换某个 SO 的外部调用，通过将外部函数调用跳转成我们的目标函数。</p>\n<p>当需要使用一个 Native 库（.so 文件）的时候，我们需要调用 dlopen (&quot;<a href=\"http://libname.so\">libname.so</a>&quot;) 来加载这个库。在我们调用了 dlopen (&quot;<a href=\"http://libname.so\">libname.so</a>&quot;) 之后，系统首先会检查缓存中已加载的 ELF 文件列表。如果未加载则执行加载过程，如果已加载则计数加一，忽略该调用。然后系统会用从 <a href=\"http://libname.so\">libname.so</a> 的 dynamic 节区中读取其所依赖的库，按照相同的加载逻辑，把未在缓存中的库加入加载列表。</p>\n<p><img src=\"/2024/05/03/%E4%B8%8D%E5%90%8C%E7%9A%84android-hook%E5%A7%BF%E5%8A%BF/Untitled.png\" alt=\"Untitled\"></p>\n<ul>\n<li><strong>Relocation Outputs（输出）</strong></li>\n</ul>\n<ol>\n<li>.got.plt - 外部函数的绝对地址。</li>\n<li>.data，.data.rel.ro - 外部数据（包括函数指针）的绝对地址。</li>\n</ol>\n<ul>\n<li><strong>Relocation Tables（基本信息）</strong></li>\n</ul>\n<ol>\n<li>.rel.plt，.rela.plt 用于 “关联”.dynsym 和.got.plt。</li>\n<li>.rel.dyn，.rela.dyn，.rel.dyn.aps2，.rela.dyn.aps2 用于 “关联”.dynsym 和.data，.data.rel.ro。</li>\n<li>.relr.dyn 是 Android 11 新增的，仅用于 ELF 的内部相对 relocation（基地址重写）</li>\n</ol>\n<ul>\n<li><strong>符号信息（.dynsym 和 .dynstr）</strong></li>\n</ul>\n<ol>\n<li>.dynstr 是 “字符串池”，保存了动态链接过程中用到的所有字符串信息，比如：函数名，全局变量名。</li>\n<li>.dynsym 中包含了与符号关联的各种 “索引” 信息，起到 “关联” 和 “描述（符号类型 func/ifunc/object 等等）” 的作用。</li>\n<li>.dynsym 中的符号分为 “导入符号” 和 “导出符号”。SHN_UNDEF == st_shndx 为导入符号，SHN_UNDEF != st_shndx 为导出符号。</li>\n</ol>\n<p>加载 ELF 文件：</p>\n<ol>\n<li>读 ELF 的程序头部表，把所有 PT_LOAD 的节区 mmap 到内存中。</li>\n<li>从 “.dynamic” 中读取各信息项，计算并保存所有节区的虚拟地址，然后执行重定位操作。</li>\n<li>最后 ELF 加载成功，引用计数加一。</li>\n</ol>\n<p><strong>重定位：</strong></p>\n<ul>\n<li><strong>The Global Offset Table (GOT)</strong>。简单来说就是在数据段的地址表，假定我们有一些代码段的指令引用一些地址变量，编译器会引用 GOT 表来替代直接引用绝对地址，因为绝对地址在编译期是无法知道的，只有重定位后才会得到 ，GOT 自己本身将会包含函数引用的绝对地址。</li>\n<li><strong>The Procedure Linkage Table (PLT)</strong>。PLT 不同于 GOT，它位于代码段，动态库的每一个外部函数都会在 PLT 中有一条记录，每一条 PLT 记录都是一小段可执行代码。 一般来说，外部代码都是在调用 PLT 表里的记录，然后 PLT 的相应记录会负责调用实际的函数。我们一般把这种设定叫作 “蹦床”（Trampoline）。</li>\n</ul>\n<p>PLT 和 GOT 记录是一一对应的，并且 GOT 表第一次解析后会包含调用函数的实际地址。既然这样，那 PLT 的意义究竟是什么呢？PLT 从某种意义上赋予我们一种懒加载的能力。当动态库首次被加载时，所有的函数地址并没有被解析。</p>\n<p>![Untitled (1)](不同的 android-hook 姿势 / Untitled (1).png)</p>\n<h5 id=\"实现待自行探究\"><a class=\"anchor\" href=\"#实现待自行探究\">#</a> 实现（待自行探究）</h5>\n<p>**（1）** 在内存中找到目标 ELF</p>\n<p><strong>方法 1：dl_iterate_phdr</strong></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>Linux 的标准 dl API，NDK 提供了支持，使用方便。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>arm32 中，Android version &gt;= 5.0（API level 21）时 NDK 才支持。</li>\n<li>Android 5.0 和 5.1（API level 21 和 22），dl_iterate_phdr 的实现不持 linker 全局锁，需要自己找 linker 的符号（__dl__ZL10g_dl_mutex）自己加锁。</li>\n<li>x86 平台 Android 4.x 的 dl_iterate_phdr () 也不持锁，而且 Android 4.x 的 linker 全局锁符号未导出。</li>\n<li>Android &lt; 8.1（API level 27）时，不能通过 dl_iterate_phdr 遍历到 linker /linker64。（aosp 从 8.0 开始已经包含了 linker/linker64，但是大量的其他厂商的设备是从 Android 8.1 开始包含 linker/linker64 的）</li>\n<li>部分 Android 4.x 和 Android 5.x 设备的 dl_iterate_phdr 只能返回 ELF 的 basename，而不是 pathname。</li>\n</ul>\n<p><strong>方法 2：dlopen (&quot;<a href=\"http://libdl.so\">libdl.so</a>&quot;) 返回 linker 内部的 struct soinfo list header，自己遍历</strong></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>能支持 Android 4.x。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>Android 4.x 的 linker 全局锁（gDlMutex）没有符号导出，直接遍历 struct soinfo list 容易挂。</li>\n<li>有一定的兼容性风险。</li>\n<li>部分 Android 4.x 和 Android 5.x 设备只能返回 ELF 的 basename，而不是 pathname。</li>\n</ul>\n<p><strong>方法 3：读 maps 自己解析 （/proc/self/maps）</strong></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>不用考虑 Android 4.x linker 全局锁的问题。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>有一定的兼容性风险。</li>\n</ul>\n<p><strong>最佳实践</strong></p>\n<p>Android 4.x：</p>\n<ul>\n<li>解析 maps，使用 “权限 r-xp” + “offset == 0” 来过滤，再检查 ELF magic header。（4.x 上 ELF 结构还是比较保守的，目前没有发现 r-xp 判定失败的情况）</li>\n<li>也可以先使用 dlopen (&quot;<a href=\"http://libdl.so\">libdl.so</a>&quot;) 的方式，但是兼容性需要更多的测试，如果读取失败，需要回到读 maps 的方式来处理。</li>\n</ul>\n<p>Android &gt;=5.0：</p>\n<ul>\n<li>使用 dl_iterate_phdr。</li>\n<li>对于 5.0/5.1，自己用__dl__ZL10g_dl_mutex 加锁。</li>\n<li>发现 ELF 名称为 basename 时，读 maps，从 maps 中查找对应的 pathname。</li>\n<li>需要 linker/linker64 的话，&lt; 8.1 时需要从 maps 中读取。</li>\n</ul>\n<ol>\n<li>hook 导入表，即 “调用方”。如果需要 hook 进程中对于某个函数的所有调用，这种方法是比较麻烦的，需要逐个 hook 内存中已经加载的所有 ELF，还需要监控 dlopen 和 android_dlopen_ext（以便感知到新加载的 ELF，再对它执行导入表 hook）。</li>\n<li>hook 导出表，即修改被调用方对应函数符号的 offset 值（.dynsym 中对应表项的 st_value），使 linker 通过修改后的新 st_value 来查找对应函数符号的内存绝对地址时，实际查找到的是内存中外部 ELF 的 hook 函数的地址，这样 linker 对新加载的 ELF 执行完 relocation 操作后，新 ELF 的相应调用就自然被 hook 到了我们指定的函数。</li>\n</ol>\n<ul>\n<li><strong>查找导入表符号的方法</strong></li>\n</ul>\n<p>当存在 SYSV hash 时，先尝试通过 SYSV hash 来查找。先后按顺序尝试查找：</p>\n<pre><code>.hash -&gt; .dynsym -&gt; .dynstr，时间复杂度：O(x) + O(1) + O(1) .dynsym -&gt; .dynstr，时间复杂度：O(n) + O(1)\n</code></pre>\n<ul>\n<li><strong>查找导出表符号的方法</strong></li>\n</ul>\n<p>优先使用 GNU hash，比 SYSV hash 更高效。先后按顺序尝试查找：</p>\n<pre><code>.gnu.hash -&gt; .dynsym -&gt; .dynstr，时间复杂度：O(x) + O(1) + O(1) .hash -&gt; .dynsym -&gt; .dynstr，时间复杂度：O(x) + O(1) + O(1)\n</code></pre>\n<ul>\n<li><strong>查找 .got.plt 中函数地址的方法</strong></li>\n</ul>\n<ol>\n<li>逐项遍历 .rel.plt 和.rela.plt 表，用上面已经找到的符号信息去比对，对应到即找到了地址的 offset（r_offset 项）</li>\n<li>将 r_offset 加上 ELF 的 “内存加载基地址”（load_bias）即为所得。</li>\n</ol>\n<ul>\n<li><strong>查找 .data 和 .data.rel.ro 中数据地址的方法</strong></li>\n</ul>\n<ol>\n<li>与上面查找 .got.plt 的过程相同，只是改为了遍历 .rel.dyn 和 .rela.dyn，以及 .rel.dyn.aps2 和 .rela.dyn.aps2。</li>\n</ol>\n<ul>\n<li><strong>修改数据（hook）</strong></li>\n</ul>\n<ol>\n<li>修改内存权限：使用 mprotect 将目标地址所在内存页改为可读可写</li>\n<li>修改数据：</li>\n</ol>\n<p>** 方法 1：** 直接赋值，再使用 __builtin___clear_cache 清除目标地址的 CPU cache。</p>\n<p>** 方法 2：** 使用 atomic 方式来赋值，比如：__atomic_store_n ((uintptr_t *) got_addr, (uintptr_t) new_func, __ATOMIC_SEQ_CST);</p>\n<h3 id=\"二-ldpreload_hook\"><a class=\"anchor\" href=\"#二-ldpreload_hook\">#</a> 二、LDPRELOAD_HOOK</h3>\n<p>虚假的导入函数</p>\n<h3 id=\"三-inline-hook\"><a class=\"anchor\" href=\"#三-inline-hook\">#</a> 三、inline hook</h3>\n<p>这个在 frida 源码里面看的比较多，这里简单看一下怎么检测</p>\n<h5 id=\"检测手段\"><a class=\"anchor\" href=\"#检测手段\">#</a> 检测手段</h5>\n<p>CRC 校验：inline hook 会改函数写跳板，这样的话一个常见的思路就是对函数</p>\n<h3 id=\"四-异常-hook\"><a class=\"anchor\" href=\"#四-异常-hook\">#</a> 四、异常 hook</h3>\n<h3 id=\"五-依赖库篡改-hook\"><a class=\"anchor\" href=\"#五-依赖库篡改-hook\">#</a> 五、依赖库篡改 hook</h3>\n<h3 id=\"六-linker-hook\"><a class=\"anchor\" href=\"#六-linker-hook\">#</a> 六、linker hook</h3>\n<h3 id=\"七-unicor\"><a class=\"anchor\" href=\"#七-unicor\">#</a> 七、UNICOR</h3>\n<p><a href=\"https://github.com/acbocai/vergil\">https://github.com/acbocai/vergil</a></p>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/269441842\">PLT HOOK - 知乎 (zhihu.com)</a></p>\n<p>[<a href=\"https://bbs.kanxue.com/thread-254853.htm\">原创] 7 种 Android Native Anti Hook 的实现思路 - Android 安全 - 看雪 - 安全社区 | 安全招聘 | kanxue.com</a></p>\n",
            "tags": [
                "re Android"
            ]
        }
    ]
}