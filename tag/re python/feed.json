{
    "version": "https://jsonfeed.org/version/1",
    "title": "rev@天枢 • All posts by \"re python\" tag",
    "description": "Write down something interesting I met<br />\nFeel free to mail me if you have something wanted to talk about, plz\nmail: &lt;moyaoxue@outlook.com&gt;\n",
    "home_page_url": "https://demoyao100.github.io",
    "items": [
        {
            "id": "https://demoyao100.github.io/2023/08/23/%E5%88%9D%E6%8E%A2python-bytecode/",
            "url": "https://demoyao100.github.io/2023/08/23/%E5%88%9D%E6%8E%A2python-bytecode/",
            "title": "初探python bytecode",
            "date_published": "2023-08-23T06:54:54.000Z",
            "content_html": "<h6 id=\"preface起因是wmctf的一道python题包括了修复python字节码花指令和虚拟机等考点-算是萌新初见python花花了一上午学习修了花指令反编译不了不过可以获得字节码理论上手动反汇编得到python码就没问题了-但实际上这里的字节码结构也有点问题顺便从学长那里听闻了一下下antlr这种东西-然后手动翻译的伪代码也错漏百出最后是学长写了脚本给他自动化修了得以告一段落-不过确实得回来补补python的编译结构功课了\"><a class=\"markdownIt-Anchor\" href=\"#preface起因是wmctf的一道python题包括了修复python字节码花指令和虚拟机等考点-算是萌新初见python花花了一上午学习修了花指令反编译不了不过可以获得字节码理论上手动反汇编得到python码就没问题了-但实际上这里的字节码结构也有点问题顺便从学长那里听闻了一下下antlr这种东西-然后手动翻译的伪代码也错漏百出最后是学长写了脚本给他自动化修了得以告一段落-不过确实得回来补补python的编译结构功课了\">#</a> preface: 起因是 wmctf 的一道 python 题，包括了修复 python 字节码花指令和虚拟机等考点。算是萌新初见 python 花，花了一上午学习修了花指令，反编译不了不过可以获得字节码，理论上手动反汇编得到 python 码就没问题了。但实际上这里的字节码结构也有点问题，顺便从学长那里听闻了一下下 antlr 这种东西。然后手动翻译的伪代码也错漏百出… 最后是学长写了脚本给他自动化修了得以告一段落。不过确实得回来补补 python 的编译结构功课了。</h6>\n<span id=\"more\"></span>\n<h5 id=\"题目是39的不过在这里就可以直接搜其他版本的也一样cpython-39\"><a class=\"markdownIt-Anchor\" href=\"#题目是39的不过在这里就可以直接搜其他版本的也一样cpython-39\">#</a> 题目是 3.9 的，不过在这里就可以直接搜其他版本的也一样<a href=\"https://github.com/python/cpython/blob/3.9/Objects/codeobject.c\"> cpython 3.9</a></h5>\n<h5 id=\"image-20230823153127421\"><a class=\"markdownIt-Anchor\" href=\"#image-20230823153127421\">#</a> <img loading=\"lazy\" data-src=\"%E5%88%9D%E6%8E%A2python-bytecode/image-20230823153127421.png\" alt=\"image-20230823153127421\"></h5>\n<h5 id=\"这里的co_code是字节码的长度标识在patch时需要注意修复长度其他标志位也需要注意赛时就是co_lnotab对齐问题导致的无法反编译\"><a class=\"markdownIt-Anchor\" href=\"#这里的co_code是字节码的长度标识在patch时需要注意修复长度其他标志位也需要注意赛时就是co_lnotab对齐问题导致的无法反编译\">#</a> 这里的 co_code 是字节码的长度标识，在 patch 时需要注意修复长度，其他标志位也需要注意（赛时就是 co_lnotab 对齐问题导致的无法反编译）</h5>\n<p><img loading=\"lazy\" data-src=\"%E5%88%9D%E6%8E%A2python-bytecode/image-20230823154536966.png\" alt=\"image-20230823154536966\"></p>\n<h5 id=\"cpythonobjectslnotab_notestxt-at-39-pythoncpython-githubcom\"><a class=\"markdownIt-Anchor\" href=\"#cpythonobjectslnotab_notestxt-at-39-pythoncpython-githubcom\">#</a> <a href=\"https://github.com/python/cpython/blob/3.9/Objects/lnotab_notes.txt\">cpython/Objects/lnotab_notes.txt at 3.9 · python/cpython (github.com)</a> 可以参考文档</h5>\n<h5 id=\"去花脚本r1mao那里偷来的\"><a class=\"markdownIt-Anchor\" href=\"#去花脚本r1mao那里偷来的\">#</a> 去花脚本（R1mao 那里偷来的）：</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dis</span><br><span class=\"line\"><span class=\"keyword\">import</span> RightBack</span><br><span class=\"line\"><span class=\"keyword\">import</span> marshal</span><br><span class=\"line\"><span class=\"keyword\">import</span> types</span><br><span class=\"line\"><span class=\"keyword\">from</span> graphviz <span class=\"keyword\">import</span> Digraph</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_funcs</span>(<span class=\"params\">module</span>):</span><br><span class=\"line\">    funcs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(module):</span><br><span class=\"line\">        obj = <span class=\"built_in\">getattr</span>(module, name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(obj, types.FunctionType):</span><br><span class=\"line\">           funcs.append(obj)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_extend_size</span>(<span class=\"params\">code, offset</span>):</span><br><span class=\"line\">    ptr = offset</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        op = code[ptr]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> op != dis.EXTENDED_ARG:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        ptr += <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr - offset</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InstWrapper</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, prefix_insn : <span class=\"built_in\">list</span>[dis.Instruction], main_insn : dis.Instruction</span>):</span><br><span class=\"line\">        self.offset = main_insn.offset</span><br><span class=\"line\">        self.prefix_insn = prefix_insn</span><br><span class=\"line\">        self.main_insn = main_insn</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(prefix_insn) != <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.offset = prefix_insn[<span class=\"number\">0</span>].offset</span><br><span class=\"line\">        self.preds = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        self.succs = <span class=\"built_in\">set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">edge</span>(<span class=\"params\">self, v1</span>):</span><br><span class=\"line\">        v1.preds.add(self)</span><br><span class=\"line\">        self.succs.add(v1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">unlink</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> self.preds:</span><br><span class=\"line\">            n.succs.remove(self)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> self.succs:</span><br><span class=\"line\">            n.preds.remove(self)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">size</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span> * (<span class=\"built_in\">len</span>(self.prefix_insn) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">print_asm</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(self.succs) &lt;= <span class=\"number\">2</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.main_insn.opcode <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dis.hasjabs <span class=\"keyword\">and</span> self.main_insn.opcode <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dis.hasjrel:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> self.prefix_insn:</span><br><span class=\"line\">                result += [p.opcode, p.arg]</span><br><span class=\"line\">            result += [self.main_insn.opcode]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.main_insn.arg:</span><br><span class=\"line\">                result.append(self.main_insn.arg)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                result.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        s = <span class=\"built_in\">list</span>(self.succs)</span><br><span class=\"line\">        ref_target = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.offset + self.size() != n.offset:</span><br><span class=\"line\">                ref_target = n.offset</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        argval = ref_target</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.main_insn.opcode <span class=\"keyword\">in</span> dis.hasjrel:</span><br><span class=\"line\">            argval = ref_target - (self.offset + <span class=\"built_in\">len</span>(self.prefix_insn) * <span class=\"number\">2</span>) - <span class=\"number\">2</span></span><br><span class=\"line\">        byte_size = <span class=\"built_in\">len</span>(self.prefix_insn) + <span class=\"number\">1</span></span><br><span class=\"line\">        argval &amp;= (<span class=\"number\">2</span> ** (<span class=\"number\">8</span> * byte_size)) - <span class=\"number\">1</span></span><br><span class=\"line\">        raw = <span class=\"built_in\">int</span>.to_bytes(argval, byte_size, byteorder=<span class=\"string\">&#x27;big&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(self.prefix_insn)):</span><br><span class=\"line\">            result += [dis.opmap[<span class=\"string\">&#x27;EXTENDED_ARG&#x27;</span>], raw[i]]</span><br><span class=\"line\">        result += [self.main_insn.opcode, raw[<span class=\"built_in\">len</span>(self.prefix_insn)]]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;%04d %s\\t(%s)&#x27;</span> % (self.offset, self.main_insn.opname, <span class=\"built_in\">str</span>(self.main_insn.argval) <span class=\"keyword\">if</span> self.main_insn.argval <span class=\"keyword\">else</span> <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fix_invalid</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    raw_code = func.__code__.co_code</span><br><span class=\"line\">    insn_map = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> insn <span class=\"keyword\">in</span> dis._get_instructions_bytes(raw_code):</span><br><span class=\"line\">        insn_map[insn.offset] = insn</span><br><span class=\"line\"></span><br><span class=\"line\">    trace_result = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">trace_pc</span>(<span class=\"params\">code, insn_map, offset</span>):</span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> trace_result</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> offset <span class=\"keyword\">in</span> insn_map</span><br><span class=\"line\">        </span><br><span class=\"line\">        extend_size = get_extend_size(code, offset)</span><br><span class=\"line\">        cur_size = extend_size + <span class=\"number\">2</span></span><br><span class=\"line\">        cur = insn_map[offset + extend_size]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> offset <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> trace_result.keys():</span><br><span class=\"line\">            trace_result.update(&#123;offset : cur_size&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur.opname == <span class=\"string\">&#x27;RETURN_VALUE&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> cur.opcode <span class=\"keyword\">in</span> dis.hasjabs + dis.hasjrel:</span><br><span class=\"line\">            jump_target = cur.argval</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.opname == <span class=\"string\">&#x27;JUMP_FORWARD&#x27;</span> <span class=\"keyword\">or</span> cur.opname == <span class=\"string\">&#x27;JUMP_ABSOLUTE&#x27;</span>:</span><br><span class=\"line\">                trace_pc(code, insn_map, jump_target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                trace_pc(code, insn_map, jump_target)</span><br><span class=\"line\">                trace_pc(code, insn_map, offset + cur_size)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            trace_pc(code, insn_map, offset + cur_size)</span><br><span class=\"line\"></span><br><span class=\"line\">    trace_pc(raw_code, insn_map, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    flat_mem = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(raw_code))]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> trace_result.items():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(v):</span><br><span class=\"line\">            flat_mem[k + i] = <span class=\"number\">1</span></span><br><span class=\"line\">    new_code = []</span><br><span class=\"line\">    idx = <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> raw_code:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> flat_mem[idx] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            new_code.append(d)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            new_code.append(dis.opmap[<span class=\"string\">&#x27;NOP&#x27;</span>])</span><br><span class=\"line\">        idx += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    new_code = <span class=\"built_in\">bytes</span>(new_code)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">recompile</span>(<span class=\"params\">func, new_code</span>):</span><br><span class=\"line\">    all_wrap = &#123;&#125;</span><br><span class=\"line\">    worker = &#123;&#125;</span><br><span class=\"line\">    temp = []</span><br><span class=\"line\">    last = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> insn <span class=\"keyword\">in</span> dis._get_instructions_bytes(new_code):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> insn.opname == <span class=\"string\">&#x27;EXTENDED_ARG&#x27;</span>:</span><br><span class=\"line\">            temp.append(insn)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            inst = InstWrapper(temp.copy(), insn)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> inst.offset <span class=\"keyword\">in</span> worker.keys():</span><br><span class=\"line\">                <span class=\"keyword\">for</span> other <span class=\"keyword\">in</span> worker[inst.offset]:</span><br><span class=\"line\">                    other.edge(inst)</span><br><span class=\"line\">                worker.pop(inst.offset)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> last <span class=\"keyword\">and</span> last.main_insn.opname != <span class=\"string\">&#x27;RETURN_VALUE&#x27;</span> <span class=\"keyword\">and</span> last.main_insn.opname != <span class=\"string\">&#x27;JUMP_FORWARD&#x27;</span> <span class=\"keyword\">and</span> last.main_insn.opname != <span class=\"string\">&#x27;JUMP_ABSOLUTE&#x27;</span>:</span><br><span class=\"line\">                last.edge(inst)</span><br><span class=\"line\">            last = inst</span><br><span class=\"line\">            <span class=\"keyword\">if</span> inst.main_insn.opcode <span class=\"keyword\">in</span> dis.hasjabs + dis.hasjrel:</span><br><span class=\"line\">                </span><br><span class=\"line\">                target = inst.main_insn.argval</span><br><span class=\"line\">                <span class=\"keyword\">if</span> target <span class=\"keyword\">in</span> all_wrap.keys():</span><br><span class=\"line\">                    inst.edge(all_wrap[target])</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> target <span class=\"keyword\">in</span> worker.keys():</span><br><span class=\"line\">                        worker[target].add(inst)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        worker[target] = <span class=\"built_in\">set</span>([inst])</span><br><span class=\"line\">            all_wrap.update(&#123;inst.offset : inst&#125;)</span><br><span class=\"line\">            temp.clear()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    all_wrap = <span class=\"built_in\">list</span>(all_wrap.values())</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        to_remove = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> all_wrap:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(n.preds) == <span class=\"number\">0</span> <span class=\"keyword\">and</span> n.offset != <span class=\"number\">0</span>:</span><br><span class=\"line\">                n.unlink()</span><br><span class=\"line\">                to_remove.append(n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(n.preds) == <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(n.succs) == <span class=\"number\">1</span> <span class=\"keyword\">and</span> n.main_insn.opname == <span class=\"string\">&#x27;JUMP_FORWARD&#x27;</span>:</span><br><span class=\"line\">                n.unlink()</span><br><span class=\"line\">                p = n.preds.pop()</span><br><span class=\"line\">                s = n.succs.pop()</span><br><span class=\"line\">                p.edge(s)</span><br><span class=\"line\">                to_remove.append(n)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(to_remove) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> to_remove:</span><br><span class=\"line\">            all_wrap.remove(n)</span><br><span class=\"line\"></span><br><span class=\"line\">    entry_point = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> all_wrap:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i.offset == <span class=\"number\">0</span>:</span><br><span class=\"line\">            entry_point = i</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    visited = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    offset = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">visit</span>(<span class=\"params\">cur : InstWrapper</span>):</span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> visited, offset</span><br><span class=\"line\">        cur.offset = offset</span><br><span class=\"line\">        offset = offset + cur.size()</span><br><span class=\"line\">        succs = <span class=\"built_in\">sorted</span>(<span class=\"built_in\">list</span>(cur.succs), key = <span class=\"keyword\">lambda</span> a : a.offset)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> succs:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">                visited.add(node)</span><br><span class=\"line\">                visit(node)</span><br><span class=\"line\"></span><br><span class=\"line\">    visit(entry_point)</span><br><span class=\"line\">    new_bytecode = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> all_wrap:</span><br><span class=\"line\">        new_bytecode += w.print_asm()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(new_bytecode)</span><br><span class=\"line\">    new_bytecode = <span class=\"built_in\">bytes</span>(new_bytecode)</span><br><span class=\"line\"></span><br><span class=\"line\">    code = func.__code__</span><br><span class=\"line\">    new_code = types.CodeType(</span><br><span class=\"line\">        code.co_argcount,</span><br><span class=\"line\">        code.co_posonlyargcount,</span><br><span class=\"line\">        code.co_kwonlyargcount,</span><br><span class=\"line\">        code.co_nlocals,</span><br><span class=\"line\">        code.co_stacksize,</span><br><span class=\"line\">        code.co_flags,</span><br><span class=\"line\">        new_bytecode, </span><br><span class=\"line\">        code.co_consts,</span><br><span class=\"line\">        code.co_names,</span><br><span class=\"line\">        code.co_varnames,</span><br><span class=\"line\">        code.co_filename,</span><br><span class=\"line\">        func.__name__,</span><br><span class=\"line\">        code.co_firstlineno,</span><br><span class=\"line\">        code.co_lnotab,</span><br><span class=\"line\">        code.co_freevars,</span><br><span class=\"line\">        code.co_cellvars</span><br><span class=\"line\">    )</span><br><span class=\"line\">    dot = Digraph(func.__name__)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> all_wrap:</span><br><span class=\"line\">        dot.node(<span class=\"built_in\">str</span>(n.offset), <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> all_wrap:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pred <span class=\"keyword\">in</span> n.preds:</span><br><span class=\"line\">            dot.edge(<span class=\"built_in\">str</span>(pred.offset), <span class=\"built_in\">str</span>(n.offset))</span><br><span class=\"line\">    <span class=\"comment\">#dot.view()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;RightBack.pyc&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)</span><br><span class=\"line\">data = file.read()</span><br><span class=\"line\">file.close()</span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;RightBack_fix.pyc&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> get_funcs(RightBack):</span><br><span class=\"line\">    new_code = fix_invalid(f)</span><br><span class=\"line\">    code_obj = recompile(f, new_code)</span><br><span class=\"line\">    <span class=\"built_in\">setattr</span>(RightBack, f.__name__, code_obj)</span><br><span class=\"line\"></span><br><span class=\"line\">    byc = <span class=\"built_in\">open</span>(f.__name__ + <span class=\"string\">&#x27;.pyc&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>)</span><br><span class=\"line\">    byc.write(<span class=\"string\">b&#x27;\\x61\\x0D\\x0D\\x0A\\x00\\x00\\x00\\x00\\xC1\\xC5\\xC0\\x64\\x9C\\x27\\x00\\x00&#x27;</span>)</span><br><span class=\"line\">    marshal.dump(code_obj, byc)</span><br><span class=\"line\">    byc.close()</span><br><span class=\"line\">    <span class=\"comment\">#raw_code = f.__code__.co_code</span></span><br><span class=\"line\">    <span class=\"comment\">#data = data.replace(raw_code, new_code)</span></span><br><span class=\"line\"></span><br><span class=\"line\">file.write(data)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "re python"
            ]
        }
    ]
}