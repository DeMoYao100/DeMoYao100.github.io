{
    "version": "https://jsonfeed.org/version/1",
    "title": "Moyao の小屋 • All posts by \"car\" tag",
    "description": "Write down something interesting I met<br />\nFeel free to mail me if you have something wanted to talk about, plz\nmail: &lt;moyaoxue@outlook.com&gt;\n",
    "home_page_url": "https://demoyao100.github.io",
    "items": [
        {
            "id": "https://demoyao100.github.io/2024/05/08/%E8%BD%A6UDS%E8%AF%8A%E6%96%AD%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/",
            "url": "https://demoyao100.github.io/2024/05/08/%E8%BD%A6UDS%E8%AF%8A%E6%96%AD%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/",
            "title": "车UDS诊断协议学习",
            "date_published": "2024-05-07T16:40:00.000Z",
            "content_html": "<h1 id=\"车uds诊断协议学习\"><a class=\"anchor\" href=\"#车uds诊断协议学习\">#</a> 车 UDS 诊断协议学习</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p><strong>统一诊断服务</strong>（英语：<strong>Unified Diagnostic Services</strong>，简称 UDS）是车用电子的通信协议，是电子控制器（ECU）中设备诊断用的网络传输协议，对应的标准是 ISO 14229-1。</p>\n<p>诊断工具可以连接车上所有支持统一诊断服务功能的电子控制器。车上常用的控制器局域网只用到 OSI 模型的第一层及第二层，而统一诊断服务集成了 OSI 模型的第五层及第七层。服务标识符（Service ID、SID）及服务相关的参数都放在 8 个字节的消息框内。</p>\n<p>现今的车辆有配合离线诊断的诊断接口，让电脑或是诊断工具（作为测试设备）可以连接到汽车上的通信系统。因此可以发送统一诊断服务的请求到控制器，控制器必须回复（可能是正面或是负面的回复），这样可以确认个别控制单元中的故障存储器、更新控制单元的固件、和硬件进行低端的交互（例如开启或关闭特定的输出）、或是进行特定的机能，目的是了了解电子控制器的环境或是操作条件，以<a href=\"https://zh.wikipedia.org/wiki/%E8%A8%BA%E6%96%B7_(%E5%B7%A5%E7%A8%8B)\">诊断</a>故障或是不希望出现的行为。</p>\n<h2 id=\"术语\"><a class=\"anchor\" href=\"#术语\">#</a> 术语</h2>\n<p><strong>Diagnostic Service （诊断服务）</strong></p>\n<p>诊断服务是介于诊断设备和 ECU 之间的一种信息交互方式。通常由诊断设备发出请求，ECU 做出回应。</p>\n<p><strong>Diagnostic Trouble Code （故障码）</strong></p>\n<p>故障码是用来标记 ECU 故障的代码，它遵循一定的规则，存储在 ECU 的非易失性存储中。（以后别人提到 DTC，不要说不知道是什么了）</p>\n<p><strong>Diagnostic Data （诊断数据）</strong></p>\n<p>诊断数据是可以被诊断设备请求的 ECU 内部数据，它包括：</p>\n<ul>\n<li>当前数据：ECU 正在运行的数据，比如车速、节气门开度，发动机转速等；</li>\n<li>存储数据：被 ECU 存储在存储器中某时刻的数据，比如 DTC；</li>\n<li>静态数据：恒定不变的 ECU 内部数据，比如 VIN 码。</li>\n</ul>\n<p><strong>Diagnostic Session （诊断会话）</strong></p>\n<p>可以理解为某种诊断模式或权限，即在不同的模式下，对不同的诊断服务的使用做了限制。</p>\n<p><strong>Diagnostic Routine （诊断例程）</strong></p>\n<p>驻留在被诊断 ECU 中的子程序，它可以被诊断设备启动和停止。比如格式化 EEPROM 的子程序。</p>\n<p><strong>Addressing Type （寻址方式）</strong></p>\n<p>寻址方式指的是诊断消息的传递方式，有两种寻址方式：</p>\n<ul>\n<li>物理寻址，即 1 对 1 通信，用于知道确切的被诊断 ECU 的地址；</li>\n<li>功能寻址，即 1 对 n 通信，或者说广播发送，用于不知道确切的被诊断的 ECU 的地址，向一组或者全体 ECU 发送请求；</li>\n</ul>\n<p><strong>Response（响应）</strong></p>\n<p>tester 请求诊断服务执行后，从 ECU 的返回结果。可以有两种结果：</p>\n<ul>\n<li>Positive Response，正响应，即诊断请求执行成功；</li>\n<li>Negative Response，负响应，即诊断请求执行失败；</li>\n</ul>\n<p><strong>Service Identifier</strong></p>\n<p>Service Identifier，诊断服务标识符，简称为 SID，一字节的无符号整数，用来指代某个诊断服务。诊断协议为每个诊断服务都分配唯一 SID，因此更方便协议的软件实现。同时，在开发过程中沟通更加方便。比如，ReadDataByIdentifier 服务是去按照 ID 去读诊断数据，直接说 22 服务会更加便捷。</p>\n<p><strong>Data Identifier</strong></p>\n<p>简称 DID，2 个字节无符号整数的 ID，用来标识 ECU 中存储的某个诊断数据单元。它的好处是当要读取某个单元的诊断数据时，只要读对应的 DID 就可以，不必知道数据的具体地址。即使当 ECU 中的数据地址发生变化时，改变 DID 和地址单元的映射关系即可，对于使用者来说 DID 屏蔽了具体实现细节，而将重点放在了数据本身。</p>\n<p><strong>Negative Response Code</strong></p>\n<p>可以简称为 NRC，或者叫负响应码，是一个字节的无符号整数。它是诊断协议为每种执行失败的诊断服务分配的失败原因代号。</p>\n<p><strong>Sub-function</strong></p>\n<p>有些诊断服务可以支持不同的诊断子服务，sub-function 就是用来定义这种子服务的，它将某一个服务细分为更为具体的服务，是一个字节的无符号整数。比如 ECU Reset 这个服务就有 0x01，0x02，0x03 等 sub-function 指代具体的 reset 方式。</p>\n<h2 id=\"通信模式\"><a class=\"anchor\" href=\"#通信模式\">#</a> 通信模式</h2>\n<p>事件驱动型，一问一答。</p>\n<p>类比 client-server 通信方式，诊断仪即客户端，发送 request，服务器即 ECU，收到 request 之后进行处理，然后向诊断仪回复 response。</p>\n<p>有确认服务：</p>\n<p>![Untitled](车 UDS 诊断协议学习 12f4a2023fb44b1abadd10b14d012d7c/Untitled.png)</p>\n<p>无确认服务：</p>\n<p>![Untitled](车 UDS 诊断协议学习 12f4a2023fb44b1abadd10b14d012d7c/Untitled 1.png)</p>\n<p><strong>寻址模式</strong></p>\n<ul>\n<li>物理寻址，点对点，一对一，可根据物理地址的不同进行访问，但只能访问单个节点，各个 ECU 也采用不同的 CANID 针对提问作出应答。</li>\n<li>功能寻址，广播模式，一对多，根据功能的不同进行访问，它可以访问多个 ECU 节点，各个 ECU 也采用不同的 CANID 针对提问作出应答。其 SID 对于标准帧来说，通常是 7DF。</li>\n</ul>\n<p>比如，通过诊断仪请求各控制器进入编程模式（10 02）：</p>\n<p>** 物理寻址：** 诊断仪请求 EMS 进入刷新模式 7E0 10 02 ECU 响应诊断仪进入刷新模式 7E8 50 02</p>\n<p>** 功能寻址：** 诊断仪请求所有控制器进入刷新模式 7DF 10 02EMS 应答诊断仪进入刷新模式 7E8 50 02TCU 应答诊断仪进入刷新模式 7E9 50 02MMI 应答诊断仪进入刷新模式 7EA 50 02</p>\n<h2 id=\"请求和响应\"><a class=\"anchor\" href=\"#请求和响应\">#</a> 请求和响应</h2>\n<p><strong>基本格式</strong></p>\n<p>归纳起来，诊断的 request 格式无非以下两种：</p>\n<p>&lt;SID&gt; + &lt;Sub-function&gt; + &lt;Parameter&gt;</p>\n<p>&lt;SID&gt; + &lt;Parameter&gt;</p>\n<p>即有无 sub-function 的区别。Parameter 可以是 DID，可以是输入参数，可以是自定义的值，字节数视具体要求而定。</p>\n<p><strong>有 sub-function</strong></p>\n<p>首先，了解下 sub-function 的定义方法。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-77482878fd4af8374b34d8eb1cd648f1_1440w.webp\" alt=\"https://pic2.zhimg.com/80/v2-77482878fd4af8374b34d8eb1cd648f1_1440w.webp\"></p>\n<p>功能寻址的客户端请求信息</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-6ae2618313c5487b2c7579dc09455d7b_1440w.webp\" alt=\"https://pic4.zhimg.com/80/v2-6ae2618313c5487b2c7579dc09455d7b_1440w.webp\"></p>\n<p>物理寻址的客户端请求信息</p>\n<p>需要注意的是，Bit7 用来指示是否要抑制 Positive Response。当 Bit 7 为 1 时，对该 request 的 Positive Response 要被抑制，即不发送 Positive Response；当 Bit7 为 0 时，对该 request 的 Positive Response 不被抑制，正常发送。除了 Bit 7，Sub-function 有不同的值，具体的值和含义在协议中对每个服务的解释时都会有介绍。</p>\n<p><strong>无 sub-function</strong></p>\n<p>不带 sub-function 的服务，就带 parameter。Parameter 可以是 DID，可以是输入参数，可以是自定义的值，字节数目也是视具体要求而定。一般在协议内都会有表格，当遇到具体问题时，可查表确定。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-349d7a784958fa581ad5230392cad4ac_1440w.webp\" alt=\"https://pic1.zhimg.com/80/v2-349d7a784958fa581ad5230392cad4ac_1440w.webp\"></p>\n<p>不带子功能 -- 功能寻址的客户端请求信息</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-9a1eb7e0db90bcd3beffcf395c455e1e_1440w.webp\" alt=\"https://pic3.zhimg.com/80/v2-9a1eb7e0db90bcd3beffcf395c455e1e_1440w.webp\"></p>\n<p>不带子功能 -- 物理寻址的客户端请求信息</p>\n<p><strong>5.2 Response</strong></p>\n<p>通常，response 会在服务被 request 且执行之后发送，成功的话就发 positive response，失败的话要发 negative response，但是也有例外的时候。比如，ECUreset，诊断仪要求先发送 response，然后再去执行具体的 reset，因为如果先 reset，那么 ECU 的通信模块 shut down，是无法发送出去 response 的。像这种特殊情况，协议会在描述具体服务时标注出来。</p>\n<p><strong>Positive Response</strong></p>\n<p>基本格式：</p>\n<p>&lt;SID+0x40&gt; + &lt;Sub-function&gt; + &lt;Parameter&gt;</p>\n<p>&lt;SID+0x40&gt; + &lt;Parameter&gt;</p>\n<p>要注意，第一个字节是由 SID 和 0x40 的和构成。这里的 Parameter 项是 optional 的，具体要看协议规定。</p>\n<p>比如，session control 这个服务：</p>\n<p>Send：02 10 01（02 中的 0 代表网络层单帧 SF，2 代表数据域有 2 个字节；10 是 SID，02 是子功能）</p>\n<p>肯定响应：</p>\n<p>Receive：02 50 01 （02 同上，10+40 表示对 SID 的肯定回复，01 是 sub-funtion）</p>\n<p>否定响应:</p>\n<p>03 7F 10 22 xx xx xx xx；（03 同上，7F 表示否定响应，10 是 SID，22 是 NRC）不论是物理寻址还是功能寻址，对于 Positive Response 来说都没有影响，只需要关注 sub-function 中的 Bit 7 suppressPosRspMsgIndicationBit 是 0 还是 1，如果为 0 即 false，那么正常发送即可，如果是 1 即 true，那么就不发送 response。如果根本没有 subfunction 呢，那么什么都不要考虑，肯定是要发送 positive response 的。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-35fcf45931108493f16f71bbe0bba5e8_1440w.webp\" alt=\"https://pic1.zhimg.com/80/v2-35fcf45931108493f16f71bbe0bba5e8_1440w.webp\"></p>\n<p>安全访问的过程</p>\n<p>Negative Response</p>\n<p>基本格式:</p>\n<p>&lt;0x7F&gt; + &lt;SID&gt; + &lt;NRC&gt;</p>\n<p>看起来比较简单，格式比较固定，只要是 Negative Response，第一字节就是 0x7F，第二字节照抄原来的 SID，第三个字节是错误响应码，指示具体错误响应的原因，这个 NRC 可以在下文中参看。</p>\n<p>比如，session control 这个服务：</p>\n<p>Send：10 05（现在 sun-function 变为 05 了，假定系统不支持这个 sub-function）</p>\n<p>Receive：7F 10 12（7F 即指代错误响应，10 为 SID，12 是 NRC，查协议可知其指代 sub-function not supported 这个错误）</p>\n<p><strong>常用的 NRC</strong></p>\n<ul>\n<li>11：ServiceNotSupported / 服务不支持，诊断仪发送的请求消息中服务标识符无法识别或不支持；</li>\n<li>12：SubFunctionNotSupported / 不支持子服务，诊断仪发送的请求消息中子服务无法识别或不支持；</li>\n<li>13：IncorrectMessageLengthOrInvalidFormat / 不正确的消息长度或无效的格式，请求消息长度与特定服务规定的长度不匹配或者是参数格式与特定服务规定的格式不匹配；</li>\n<li>21：BusyRepeatRequest / 重复请求忙，表明 ECU 太忙而不能去执行请求。一般来说，在这种情况下，诊断仪应进行重复请求工作；</li>\n<li>22：conditionsNotCorrect / 条件不正确，表明 ECU 的状态条件不允许支持该请求；</li>\n<li>24：requestSequenceError / 请求序列错误，表明收到的是非预期的请求消息序列；</li>\n<li>25：noResponseFromSubnetComponent / 子网节点无应答，表明 ECU 收到请求，但所请求的操作无法执行；</li>\n<li>26：failurePreventsExecutionOfRequestedAction / 故障阻值请求工作执行，表明请求的动作因一故障原因而没有执行；</li>\n<li>31：requestOutOfRange / 请求超出范围，请求消息包含一个超出允许范围的参数，或者是不支持的数据标识符 / 例程标识符的访问；</li>\n<li>33：securityAccessDenied / 安全访问拒绝，诊断仪无法通过 ECU 的安全策略；</li>\n<li>35：invalidKey / 密钥无效，诊断仪发送的密钥与 ECU 内存中的密钥不匹配；</li>\n<li>36：exceedNumberOfAttempts / 超出尝试次数，诊断仪尝试获得安全访问失败次数超过了 ECU 安全策略允许的值；</li>\n<li>37：requiredTimeDelayNotExpired / 所需时间延迟未到，在 ECU 所需的请求延迟时间过去之前诊断仪又执行了一次请求；</li>\n<li>70：uploadDownloadNotAccepted / 不允许上传下载，表明试图向 ECU 内存上传 / 下载数据失败的原因是条件不允许；</li>\n<li>71：transferDataSuspended / 数据传输暂停，表明由于错误导致数据传输操作的中止；</li>\n<li>72：generalProgrammingFailure / 一般编程失败，表明在不可擦除的内存设备中进行擦除或编程时 ECU 检测到错误发生；</li>\n<li>73：wrongBlockSequenceCounter / 错误的数据块序列计数器，ECU 在数据块序列计数序列中检测到错误发生；</li>\n<li>78：requestCorrectlyReceived-ResponsePending / 正确接收请求消息 - 等待响应 表明 ECU 正确接收到请求消息，但是将执行的动作未完成且 ECU 未准备好接收其它请求；</li>\n<li>7E：subFunctionNotSupportedInActiveSession / 激活会话不支持该子服务，当前会话模式下 ECU 不支持请求的子服务；</li>\n<li>7F：serviceNotSupportedInActiveSession / 激活会话不支持该服务，当前会话模式下 ECU 不支持请求的服务；</li>\n<li>92：voltageTooHigh / 电压过高，当前电压值超过了编程允许的最大门限值；</li>\n<li>93：voltageTooLow / 电压过低，当前电压值低于了编程允许的最小门限值；</li>\n</ul>\n<p>诊断仪发送报文 “85 02” 要求 EMS 关闭故障管理 ，如果是肯定应答则 EMS 会回复 “C5 02”，表示已经关闭故障管理；如果是否定应答，EMS 会回复 “7F 85 22”，表示没有关闭故障管理，原因是条件不正确。</p>\n<p>值得一提的是，在物理寻址和功能寻址情况下，Negative Response 有所不同。</p>\n<p>在物理寻址情况下，只要是 Negative Response 就应该按照规定格式发送。而在功能寻址情况下，有一点特殊，对于 NRC 为 0x11（service not supported）、0x12（subfunction not supported）、0x31（request out of range）这三种情况，功能寻址是不会发送 response 的。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-f499d2093bc10d07c17db3b576d08975_1440w.webp\" alt=\"https://pic2.zhimg.com/80/v2-f499d2093bc10d07c17db3b576d08975_1440w.webp\"></p>\n<h2 id=\"服务\"><a class=\"anchor\" href=\"#服务\">#</a> 服务</h2>\n<table>\n<thead>\n<tr>\n<th>功能群</th>\n<th>请求  SID</th>\n<th>回复  SID</th>\n<th>服务</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x10</td>\n<td>0x50</td>\n<td>诊断会话控制 Diagnostic Session Control</td>\n<td>UDS 会使用不同的会话（session），可以用诊断会话控制（Diagnostic Session Control）来切换。可用的服务会依照目前有效的会话而不同。在一开始，控制单元默认是在 “默认会话”（Default Session），有定义其他的会话，需要实现的会话会依照设备的种类而不同。</td>\n</tr>\n<tr>\n<td>・“程序会话”（Programming Session）可以用来上传固件到设备，并更新设备的固件。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>・“扩展诊断会话”（Extended Diagnostic Session）可解锁特定的诊断功能，例如调整传感器等。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>・“安全系统诊断会话”（Safety system diagnostic session）用来测试安全相关的诊断机能，例如安全气囊的测试。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>此外，也有一些保留的会话识别符，为了汽车生产者及供应商的特殊需求而设计。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x11</td>\n<td>0x51</td>\n<td>ECU 重置 ECU Reset</td>\n<td>ECU 重置的服务是要重启 ECU。依照控制单元硬件以及实现方式的不同，有以下几种不同的重置：</td>\n</tr>\n<tr>\n<td>・“硬重置” 模拟电源关闭的重置。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>・“关闭锁匙重置” 模拟用锁匙将汽车熄火，再开启汽车的<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%9E%E7%81%AB%E9%96%8B%E9%97%9C%E3%80%82\"> https://zh.wikipedia.org/wiki/ 點火開關。</a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>・“软重置” 初始化特定程序单元以及存储结构。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>也有一些汽车生产者及供应商定义的特殊数值。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x27</td>\n<td>0x67</td>\n<td>安全性访问 Security Access</td>\n<td>可以用安全性检查（Security check）来启动大部分的安全关键性服务（security-critical services）。此情形下控制单元会发送 “密码种子（seed）” 到客户端（电脑或是诊断工具）。客户端再用密码种子计算密钥（key）送回控制单元，以此来解安全关键性服务</td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x28</td>\n<td>0x68</td>\n<td>通信控制 Communication Control</td>\n<td>此服务可以关闭控制单元发送以及接收消息的功能。</td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x29</td>\n<td>0x69</td>\n<td>认证 Authentication</td>\n<td>标准在 2020 年的更新版本，提供一种标准化的方式，可以提供一些安全性访问（0x27）服务无法支持的现代认证方式，包括以<a href=\"https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E5%9F%BA%E7%A4%8E%E5%BB%BA%E8%A8%AD%E4%B8%BA%E5%9F%BA%E7%A1%80%E7%9A%84%E8%AE%A4%E8%AF%81%E4%BA%A4%E6%8D%A2%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%8F%8C%E5%90%91%E7%9A%84https://zh.wikipedia.org/wiki/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E6%9C%BA%E5%88%B6%E3%80%82\"> https://zh.wikipedia.org/wiki/ 公開金鑰基礎建設为基础的认证交换，以及双向的 https://zh.wikipedia.org/wiki/ 身份验证机制。</a></td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x3E</td>\n<td>0x7E</td>\n<td>测试者存在 Tester Present</td>\n<td>若客户端长时间没有交换通信资料，控制单元会自动离开目前的会话，回到 “默认会话”，也可能会进入休眠模式。而此一服务的目的就是让控制单元知道客户端仍存在。</td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x83</td>\n<td>0xC3</td>\n<td>访问时序参数 Access Timing Parameters</td>\n<td>在控制器及从机的通信中，需要观察一定的时间，若时间超过此限制，仍没有提交消息，就会假设连接已有问题。可以读取及修改此时间。</td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x84</td>\n<td>0xC4</td>\n<td>安全资料传输 Secured Data Transmission</td>\n<td></td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x85</td>\n<td>0xC5</td>\n<td>控制 DTC 设置 Control DTC Settings</td>\n<td>启动或关闭部分（或所有）错误的侦测。若诊断工作是在车内进行的，这个机能格外重要，因为诊断工作有可能造成部分零件的异常行为。</td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x86</td>\n<td>0xC6</td>\n<td>事件回复 Response On Event</td>\n<td></td>\n</tr>\n<tr>\n<td>诊断及通信管理</td>\n<td>0x87</td>\n<td>0xC7</td>\n<td>链接控制 Link Control</td>\n<td>服务链接控制是用来设置诊断访问的比特率。多半只在中间网关上实现此一机能。</td>\n</tr>\n<tr>\n<td>资料传输</td>\n<td>0x22</td>\n<td>0x62</td>\n<td>根据标识符读取资料 Read Data By Identifier</td>\n<td>透过此服务可以读取控制单元中一个或多个的资料。这些资料的种类不限，也可以有不同的长度，例如料号或是软件版本等。也可以读取像是传感器状态之类会变动的值。每一个值会对一个资料标识符（Data Identifier、简称 DID），数值从 0 到 65535。会用正常的 CAN 信号来发送特定 ECU 使用的资料。DID 资料只用在资料请求上，也可以用一些没有 ECU 使用的 DID 来发送信息，虽 ECU 不会使用，但服务工具或软件测试程序可以使用这类的信息。</td>\n</tr>\n<tr>\n<td>资料传输</td>\n<td>0x23</td>\n<td>0x63</td>\n<td>根据地址读取存储器 Read Memory By Address</td>\n<td>依给定地址读取物理内存中的值。测试工具可以用此机能来读取软件内部的行为。</td>\n</tr>\n<tr>\n<td>资料传输</td>\n<td>0x24</td>\n<td>0x64</td>\n<td>根据标识符读取缩放比例资料 Read Scaling Data By Identifier</td>\n<td></td>\n</tr>\n<tr>\n<td>资料传输</td>\n<td>0x2A</td>\n<td>0x6A</td>\n<td>周期性根据标识符读取资料 Read Data By Identifier Periodic</td>\n<td>透过此服务可以让控制单元周期性发送资料。只能发送透过 “动态定义资料标识符” 定义的标识符</td>\n</tr>\n<tr>\n<td>资料传输</td>\n<td>0x2C</td>\n<td>0x6C</td>\n<td>动态定义资料标识符 Dynamically Define Data Identifier</td>\n<td>此服务提供一个修正设备资料标识符（DID）的方式，可以重新调整资料标识符。这个通常是不同资料标识符的组合，或者单纯是所有 DID 的串接。请求资料可以依以下的原则规划配置：</td>\n</tr>\n<tr>\n<td>・原始资料标识符、位置、长度（依字节表示）、子功能字节：defineByIdentifier</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>・存储器位置、长度（依字节表示）、子功能字节：defineByMemoryAddress</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>・可以结合上述二种方式</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>资料传输</td>\n<td>0x2E</td>\n<td>0x6E</td>\n<td>根据标识符写入资料 Write Data By Identifier</td>\n<td>可以更改资料标识符中的数值，命令中除了资料标识符外，也要同时提供要修改的数值</td>\n</tr>\n<tr>\n<td>资料传输</td>\n<td>0x3D</td>\n<td>0x7D</td>\n<td>根据地址写入到存储器 Write Memory By Address</td>\n<td>“根据地址写入到存储器” 可以让外面诊断工具写信息到 ECU 里的特定地址，或特定的连续地址</td>\n</tr>\n<tr>\n<td>存储资料发送</td>\n<td>0x14</td>\n<td>0x54</td>\n<td>清除诊断信息 Clear Diagnostic Information</td>\n<td>清除已存储的诊断问题码（Diagnostic Trouble Code，简称 DTC）</td>\n</tr>\n<tr>\n<td>存储资料发送</td>\n<td>0x19</td>\n<td>0x59</td>\n<td>读取 DTC 信息 Read DTC Information</td>\n<td>DTC 是诊断问题码。每一个 DTC 对应一个控制单元的故障，会以其编码存储在错误存储器中，可以在任意时候读取。除了错误外，也可能会记录一些相关的信息，也可以一并读取。</td>\n</tr>\n<tr>\n<td>输入／输出控制</td>\n<td>0x2F</td>\n<td>0x6F</td>\n<td>根据标识符的输入／输出控制 Input Output Control By Identifier</td>\n<td>此服务可以让外部系统接口透过诊断接口控制输入／输出信号透过设置选择字节，可以设置有关请求的特殊条件，可以设置以下的值：</td>\n</tr>\n<tr>\n<td>ReturnControlToECU：设备需将信号的控制权送回</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ResetToDefault：测试者试图重置信号，回到系统的默认值</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Freeze Current State：设备需冻结目前的信号，不允许变化</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ShortTermAdjustment：设备需使用目前提供的信号值</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>远程启动程序</td>\n<td>0x31</td>\n<td>0x71</td>\n<td>远程控制 Routine Control</td>\n<td>此控制服务程序可以进行各种的服务，有三种不同的信息种类：</td>\n</tr>\n<tr>\n<td>・配合启始信息，可以开始服务。可以定义此信息来确认要执行各动作，或是提示服务已经完成。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>・配合停止信息，运行中的服务可以在任何时间下中断。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>・第三个选项是查询服务状态的信息</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>可以特别标示启始及结束的信息参数，因此可以实现每一种项目特定的服务。</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>上传／下载</td>\n<td>0x34</td>\n<td>0x74</td>\n<td>请求下载 Request Download</td>\n<td>利用 “请求下载” 服务，可以下载新的软件或是其他资料到控制单元内。需标示资料的位置以及长度，因此，控制器可以知道数据包的大小。</td>\n</tr>\n<tr>\n<td>上传／下载</td>\n<td>0x35</td>\n<td>0x75</td>\n<td>请求上传 Request Upload</td>\n<td>“请求上传” 服务和 “请求下载” 服务是类似的，此服务可以将控制单元的软件发送给测试者。也需标示资料的位置以及长度，测试者需指定数据包的大小。</td>\n</tr>\n<tr>\n<td>上传／下载</td>\n<td>0x36</td>\n<td>0x76</td>\n<td>发送资料 Transfer Data</td>\n<td>在真正发送资料时，会用到此一服务，不论是上传或是下载都是使用此一服务。发送的方向则视之前是 “请求上传” 服务或 “请求下载” 服务而不同。此一服务会用之前指定的最大数据包长度发送资料，若资料长度超过最大数据包长度，需要用数个数据包来发送，直到发送完成为止。</td>\n</tr>\n<tr>\n<td>上传／下载</td>\n<td>0x37</td>\n<td>0x77</td>\n<td>请求结束发送 Request Transfer Exit</td>\n<td>可以用此服务中止资料发送。此服务用在测试着和控制单元比较时。在执行时，控制单元可以负面回应来中止资料发送请求。若指定的资料量还没发送完，也可以用此服务中止发送。</td>\n</tr>\n<tr>\n<td>上传／下载</td>\n<td>0x38</td>\n<td>0x78</td>\n<td>请求文件发送 Request File Transfer</td>\n<td>此服务用来启始客户端到服务器的文件下载，或是服务器到客户端的文件上传。也可以提供一些文件系统的相关信息。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>0x7F</td>\n<td>否定回应 Negative Response</td>\n<td>此回应会在服务无法进行时回复，例如不支持的资料识别符。此时会加上否定的回应码。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"nrc-negative-response-codes\"><a class=\"anchor\" href=\"#nrc-negative-response-codes\">#</a> NRC: Negative response codes</h2>\n<p>来自 ECU 的否定回应 (Negative Response) 包含 SID 0x7F 和两个有效负载字节：请求的 SID 和错误代码。</p>\n<p>错误代码 (NRC) 如下：</p>\n<table>\n<thead>\n<tr>\n<th>NRC</th>\n<th>Description</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x10</td>\n<td>General reject</td>\n<td>一般拒绝</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td>Service not supported</td>\n<td>不支持的服务</td>\n</tr>\n<tr>\n<td>0x12</td>\n<td>Subfunction not supported</td>\n<td>不支持的子功能</td>\n</tr>\n<tr>\n<td>0x13</td>\n<td>Incorrect message length or invalid format</td>\n<td>消息长度不正确或格式错误</td>\n</tr>\n<tr>\n<td>0x14</td>\n<td>Response too long</td>\n<td>反应时间太长</td>\n</tr>\n<tr>\n<td>0x21</td>\n<td>Busy, repeat request</td>\n<td>忙碌 / 重复请求</td>\n</tr>\n<tr>\n<td>0x22</td>\n<td>Conditions not correct</td>\n<td>条件不正确</td>\n</tr>\n<tr>\n<td>0x24</td>\n<td>Request sequence error</td>\n<td>请求顺序错误</td>\n</tr>\n<tr>\n<td>0x25</td>\n<td>No response from subnet component</td>\n<td>子网组件无回应</td>\n</tr>\n<tr>\n<td>0x26</td>\n<td>Failure prevents execution of requested action</td>\n<td>阻止执行请求的操作失败</td>\n</tr>\n<tr>\n<td>0x31</td>\n<td>Request out of range</td>\n<td>请求超出范围</td>\n</tr>\n<tr>\n<td>0x33</td>\n<td>Security access denied</td>\n<td>安全访问被拒绝</td>\n</tr>\n<tr>\n<td>0x34</td>\n<td>Authentication failed</td>\n<td>认证失败</td>\n</tr>\n<tr>\n<td>0x35</td>\n<td>Invalid key</td>\n<td>无效的密钥</td>\n</tr>\n<tr>\n<td>0x36</td>\n<td>Exceeded number of attempts</td>\n<td>超过尝试次数</td>\n</tr>\n<tr>\n<td>0x37</td>\n<td>Required time delay not expired</td>\n<td>要求的延迟时间未到</td>\n</tr>\n<tr>\n<td>0x38</td>\n<td>Secure data transmission required</td>\n<td>需要安全的资料传输 (SID=0x84)</td>\n</tr>\n<tr>\n<td>0x39</td>\n<td>Secure data transmission not allowed</td>\n<td>不允许安全资料传输</td>\n</tr>\n<tr>\n<td>0x3A</td>\n<td>Secure data verification failed</td>\n<td>安全资料验证失败</td>\n</tr>\n<tr>\n<td>0x50</td>\n<td>Certificate validation failed, invalid time period</td>\n<td>证书验证失败，时段无效</td>\n</tr>\n<tr>\n<td>0x51</td>\n<td>Certificate validation failed, invalid signature</td>\n<td>证书验证失败，签名无效</td>\n</tr>\n<tr>\n<td>0x52</td>\n<td>Certificate validation failed, invalid chain of trust</td>\n<td>证书验证失败，信任链无效</td>\n</tr>\n<tr>\n<td>0x53</td>\n<td>Certificate validation failed, invalid type</td>\n<td>证书验证失败，类型无效</td>\n</tr>\n<tr>\n<td>0x54</td>\n<td>Certificate validation failed, invalid format</td>\n<td>证书验证失败，格式无效</td>\n</tr>\n<tr>\n<td>0x55</td>\n<td>Certificate validation failed, invalid content</td>\n<td>证书验证失败，内容无效</td>\n</tr>\n<tr>\n<td>0x56</td>\n<td>Certificate validation failed, invalid scope</td>\n<td>证书验证失败，范围无效</td>\n</tr>\n<tr>\n<td>0x57</td>\n<td>Certificate validation failed, invalid certificate</td>\n<td>证书验证失败，证书无效</td>\n</tr>\n<tr>\n<td>0x58</td>\n<td>Ownership verification failed</td>\n<td>所有权验证失败</td>\n</tr>\n<tr>\n<td>0x59</td>\n<td>Challenge calculation failed</td>\n<td>挑战计算失败</td>\n</tr>\n<tr>\n<td>0x5A</td>\n<td>Setting access right failed</td>\n<td>设置访问权限失败</td>\n</tr>\n<tr>\n<td>0x5B</td>\n<td>Session key creation/derivation failed</td>\n<td>会话密钥建立 / 派生失败</td>\n</tr>\n<tr>\n<td>0x5C</td>\n<td>Configuration data usage failed</td>\n<td>配置资料使用失败</td>\n</tr>\n<tr>\n<td>0x5D</td>\n<td>Deauthentication failed</td>\n<td>取消认证失败</td>\n</tr>\n<tr>\n<td>0x70</td>\n<td>Upload download not accepted</td>\n<td>上传下载不被接受</td>\n</tr>\n<tr>\n<td>0x71</td>\n<td>Transfer data suspended</td>\n<td>传输资料暂停</td>\n</tr>\n<tr>\n<td>0x72</td>\n<td>General programming failure</td>\n<td>一般程序设计失败</td>\n</tr>\n<tr>\n<td>0x73</td>\n<td>Wrong block sequence number</td>\n<td>错误的区块序号</td>\n</tr>\n<tr>\n<td>0x78</td>\n<td>Request correctly received, response pending</td>\n<td>请求已正确接收，回应待处理</td>\n</tr>\n<tr>\n<td>0x7E</td>\n<td>Subfunction not supported in active session</td>\n<td>当前会话中不支持子功能</td>\n</tr>\n<tr>\n<td>0x7F</td>\n<td>Service not supported in active session</td>\n<td>当前会话中不支持服务</td>\n</tr>\n<tr>\n<td>0x81</td>\n<td>RPM too high</td>\n<td>转速太高</td>\n</tr>\n<tr>\n<td>0x82</td>\n<td>RPM too low</td>\n<td>转速太低</td>\n</tr>\n<tr>\n<td>0x83</td>\n<td>Engine is running</td>\n<td>引擎正在运转</td>\n</tr>\n<tr>\n<td>0x84</td>\n<td>Engine is not running</td>\n<td>引擎未运转</td>\n</tr>\n<tr>\n<td>0x85</td>\n<td>Engine run time too low</td>\n<td>引擎运转时间太短</td>\n</tr>\n<tr>\n<td>0x86</td>\n<td>Temperature too high</td>\n<td>温度过高</td>\n</tr>\n<tr>\n<td>0x87</td>\n<td>Temperature too low</td>\n<td>温度太低</td>\n</tr>\n<tr>\n<td>0x88</td>\n<td>Vehicle speed too high</td>\n<td>车速太高</td>\n</tr>\n<tr>\n<td>0x89</td>\n<td>Vehicle speed too low</td>\n<td>车速太低</td>\n</tr>\n<tr>\n<td>0x8A</td>\n<td>Throttle/pedal too high</td>\n<td>油门 / 踏板太高</td>\n</tr>\n<tr>\n<td>0x8B</td>\n<td>Throttle/pedal too low</td>\n<td>油门 / 踏板太低</td>\n</tr>\n<tr>\n<td>0x8C</td>\n<td>Transmission range not in neutral</td>\n<td>传输范围不在空档</td>\n</tr>\n<tr>\n<td>0x8D</td>\n<td>Transmission range not in gear</td>\n<td>未挂档的传动范围</td>\n</tr>\n<tr>\n<td>0x8F</td>\n<td>Brake switch not closed</td>\n<td>刹车开关未闭合</td>\n</tr>\n<tr>\n<td>0x90</td>\n<td>Shifter lever not in park</td>\n<td>变速杆不在停车位置</td>\n</tr>\n<tr>\n<td>0x91</td>\n<td>Torque converter clutch locked</td>\n<td>变矩器离合器锁止</td>\n</tr>\n<tr>\n<td>0x92</td>\n<td>Voltage too high</td>\n<td>电压过高</td>\n</tr>\n<tr>\n<td>0x93</td>\n<td>Voltage too low</td>\n<td>电压太低</td>\n</tr>\n<tr>\n<td>0x94</td>\n<td>Resource temporary unavailable</td>\n<td>资源暂时无法使用</td>\n</tr>\n</tbody>\n</table>\n<p>参考：<a href=\"https://zh.wikipedia.org/zh-cn/%E7%BB%9F%E4%B8%80%E8%AF%8A%E6%96%AD%E6%9C%8D%E5%8A%A1\">统一诊断服务 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/162710671\">汽车 UDS：统一诊断服务概览 - 知乎 (zhihu.com)</a></p>\n",
            "tags": [
                "car"
            ]
        },
        {
            "id": "https://demoyao100.github.io/2024/05/08/%E8%BD%A6CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/",
            "url": "https://demoyao100.github.io/2024/05/08/%E8%BD%A6CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/",
            "title": "车CAN总线协议学习",
            "date_published": "2024-05-07T16:32:00.000Z",
            "content_html": "<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念：</h3>\n<p>CAN（Controller Area Network）总线协议是由 BOSCH 发明的一种<strong>基于消息广播模式的串行通信总线</strong>，它起初用于实现汽车内 ECU 之间可靠的通信，后因其简单实用可靠等特点，而广泛应用于工业自动化、船舶、医疗等其它领域。</p>\n<p>ECU（Electronic Control Unit）电子控制器单元，它们的用途就是控制汽车的行驶状态以及实现其各种功能。主要是利用各种传感器、总线的数据采集与交换，来判断车辆状态以及司机的意图并通过执行器来操控汽车。</p>\n<p>简而言之 CAN 总线是<strong>用于各个 ECU 之间互相通信的网络以及协议</strong>。</p>\n<p><img src=\"/2024/05/08/%E8%BD%A6CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/Untitled.png\" alt=\"Untitled\"></p>\n<h3 id=\"can协议标准\"><a class=\"anchor\" href=\"#can协议标准\">#</a> <strong>CAN 协议标准</strong></h3>\n<p>底层协议：</p>\n<p>CAN 总线协议大的分类包含底层的标准协议和上层协议两种；其中以 ISO 11898-1；ISO 11898-2 和 ISO11898-3 这三种协议为主，下面介绍这三种协议的主要作用和应用方向。</p>\n<p>ISO 11898-1: 2015 定义 CAN 总线的数据链路层（DLL）和电气信号标准，描述 CAN 总线的基本架构，定义不同 CAN 总线设备在数据链路层通信方式，详细说明逻辑链接控制（LLC）和介质访问控制（MAC）子层部分；</p>\n<p>ISO 11898-2: 2003 定义高速 CAN 总线（HS-CAN）物理层标准，最高数据传输速率 1Mbps ，应用为两线平衡式信号（CAN_H, CAN_L），HS CAN 是汽车动力和工业控制网络中应用最为广泛的物理层协议；</p>\n<p>ISO 11898-3: 2006 定义低速 CAN 总线（LS-CAN, Fault-Tolerant CAN）物理层标准，数据传输速率在 40Kbps ~ 125Kbps 。Fault-Tolerant 是指总线上一根传输信号失效时，依靠另外的单根信号也可以通信，LS CAN 主要应用于汽车车身电控单元之间通信；</p>\n<p><img src=\"/2024/05/08/%E8%BD%A6CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/Untitled-17150996115501.png\" alt=\"Untitled\"></p>\n<p>![Untitled (1)](车 CAN 总线协议学习 / Untitled (1).png)</p>\n<p>上层协议：</p>\n<p>![Untitled (2)](车 CAN 总线协议学习 / Untitled (2).png)</p>\n<p>CAN 总线特性 CAN 总线具有多种特点其中包括：多主的工作方式；每条协议具有不同的优先级；采用非破坏性总线仲裁技术；CAN 可以通过报文实现点对点、一点对多点以及全局广播方式传送数据；节点数取决于总线驱动电路；采用短帧结构（8/16 字节），传输时间短，鲁棒性强，抗干扰；CRC 帧校验，数据出错率低。</p>\n<p>这其中最重要的特点是多主的工作方式，一般操作系统都有一个大脑，对整个操作系统的环境进行管理，但是 CAN 总线的是多主的工作方式，各个 ECU 只负责往总线上收发它们的协议帧即可，所以当多个 ECU 同时收发消息时，就会导致冲突，这就又和它第二三个特点相关了。仲裁的特点是基于协议的优先级进行仲裁的，主要是为了给 CAN 总线上的协议进行优先级排序，决定发生冲突的时候哪个协议先占用 CAN 总线进行通讯。同时 CAN 协议的一些特点比如短帧结构，鲁棒性强，抗干扰等等能力也让 CAN 总线具有了在汽车上适用的条件。</p>\n<p>CAN 总线的布局 之前汽车的各个 ECU 之间是通过点对点连接的，但是随着现代汽车内的 ECU 单元愈发增多，CAN 总线连接的方式可以显著降低汽车内部布线的复杂程度。</p>\n<p><strong>CAN 总线结构特征</strong></p>\n<p>CAN 总线定义四种帧类型，分别为数据帧、远程帧、错误帧和过载帧。各种帧的用途分别为：</p>\n<p>![Untitled (3)](车 CAN 总线协议学习 / Untitled (3).png)</p>\n<h3 id=\"攻击面分析\"><a class=\"anchor\" href=\"#攻击面分析\">#</a> 攻击面分析</h3>\n<p><strong>访问车载诊断 II（OBD-II）操纵 CAN 来控制各种模块</strong>，达到的效果是可以控制制动以及发动机模块。另外还可以产生虚假的仪表盘数据，改变发动机参数</p>\n<p>![Untitled (4)](车 CAN 总线协议学习 / Untitled (4).png)</p>\n<p><strong>第一阶段是入侵负责无线接口的 ECU。第二阶段是注入报文，与安全关键的 ECU 进行通信。最后一个阶段是修改 ECU，使 ECU 表现出恶意行为。</strong></p>\n<p>另外，通过 OTA 软件进行攻击也是一种方法。<strong>OTA 软件是一种低成本、可扩展、可远程更新的软件解决方案。</strong></p>\n<p>ICSim 模拟器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装依赖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libsdl2-dev libsdl2-image-dev can-utils  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 下载 ICSim</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> clone <span class=\"token operator\">&lt;</span>https://github.com/zombieCraig/ICSim.git<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 编译</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ICSim</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">make</span></pre></td></tr></table></figure><p>安装 can-utils</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo apt<span class=\"token operator\">-</span>get install can<span class=\"token operator\">-</span>utils <span class=\"token operator\">-</span>y</pre></td></tr></table></figure><p>setip_vcan.sh：</p>\n<p>加载 CAN 的内核模块以及虚拟 CAN 的内核模块：</p>\n<blockquote>\n<p>sudo modprobe can sudo modprobe vcan</p>\n</blockquote>\n<p>验证是否加载了所需的内核模块：</p>\n<blockquote>\n<p>lsmod | grep can</p>\n</blockquote>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/ec8fd2f2-1649-4985-8970-ff7b57d45517/3c4bc8bb-b692-4c50-885c-fd078b888f07/Untitled.png\" alt=\"Untitled\"></p>\n<p>接下来设置虚拟接口：</p>\n<blockquote>\n<p>sudo ip link add dev vcan0 type vcan sudo ip link set up vcan0</p>\n</blockquote>\n<p>可以通过下面方法来验证虚拟 CAN 接口：</p>\n<blockquote>\n<p>ifconfig vcan0</p>\n</blockquote>\n<p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/ec8fd2f2-1649-4985-8970-ff7b57d45517/a0ad02d0-2945-48e6-8118-da4bb208ddc7/Untitled.png\" alt=\"Untitled\"></p>\n<p>运行 ICSim 模拟器（注意：wsl 没有内核模式所以不支持）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>setup_vcan<span class=\"token punctuation\">.</span>sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>controls vcan0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>icsim vcan0</pre></td></tr></table></figure><p><img src=\"https://prod-files-secure.s3.us-west-2.amazonaws.com/ec8fd2f2-1649-4985-8970-ff7b57d45517/c92d912a-80d6-4ee1-a953-03562064c020/Untitled.png\" alt=\"Untitled\"></p>\n<p>虚拟 CAN 接口设置成功后就可以在这个接口中发送或接收 CAN 数据包，使用 can-utils 中的 cangen 的工具来生成虚拟的 CAN 数据包。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cangen vcan0</pre></td></tr></table></figure><p>使用 candump 查看包：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>candump vcan0</pre></td></tr></table></figure><p>存入 log：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>candump <span class=\"token operator\">-</span>l vcan0</pre></td></tr></table></figure><p>重放报文（可以测试发现仪表盘复现了前面的操作，但没那么稳定）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>canplayer <span class=\"token operator\">-</span>I xxx<span class=\"token punctuation\">.</span>log <span class=\"token operator\">-</span>v</pre></td></tr></table></figure><p>cansniffer 是用于嗅探 CAN 数据包的工具。cansniffer 的 -c 参数可以通过颜色高亮突出变化的字节，当需要判断执行某些操作是否会导致 CAN 数据变化时使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cansniffer <span class=\"token operator\">-</span>c vcan0</pre></td></tr></table></figure><p>cansend 是用于将 CAN 帧发送到特定 CAN 接口的工具：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cansend interface frame</pre></td></tr></table></figure><p>参考：<a href=\"https://blog.csdn.net/m0_46640144/article/details/119006095\">山石岩读丨前沿领域探析 —— 汽车 CAN 总线协议详解及攻击面分析_商用车 can 协议与乘用车 can 的区别 - CSDN 博客</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/2338608\">CAN 总线安全之 ICSim 模拟器 - 腾讯云开发者社区 - 腾讯云 (tencent.com)</a></p>\n<p>这几篇还没看：</p>\n<p><a href=\"https://yogeshojha.com/me/car-hacking-101-practical-guide-to-exploiting-can-bus-using-instrument-cluster-simulator-part-i-setting-up/\">https://yogeshojha.com/me/car-hacking-101-practical-guide-to-exploiting-can-bus-using-instrument-cluster-simulator-part-i-setting-up/</a></p>\n<p><a href=\"https://yogeshojha.com/me/car-hacking-101-practical-guide-to-exploiting-can-bus-using-instrument-cluster-simulator-part-ii-exploitation/\">https://yogeshojha.com/me/car-hacking-101-practical-guide-to-exploiting-can-bus-using-instrument-cluster-simulator-part-ii-exploitation/</a></p>\n<p><a href=\"https://yogeshojha.com/me/car-hacking-101-practical-guide-to-exploiting-can-bus-using-instrument-cluster-simulator\">https://yogeshojha.com/me/car-hacking-101-practical-guide-to-exploiting-can-bus-using-instrument-cluster-simulator</a> - part-iii-savvycan-fuzzing-can-frame-and-playing-around-with-can-frames/</p>\n",
            "tags": [
                "car"
            ]
        }
    ]
}